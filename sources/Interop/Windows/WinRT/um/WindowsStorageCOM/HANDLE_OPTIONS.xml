<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="HANDLE_OPTIONS">
    <summary>Defines the flags of the file handle.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_NONE">
    <summary>None.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_OPEN_REQUIRING_OPLOCK">
    <summary>This value is for internal use only.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_DELETE_ON_CLOSE">
    <summary>The file is to be deleted immediately after this handle is closed.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_SEQUENTIAL_SCAN">
    <summary>Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching. For additional information, see <see cref="Caching Behavior" />.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_RANDOM_ACCESS">
    <summary>Access is intended to be random. The system can use this as a hint to optimize file caching. For more information, see <see cref="Caching Behavior" />.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_NO_BUFFERING">
    <summary>The file is being opened with no system caching for data reads and writes. This flag does not affect hard disk caching or memory mapped files. There are strict requirements for successfully working with files opened with this flag. For details see <a href="https://docs.microsoft.com//windows/desktop/FileIO/file-buffering">File Buffering</a>.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_OVERLAPPED">
    <summary>The file is being opened or created for asynchronous I/O. For information about considerations when using a file handle created with this flag, see <see cref="Synchronous and Asynchronous I/O Handles" />.</summary>
  </member>
  <member name="HANDLE_OPTIONS.HO_WRITE_THROUGH">
    <summary>Write operations will not go through any intermediate cache, they will go directly to disk. For additional information, see <see cref="Caching Behavior" />.</summary>
  </member>
</doc>