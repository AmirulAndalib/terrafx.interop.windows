<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IHolographicCameraRenderingParametersInterop.CommitDirect3D12Resource">
    <summary>The <b>CommitDirect3D12Resource</b> method commits a Direct3D 12 buffer for presentation on outputs associated with a <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographiccamera">HolographicCamera</a> during a specific <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographicframe">HolographicFrame</a>. The buffer must have been created by calling <see cref="CreateDirect3D12BackBufferResource" /> or <see cref="CreateDirect3D12HardwareProtectedBackBufferResource" /> on the same <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographiccamera">HolographicCamera</a> corresponding to this rendering parameters object, and the buffer must have been acquired by your application prior to rendering.</summary>
    <param name="pColorResourceToCommit">The Direct3D 12 texture resource with content to display when presenting the <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographicframe">HolographicFrame</a> used to retrieve this rendering parameters object.</param>
    <param name="pColorResourceFence">A fence used to signal app work completion on the color buffer resource indicated by <i>pColorResourceToCommit</i>. Completion of this fence at the value indicated by <i>colorResourceFenceSignalValue</i> signals transfer of control of the color resource from your application to the platform in the GPU work queue. The platform relies upon this fence, and the value indicated in <i>colorResourceFenceSignalValue</i>, to queue work on the GPU that reads from the color buffer.</param>
    <param name="colorResourceFenceSignalValue">The value used to signal work completion on <i>pColorResourceFence</i>. The platform relies upon this fence value to queue work on the GPU that reads from the color buffer.</param>
    <returns>
      <b>S_OK</b> if successful, otherwise returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a> error code indicating the reason for failure. Also see <a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">COM Error Codes (UI, Audio, DirectX, Codec)</a>.</returns>
  </member>
  <member name="IHolographicCameraRenderingParametersInterop.CommitDirect3D12ResourceWithDepthData">
    <summary>
      <para>Commits a Direct3D 12 buffer for presentation on outputs associated with the <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographiccamera">HolographicCamera</a>. The buffer must have been created by calling <see cref="CreateDirect3D12BackBufferResource" /> or <see cref="CreateDirect3D12HardwareProtectedBackBufferResource" /> on the same <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographiccamera">HolographicCamera</a> that it is committed for.</para>
      <para>This method also accepts an optional depth buffer parameter, along with fence and fence value for app work completion on that buffer. This depth buffer will be used for image stabilization when showing the frame it is committed to. The depth buffer must contain depth data correlated with geometry used to draw holograms in the color buffer, which is submitted at the same time. The depth buffer should not contain depth data for invisible content, such as depth data used for occlusion.</para>
    </summary>
    <param name="pColorResourceToCommit">The Direct3D 12 texture resource with content to display when presenting the <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographicframe">HolographicFrame</a> used to retrieve this rendering parameters object.</param>
    <param name="pColorResourceFence">A fence used to signal app work completion on the color buffer resource indicated by <i>pColorResourceToCommit</i>. Completion of this fence at the value indicated by <i>colorResourceFenceSignalValue</i> signals transfer of control of the color resource from your application to the platform in the GPU work queue. The platform relies upon this fence, and the value indicated in <i>colorResourceFenceSignalValue</i>, to queue work on the GPU that reads from the color buffer.</param>
    <param name="colorResourceFenceSignalValue">The value used to signal work completion on <i>pColorResourceFence</i>. The platform relies upon this fence value to queue work on the GPU that reads from the color buffer.</param>
    <param name="pDepthResourceToCommit">The Direct3D 12 depth buffer with depth data to use for image stabilization when presenting the <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographicframe">HolographicFrame</a> used to retrieve this rendering parameters object. Applications typically submit the depth stencil used when rendering to <i>pColorResourceToCommit</i>, or a depth buffer that is derived from the same rendering pass. The depth buffer should only include data corresponding to geometry used to render holograms in the color buffer; for example, occlusion data shouldn't be included, and may be ignored by the platform.</param>
    <param name="pDepthResourceFence">A fence used to signal work completion on the depth buffer resource indicated by <i>pDepthResourceToCommit</i>. Completion of this fence at the value indicated by <i>depthResourceFenceSignalValue</i> signals transfer of control of the depth resource from your application to the platform in the GPU work queue. The platform relies upon this fence, and the value indicated in <i>colorResourceFenceSignalValue</i>, to queue work on the GPU that reads from the depth buffer.</param>
    <param name="depthResourceFenceSignalValue">The value used to signal work completion on <i>pDepthResourceFence</i>. The platform relies upon this fence value to queue work on the GPU that reads from the depth buffer.</param>
    <returns>
      <b>S_OK</b> if successful, otherwise returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a> error code indicating the reason for failure. Also see <a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">COM Error Codes (UI, Audio, DirectX, Codec)</a>.</returns>
  </member>
  <member name="IHolographicCameraRenderingParametersInterop">
    <summary>
      <para>The <b>IHolographicCameraRenderingParametersInterop</b> interface is a nano-COM interface, used to commit Direct3D 12 buffer resources for presentation during the corresponding <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographicframe">HolographicFrame</a>.</para>
      <para>The interface allows COM interop with the <a href="https://docs.microsoft.com//uwp/api/windows.graphics.holographic.holographiccamerarenderingparameters">HolographicCameraRenderingParameters</a> Windows Runtime class for applications that use Direct3D 12 for holographic rendering. Nano-COM allows Direct3D 12 objects to be used directly as parameters for API calls, rather than going through a container object.</para>
    </summary>
  </member>
</doc>