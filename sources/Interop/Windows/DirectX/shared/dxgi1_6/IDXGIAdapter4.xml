<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGIAdapter4.GetDesc3">
    <summary>
      <para>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.6 description of an adapter or video card. This description includes information about ACG compatibility.</para>
    </summary>
    <param name="pDesc">
      <para>A pointer to a <see cref="DXGI_ADAPTER_DESC3" /> structure that describes the adapter.
This parameter must not be <b>NULL</b>. On <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, early versions of  <b>GetDesc3</b> (<see cref="GetDesc1" />, and <see cref="GetDesc" />) return zeros for the PCI ID in the <b>VendorId</b>, <b>DeviceId</b>, <b>SubSysId</b>, and <b>Revision</b> members of the adapter description structure and “Software Adapter” for the description string in the <b>Description</b> member. <b>GetDesc3</b> and <see cref="GetDesc2" /> return the actual feature level 9 hardware values in these members.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>pDesc</i> parameter is <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>Use the <b>GetDesc3</b> method to get a DXGI 1.6 description of an adapter.  To get a DXGI 1.2 description, use the <see cref="IDXGIAdapter2.GetDesc2" /> method. To get a DXGI 1.1 description, use the <see cref="IDXGIAdapter1.GetDesc1" /> method. To get a DXGI 1.0 description, use the <see cref="IDXGIAdapter.GetDesc" /> method.</para>
      <para>The Windows Display Driver Model (WDDM) scheduler can preempt the graphics processing unit (GPU)'s execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet.</para>
      <para>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <see cref="ID3D11DeviceContext.Dispatch" /> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <b>GetDesc3</b> or <see cref="GetDesc2" /> methods to retrieve the granularity levels for graphics and compute tasks.</para>
    </remarks>
    <seealso cref="IDXGIAdapter4" />
  </member>
  <member name="IDXGIAdapter4">
    <summary>
      <para>This interface represents a display subsystem, and extends this family of interfaces to expose a method to check for an adapter's compatibility with Arbitrary Code Guard (ACG).</para>
    </summary>
    <remarks>
      <para>For more details, refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/residency">Residency</a> section of the D3D12 documentation.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIAdapter3" />
  </member>
</doc>