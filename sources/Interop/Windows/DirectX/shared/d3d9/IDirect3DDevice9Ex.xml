<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDirect3DDevice9Ex.CheckDeviceState">
    <summary>Reports the current cooperative-level status of the Direct3D device for a windowed or full-screen application.</summary>
    <param name="hDestinationWindow">The destination window handle to check for occlusion. When this parameter is <b>NULL</b>, S_PRESENT_OCCLUDED is returned when another device has fullscreen ownership. When the window handle is not <b>NULL</b>, window's client area is checked for occlusion. A window is occluded if any part of it is obscured by another application.</param>
    <returns>Possible return values include: D3D_OK, D3DERR_DEVICELOST, D3DERR_DEVICEHUNG, D3DERR_DEVICEREMOVED, or D3DERR_OUTOFVIDEOMEMORY (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>), or S_PRESENT_MODE_CHANGED, or S_PRESENT_OCCLUDED (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/device-state-return-codes">S_PRESENT</a>).</returns>
  </member>
  <member name="IDirect3DDevice9Ex.CheckResourceResidency">
    <summary>Checks an array of resources to determine if it is likely that they will cause a large stall at Draw time because the system must make the resources GPU-accessible.</summary>
    <param name="pResourceArray">An array of <see cref="IDirect3DResource9" /> pointers that indicate the resources to check.</param>
    <param name="NumResources">A value indicating the number of resources passed into the <i>pResourceArray</i> parameter up to a maximum of 65535.</param>
    <returns>
      <para>If all the resources are in GPU-accessible memory, the method will return S_OK. The system may need to perform a remapping operation to promote the resources, but will not have to copy data.</para>
      <para>If no allocation that comprises the resources is on disk, but at least one allocation is not in GPU-accessible memory, the method will return S_RESIDENT_IN_SHARED_MEMORY. The system may need to perform a copy to promote the resource.</para>
      <para>If at least one allocation that comprises the resources is on disk, this method will return S_NOT_RESIDENT. The system may need to perform a copy to promote the resource.</para>
    </returns>
  </member>
  <member name="IDirect3DDevice9Ex.ComposeRects">
    <summary>Copy a text string to one surface using an alphabet of glyphs on another surface. Composition is done by the GPU using bitwise operations.</summary>
    <param name="pSrc">A pointer to a source surface (prepared by <see cref="IDirect3DSurface9" />) that supplies the alphabet glyphs. This surface must be created with the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dusage">D3DUSAGE_TEXTAPI</a> flag.</param>
    <param name="pDst">A pointer to the destination surface (prepared by <see cref="IDirect3DSurface9" />) that receives the glyph data. The surface must be part of a texture.</param>
    <param name="pSrcRectDescs">A pointer to a vertex buffer (see <see cref="IDirect3DVertexBuffer9" />) containing rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dcomposerectdesc">D3DCOMPOSERECTDESC</a>) that enclose the desired glyphs in the source surface.</param>
    <param name="NumRects">The number of rectangles or glyphs that are used in the operation. The number applies to both the source and destination surfaces. The range is 0 to <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dcomposerects-maxnumrects">D3DCOMPOSERECTS_MAXNUMRECTS</a>.</param>
    <param name="pDstRectDescs">A pointer to a vertex buffer (see <see cref="IDirect3DVertexBuffer9" />) containing rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dcomposerectdestination">D3DCOMPOSERECTDESTINATION</a>) that describe the destination to which the indicated glyph from the source surface will be copied.</param>
    <param name="Operation">Specifies how to combine the source and destination surfaces. See <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dcomposerectsop">D3DCOMPOSERECTSOP</a>.</param>
    <param name="Xoffset">A value added to the <i>x</i> coordinates of all destination rectangles. This value can be negative, which may cause the glyph to be rejected or clipped if the result is beyond the bounds of the surface.</param>
    <param name="Yoffset">A value added to the <i>y</i> coordinates of all destination rectangles. This value can be negative, which may cause the glyph to be rejected or clipped if the result is beyond the bounds of the surface.</param>
    <returns>If the method succeeds, the return value is D3D_OK.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.CreateDepthStencilSurfaceEx">
    <summary>Creates a depth-stencil surface.</summary>
    <param name="Width">Width of the depth-stencil surface, in pixels.</param>
    <param name="Height">Height of the depth-stencil surface, in pixels.</param>
    <param name="Format">Member of the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a> enumerated type, describing the format of the depth-stencil surface. This value must be one of the enumerated depth-stencil formats for this device.</param>
    <param name="MultiSample">Member of the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dmultisample-type">D3DMULTISAMPLE_TYPE</a> enumerated type, describing the multisampling buffer type. This value must be one of the allowed multisample types. When this surface is passed to <see cref="IDirect3DDevice9.SetDepthStencilSurface" />, its multisample type must be the same as that of the render target set by <see cref="IDirect3DDevice9.SetRenderTarget" />.</param>
    <param name="MultisampleQuality">Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by <see cref="IDirect3D9.CheckDeviceMultiSampleType" />. Passing a larger value returns the error D3DERR_INVALIDCALL. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the MultiSample type must all match.</param>
    <param name="Discard">
      <para>Set this flag to <b>TRUE</b> to enable z-buffer discarding, and <b>FALSE</b> otherwise.				 If this flag is set, the contents of the depth stencil buffer will be invalid after calling either <see cref="IDirect3DDevice9.Present" /> or <see cref="IDirect3DDevice9.SetDepthStencilSurface" /> with a different depth surface.</para>
      <para>This flag has the same behavior as the constant, D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL, in <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresentflag">D3DPRESENTFLAG</a>.</para>
    </param>
    <param name="ppSurface">Address of a pointer to an <see cref="IDirect3DSurface9" /> interface, representing the created depth-stencil surface resource.</param>
    <param name="pSharedHandle">Reserved. Set this parameter to <b>NULL</b>. This parameter can be used in Direct3D 9 for Windows Vista to <a href="https://docs.microsoft.com//windows/desktop/direct3d9/dx9lh">share resources</a>.</param>
    <param name="Usage">Combination of one or more <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dusage">D3DUSAGE</a> constants which can be OR'd together. Value of 0 indicates no usage.</param>
    <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be one of the following: D3DERR_NOTAVAILABLE, D3DERR_INVALIDCALL, D3DERR_OUTOFVIDEOMEMORY, E_OUTOFMEMORY.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.CreateOffscreenPlainSurfaceEx">
    <summary>Create an off-screen surface.</summary>
    <param name="Width">Width of the surface.</param>
    <param name="Height">Height of the surface.</param>
    <param name="Format">Format of the surface. See <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a>.</param>
    <param name="Pool">Surface pool type. See <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpool">D3DPOOL</a>.</param>
    <param name="ppSurface">Pointer to the <see cref="IDirect3DSurface9" /> interface created.</param>
    <param name="pSharedHandle">Reserved. Set this parameter to <b>NULL</b>. This parameter can be used in Direct3D 9 for Windows Vista to <a href="https://docs.microsoft.com//windows/desktop/direct3d9/dx9lh">share resources</a>.</param>
    <param name="Usage">Combination of one or more <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dusage">D3DUSAGE</a> constants which can be OR'd together. Value of 0 indicates no usage.</param>
    <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be the following: D3DERR_INVALIDCALL.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.CreateRenderTargetEx">
    <summary>Creates a render-target surface.</summary>
    <param name="Width">Width of the render-target surface, in pixels.</param>
    <param name="Height">Height of the render-target surface, in pixels.</param>
    <param name="Format">Member of the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a> enumerated type, describing the format of the render target.</param>
    <param name="MultiSample">Member of the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dmultisample-type">D3DMULTISAMPLE_TYPE</a> enumerated type, which describes the multisampling buffer type. This parameter specifies the antialiasing type for this render target. When this surface is passed to <see cref="IDirect3DDevice9.SetRenderTarget" />, its multisample type must be the same as that of the depth-stencil set by <see cref="IDirect3DDevice9.SetDepthStencilSurface" />.</param>
    <param name="MultisampleQuality">Quality level. The valid range is between zero and one less than the level returned by pQualityLevels used by <see cref="IDirect3D9.CheckDeviceMultiSampleType" />. Passing a larger value returns the error, D3DERR_INVALIDCALL. The MultisampleQuality values of paired render targets, depth stencil surfaces, and the multisample type must all match.</param>
    <param name="Lockable">
      <para>Render targets are not lockable unless the application specifies <b>TRUE</b> for Lockable.</para>
      <para>Note that lockable render targets reduce performance on some graphics hardware. The readback performance (moving data from video memory to system memory) depends on the type of hardware used (AGP vs. PCI Express) and is usually far lower than upload performance (moving data from system to video memory). If you need read access to render targets, use <see cref="GetRenderTargetData" /> instead of lockable render targets.</para>
    </param>
    <param name="ppSurface">Address of a pointer to an <see cref="IDirect3DSurface9" /> interface.</param>
    <param name="pSharedHandle">Reserved. Set this parameter to <b>NULL</b>. This parameter can be used in Direct3D 9 for Windows Vista to <a href="https://docs.microsoft.com//windows/desktop/direct3d9/dx9lh">share resources</a>.</param>
    <param name="Usage">Combination of one or more <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dusage">D3DUSAGE</a> constants which can be OR'd together. Value of 0 indicates no usage.</param>
    <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be one of the following: D3DERR_NOTAVAILABLE, D3DERR_INVALIDCALL, D3DERR_OUTOFVIDEOMEMORY, E_OUTOFMEMORY.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.GetDisplayModeEx">
    <summary>Retrieves the display mode's spatial resolution, color resolution, refresh frequency, and rotation settings.</summary>
    <param name="iSwapChain">An unsigned integer specifying the swap chain.</param>
    <param name="pMode">Pointer to a <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3ddisplaymodeex">D3DDISPLAYMODEEX</a> structure containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode. Can be set to <b>NULL</b>.</param>
    <param name="pRotation">Pointer to a <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3ddisplayrotation">D3DDISPLAYROTATION</a> indicating the type of screen rotation the application will do. The value returned through this pointer is important when the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresentflag">D3DPRESENTFLAG_NOAUTOROTATE</a> flag is used; otherwise, it can be set to <b>NULL</b>.</param>
    <returns>If the method succeeds, the return value is D3D_OK. If the method fails, the return value can be D3DERR_INVALIDCALL.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.GetGPUThreadPriority">
    <summary>Get the priority of the GPU thread.</summary>
    <param name="pPriority">Current GPU priority. Valid values range from -7 to 7.</param>
    <returns>Possible return values include: D3D_OK or D3DERR_DEVICEREMOVED (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>).</returns>
  </member>
  <member name="IDirect3DDevice9Ex.GetMaximumFrameLatency">
    <summary>Retrieves the number of frames of data that the system is allowed to queue.</summary>
    <param name="pMaxLatency">Returns the number of frames that can be queued for render. The value is typically 3, but can range from 1 to 20.</param>
    <returns>Possible return values include: D3D_OK, D3DERR_DEVICELOST, D3DERR_DEVICEREMOVED, D3DERR_DRIVERINTERNALERROR, D3DERR_INVALIDCALL, or D3DERR_OUTOFVIDEOMEMORY (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>).</returns>
  </member>
  <member name="IDirect3DDevice9Ex.PresentEx">
    <summary>Swap the swapchain's next buffer with the front buffer.</summary>
    <param name="pSourceRect">Pointer to a <see cref="RECT" /> structure indicating region on the source surface to copy in window client coordinates. Only applies when the swapchain was created with the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dswapeffect">D3DSWAPEFFECT_COPY</a> flag. If <b>NULL</b>, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to the source surface.</param>
    <param name="pDestRect">Pointer to <see cref="RECT" /> structure indicating the target region on the destination surface in window client coordinates. Only applies when the swapchain was created with the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dswapeffect">D3DSWAPEFFECT_COPY</a> flag. If <b>NULL</b>, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to the destination client area.</param>
    <param name="hDestWindowOverride">
      <para>Pointer to a destination window whose client area is taken as the target for this presentation. If this value is <b>NULL</b>, the runtime uses the <b>hDeviceWindow</b> member of <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent-parameters">D3DPRESENT_PARAMETERS</a> for the presentation.</para>
      <div>
        <b>Note</b>  If you create a swap chain with D3DSWAPEFFECT_FLIPEX, you must pass <b>NULL</b> to <i>hDestWindowOverride</i></div>
    </param>
    <param name="pDirtyRegion">
      <para>Pointer to a <see cref="RGNDATA" /> structure indicating the smallest set of pixels that need to be transferred. This value must be <b>NULL</b> unless the swapchain was created with the <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dswapeffect">D3DSWAPEFFECT_COPY</a> flag. For more information about swapchains, see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/flipping-surfaces">Flipping Surfaces (Direct3D 9)</a>.</para>
      <para>If this value is non-<b>NULL</b>, the contained region is expressed in back buffer coordinates. The method takes these rectangles into account when optimizing the presentation by copying only the pixels within the region, or some suitably expanded set of rectangles. This is an aid to optimization only, and the application should not rely on the region being copied exactly. The implementation can choose to copy the whole source rectangle.</para>
    </param>
    <param name="dwFlags">
      <para>Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, or any combination of <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent">D3DPRESENT</a> flags.</para>
      <list type="bullet">
        <item>
          <description>If dwFlags = 0, this method behaves as it did prior to Direct3D 9. Present will spin until the hardware is free, without returning an error.</description>
        </item>
        <item>
          <description>If dwFlags = <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent">D3DPRESENT_DONOTFLIP</a> the display driver is called with the front buffer as both the source and target surface. The driver responds by scheduling a frame synch, but not changing the displayed surface. This flag is only available in full-screen mode or when using D3DSWAPEFFECT_FLIPEX in windowed mode.</description>
        </item>
        <item>
          <description>If dwFlags = <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent">D3DPRESENT_DONOTWAIT</a>, and the hardware is busy processing or waiting for a vertical sync interval, the method will return D3DERR_WASSTILLDRAWING.</description>
        </item>
        <item>
          <description>If dwFlags = <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent">D3DPRESENT_FORCEIMMEDIATE</a>, D3DPRESENT_INTERVAL_IMMEDIATE is enforced on this Present call. This flag can only be specified when using D3DSWAPEFFECT_FLIPEX. This behavior is the same for windowed and full-screen modes.</description>
        </item>
        <item>
          <description>If dwFlags = <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent">D3DPRESENT_LINEAR_CONTENT</a>, gamma correction is performed from linear space to sRGB for windowed swap chains. This flag will take effect only when the driver exposes <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dcaps3">D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION</a> (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/gamma">Gamma (Direct3D 9)</a>).</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Possible return values include: S_OK, D3DERR_DEVICELOST, D3DERR_DEVICEHUNG, D3DERR_DEVICEREMOVED, or D3DERR_OUTOFVIDEOMEMORY (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>). See <a href="https://docs.microsoft.com//windows/desktop/direct3d9/dx9lh">Lost Device Behavior Changes</a> for more information about lost, hung, and removed devices.</para>
      <list type="table">
        <listheader>
          <description>Differences between Direct3D 9 and Direct3D 9Ex:<para><a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dswapeffect">D3DSWAPEFFECT_FLIPEX</a> is only available in Direct3D9Ex running on Windows 7 (or more current operating system).</para></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDirect3DDevice9Ex.ResetEx">
    <summary>Resets the type, size, and format of the swap chain with all other surfaces persistent.</summary>
    <param name="pPresentationParameters">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dpresent-parameters">D3DPRESENT_PARAMETERS</a> structure, describing the new presentation parameters. This value cannot be <b>NULL</b>.</para>
      <para>When switching to full-screen mode, Direct3D will try to find a desktop format that matches the back buffer format, so that back buffer and front buffer formats will be identical (to eliminate the need for color conversion).</para>
      <para>When this method returns:</para>
      <list type="bullet">
        <item>
          <description>BackBufferCount, BackBufferWidth, and BackBufferHeight are set to zero.</description>
        </item>
        <item>
          <description>BackBufferFormat is set to <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a> for windowed mode only; a full-screen mode must specify a format.</description>
        </item>
      </list>
    </param>
    <param name="pFullscreenDisplayMode">Pointer to a <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3ddisplaymodeex">D3DDISPLAYMODEEX</a> structure that describes the properties of the desired display mode. This value must be provided for fullscreen applications, but can be <b>NULL</b> for windowed applications.</param>
    <returns>
      <para>The method can return: D3D_OK, D3DERR_DEVICELOST or D3DERR_DEVICEHUNG (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>).</para>
      <para>If this method returns D3DERR_DEVICELOST or D3DERR_DEVICEHUNG then the application can only call <b>IDirect3DDevice9Ex.ResetEx</b>, <see cref="IDirect3DDevice9Ex.CheckDeviceState" /> or release the interface pointer; any other API call will cause an exception.</para>
    </returns>
  </member>
  <member name="IDirect3DDevice9Ex.SetConvolutionMonoKernel">
    <summary>Prepare the texture sampler for monochrome convolution filtering on a single-color texture.</summary>
    <param name="width">The width of the filter kernel; ranging from 1 - <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dconvolutionmono">D3DCONVOLUTIONMONO_MAXWIDTH</a>. The default value is 1.</param>
    <param name="height">The height of the filter kernel; ranging from 1 - <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dconvolutionmono">D3DCONVOLUTIONMONO_MAXHEIGHT</a>. The default value is 1.</param>
    <param name="rows">An array of weights, one weight for each kernel sub-element in the width. This parameter must be <b>NULL</b>, which will set the weights equal to the default value.</param>
    <param name="columns">An array of weights, one weight for each kernel sub-element in the height. This parameter must be <b>NULL</b>, which will set the weights equal to the default value.</param>
    <returns>If the method succeeds, the return value is D3D_OK.</returns>
  </member>
  <member name="IDirect3DDevice9Ex.SetGPUThreadPriority">
    <summary>Set the priority on the GPU thread.</summary>
    <param name="Priority">The thread priority, ranging from -7 to 7.</param>
    <returns>Possible return values include: D3D_OK, D3DERR_INVALIDCALL, or D3DERR_DEVICEREMOVED (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>).</returns>
  </member>
  <member name="IDirect3DDevice9Ex.SetMaximumFrameLatency">
    <summary>Set the number of frames that the system is allowed to queue for rendering.</summary>
    <param name="MaxLatency">The maximum number of back buffer frames that a driver can queue. The value is typically 3, but can range from 1 to 20. A value of 0 will reset latency to the default. For multi-head devices, <i>MaxLatency</i> is specified per-head.</param>
    <returns>Possible return values include: D3D_OK or D3DERR_DEVICEREMOVED (see <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3derr">D3DERR</a>).</returns>
  </member>
  <member name="IDirect3DDevice9Ex.WaitForVBlank">
    <summary>Suspend execution of the calling thread until the next vertical blank signal.</summary>
    <param name="iSwapChain">Swap chain index. This is an optional, zero-based index used to specify a swap chain on a multihead card.</param>
    <returns>This method will always return D3D_OK.</returns>
  </member>
  <member name="IDirect3DDevice9Ex">
    <summary>Applications use the methods of the IDirect3DDevice9Ex interface to render primitives, create resources, work with system-level variables, adjust gamma ramp levels, work with palettes, and create shaders. The IDirect3DDevice9Ex interface derives from the <see cref="IDirect3DDevice9" /> interface.</summary>
  </member>
</doc>