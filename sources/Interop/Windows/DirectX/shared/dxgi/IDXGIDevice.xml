<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGIDevice.CreateSurface">
    <summary>
      <para>Returns a surface. This method is used internally and you should not call it directly in your application.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b>const <see cref="DXGI_SURFACE_DESC" />*</b></para>
      <para>A pointer to a <see cref="DXGI_SURFACE_DESC" /> structure that describes the surface.</para>
    </param>
    <param name="NumSurfaces">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of surfaces to create.</para>
    </param>
    <param name="Usage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-usage">DXGI_USAGE</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-usage">DXGI_USAGE</a> flag that specifies how the surface is expected to be used.</para>
    </param>
    <param name="pSharedResource">
      <para>Type: <b>const <see cref="DXGI_SHARED_RESOURCE" />*</b></para>
      <para>An optional pointer to a <see cref="DXGI_SHARED_RESOURCE" /> structure that contains shared resource information for opening views of such resources.</para>
    </param>
    <param name="ppSurface">
      <para>Type: <b><see cref="IDXGISurface" />**</b></para>
      <para>The address of an <see cref="IDXGISurface" /> interface pointer to the first created surface.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; an error code otherwise.  For a list of error codes, see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
    </returns>
    <remarks>
      <para>The <b>CreateSurface</b> method creates a buffer to exchange data between one or more devices. It is used internally, and you should not directly call it.</para>
      <para>The runtime automatically creates an <see cref="IDXGISurface" /> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <b>IDXGISurface</b> interface when it calls <see cref="ID3D11Device.CreateTexture2D" /> or <see cref="ID3D10Device.CreateTexture2D" /> to create a 2D texture. To retrieve the <b>IDXGISurface</b> interface that represents the 2D texture surface, call <see cref="ID3D11Texture2D.QueryInterface" /> or <b>ID3D10Texture2D.QueryInterface</b>. In this call, you must pass the identifier of <b>IDXGISurface</b>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <b>QueryInterface</b> succeeds and returns a pointer to the <b>IDXGISurface</b> interface pointer. Otherwise, <b>QueryInterface</b> fails and does not return the pointer to <b>IDXGISurface</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="ID3D10Device.CreateTexture2D" />
    <seealso cref="ID3D11Device.CreateTexture2D" />
    <seealso cref="IDXGIDevice" />
  </member>
  <member name="IDXGIDevice.GetAdapter">
    <summary>
      <para>Returns the adapter for the specified device.</para>
    </summary>
    <param name="pAdapter">
      <para>Type: <b><see cref="IDXGIAdapter" />**</b></para>
      <para>The address of an <see cref="IDXGIAdapter" /> interface pointer to the adapter.  This parameter must not be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise, returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a> that indicates failure. If the <i>pAdapter</i> parameter is <b>NULL</b> this method returns E_INVALIDARG.</para>
    </returns>
    <remarks>
      <para>If the <b>GetAdapter</b> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIDevice" />
  </member>
  <member name="IDXGIDevice.GetGPUThreadPriority">
    <summary>
      <para>Gets the GPU thread priority.</para>
    </summary>
    <param name="pPriority">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a>*</b></para>
      <para>A pointer to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Return S_OK if successful; otherwise, returns E_POINTER if the <i>pPriority</i> parameter is <b>NULL</b>.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIDevice" />
  </member>
  <member name="IDXGIDevice.QueryResourceResidency">
    <summary>
      <para>Gets the residency status of an array of resources.</para>
    </summary>
    <param name="ppResources">
      <para>Type: <b><see cref="IUnknown" />*</b></para>
      <para>An array of <see cref="IDXGIResource" /> interfaces.</para>
    </param>
    <param name="pResidencyStatus">
      <para>Type: <b><see cref="DXGI_RESIDENCY" />*</b></para>
      <para>An array of <see cref="DXGI_RESIDENCY" /> flags. Each element describes the residency status for corresponding element in
the <i>ppResources</i> argument array.</para>
    </param>
    <param name="NumResources">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of resources in the <i>ppResources</i> argument array and <i>pResidencyStatus</i> argument array.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise, returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_DEVICE_REMOVED</a>, E_INVALIDARG, or
E_POINTER (see <a href="https://docs.microsoft.com//windows/desktop/SecCrypto/common-hresult-values">Common HRESULT Values</a> and WinError.h for more information).</para>
    </returns>
    <remarks>
      <para>The information returned by the <i>pResidencyStatus</i> argument array describes the residency status at the time that the <b>QueryResourceResidency</b> method was called.</para>
      <para>
        <b>Note</b>  The residency status will constantly change.</para>
      <para>If you call the <b>QueryResourceResidency</b> method during a device removed state, the <i>pResidencyStatus</i> argument will return the <see cref="DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY" /> flag.</para>
      <para>
        <b>Note</b>  This method should not be called every frame as it incurs a non-trivial amount of overhead.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIDevice" />
  </member>
  <member name="IDXGIDevice.SetGPUThreadPriority">
    <summary>
      <para>Sets the GPU thread priority.</para>
    </summary>
    <param name="Priority">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Return S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Priority</i> parameter is invalid.</para>
    </returns>
    <remarks>
      <para>The values for the <i>Priority</i> parameter function as follows:</para>
      <list type="bullet">
        <item>
          <description>Positive values increase the likelihood that the GPU scheduler will grant GPU execution cycles to the device when rendering.</description>
        </item>
        <item>
          <description>Negative values lessen the likelihood that the device will receive GPU execution cycles when devices compete for them.</description>
        </item>
        <item>
          <description>The device is guaranteed to receive some GPU execution cycles at all settings.</description>
        </item>
      </list>
      <para>To use the <b>SetGPUThreadPriority</b> method, you should have a comprehensive understanding of GPU scheduling. You should profile your application to ensure that it behaves as intended. If used inappropriately, the <b>SetGPUThreadPriority</b> method can impede rendering speed and result in a poor user experience.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIDevice" />
    <seealso cref="IDXGIDevice.GetGPUThreadPriority" />
  </member>
  <member name="IDXGIDevice">
    <summary>
      <para>An <b>IDXGIDevice</b> interface implements a derived class for DXGI objects that produce image data.</para>
    </summary>
    <remarks>
      <para>The <b>IDXGIDevice</b> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to
applications that do not use Direct3D to communicate with DXGI.</para>
      <para>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <see cref="IUnknown" /> interface. You can query this Direct3D device object for the device's
corresponding <b>IDXGIDevice</b> interface. To retrieve the <b>IDXGIDevice</b>  interface of a Direct3D device, use the following code:</para>
      <code>IDXGIDevice * pDXGIDevice;
hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;amp;amp;amp;amp;amp;pDXGIDevice);

</code>
      <para>
        <b>Windows Phone 8:
</b> This API is supported.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIObject" />
  </member>
</doc>