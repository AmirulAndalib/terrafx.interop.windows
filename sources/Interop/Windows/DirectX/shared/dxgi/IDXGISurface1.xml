<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGISurface1.GetDC">
    <summary>
      <para>Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).</para>
    </summary>
    <param name="Discard">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A Boolean value that specifies whether to preserve Direct3D contents in the GDI DC. <b>TRUE</b> directs the runtime not to preserve Direct3D contents in the GDI DC; that is, the runtime discards the Direct3D contents. <b>FALSE</b> guarantees that Direct3D contents are available in the GDI DC.</para>
    </param>
    <param name="phdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a>*</b></para>
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a> handle that represents the current device context for GDI rendering.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise, an error code.</para>
    </returns>
    <remarks>
      <para>This method is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
      <para>After you use the <b>GetDC</b> method to retrieve a DC, you can render to the DXGI surface by using GDI.
The <b>GetDC</b> method readies the surface for GDI rendering and allows inter-operation between DXGI and GDI technologies.</para>
      <para>Keep the following in mind when using this method:</para>
      <list type="bullet">
        <item>
          <description>You must create the surface by using the <see cref="D3D11_RESOURCE_MISC_GDI_COMPATIBLE" /> flag for a surface or by using the <see cref="DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE" /> flag for swap chains,
otherwise this method fails.</description>
        </item>
        <item>
          <description>You must release the device and call the <see cref="IDXGISurface1.ReleaseDC" /> method before you issue any new Direct3D commands.</description>
        </item>
        <item>
          <description>This method fails if an outstanding DC has already been created by this method.</description>
        </item>
        <item>
          <description>The format for the surface or swap chain must be <see cref="DXGI_FORMAT_B8G8R8A8_UNORM_SRGB" /> or <see cref="DXGI_FORMAT_B8G8R8A8_UNORM" />.</description>
        </item>
        <item>
          <description>On <b>GetDC</b>, the render target in the output merger of the Direct3D pipeline is unbound from the surface.
You must call the <see cref="ID3D11DeviceContext.OMSetRenderTargets" /> method on the device prior to Direct3D rendering after GDI rendering.</description>
        </item>
        <item>
          <description>Prior to resizing buffers you must release all outstanding DCs.</description>
        </item>
      </list>
      <para>You can also call <b>GetDC</b> on the back buffer at index 0 of a swap chain by obtaining an <see cref="IDXGISurface1" />  from the swap chain.
The following code illustrates the process.</para>
      <code>
IDXGISwapChain* g_pSwapChain = NULL;
IDXGISurface1* g_pSurface1 = NULL;
...
//Setup the device and and swapchain
g_pSwapChain-&gt;GetBuffer(0, __uuidof(IDXGISurface1), (void**) &amp;amp;amp;amp;amp;amp;g_pSurface1);
g_pSurface1-&gt;GetDC( FALSE, &amp;amp;amp;amp;amp;amp;g_hDC );
...
//Draw on the DC using GDI
...
//When finish drawing release the DC
g_pSurface1-&gt;ReleaseDC( NULL );

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGISurface1" />
  </member>
  <member name="IDXGISurface1.ReleaseDC">
    <summary>
      <para>Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.</para>
    </summary>
    <param name="pDirtyRect">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <b>RECT</b> structure that identifies the dirty region of the surface.
A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve.
This area is used as a performance hint to graphics subsystem in certain scenarios.
Do not use this parameter to restrict rendering to the specified rectangular region.
If you pass in <b>NULL</b>, <b>ReleaseDC</b> considers the whole surface as dirty.
Otherwise, <b>ReleaseDC</b> uses the area specified by the RECT as a performance hint to indicate what areas have been manipulated by GDI rendering.</para>
      <para>You can pass a pointer to an empty <b>RECT</b> structure (a rectangle with no position or area) if you didn't change any content.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
      <para>Use the <b>ReleaseDC</b> method to release the DC and indicate that your application finished all GDI rendering to this surface.
You must call the <b>ReleaseDC</b> method before you can use Direct3D to perform additional rendering.</para>
      <para>Prior to resizing buffers you must release all outstanding DCs.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGISurface1" />
  </member>
  <member name="IDXGISurface1">
    <summary>
      <para>The <b>IDXGISurface1</b> interface extends the <see cref="IDXGISurface" /> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</para>
    </summary>
    <remarks>
      <para>This interface is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
      <para>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <see cref="IDXGIOutput.GetDisplaySurfaceData" />. Then, call <see cref="QueryInterface" /> on the <see cref="IDXGISurface" /> object that <b>IDXGIOutput.GetDisplaySurfaceData</b> returns to retrieve the <b>IDXGISurface1</b> interface.</para>
      <para>Any object that supports <see cref="IDXGISurface" /> also supports <b>IDXGISurface1</b>.</para>
      <para>The runtime automatically creates an <b>IDXGISurface1</b> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <b>IDXGISurface1</b> interface when you call <see cref="ID3D11Device.CreateTexture2D" /> or <see cref="ID3D10Device.CreateTexture2D" /> to create a 2D texture. To retrieve the <b>IDXGISurface1</b> interface that represents the 2D texture surface, call <see cref="ID3D11Texture2D.QueryInterface" /> or <b>ID3D10Texture2D.QueryInterface</b>. In this call, you must pass the identifier of <b>IDXGISurface1</b>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <b>QueryInterface</b> succeeds and returns a pointer to the <b>IDXGISurface1</b> interface pointer. Otherwise, <b>QueryInterface</b> fails and does not return the pointer to <b>IDXGISurface1</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGISurface" />
  </member>
</doc>