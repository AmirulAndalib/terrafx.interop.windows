<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGIFactory.CreateSoftwareAdapter">
    <summary>
      <para>Create an adapter interface that represents a software adapter.</para>
    </summary>
    <param name="Module">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HMODULE</a></b></para>
      <para>Handle to the software adapter's dll. HMODULE can be obtained with <see cref="GetModuleHandle" /> or <see cref="LoadLibrary" />.</para>
    </param>
    <param name="ppAdapter">
      <para>Type: <b><see cref="IDXGIAdapter" />**</b></para>
      <para>Address of a pointer to an adapter (see <see cref="IDXGIAdapter" />).</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">return code</a> indicating success or failure.</para>
    </returns>
    <remarks>
      <para>A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers.</para>
      <para>Calling this method will increment the module's reference count by one. The reference count can be decremented by calling <see cref="FreeLibrary" />.</para>
      <para>The typical calling scenario is to call <see cref="LoadLibrary" />, pass the handle to <b>CreateSoftwareAdapter</b>, then immediately call <see cref="FreeLibrary" /> on the DLL and forget the DLL's <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HMODULE</a>. Since the software adapter calls <b>FreeLibrary</b> when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime.</para>
    </remarks>
    <seealso cref="IDXGIFactory" />
  </member>
  <member name="IDXGIFactory.EnumAdapters">
    <summary>
      <para>Enumerates the adapters (video cards).</para>
    </summary>
    <param name="Adapter">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the adapter to enumerate.</para>
    </param>
    <param name="ppAdapter">
      <para>Type: <b><see cref="IDXGIAdapter" />**</b></para>
      <para>The address of a pointer to an <see cref="IDXGIAdapter" /> interface at the position specified by the <i>Adapter</i> parameter.  This parameter must not be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise, returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_FOUND</a> if the index is greater than or equal to the number of adapters in the local system, or <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>ppAdapter</i> parameter is <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy
and recreate the <see cref="IDXGIFactory" /> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.</para>
      <para>When the <b>EnumAdapters</b> method succeeds and fills the <i>ppAdapter</i> parameter with the address of the pointer to the adapter interface, <b>EnumAdapters</b> increments the adapter interface's reference count. When you finish using the
adapter interface, call the <see cref="Release" /> method to decrement the reference count before you destroy the pointer.</para>
      <para>
        <b>EnumAdapters</b> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <b>EnumAdapters</b> next returns other adapters with outputs. <b>EnumAdapters</b> finally returns adapters without outputs.</para>
      <h4>Examples</h4>
      <para>Enumerating Adapters</para>
      <para>The following code example demonstrates how to enumerate adapters using the <b>EnumAdapters</b> method.</para>
      <code>
UINT i = 0;
IDXGIAdapter * pAdapter;
std.vector &lt;IDXGIAdapter*&gt; vAdapters;
while(pFactory-&gt;EnumAdapters(i, &amp;amp;amp;amp;amp;amp;pAdapter) != DXGI_ERROR_NOT_FOUND)
{
    vAdapters.push_back(pAdapter);
    ++i;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIFactory" />
  </member>
  <member name="IDXGIFactory.GetWindowAssociation">
    <summary>
      <para>Get the window through which the user controls the transition to and from full screen.</para>
    </summary>
    <param name="pWindowHandle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a>*</b></para>
      <para>A pointer to a window handle.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns a code that indicates success or failure. <b>S_OK</b> indicates success, <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> indicates <i>pWindowHandle</i> was passed in as <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIFactory" />
  </member>
  <member name="IDXGIFactory.MakeWindowAssociation">
    <summary>
      <para>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</para>
    </summary>
    <param name="WindowHandle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle of the window that is to be monitored. This parameter can be <b>NULL</b>; but only if <i>Flags</i> is also 0.</para>
    </param>
    <param name="Flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>One or more of the following values.</para>
      <list type="bullet">
        <item>
          <description>DXGI_MWA_NO_WINDOW_CHANGES - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</description>
        </item>
        <item>
          <description>DXGI_MWA_NO_ALT_ENTER - Prevent DXGI from responding to an alt-enter sequence.</description>
        </item>
        <item>
          <description>DXGI_MWA_NO_PRINT_SCREEN - Prevent DXGI from responding to a print-screen key.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>WindowHandle</i> is invalid, or E_OUTOFMEMORY.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>The combination of <i>WindowHandle</i> and <i>Flags</i> informs DXGI to stop monitoring window messages for the previously-associated window.</para>
      <para>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</para>
      <para>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <see cref="IDXGISwapChain.ResizeBuffers" />, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <b>ResizeBuffers</b> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</para>
      <para>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <see cref="IDXGIOutput.FindClosestMatchingMode" />. If a matching mode is found, allow the resize. (The IDXGIOutput can be retrieved from <see cref="IDXGISwapChain.GetContainingOutput" />. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</para>
      <para>Applications that want to handle mode changes or Alt+Enter themselves should call <b>MakeWindowAssociation</b> with the DXGI_MWA_NO_WINDOW_CHANGES flag after swap chain creation. The <i>WindowHandle</i> argument, if non-<b>NULL</b>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a>.  Calling <b>MakeWindowAssociation</b> with the DXGI_MWA_NO_WINDOW_CHANGES flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</para>
      <para>You must call the <b>MakeWindowAssociation</b> method on the factory object associated with the target HWND swap chain(s). You can guarantee that by calling the <see cref="IDXGIObject.GetParent" /> method on the swap chain(s) to locate the factory. Here's a code example of doing that.</para>
      <code>void MakeWindowAssociationWithLocatedFactory(
    winrt.com_ptr&lt;IDXGISwapChain&gt; const&amp;amp;amp;amp;amp;amp; swapChain,
    HWND hWnd,
    UINT flags)
{
    winrt.com_ptr&lt;IDXGIFactory1&gt; factory;
    factory.capture(swapChain, &amp;amp;amp;amp;amp;amp;IDXGISwapChain.GetParent);
    factory-&gt;MakeWindowAssociation(hWnd, flags);
}
</code>
      <h3>Notes for Windows Store apps</h3>
      <para>If a Windows Store app calls <b>MakeWindowAssociation</b>, it fails with <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>A Microsoft Win32 application can use <b>MakeWindowAssociation</b> to control full-screen transitions through the Alt+Enter key combination and print screen behavior for full screen.  For Windows Store apps, because DXGI can't perform full-screen transitions, a Windows Store app has no way to control full-screen transitions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI interfaces</seealso>
    <seealso cref="IDXGIFactory" />
  </member>
  <member name="IDXGIFactory">
    <summary>
      <para>An <b>IDXGIFactory</b> interface implements methods for generating DXGI objects (which handle full screen transitions).</para>
    </summary>
    <remarks>
      <para>Create a factory by calling <see cref="CreateDXGIFactory" />.</para>
      <para>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.
You can request the <see cref="IDXGIDevice" /> interface from the Direct3D device and then use the <see cref="IDXGIObject.GetParent" /> method to locate
the factory.  The following code shows how.</para>
      <code>IDXGIDevice * pDXGIDevice = nullptr;
hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;amp;amp;amp;amp;amp;pDXGIDevice);

IDXGIAdapter * pDXGIAdapter = nullptr;
hr = pDXGIDevice-&gt;GetAdapter( &amp;amp;amp;amp;amp;amp;pDXGIAdapter );

IDXGIFactory * pIDXGIFactory = nullptr;
pDXGIAdapter-&gt;GetParent(__uuidof(IDXGIFactory), (void **)&amp;amp;amp;amp;amp;amp;pIDXGIFactory);
</code>
      <para>
        <b>Windows Phone 8:
</b> This API is supported.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIObject" />
  </member>
</doc>