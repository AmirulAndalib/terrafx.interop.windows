<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGIAdapter.CheckInterfaceSupport">
    <summary>
      <para>Checks whether the system supports a device interface for a graphics component.</para>
    </summary>
    <param name="InterfaceName">
      <para>Type: <b><a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-oaut/6e7d7108-c213-40bc-8294-ac13fe68fd50">REFGUID</a></b></para>
      <para>The GUID of the interface of the device version for which support is being checked. This should usually be __uuidof(IDXGIDevice), which returns the version number of the Direct3D 9 UMD (user mode driver) binary. Since WDDM 2.3, all driver components within a driver package (D3D9, D3D11, and D3D12) have been required to share a single version number, so this is a good way to query the driver version regardless of which API is being used.</para>
    </param>
    <param name="pUMDVersion">
      <para>Type: <b><see cref="LARGE_INTEGER" />*</b></para>
      <para>The user mode driver version of <i>InterfaceName</i>. This is  returned only if the interface is supported, otherwise this parameter will be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>S_OK indicates that the interface is supported, otherwise DXGI_ERROR_UNSUPPORTED is returned (For more information, see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>).</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  You can  use <b>CheckInterfaceSupport</b> only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use <b>CheckInterfaceSupport</b> to check whether a Direct3D 11.x and later version interface is supported, <b>CheckInterfaceSupport</b> returns DXGI_ERROR_UNSUPPORTED. Therefore, do not use <b>CheckInterfaceSupport</b>. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <see cref="ID3D11Device.CreateBlendState" /> method and it fails, the operating system does not support the <see cref="ID3D11BlendState" /> interface.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIAdapter" />
  </member>
  <member name="IDXGIAdapter.EnumOutputs">
    <summary>
      <para>Enumerate adapter (video card) outputs.</para>
    </summary>
    <param name="Output">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the output.</para>
    </param>
    <param name="ppOutput">
      <para>Type: <b><see cref="IDXGIOutput" />**</b></para>
      <para>The address of a pointer to an <see cref="IDXGIOutput" /> interface at the position specified by the <i>Output</i> parameter.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>A code that indicates success or failure (see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>). DXGI_ERROR_NOT_FOUND is returned if the index is greater than the number of outputs.</para>
      <para>If the adapter came from a device created using D3D_DRIVER_TYPE_WARP, then the adapter has no outputs, so DXGI_ERROR_NOT_FOUND is returned.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>When the <b>EnumOutputs</b> method succeeds and fills the <i>ppOutput</i> parameter with the address of the pointer to the output interface, <b>EnumOutputs</b> increments the output interface's reference count. To avoid a memory leak, when you finish using the
output interface, call the <see cref="Release" /> method to decrement the reference count.</para>
      <para>
        <b>EnumOutputs</b> first returns the output on which the desktop primary is displayed. This output corresponds with an index of zero. <b>EnumOutputs</b> then returns other outputs.</para>
      <h4>Examples</h4>
      <para>Enumerating Outputs</para>
      <para>Here is an example of how to use <b>EnumOutputs</b> to enumerate all the outputs on an adapter:</para>
      <code>
UINT i = 0;
IDXGIOutput * pOutput;
std.vector&lt;IDXGIOutput*&gt; vOutputs;
while(pAdapter-&gt;EnumOutputs(i, &amp;amp;amp;amp;amp;amp;pOutput) != DXGI_ERROR_NOT_FOUND)
{
    vOutputs.push_back(pOutput);
    ++i;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIAdapter" />
  </member>
  <member name="IDXGIAdapter.GetDesc">
    <summary>
      <para>Gets a DXGI 1.0 description of an adapter (or video card).</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b><see cref="DXGI_ADAPTER_DESC" />*</b></para>
      <para>A pointer to a <see cref="DXGI_ADAPTER_DESC" /> structure that describes the adapter. This parameter must not be <b>NULL</b>. On <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> 9 graphics hardware, <b>GetDesc</b> returns zeros for the PCI ID in the <b>VendorId</b>, <b>DeviceId</b>, <b>SubSysId</b>, and <b>Revision</b> members of <b>DXGI_ADAPTER_DESC</b> and “Software Adapter” for the description string in the <b>Description</b> member.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise returns E_INVALIDARG if the <i>pDesc</i> parameter is <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory
values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</para>
      <list type="bullet">
        <item>
          <description>
            <para>Graphics driver model determination —Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.</para>
            <code>
HasWDDMDriver()
{
    LPDIRECT3DCREATE9EX pD3D9Create9Ex = NULL;
    HMODULE             hD3D9          = NULL;

    hD3D9 = LoadLibrary( L"d3d9.dll" );

    if ( NULL == hD3D9 ) {
        return false;
    }

    //
    /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver.
     */
    //
    pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" );

    return pD3D9Create9Ex != NULL;
}

</code>
          </description>
        </item>
        <item>
          <description>
            <para>Retrieval of graphics memory values.—After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.
After you create a Direct3D device, use this code to obtain
a <see cref="DXGI_ADAPTER_DESC" /> structure that contains the amount of available graphics memory.</para>
            <code>
IDXGIDevice * pDXGIDevice;
hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;amp;amp;amp;amp;amp;pDXGIDevice);
IDXGIAdapter * pDXGIAdapter;
pDXGIDevice-&gt;GetAdapter(&amp;amp;amp;amp;amp;amp;pDXGIAdapter);
DXGI_ADAPTER_DESC adapterDesc;
pDXGIAdapter-&gt;GetDesc(&amp;amp;amp;amp;amp;amp;adapterDesc);

</code>
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIAdapter" />
  </member>
  <member name="IDXGIAdapter">
    <summary>
      <para>The <b>IDXGIAdapter</b> interface represents a display subsystem (including one or more GPUs, DACs and video memory).</para>
    </summary>
    <remarks>
      <para>A display subsystem is often referred to as a video card, however, on some machines the display subsystem is part of the motherboard.</para>
      <para>To enumerate the display subsystems, use <see cref="IDXGIFactory.EnumAdapters" />.</para>
      <para>To get an interface to the adapter for a particular device, use <see cref="IDXGIDevice.GetAdapter" />.</para>
      <para>To create a software adapter, use <see cref="IDXGIFactory.CreateSoftwareAdapter" />.</para>
      <para>
        <b>Windows Phone 8:
</b> This API is supported.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIObject" />
  </member>
</doc>