<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXGIFactory1.EnumAdapters1">
    <summary>
      <para>Enumerates both adapters (video cards) with or without outputs.</para>
    </summary>
    <param name="Adapter">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the adapter to enumerate.</para>
    </param>
    <param name="ppAdapter">
      <para>Type: <b><see cref="IDXGIAdapter1" />**</b></para>
      <para>The address of a pointer to an <see cref="IDXGIAdapter1" /> interface at the position specified by the <i>Adapter</i> parameter.
This parameter must not be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful; otherwise, returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_FOUND</a> if the index is greater than or equal to the number of adapters in the local
system, or <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_INVALID_CALL</a> if <i>ppAdapter</i> parameter is <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>This method is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
      <para>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy
and recreate the <see cref="IDXGIFactory1" /> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop.</para>
      <para>When the <b>EnumAdapters1</b> method succeeds and fills the <i>ppAdapter</i> parameter with the address of the pointer to the adapter interface, <b>EnumAdapters1</b> increments the adapter interface's reference count. When you finish using the
adapter interface, call the <see cref="Release" /> method to decrement the reference count before you destroy the pointer.</para>
      <para>
        <b>EnumAdapters1</b> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <b>EnumAdapters1</b> next returns other adapters with outputs. <b>EnumAdapters1</b> finally returns adapters without outputs.</para>
      <h4>Examples</h4>
      <para>Enumerating Adapters</para>
      <para>The following code example demonstrates how to enumerate adapters using the <b>EnumAdapters1</b> method.</para>
      <code>
UINT i = 0;
IDXGIAdapter1 * pAdapter;
std.vector &lt;IDXGIAdapter1*&gt; vAdapters;
while(pFactory-&gt;EnumAdapters1(i, &amp;amp;amp;amp;amp;amp;pAdapter) != DXGI_ERROR_NOT_FOUND)
{
    vAdapters.push_back(pAdapter);
    ++i;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIFactory1" />
  </member>
  <member name="IDXGIFactory1.IsCurrent">
    <summary>
      <para>Informs an application of the possible need to re-enumerate adapters.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>FALSE</b>, if a new adapter is becoming available or the current adapter is going away.
<b>TRUE</b>, no adapter changes.</para>
      <para>
        <b>IsCurrent</b> returns <b>FALSE</b> to inform the calling application to re-enumerate adapters.</para>
    </returns>
    <remarks>
      <para>This method is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIFactory1" />
  </member>
  <member name="IDXGIFactory1">
    <summary>
      <para>The <b>IDXGIFactory1</b> interface implements methods for generating DXGI objects.</para>
    </summary>
    <remarks>
      <para>This interface is not supported by DXGI 1.0, which shipped in Windows Vista and Windows Server 2008. DXGI 1.1 support is required, which is available on
Windows 7, Windows Server 2008 R2, and as an update to Windows Vista with Service Pack 2 (SP2) (<a href="https://support.microsoft.com/kb/971644">KB 971644</a>) and Windows Server 2008 (<a href="https://support.microsoft.com/kb/971512/">KB 971512</a>).</para>
      <para>To create a factory, call the <see cref="CreateDXGIFactory1" /> function.</para>
      <para>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.
You can request the <see cref="IDXGIDevice" /> or <see cref="IDXGIDevice1" /> interface from the Direct3D device and then use the <see cref="IDXGIObject.GetParent" /> method to locate
the factory.  The following code shows how.</para>
      <code>IDXGIDevice1 * pDXGIDevice;
hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice1), (void **)&amp;amp;amp;amp;amp;amp;pDXGIDevice);

IDXGIAdapter * pDXGIAdapter;
hr = pDXGIDevice-&gt;GetParent(__uuidof(IDXGIAdapter), (void **)&amp;amp;amp;amp;amp;amp;pDXGIAdapter);

IDXGIFactory1 * pIDXGIFactory;
pDXGIAdapter-&gt;GetParent(__uuidof(IDXGIFactory1), (void **)&amp;amp;amp;amp;amp;amp;pIDXGIFactory);

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/d3d10-graphics-reference-dxgi-interfaces">DXGI Interfaces</seealso>
    <seealso cref="IDXGIFactory" />
  </member>
</doc>