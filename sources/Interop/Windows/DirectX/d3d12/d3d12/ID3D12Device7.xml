<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12Device7.AddToStateObject">
    <summary>Incrementally add to an existing state object. This incurs lower CPU overhead than creating a state object from scratch that is a superset of an existing one (for example, adding a few more shaders).</summary>
    <param name="pAddition">Description of state object contents to add to existing state object. To help generate this see the <b>CD3D12_STATE_OBJECT_DESC</b> helper in class in <code>d3dx12.h</code>.</param>
    <param name="pStateObjectToGrowFrom">
      <para>Existing state object, which can be in use (for example, active raytracing) during this operation.</para>
      <para>The existing state object must not be of type <b>Collection</b>.</para>
    </param>
    <param name="riid">Must be the IID of the <see cref="ID3D12StateObject" /> interface.</param>
    <param name="ppNewStateObject">
      <para>Returned state object.</para>
      <para>Behavior is undefined if shader identifiers are retrieved for new shaders from this call and they are accessed via shader tables by any already existing or in-flight command list that references some older state object. Use of the new shaders added to the state object can occur only from commands (such as <b>DispatchRays</b> or <b>ExecuteIndirect</b> calls) recorded in a command list after the call to <b>AddToStateObject</b>.</para>
    </param>
    <returns>
      <b>S_OK</b> for success. <b>E_INVALIDARG</b>, <b>E_OUTOFMEMORY</b> on failure. The debug layer provides detailed status information.</returns>
  </member>
  <member name="ID3D12Device7.CreateProtectedResourceSession1">
    <summary>
      <para>
        <b>CreateProtectedResourceSession1</b> revises the <see cref="ID3D12Device4.CreateProtectedResourceSession" /> method with provision (in the structure passed via the <i>pDesc</i> parameter) for a globally unique identifier (<b>GUID</b>) that indicates the type of protected resource session.</para>
      <para>Calling <b>ID3D12Device4.CreateProtectedResourceSession</b> is equivalent to calling <b>ID3D12Device7.CreateProtectedResourceSession1</b> with the <b>D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED</b> GUID.</para>
    </summary>
    <param name="pDesc">A pointer to a constant <b>D3D12_PROTECTED_RESOURCE_SESSION_DESC1</b> structure, describing the session to create.</param>
    <param name="riid">The GUID of the interface to a protected session. Most commonly, <see cref="ID3D12ProtectedResourceSession1" />, although it may be any <b>GUID</b> for any interface. If the protected session object doesn't support the interface for this <b>GUID</b>, the getter will return <b>E_NOINTERFACE</b>.</param>
    <param name="ppSession">A pointer to a memory block that receives a pointer to the session for the given protected session (the specific interface type returned depends on <i>riid</i>).</param>
  </member>
  <member name="ID3D12Device7">
    <summary>
      <para>Represents a virtual adapter.</para>
      <para>This interface extends <see cref="ID3D12Device6" />.</para>
    </summary>
  </member>
</doc>