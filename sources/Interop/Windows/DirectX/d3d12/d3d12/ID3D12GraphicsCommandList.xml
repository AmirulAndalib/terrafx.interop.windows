<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12GraphicsCommandList.BeginEvent">
    <summary>Not intended to be called directly.  Use the<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command list.</summary>
    <param name="Metadata">Internal.</param>
    <param name="pData">Internal.</param>
    <param name="Size">Internal.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.BeginQuery">
    <summary>Starts a query running.</summary>
    <param name="pQueryHeap">Specifies the <see cref="ID3D12QueryHeap" /> containing the query.</param>
    <param name="Type">Specifies one member of <see cref="D3D12_QUERY_TYPE" />.</param>
    <param name="Index">Specifies the index of the query within the query heap.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ClearDepthStencilView">
    <summary>Clears the depth-stencil resource.</summary>
    <param name="DepthStencilView">Describes the CPU descriptor handle that represents the start of the heap for the depth stencil to be cleared.</param>
    <param name="ClearFlags">A combination of <see cref="D3D12_CLEAR_FLAGS" /> values that are combined by using a bitwise OR operation. The resulting value identifies the type of data to clear (depth buffer, stencil buffer, or both).</param>
    <param name="Depth">A value to clear the depth buffer with. This value will be clamped between 0 and 1.</param>
    <param name="Stencil">A value to clear the stencil buffer with.</param>
    <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
    <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearDepthStencilView</b> clears the entire resource view.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ClearRenderTargetView">
    <summary>Sets all the elements in a render target to one value.</summary>
    <param name="RenderTargetView">Specifies a D3D12_CPU_DESCRIPTOR_HANDLE structure that describes the CPU descriptor handle that represents the start of the heap for the render target to be cleared.</param>
    <param name="ColorRGBA">A 4-component array that represents the color to fill the render target with.</param>
    <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
    <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearRenderTargetView</b> clears the entire resource view.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ClearState">
    <summary>Resets the state of a direct command list back to the state it was in when the command list was created.</summary>
    <param name="pPipelineState">A pointer to the <see cref="ID3D12PipelineState" /> object that contains the initial pipeline state for the command list.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat">
    <summary>Sets all of the elements in an unordered-access view (UAV) to the specified float values.</summary>
    <param name="ViewGPUHandleInCurrentHeap">A <see cref="D3D12_GPU_DESCRIPTOR_HANDLE" /> that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via <see cref="SetDescriptorHeaps" />.</param>
    <param name="ViewCPUHandle">
      <para>A <see cref="D3D12_CPU_DESCRIPTOR_HANDLE" /> in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared.</para>
      <blockquote>[!IMPORTANT] This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers that implement the clear as a fixed-function hardware operation (rather than as a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in <b>WRITE_BACK</b> memory (similar to <b>D3D12_HEAP_TYPE_UPLOAD</b> heap types), and CPU reads from this type of memory are prohibitively slow.</blockquote>
    </param>
    <param name="pResource">A pointer to the <see cref="ID3D12Resource" /> interface that represents the unordered-access-view (UAV) resource to clear.</param>
    <param name="Values">A 4-component array that containing the values to fill the unordered-access-view resource with.</param>
    <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
    <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearUnorderedAccessViewFloat</b> clears the entire resource view.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ClearUnorderedAccessViewUint">
    <summary>Sets all the elements in a unordered-access view (UAV) to the specified integer values.</summary>
    <param name="ViewGPUHandleInCurrentHeap">A <see cref="D3D12_GPU_DESCRIPTOR_HANDLE" /> that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via <see cref="SetDescriptorHeaps" />.</param>
    <param name="ViewCPUHandle">
      <para>A <see cref="D3D12_CPU_DESCRIPTOR_HANDLE" /> in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared.</para>
      <blockquote>[!IMPORTANT] This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers that implement the clear as a fixed-function hardware operation (rather than as a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in <b>WRITE_BACK</b> memory (similar to <b>D3D12_HEAP_TYPE_UPLOAD</b> heap types), and CPU reads from this type of memory are prohibitively slow.</blockquote>
    </param>
    <param name="pResource">A pointer to the <see cref="ID3D12Resource" /> interface that represents the unordered-access-view (UAV) resource to clear.</param>
    <param name="Values">A 4-component array that containing the values to fill the unordered-access-view resource with.</param>
    <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
    <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearUnorderedAccessViewUint</b> clears the entire resource view.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.Close">
    <summary>Indicates that recording to the command list has finished.</summary>
    <returns>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <b>E_FAIL</b> if the command list has already been closed, or an invalid API was called during command list recording.</description>
        </item>
        <item>
          <description>
            <b>E_OUTOFMEMORY</b> if the operating system ran out of memory during recording.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if an invalid argument was passed to the command list API during recording.</description>
        </item>
      </list>See <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D12GraphicsCommandList.CopyBufferRegion">
    <summary>Copies a region of a buffer from one resource to another.</summary>
    <param name="pDstBuffer">Specifies the destination <see cref="ID3D12Resource" />.</param>
    <param name="DstOffset">Specifies a UINT64 offset (in bytes) into the destination resource.</param>
    <param name="pSrcBuffer">Specifies the source <see cref="ID3D12Resource" />.</param>
    <param name="SrcOffset">Specifies a UINT64 offset (in bytes) into the source resource, to start the copy from.</param>
    <param name="NumBytes">Specifies the number of bytes to copy.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.CopyResource">
    <summary>Copies the entire contents of the source resource to the destination resource.</summary>
    <param name="pDstResource">A pointer to the <see cref="ID3D12Resource" /> interface that represents the destination resource.</param>
    <param name="pSrcResource">A pointer to the <see cref="ID3D12Resource" /> interface that represents the source resource.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.CopyTextureRegion">
    <summary>This method uses the GPU to copy texture data between two locations. Both the source and the destination may reference texture data located within either a buffer resource or a texture resource.</summary>
    <param name="pDst">Specifies the destination <see cref="D3D12_TEXTURE_COPY_LOCATION" />. The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_DEST state.</param>
    <param name="DstX">The x-coordinate of the upper left corner of the destination region.</param>
    <param name="DstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</param>
    <param name="DstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</param>
    <param name="pSrc">Specifies the source <see cref="D3D12_TEXTURE_COPY_LOCATION" />. The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_SOURCE state.</param>
    <param name="pSrcBox">Specifies an optional D3D12_BOX that sets the size of the source texture to copy.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.CopyTiles">
    <summary>Copies tiles from buffer to tiled resource or vice versa.</summary>
    <param name="pTiledResource">A pointer to a tiled resource.</param>
    <param name="pTileRegionStartCoordinate">A pointer to a<see cref="D3D12_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the tiled resource.</param>
    <param name="pTileRegionSize">A pointer to a <see cref="D3D12_TILE_REGION_SIZE" /> structure that describes the size of the tiled region.</param>
    <param name="pBuffer">A pointer to an <see cref="ID3D12Resource" /> that represents a default, dynamic, or staging buffer.</param>
    <param name="BufferStartOffsetInBytes">The offset in bytes into the buffer at <i>pBuffer</i> to start the operation.</param>
    <param name="Flags">A combination of <see cref="D3D12_TILE_COPY_FLAGS" />-typed values that are combined by using a bitwise OR operation and that identifies how to copy tiles.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.DiscardResource">
    <summary>Indicates that the contents of a resource don't need to be preserved. The function may re-initialize resource metadata in some cases.</summary>
    <param name="pResource">A pointer to the <see cref="ID3D12Resource" /> interface for the resource to discard.</param>
    <param name="pRegion">A pointer to a <see cref="D3D12_DISCARD_REGION" /> structure that describes details for the discard-resource operation.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.Dispatch">
    <summary>Executes a command list from a thread group.</summary>
    <param name="ThreadGroupCountX">The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
    <param name="ThreadGroupCountY">The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
    <param name="ThreadGroupCountZ">The number of groups dispatched in the z direction. <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535). In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.DrawIndexedInstanced">
    <summary>Draws indexed, instanced primitives.</summary>
    <param name="IndexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
    <param name="BaseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
    <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.DrawInstanced">
    <summary>Draws non-indexed, instanced primitives.</summary>
    <param name="VertexCountPerInstance">Number of vertices to draw.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartVertexLocation">Index of the first vertex.</param>
    <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.EndEvent">
    <summary>Not intended to be called directly.  Use the<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command list.</summary>
  </member>
  <member name="ID3D12GraphicsCommandList.EndQuery">
    <summary>Ends a running query.</summary>
    <param name="pQueryHeap">Specifies the <see cref="ID3D12QueryHeap" /> containing the query.</param>
    <param name="Type">Specifies one member of <see cref="D3D12_QUERY_TYPE" />.</param>
    <param name="Index">Specifies the index of the query in the query heap.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ExecuteBundle">
    <summary>Executes a bundle.</summary>
    <param name="pCommandList">Specifies the <see cref="ID3D12GraphicsCommandList" /> that determines the bundle to be executed.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ExecuteIndirect">
    <summary>Apps perform indirect draws/dispatches using the <b>ExecuteIndirect</b> method.</summary>
    <param name="pCommandSignature">Specifies a <see cref="ID3D12CommandSignature" />. The data referenced by <i>pArgumentBuffer</i> will be interpreted depending on the contents of the command signature. Refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/indirect-drawing">Indirect Drawing</a> for the APIs that are used to create a command signature.</param>
    <param name="MaxCommandCount">
      <para>There are two ways that command counts can be specified:</para>
      <list type="bullet">
        <item>
          <description>If <i>pCountBuffer</i> is not NULL, then <i>MaxCommandCount</i> specifies the maximum number of operations which will be performed. The actual number of operations to be performed are defined by the minimum of this value, and a 32-bit unsigned integer contained in <i>pCountBuffer</i> (at the byte offset specified by <i>CountBufferOffset</i>).</description>
        </item>
        <item>
          <description>If <i>pCountBuffer</i> is NULL, the <i>MaxCommandCount</i> specifies the exact number of operations which will be performed.</description>
        </item>
      </list>
    </param>
    <param name="pArgumentBuffer">Specifies one or more <see cref="ID3D12Resource" /> objects, containing the command arguments.</param>
    <param name="ArgumentBufferOffset">Specifies an offset into <i>pArgumentBuffer</i> to identify the first command argument.</param>
    <param name="pCountBuffer">Specifies a pointer to a <see cref="ID3D12Resource" />.</param>
    <param name="CountBufferOffset">Specifies a UINT64 that is the offset into <i>pCountBuffer</i>, identifying the argument count.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.IASetIndexBuffer">
    <summary>Sets the view for the index buffer.</summary>
    <param name="pView">The view specifies the index buffer's address, size, and <see cref="DXGI_FORMAT" />, as a pointer to a <see cref="D3D12_INDEX_BUFFER_VIEW" /> structure.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.IASetPrimitiveTopology">
    <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
    <param name="PrimitiveTopology">The type of primitive and ordering of the primitive data (see <see cref="D3D_PRIMITIVE_TOPOLOGY" />).</param>
  </member>
  <member name="ID3D12GraphicsCommandList.IASetVertexBuffers">
    <summary>Sets a CPU descriptor handle for the vertex buffers.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting vertex buffers.</param>
    <param name="NumViews">The number of views in the <i>pViews</i> array.</param>
    <param name="pViews">Specifies the vertex buffer views in an array of <see cref="D3D12_VERTEX_BUFFER_VIEW" /> structures.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.OMSetBlendFactor">
    <summary>Sets the blend factor that modulate values for a pixel shader, render target, or both.</summary>
    <param name="BlendFactor">Array of blend factors, one for each RGBA component.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.OMSetRenderTargets">
    <summary>Sets CPU descriptor handles for the render targets and depth stencil.</summary>
    <param name="NumRenderTargetDescriptors">The number of entries in the <i>pRenderTargetDescriptors</i> array (ranges between 0 and <b>D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which pRenderTargetDescriptors points must equal the number in this parameter.</param>
    <param name="pRenderTargetDescriptors">Specifies an array of <see cref="D3D12_CPU_DESCRIPTOR_HANDLE" /> structures that describe the CPU descriptor handles that represents the start of the heap of render target descriptors. If this parameter is NULL and NumRenderTargetDescriptors is 0, no render targets are bound.</param>
    <param name="RTsSingleHandleToDescriptorRange">
      <para>
        <b>True</b> means the handle passed in is the pointer to a contiguous range of <i>NumRenderTargetDescriptors</i> descriptors. This case is useful if the set of descriptors to bind already happens to be contiguous in memory (so all that’s needed is a handle to the first one). For example, if <i>NumRenderTargetDescriptors</i> is 3 then the memory layout is taken as follows:</para>
      <img alt="Memory layout with parameter set to true" src="https://docs.microsoft.com/windows/win32/api/d3d12/images/oms_true.png" />In this case the driver dereferences the handle and then increments the memory being pointed to.<para><b>False</b> means that the handle is the first of an array of <i>NumRenderTargetDescriptors</i> handles. The false case allows an application to bind a set of descriptors from different locations at once. Again assuming that <i>NumRenderTargetDescriptors</i> is 3, the memory layout is taken as follows:</para><img alt="Memory layout with parameter set to false" src="https://docs.microsoft.com/windows/win32/api/d3d12/images/oms_false.png" />In this case the driver dereferences three handles that are expected to be adjacent to each other in memory.</param>
    <param name="pDepthStencilDescriptor">A pointer to a <see cref="D3D12_CPU_DESCRIPTOR_HANDLE" /> structure that describes the CPU descriptor handle that represents the start of the heap that holds the depth stencil descriptor. If this parameter is NULL, no depth stencil descriptor is bound.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.OMSetStencilRef">
    <summary>Sets the reference value for depth stencil tests.</summary>
    <param name="StencilRef">Reference value to perform against when doing a depth-stencil test.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.Reset">
    <summary>Resets a command list back to its initial state as if a new command list was just created.</summary>
    <param name="pAllocator">A pointer to the <see cref="ID3D12CommandAllocator" /> object that the device creates command lists from.</param>
    <param name="pInitialState">
      <para>A pointer to the <see cref="ID3D12PipelineState" /> object that contains the initial pipeline state for the command list. This is optional and can be NULL. If NULL, the runtime sets a dummy initial pipeline state so that drivers don't have to deal with undefined state. The overhead for this is low, particularly for a command list, for which the overall cost of recording the command list likely dwarfs the cost of one initial state setting. So there is little cost in not setting the initial pipeline state parameter if it isn't convenient.</para>
      <para>For bundles on the other hand, it might make more sense to try to set the initial state parameter since bundles are likely smaller overall and can be reused frequently.</para>
    </param>
    <returns>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <b>E_FAIL</b> if the command list was not in the "closed" state when the <b>Reset</b> call was made, or the per-device limit would have been exceeded.</description>
        </item>
        <item>
          <description>
            <b>E_OUTOFMEMORY</b> if the operating system ran out of memory.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if the allocator is currently being used with another command list in the "recording" state or if the specified allocator was created with the wrong type.</description>
        </item>
      </list>See <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D12GraphicsCommandList.ResolveQueryData">
    <summary>Extracts data from a query. <b>ResolveQueryData</b> works with all heap types (default, upload, and readback).</summary>
    <param name="pQueryHeap">Specifies the <see cref="ID3D12QueryHeap" /> containing the queries to resolve.</param>
    <param name="Type">Specifies the type of query, one member of <see cref="D3D12_QUERY_TYPE" />.</param>
    <param name="StartIndex">Specifies an index of the first query to resolve.</param>
    <param name="NumQueries">Specifies the number of queries to resolve.</param>
    <param name="pDestinationBuffer">Specifies an <see cref="ID3D12Resource" /> destination buffer, which must be in the state<see cref="D3D12_RESOURCE_STATE_COPY_DEST" />.</param>
    <param name="AlignedDestinationBufferOffset">Specifies an alignment offset into the destination buffer. Must be a multiple of 8 bytes.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ResolveSubresource">
    <summary>Copy a multi-sampled resource into a non-multi-sampled resource.</summary>
    <param name="pDstResource">Destination resource. Must be a created on a <see cref="D3D12_HEAP_TYPE_DEFAULT" /> heap and be single-sampled. See <see cref="ID3D12Resource" />.</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. Use <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12calcsubresource">D3D12CalcSubresource</a> to calculate the subresource index if the parent resource is complex.</param>
    <param name="pSrcResource">Source resource. Must be multisampled.</param>
    <param name="SrcSubresource">The source subresource of the source resource.</param>
    <param name="Format">A <see cref="DXGI_FORMAT" /> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.ResourceBarrier">
    <summary>Notifies the driver that it needs to synchronize multiple accesses to resources.</summary>
    <param name="NumBarriers">The number of submitted barrier descriptions.</param>
    <param name="pBarriers">Pointer to an array of barrier descriptions.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.RSSetScissorRects">
    <summary>Binds an array of scissor rectangles to the rasterizer stage.</summary>
    <param name="NumRects">The number of scissor rectangles to bind.</param>
    <param name="pRects">An array of scissor rectangles.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.RSSetViewports">
    <summary>Bind an array of viewports to the rasterizer stage of the pipeline.</summary>
    <param name="NumViewports">Number of viewports to bind. The range of valid values is (0, D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE).</param>
    <param name="pViewports">An array of <see cref="D3D12_VIEWPORT" /> structures to bind to the device.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRoot32BitConstant">
    <summary>Sets a constant in the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="SrcData">The source data for the constant to set.</param>
    <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the constant in the root signature.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRoot32BitConstants">
    <summary>Sets a group of constants in the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="Num32BitValuesToSet">The number of constants to set in the root signature.</param>
    <param name="pSrcData">The source data for the group of constants to set.</param>
    <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the first constant of the group in the root signature.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRootConstantBufferView">
    <summary>Sets a CPU descriptor handle for the constant buffer in the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">Specifies the D3D12_GPU_VIRTUAL_ADDRESS of the constant buffer.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRootDescriptorTable">
    <summary>Sets a descriptor table into the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BaseDescriptor">A GPU_descriptor_handle object for the base descriptor to set.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRootShaderResourceView">
    <summary>Sets a CPU descriptor handle for the shader resource in the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRootSignature">
    <summary>Sets the layout of the compute root signature.</summary>
    <param name="pRootSignature">A pointer to the <see cref="ID3D12RootSignature" /> object.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetComputeRootUnorderedAccessView">
    <summary>Sets a CPU descriptor handle for the unordered-access-view resource in the compute root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetDescriptorHeaps">
    <summary>Changes the currently bound descriptor heaps that are associated with a command list.</summary>
    <param name="NumDescriptorHeaps">Number of descriptor heaps to bind.</param>
    <param name="ppDescriptorHeaps">
      <para>A pointer to an array of <see cref="ID3D12DescriptorHeap" /> objects for the heaps to set on the command list.</para>
      <para>You can only bind descriptor heaps of type <see cref="D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV" /> and <see cref="D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER" />.</para>
      <para>Only one descriptor heap of each type can be set at one time, which means a maximum of 2 heaps (one sampler, one CBV/SRV/UAV) can be set at one time.</para>
    </param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstant">
    <summary>Sets a constant in the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="SrcData">The source data for the constant to set.</param>
    <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the constant in the root signature.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRoot32BitConstants">
    <summary>Sets a group of constants in the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="Num32BitValuesToSet">The number of constants to set in the root signature.</param>
    <param name="pSrcData">The source data for the group of constants to set.</param>
    <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the first constant of the group in the root signature.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRootConstantBufferView">
    <summary>Sets a CPU descriptor handle for the constant buffer in the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">The GPU virtual address of the constant buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRootDescriptorTable">
    <summary>Sets a descriptor table into the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BaseDescriptor">A GPU_descriptor_handle object for the base descriptor to set.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRootShaderResourceView">
    <summary>Sets a CPU descriptor handle for the shader resource in the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">The GPU virtual address of the Buffer. Textures are not supported. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRootSignature">
    <summary>Sets the layout of the graphics root signature.</summary>
    <param name="pRootSignature">A pointer to the <see cref="ID3D12RootSignature" /> object.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetGraphicsRootUnorderedAccessView">
    <summary>Sets a CPU descriptor handle for the unordered-access-view resource in the graphics root signature.</summary>
    <param name="RootParameterIndex">The slot number for binding.</param>
    <param name="BufferLocation">The GPU virtual address of the buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetMarker">
    <summary>Not intended to be called directly.  Use the<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command list.</summary>
    <param name="Metadata">Internal.</param>
    <param name="pData">Internal.</param>
    <param name="Size">Internal.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetPipelineState">
    <summary>Sets all shaders and programs most of the fixed-function state of the graphics processing unit (GPU) pipeline.</summary>
    <param name="pPipelineState">Pointer to the <see cref="ID3D12PipelineState" /> containing the pipeline state data.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SetPredication">
    <summary>Sets a rendering predicate.</summary>
    <param name="pBuffer">The buffer, as an <see cref="ID3D12Resource" />, which must be in the <see cref="D3D12_RESOURCE_STATE_PREDICATION" /> or <see cref="D3D21_RESOURCE_STATE_INDIRECT_ARGUMENT" /> state (both values are identical, and provided as aliases for clarity), or <b>NULL</b> to disable predication.</param>
    <param name="AlignedBufferOffset">The aligned buffer offset, as a UINT64.</param>
    <param name="Operation">Specifies a <see cref="D3D12_PREDICATION_OP" />, such as D3D12_PREDICATION_OP_EQUAL_ZERO or D3D12_PREDICATION_OP_NOT_EQUAL_ZERO.</param>
  </member>
  <member name="ID3D12GraphicsCommandList.SOSetTargets">
    <summary>Sets the stream output buffer views.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting stream output buffers.</param>
    <param name="NumViews">The number of entries in the <i>pViews</i> array.</param>
    <param name="pViews">Specifies an array of <see cref="D3D12_STREAM_OUTPUT_BUFFER_VIEW" /> structures.</param>
  </member>
  <member name="ID3D12GraphicsCommandList">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering. Includes APIs for instrumenting the command list execution, and for setting and clearing the pipeline state.</para>
      <div>
        <b>Note</b>  The latest version of this interface is <see cref="ID3D12GraphicsCommandList1" /> introduced in the Windows 10 Creators Update. Applications targetting Windows 10 Creators Update should use the <b>ID3D12GraphicsCommandList1</b> interface instead of <b>ID3D12GraphicsCommandList</b>.</div>
    </summary>
  </member>
</doc>