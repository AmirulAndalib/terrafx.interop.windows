<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12Device5.CheckDriverMatchingIdentifier">
    <summary>
      <para>Reports the compatibility of serialized data, such as a serialized raytracing acceleration structure resulting from a call to <see cref="CopyRaytracingAccelerationStructure" /> with mode  <see cref="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE" />, with the current device/driver.</para>
    </summary>
    <param name="SerializedDataType">
      <para>The type of the serialized data. For more information, see <see cref="D3D12_SERIALIZED_DATA_TYPE" />.</para>
    </param>
    <param name="pIdentifierToCheck">
      <para>Identifier from the header of the serialized data to check with the driver. For more information, see <see cref="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER" />.</para>
    </param>
    <returns>
      <para>The returned compatibility status. For more information, see <see cref="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS" />.</para>
    </returns>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.CreateLifetimeTracker">
    <summary>
      <para>Creates a lifetime tracker associated with an application-defined callback; the callback receives notifications when the lifetime of a tracked object is changed.</para>
    </summary>
    <param name="pOwner">
      <para>Type: <b><see cref="ID3D12LifetimeOwner" />*</b></para>
      <para>A pointer to an <b>ID3D12LifetimeOwner</b> interface representing the application-defined callback.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the interface identifier (IID) of the interface to return in <i>ppvTracker</i>.</para>
    </param>
    <param name="ppvTracker">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives the requested interface pointer to the created object.</para>
    </param>
  </member>
  <member name="ID3D12Device5.CreateMetaCommand">
    <summary>
      <para>Creates an instance of the specified meta command.</para>
    </summary>
    <param name="CommandId">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (GUID) of the meta command that you wish to instantiate.</para>
    </param>
    <param name="NodeMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>For single-adapter operation, set this to zero. If there are multiple adapter nodes, set a bit to identify the node (one of the device's physical adapters) to which the meta command applies. Each bit in the mask corresponds to a single node. Only one bit must be set. See <a href="https://docs.microsoft.com//windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</para>
    </param>
    <param name="pCreationParametersData">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">void</a>*</b></para>
      <para>An optional pointer to a constant structure containing the values of the parameters for creating the meta command.</para>
    </param>
    <param name="CreationParametersDataSizeInBytes">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">SIZE_T</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pCreationParametersData</i>, if set, otherwise 0.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (GUID) of the interface that you wish to be returned in <i>ppMetaCommand</i>. This is expected to be the GUID of <see cref="ID3D12MetaCommand" />.</para>
    </param>
    <param name="ppMetaCommand">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives a pointer to the meta command. This is the address of a pointer to an <see cref="ID3D12MetaCommand" />, representing  the meta command created.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>DXGI_ERROR_UNSUPPORTED</para>
          </description>
          <description>
            <para>The current hardware does not support the algorithm being requested</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.CreateStateObject">
    <summary>
      <para>Creates an <see cref="ID3D12StateObject" />.</para>
    </summary>
    <param name="pDesc">
      <para>The description of the state object to create.</para>
    </param>
    <param name="riid">
      <para>The GUID of the interface to create. Use <i>__uuidof(ID3D12StateObject)</i>.</para>
    </param>
    <param name="ppStateObject">
      <para>The returned state object.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following values:</para>
      <list type="bullet">
        <item>
          <description>E_INVALIDARG if one of the input parameters is invalid.</description>
        </item>
        <item>
          <description>E_OUTOFMEMORY if sufficient memory is not available to create the handle.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> topic.
</description>
        </item>
      </list>
    </returns>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.EnumerateMetaCommandParameters">
    <summary>
      <para>Queries reflection metadata about the parameters of the specified meta command.</para>
    </summary>
    <param name="CommandId">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (GUID) of the meta command whose parameters you wish to be returned in <i>pParameterDescs</i>.</para>
    </param>
    <param name="Stage">
      <para>Type: <b>D3D12_META_COMMAND_PARAMETER_STAGE</b></para>
      <para>A <see cref="D3D12_META_COMMAND_PARAMETER_STAGE" /> specifying the stage of the parameters that you wish to be included in the query.</para>
    </param>
    <param name="pTotalStructureSizeInBytes">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>An optional pointer to a <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a> containing the size of the structure containing the parameter values, which you pass when creating/initializing/executing the meta command, as appropriate.</para>
    </param>
    <param name="pParameterCount">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a> containing the number of parameters to query for. This field determines the size of the <i>pParameterDescs</i> array, unless <i>pParameterDescs</i> is <b>nullptr</b>.</para>
    </param>
    <param name="pParameterDescs">
      <para>Type: <b>D3D12_META_COMMAND_PARAMETER_DESC*</b></para>
      <para>An optional pointer to an array of  <see cref="D3D12_META_COMMAND_PARAMETER_DESC" /> containing the descriptions of the parameters. Pass <b>nullptr</b> to have the parameter count returned in <i>pParameterCount</i>.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.EnumerateMetaCommands">
    <summary>
      <para>Queries reflection metadata about available meta commands.</para>
    </summary>
    <param name="pNumMetaCommands">
      <para>Type: [in, out] <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a> containing the number of meta commands to query for. This field determines the size of the <i>pDescs</i> array, unless <i>pDescs</i> is <b>nullptr</b>.</para>
    </param>
    <param name="pDescs">
      <para>Type: [out, optional] <b><see cref="D3D12_META_COMMAND_DESC" />*</b></para>
      <para>An optional pointer to an array of <see cref="D3D12_META_COMMAND_DESC" /> containing the descriptions of the available meta commands. Pass <code>nullptr</code> to have the number of available meta commands returned in <i>pNumMetaCommands</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.GetRaytracingAccelerationStructurePrebuildInfo">
    <summary>
      <para>Query the driver for resource requirements to build an acceleration structure.</para>
    </summary>
    <param name="pDesc">
      <para>Description of the acceleration structure build. This structure is shared with <see cref="BuildRaytracingAccelerationStructure" />.  For more information, see <see cref="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS" />.</para>
      <para>The implementation is allowed to look at all the CPU parameters in this struct and nested structs.  It may not inspect/dereference any GPU virtual addresses, other than to check to see if a pointer is NULL or not, such as the optional transform in <see cref="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC" />, without dereferencing it. In other words, the calculation of resource requirements for the acceleration structure does not depend on the actual geometry data (such as vertex positions), rather it can only depend on overall properties, such as the number of triangles, number of instances etc.</para>
    </param>
    <param name="pInfo">
      <para>The result of the query.</para>
    </param>
    <remarks>
      <para>The input acceleration structure description is the same as what goes into <see cref="BuildRaytracingAccelerationStructure" />. The result of this function lets the application provide the correct amount of output storage and scratch storage to <b>BuildRaytracingAccelerationStructure</b> given the same geometry.</para>
      <para>Builds can also be done with the same configuration passed to <b>GetAccelerationStructurePrebuildInfo</b> overall except equal or smaller counts for the number of geometries/instances or the  number of vertices/indices/AABBs in any given geometry.  In this case the storage requirements reported with the original sizes passed to <b>GetRaytracingAccelerationStructurePrebuildInfo</b> will be valid – the build may actually consume less space but not more.  This is handy for app scenarios where having conservatively large storage allocated for acceleration structures is fine.</para>
      <para>This method is on the device interface as opposed to command list on the assumption that drivers must be able to calculate resource requirements for an acceleration structure build from only looking at the CPU-visible portions of the call, without having to dereference any pointers to GPU memory containing actual vertex data, index data, etc.</para>
    </remarks>
    <seealso cref="ID3D12Device5" />
  </member>
  <member name="ID3D12Device5.RemoveDevice">
    <summary>
      <para>You can call <b>RemoveDevice</b> to indicate to the Direct3D 12 runtime that the GPU device encountered a problem, and can no longer be used. Doing so will cause all devices' monitored fences to be signaled. Your application typically doesn't need to explicitly call <b>RemoveDevice</b>.</para>
    </summary>
    <remarks>
      <para>Because device removal triggers all fences to be signaled to <code>UINT64_MAX</code>, you can create a callback for device removal using an event.</para>
      <code>HANDLE deviceRemovedEvent = CreateEventW(NULL, FALSE, FALSE, NULL);
assert(deviceRemovedEvent != NULL);
_deviceFence-&gt;SetEventOnCompletion(UINT64_MAX, deviceRemoved);

HANDLE waitHandle;
RegisterWaitForSingleObject(
  &amp;amp;amp;amp;amp;amp;waitHandle,
  deviceRemovedEvent,
  OnDeviceRemoved,
  _device.Get(), // Pass the device as our context
  INFINITE, // No timeout
  0 // No flags
);

void OnDeviceRemoved(PVOID context, BOOLEAN)
{
  ID3D12Device* removedDevice = (ID3D12Device*)context;
  HRESULT removedReason = removedDevice-&gt;GetDeviceRemovedReason();
  // Perform app-specific device removed operation, such as logging or inspecting DRED output
}
</code>
    </remarks>
  </member>
  <member name="ID3D12Device5">
    <summary>
      <para>Represents a virtual adapter.</para>
      <para>This interface extends <see cref="ID3D12Device4" />.</para>
      <blockquote>
        <para>[!NOTE]
This interface, introduced in Windows 10, version 1809, is the latest version of the <see cref="ID3D12Device" /> interface. Applications targeting Windows 10, version 1809 and later should use this interface instead of earlier versions.</para>
      </blockquote>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/win32/direct3d12/direct3d-12-interfaces">Core interfaces</seealso>
  </member>
</doc>