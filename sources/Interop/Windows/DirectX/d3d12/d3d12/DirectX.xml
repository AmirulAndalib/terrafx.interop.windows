<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.D3D12CreateDevice">
    <summary>
      <para>Creates a device that represents the display adapter.</para>
    </summary>
    <param name="pAdapter">
      <para>Type: <b>IUnknown*</b></para>
      <para>A pointer to the video adapter to use when creating a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>.
Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <see cref="IDXGIFactory1.EnumAdapters" />.</para>
      <para>
        <b>Note</b>  Don't mix the use of DXGI 1.0 (<see cref="IDXGIFactory" />) and DXGI 1.1 (<see cref="IDXGIFactory1" />) in an application.
Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application.</para>
    </param>
    <param name="MinimumFeatureLevel">
      <para>Type: <b><see cref="D3D_FEATURE_LEVEL" /></b></para>
      <para>The minimum <see cref="D3D_FEATURE_LEVEL" /> required for successful device creation.</para>
    </param>
    <param name="riid">
      <para>Type: <b><b>REFIID</b></b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the device interface.
This parameter, and <i>ppDevice</i>, can be addressed with the single macro
<see cref="IID_PPV_ARGS" />.</para>
    </param>
    <param name="ppDevice">
      <para>Type: <b><b>void</b>**</b></para>
      <para>A pointer to a memory block that receives a pointer to the device. Pass <b>NULL</b> to test if device creation would succeed, but to not actually create the device. If <b>NULL</b> is passed and device creation would succeed, <b>S_FALSE</b> is returned.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method can return one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
      <para>Possible return values include those documented for <see cref="CreateDXGIFactory1" /> and  <see cref="IDXGIFactory.EnumAdapters" />.</para>
      <para>If <b>ppDevice</b> is <b>NULL</b> and the function succeeds, <b>S_FALSE</b> is returned, rather than <b>S_OK</b>.</para>
    </returns>
    <remarks>
      <para>Direct3D 12 devices are singletons per adapter. If a Direct3D 12 device already exists in the current process for a given adapter, then a subsequent call to <b>D3D12CreateDevice</b> returns the existing device. If the current Direct3D 12 device is in a removed state (that is, <see cref="ID3D12Device.GetDeviceRemovedReason" /> returns a failing HRESULT), then <b>D3D12CreateDevice</b> fails instead of returning the existing device. The sameness of two adapters (that is, they have the same identity) is determined by comparing their LUIDs, not their pointers.</para>
      <para>In order to be sure to pick up the first adapter that supports D3D12, use the following code.</para>
      <code>void GetHardwareAdapter(IDXGIFactory4* pFactory, IDXGIAdapter1** ppAdapter)
{
    *ppAdapter = nullptr;
    for (UINT adapterIndex = 0; ; ++adapterIndex)
    {
        IDXGIAdapter1* pAdapter = nullptr;
        if (DXGI_ERROR_NOT_FOUND == pFactory-&gt;EnumAdapters1(adapterIndex, &amp;amp;amp;amp;amp;amp;pAdapter))
        {
            // No more adapters to enumerate.
            break;
        }

        // Check to see if the adapter supports Direct3D 12, but don't create the
        // actual device yet.
        if (SUCCEEDED(D3D12CreateDevice(pAdapter, D3D_FEATURE_LEVEL_11_0, _uuidof(ID3D12Device), nullptr)))
        {
            *ppAdapter = pAdapter;
            return;
        }
        pAdapter-&gt;Release();
    }
}

</code>
      <para>The function signature PFN_D3D12_CREATE_DEVICE is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <para>The <b>REFIID</b>, or <b>GUID</b>, of the interface to a device can be obtained by using the<code> __uuidof()</code> macro.
For example, <code>__uuidof</code>(<see cref="ID3D12Device" />) will get the <b>GUID</b> of the interface to a device.</para>
      <h4>Examples</h4>
      <para>Create a hardware based device, unless instructed to create a WARP software device.</para>
      <code>ComPtr&lt;IDXGIFactory4&gt; factory;
ThrowIfFailed(CreateDXGIFactory1(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;factory)));

if (m_useWarpDevice)
{
    ComPtr&lt;IDXGIAdapter&gt; warpAdapter;
    ThrowIfFailed(factory-&gt;EnumWarpAdapter(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;warpAdapter)));

    ThrowIfFailed(D3D12CreateDevice(
        warpAdapter.Get(),
        D3D_FEATURE_LEVEL_11_0,
        IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;m_device)
        ));
}
else
{
    ComPtr&lt;IDXGIAdapter1&gt; hardwareAdapter;
    GetHardwareAdapter(factory.Get(), &amp;amp;amp;amp;amp;amp;hardwareAdapter);

    ThrowIfFailed(D3D12CreateDevice(
        hardwareAdapter.Get(),
        D3D_FEATURE_LEVEL_11_0,
        IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;m_device)
        ));
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">Working Samples</seealso>
  </member>
  <member name="DirectX.D3D12CreateRootSignatureDeserializer">
    <summary>
      <para>Deserializes a root signature so you can determine the layout definition (<see cref="D3D12_ROOT_SIGNATURE_DESC" />).</para>
    </summary>
    <param name="pSrcData">
      <para>Type: <b>LPCVOID</b></para>
      <para>A pointer to the source data for the serialized root signature.</para>
    </param>
    <param name="SrcDataSizeInBytes">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">SIZE_T</a></b></para>
      <para>The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</para>
    </param>
    <param name="pRootSignatureDeserializerInterface">
      <para>Type: <b><b>REFIID</b></b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</para>
    </param>
    <param name="ppRootSignatureDeserializer">
      <para>Type: <b><b>void</b>**</b></para>
      <para>A pointer to a memory block that receives a pointer to the root signature deserializer.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This function has been superceded by <see cref="D3D12CreateVersionedRootSignatureDeserializer" />.</para>
      <para>If an application has a serialized root signature already or has a compiled shader that contains a root signature and wants to determine the layout definition, it can call <b>D3D12CreateRootSignatureDeserializer</b> to generate a <see cref="ID3D12RootSignatureDeserializer" /> interface. <see cref="ID3D12RootSignatureDeserializer.GetRootSignature" /> can return the deserialized data structure
(<see cref="D3D12_ROOT_SIGNATURE_DESC" />).
<b>ID3D12RootSignatureDeserializer</b> just owns the lifetime of the memory for the deserialized data structure.</para>
      <para>The <b>REFIID</b>, or <b>GUID</b>, of the interface to the root signature deserializer can be obtained by using the __uuidof() macro. For example, __uuidof(<see cref="ID3D12RootSignatureDeserializer" />) will get the <b>GUID</b> of the interface to a root signature deserializer.</para>
      <para>The function signature PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/creating-a-root-signature">Creating a Root Signature</seealso>
  </member>
  <member name="DirectX.D3D12CreateVersionedRootSignatureDeserializer">
    <summary>
      <para>Generates an interface that can return the deserialized data structure, via <see cref="GetUnconvertedRootSignatureDesc" />.</para>
    </summary>
    <param name="pSrcData">
      <para>Type: <b>LPCVOID</b></para>
      <para>A pointer to the source data for the serialized root signature.</para>
    </param>
    <param name="SrcDataSizeInBytes">
      <para>Type: <b>SIZE_T</b></para>
      <para>The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</para>
    </param>
    <param name="pRootSignatureDeserializerInterface">
      <para>Type: <b>REFIID</b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</para>
    </param>
    <param name="ppRootSignatureDeserializer">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives a pointer to the root signature deserializer.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>If an application has a serialized root signature already or has a compiled shader that contains a root signature and wants to determine the layout definition, it can call <b>D3D12CreateVersionedRootSignatureDeserializer</b> to generate a <see cref="ID3D12VersionedRootSignatureDeserializer" /> interface. <see cref="ID3D12VersionedRootSignatureDeserializer.GetRootSignatureDescAtVersion" /> can return the deserialized data structure
(<see cref="D3D12_ROOT_SIGNATURE_DESC1" />).
<b>ID3D12VersionedRootSignatureDeserializer</b> just owns the lifetime of the memory for the deserialized data structure.</para>
      <para>The <b>REFIID</b>, or <b>GUID</b>, of the interface to the root signature deserializer can be obtained by using the __uuidof() macro. For example, __uuidof(<see cref="ID3D12VersionedRootSignatureDeserializer" />) will get the <b>GUID</b> of the interface to a root signature deserializer.</para>
      <para>The function signature PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <para>This function supercedes <see cref="D3D12CreateRootSignatureDeserializer" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/creating-a-root-signature">Creating a Root Signature</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/root-signature-version-1-1">Root Signature Version 1.1</seealso>
  </member>
  <member name="DirectX.D3D12EnableExperimentalFeatures">
    <summary>
      <para>Enables a list of experimental features.</para>
    </summary>
    <param name="NumFeatures">
      <para>Type: <b>UINT</b></para>
      <para>The number of experimental features to enable.</para>
    </param>
    <param name="pIIDs">
      <para>Type: <b>const IID*</b></para>
      <para>
        <a href="https://docs.microsoft.com//visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <code>__in_ecount(NumFeatures)</code></para>
      <para>A pointer to an array of IDs that specify which of the available experimental features to enable.</para>
    </param>
    <param name="pConfigurationStructs">
      <para>Type: <b>void*</b></para>
      <para>
        <a href="https://docs.microsoft.com//visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <code>__in_ecount(NumFeatures)</code></para>
      <para>Structures that contain additional configuration details that some experimental features might need to be enabled.</para>
    </param>
    <param name="pConfigurationStructSizes">
      <para>Type: <b>UINT*</b></para>
      <para>
        <a href="https://docs.microsoft.com//visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <code>__in_ecount(NumFeatures)</code></para>
      <para>The sizes of any configuration structs passed in pConfigurationStructs parameter.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns an HRESULT success or error code that can include E_NOINTERFACE if an unrecognized feature is specified or Developer Mode is not enabled, or E_INVALIDARG if the configuration of a feature is in correct, the experimental features specified are not compatible, or other errors.</para>
    </returns>
    <remarks>
      <para>Call this function before device creation.</para>
      <para>Because the set of experimental features will change over time, and because these features may not be stable, they are intended for development and experimentation only. This is enforced by requiring Developer Mode to be active before any experimental features can be enabled.</para>
      <para>The set of experimental features that are currently supported can be found in the D3D12.h header, near the definition of the D3D12EnableExperimentalFeatures function; because experimental features are only made available infrequently, its typical to find that no experimental features are currently supported.</para>
      <para>Some experimental features might be identified by using an IID as the GUID. For these features, you can use D3D12GetDebugInterface, passing an IID as a parameter, to retrieve the interface for manipulating that feature.</para>
      <para>If this function is called again with a different list of features to enable, all current D3D12 devices are set to the DEVICE_REMOVED state.</para>
      <h4>Examples</h4>
      <para>This example shows what an experimental feature definition looks like.</para>
      <code>// --------------------------------------------------------------------------------------------------------------------------------
// Experimental Feature: D3D12ExperimentalShaderModels
//
// Use with D3D12EnableExperimentalFeatures to enable experimental shader model support,
// meaning shader models that haven't been finalized for use in retail.
//
// Enabling D3D12ExperimentalShaderModels needs no configuration struct, pass NULL in the pConfigurationStructs array.
//
// --------------------------------------------------------------------------------------------------------------------------------
static const UUID D3D12ExperimentalShaderModels = { /* 76f5573e-f13a-40f5-b297-81ce9e18933f */
    0x76f5573e,
    0xf13a,
    0x40f5,
    { 0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f }
};

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
  </member>
  <member name="DirectX.D3D12GetDebugInterface">
    <summary>
      <para>Gets a debug interface.</para>
      <para>Use <see cref="D3D12GetInterface" /> to directly access newer interfaces, especially downlevel.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the debug interface.
The <b>REFIID</b>, or <b>GUID</b>, of the debug interface can be obtained by using the __uuidof() macro.
For example, __uuidof(<see cref="ID3D12Debug" />) will get the <b>GUID</b> of the debug interface.</para>
    </param>
    <param name="ppvDebug">
      <para>Type: <b>void**</b></para>
      <para>The debug interface, as a pointer to pointer to void.
See
<see cref="ID3D12Debug" /> and
<see cref="ID3D12DebugDevice" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>The function signature PFN_D3D12_GET_DEBUG_INTERFACE is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <h4>Examples</h4>
      <para>Enable the D3D12 debug layer.</para>
      <code>// Enable the D3D12 debug layer.
{

    ComPtr&lt;ID3D12Debug&gt; debugController;
    if (SUCCEEDED(D3D12GetDebugInterface(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;debugController))))
    {
        debugController-&gt;EnableDebugLayer();
    }
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
  </member>
  <member name="DirectX.D3D12GetInterface">
    <summary>
      <para>Selects an SDK version at runtime when the system is in Windows Developer Mode. Supports debug, tools, <a href="https://docs.microsoft.com//windows/win32/direct3d12/use-dred">DRED</a>, and SDK configuration interfaces.</para>
    </summary>
    <param name="rclsid">
      <para>Type: _In_ <b><a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-oaut/bbde795f-5398-42d8-9f59-3613da03c318">REFCLSID</a></b></para>
      <para>The CLSID associated with the data and code that will be used to create the object.</para>
      <para>The following CLSIDs are defined.</para>
      <list type="bullet">
        <item>
          <description>DEFINE_GUID(CLSID_D3D12Debug,                        0xf2352aeb, 0xdd84, 0x49fe, 0xb9, 0x7b, 0xa9, 0xdc, 0xfd, 0xcc, 0x1b, 0x4f);</description>
        </item>
        <item>
          <description>DEFINE_GUID(CLSID_D3D12Tools,                        0xe38216b1, 0x3c8c, 0x4833, 0xaa, 0x09, 0x0a, 0x06, 0xb6, 0x5d, 0x96, 0xc8);</description>
        </item>
        <item>
          <description>DEFINE_GUID(CLSID_D3D12DeviceRemovedExtendedData,    0x4a75bbc4, 0x9ff4, 0x4ad8, 0x9f, 0x18, 0xab, 0xae, 0x84, 0xdc, 0x5f, 0xf2);</description>
        </item>
        <item>
          <description>DEFINE_GUID(CLSID_D3D12SDKConfiguration,             0x7cda6aca, 0xa03e, 0x49c8, 0x94, 0x58, 0x03, 0x34, 0xd2, 0x0e, 0x07, 0xce);</description>
        </item>
      </list>
      <para>They correspond, respectively, to the following interfaces.</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="ID3D12Debug interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D12Tools interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D12DeviceRemovedExtendedDataSettings interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D12SDKConfiguration interface" />
          </description>
        </item>
      </list>
    </param>
    <param name="riid">
      <para>Type: _In_ <b><a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-oaut/bbde795f-5398-42d8-9f59-3613da03c318">REFIID</a></b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the SDK configuration interface. The <b>REFIID</b>, or <b>GUID</b>, of the interface can be obtained by using the <code>__uuidof</code> macro. For example, <code>__uuidof(ID3D12SDKConfiguration)</code> will retrieve the <b>GUID</b> of the debug interface.</para>
    </param>
    <param name="ppvDebug">
      <para>Type: _COM_Outptr_opt_ <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">void</a>**</b></para>
      <para>The <code>out</code> parameter that contains the requested interface on return (for example, the SDK configuration interface), as a pointer to pointer to void. See <see cref="ID3D12SDKConfiguration" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, then it returns <b>S_OK</b>. Otherwise, it returns one of the <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a>.</para>
    </returns>
    <seealso cref="ID3D12Debug" />
    <seealso cref="ID3D12Tools" />
    <seealso cref="ID3D12DeviceRemovedExtendedDataSettings" />
    <seealso cref="ID3D12SDKConfiguration" />
  </member>
  <member name="DirectX.D3D12SerializeRootSignature">
    <summary>
      <para>Serializes a root signature version 1.0 that can be passed to <see cref="ID3D12Device.CreateRootSignature" />.</para>
    </summary>
    <param name="pRootSignature">
      <para>Type: <b>const <see cref="D3D12_ROOT_SIGNATURE_DESC" />*</b></para>
      <para>The description of the root signature, as a pointer to a <see cref="D3D12_ROOT_SIGNATURE_DESC" /> structure.</para>
    </param>
    <param name="Version">
      <para>Type: <b><see cref="D3D_ROOT_SIGNATURE_VERSION" /></b></para>
      <para>A <see cref="D3D_ROOT_SIGNATURE_VERSION" />-typed value that specifies the version of root signature.</para>
    </param>
    <param name="ppBlob">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</para>
    </param>
    <param name="ppErrorBlob">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a>**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This function has been superceded by <see cref="D3D12SerializeVersionedRootSignature" /> as of the Windows 10 Anniversary Update (14393).</para>
      <para>If an application procedurally generates a <see cref="D3D12_ROOT_SIGNATURE_DESC" /> data structure, it must pass a pointer to this <b>D3D12_ROOT_SIGNATURE_DESC</b> in a call to <b>D3D12SerializeRootSignature</b> to make the serialized form.
The application then passes the serialized form to which <i>ppBlob</i> points into <see cref="ID3D12Device.CreateRootSignature" />.</para>
      <para>If a shader has been authored with a root signature in it (when that capability is added), the compiled shader will contain a serialized root signature in it already.</para>
      <para>The function signature PFN_D3D12_SERIALIZE_ROOT_SIGNATURE is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <h4>Examples</h4>
      <para>Create an empty root signature.</para>
      <code>CD3DX12_ROOT_SIGNATURE_DESC rootSignatureDesc;
rootSignatureDesc.Init(0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT);

ComPtr&lt;ID3DBlob&gt; signature;
ComPtr&lt;ID3DBlob&gt; error;
ThrowIfFailed(D3D12SerializeRootSignature(&amp;amp;amp;amp;amp;amp;rootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1, &amp;amp;amp;amp;amp;amp;signature, &amp;amp;amp;amp;amp;amp;error));
ThrowIfFailed(m_device-&gt;CreateRootSignature(0, signature-&gt;GetBufferPointer(), signature-&gt;GetBufferSize(), IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;m_rootSignature)));

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/creating-a-root-signature">Creating a Root Signature</seealso>
  </member>
  <member name="DirectX.D3D12SerializeVersionedRootSignature">
    <summary>
      <para>Serializes a root signature of any version that can be passed to <see cref="ID3D12Device.CreateRootSignature" />.</para>
    </summary>
    <param name="pRootSignature">
      <para>Type: <b>const <see cref="D3D12_VERSIONED_ROOT_SIGNATURE_DESC" />*</b></para>
      <para>Specifies a <see cref="D3D12_VERSIONED_ROOT_SIGNATURE_DESC" /> that contains a description of any version of a root signature.</para>
    </param>
    <param name="ppBlob">
      <para>Type: <b>ID3DBlob**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</para>
    </param>
    <param name="ppErrorBlob">
      <para>Type: <b>ID3DBlob**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns <b>S_OK</b> if successful; otherwise, returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>If an application procedurally generates a <see cref="D3D12_ROOT_SIGNATURE_DESC1" /> data structure, it must pass a pointer to this <b>D3D12_ROOT_SIGNATURE_DESC1</b> in a call to <b>D3D12SerializeVersionedRootSignature</b> to make the serialized form.
The application then passes the serialized form to which <i>ppBlob</i> points into <see cref="ID3D12Device.CreateRootSignature" />.</para>
      <para>If a shader has been authored with a root signature in it (when that capability is added), the compiled shader will contain a serialized root signature in it already.</para>
      <para>The function signature PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <para>This function was released with the Windows 10 Anniversary Update (14393) and supersedes <see cref="D3D12SerializeRootSignature" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/creating-a-root-signature">Creating a Root Signature</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/d3dx12serializeversionedrootsignature">D3DX12SerializeVersionedRootSignature</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/root-signature-version-1-1">Root Signature Version 1.1</seealso>
  </member>
</doc>