<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_HEAP_FLAGS">
    <summary>Specifies heap options, such as whether the heap can contain textures, and whether resources are shared across adapters.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_NONE">
    <summary>No options are specified.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_SHARED">
    <summary>The heap is shared. Refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/shared-heaps">Shared Heaps</a>.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_DENY_BUFFERS">
    <summary>The heap isn't allowed to contain buffers.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_DISPLAY">
    <summary>The heap is allowed to contain swap-chain surfaces.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER">
    <summary>The heap is allowed to share resources across adapters. Refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/shared-heaps">Shared Heaps</a>. A protected session cannot be mixed with resources that are shared across adapters.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES">
    <summary>The heap is not allowed to store Render Target (RT) and/or Depth-Stencil (DS) textures.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES">
    <summary>The heap is not allowed to contain resources with D3D12_RESOURCE_DIMENSION_TEXTURE1D, D3D12_RESOURCE_DIMENSION_TEXTURE2D, or D3D12_RESOURCE_DIMENSION_TEXTURE3D unless either D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET or D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL are present. Refer to <see cref="D3D12_RESOURCE_DIMENSION" /> and <see cref="D3D12_RESOURCE_FLAGS" />.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_HARDWARE_PROTECTED">
    <summary>Unsupported. Do not use.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH">
    <summary>The heap supports MEM_WRITE_WATCH functionality, which causes the system to track the pages that are written to in the committed memory region. This flag can't be combined with the D3D12_HEAP_TYPE_DEFAULT or D3D12_CPU_PAGE_PROPERTY_UNKNOWN flags. Applications are discouraged from using this flag themselves because it prevents tools from using this functionality.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS">
    <summary>
      <para>Ensures that atomic operations will be atomic on this heap's memory, according to components able to see the memory.</para>
      <para>Creating a heap with this flag will fail under either of these conditions.</para>
      <list type="bullet">
        <item>
          <description>The heap type is <b>D3D12_HEAP_TYPE_DEFAULT</b>, and the heap can be visible on multiple nodes, but the device does <i>not</i> support <see cref="D3D12_CROSS_NODE_SHARING_TIER_3" />.</description>
        </item>
        <item>
          <description>The heap is CPU-visible, but the heap type is <i>not</i><b>D3D12_HEAP_TYPE_CUSTOM</b>.</description>
        </item>
      </list>
      <para>Note that heaps with this flag might be a limited resource on some systems.</para>
    </summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT">
    <summary>
      <para>The heap is created in a non-resident state and must be made resident using <see cref="ID3D12Device.MakeResident" /> or <see cref="ID3D12Device3.EnqueueMakeResident" />.</para>
      <para>By default, the final step of heap creation is to make the heap resident, so this flag skips this step and allows the application to decide when to do so.</para>
    </summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_CREATE_NOT_ZEROED">
    <summary>Allows the OS to not zero the heap created. By default, committed resources and heaps are almost always zeroed upon creation. This flag allows this to be elided in some scenarios. However, it doesn't guarantee it. For example, memory coming from other processes still needs to be zeroed for data protection and process isolation. This can lower the overhead of creating the heap.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES">
    <summary>The heap is allowed to store all types of buffers and/or textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS">
    <summary>The heap is only allowed to store buffers. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES">
    <summary>The heap is only allowed to store non-RT, non-DS textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </member>
  <member name="D3D12_HEAP_FLAGS.D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES">
    <summary>The heap is only allowed to store RT and/or DS textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </member>
</doc>