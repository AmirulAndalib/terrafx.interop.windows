<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12CommandList.GetType">
    <summary>
      <para>Gets the type of the command list, such as direct, bundle, compute, or copy.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D3D12_COMMAND_LIST_TYPE" /></b></para>
      <para>This method returns the type of the command list,
as a <see cref="D3D12_COMMAND_LIST_TYPE" /> enumeration constant,
such as direct, bundle, compute, or copy.</para>
    </returns>
    <seealso cref="ID3D12CommandList" />
  </member>
  <member name="ID3D12CommandList">
    <summary>
      <para>An interface from which <see cref="ID3D12GraphicsCommandList" /> inherits. It represents an ordered set of commands that the GPU executes, while allowing for extension to support other command lists than just those for graphics (such as compute and copy).</para>
    </summary>
    <remarks>
      <para>Use <see cref="ID3D12Device.CreateCommandList" /> to create a command list object.</para>
      <para>See also <see cref="ID3D12GraphicsCommandList" />, which derives from ID3D12CommandList.</para>
      <para>A command list corresponds to a set of commands that the graphics processing unit (GPU) executes.  Commands set state, draw, clear, copy, and so on.</para>
      <para>Direct3D 12 command lists only support these 2 levels of indirection:</para>
      <list type="bullet">
        <item>
          <description>A direct command list corresponds to a command buffer that the GPU can execute.
</description>
        </item>
        <item>
          <description>A bundle can be executed only directly via a direct command list.
</description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12nBodyGravity</a> sample uses <b>ID3D12CommandList</b> as follows:</para>
      <code>DWORD D3D12nBodyGravity.AsyncComputeThreadProc(int threadIndex)
{
    ID3D12CommandQueue* pCommandQueue = m_computeCommandQueue[threadIndex].Get();
    ID3D12CommandAllocator* pCommandAllocator = m_computeAllocator[threadIndex].Get();
    ID3D12GraphicsCommandList* pCommandList = m_computeCommandList[threadIndex].Get();
    ID3D12Fence* pFence = m_threadFences[threadIndex].Get();

    while (0 == InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_terminating))
    {
        // Run the particle simulation.
        Simulate(threadIndex);

        // Close and execute the command list.
        ThrowIfFailed(pCommandList-&gt;Close());
        ID3D12CommandList* ppCommandLists[] = { pCommandList };

        pCommandQueue-&gt;ExecuteCommandLists(1, ppCommandLists);

        // Wait for the compute shader to complete the simulation.
        UINT64 threadFenceValue = InterlockedIncrement(&amp;amp;amp;amp;amp;amp;m_threadFenceValues[threadIndex]);
        ThrowIfFailed(pCommandQueue-&gt;Signal(pFence, threadFenceValue));
        ThrowIfFailed(pFence-&gt;SetEventOnCompletion(threadFenceValue, m_threadFenceEvents[threadIndex]));
        WaitForSingleObject(m_threadFenceEvents[threadIndex], INFINITE);

        // Wait for the render thread to be done with the SRV so that
        // the next frame in the simulation can run.
        UINT64 renderContextFenceValue = InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex]);
        if (m_renderContextFence-&gt;GetCompletedValue() &lt; renderContextFenceValue)
        {
            ThrowIfFailed(pCommandQueue-&gt;Wait(m_renderContextFence.Get(), renderContextFenceValue));
            InterlockedExchange(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex], 0);
        }

        // Swap the indices to the SRV and UAV.
        m_srvIndex[threadIndex] = 1 - m_srvIndex[threadIndex];

        // Prepare for the next frame.
        ThrowIfFailed(pCommandAllocator-&gt;Reset());
        ThrowIfFailed(pCommandList-&gt;Reset(pCommandAllocator, m_computeState.Get()));
    }

    return 0;
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12DeviceChild" />
    <seealso cref="ID3D12GraphicsCommandList" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/setting-descriptor-heaps">Setting descriptor heaps</seealso>
  </member>
</doc>