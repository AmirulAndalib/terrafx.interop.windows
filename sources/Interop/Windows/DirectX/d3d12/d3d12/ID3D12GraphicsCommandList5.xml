<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12GraphicsCommandList5.RSSetShadingRate">
    <summary>Sets the base shading rate, and combiners, for variable-rate shading (VRS). For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3d12/vrs">Variable-rate shading (VRS)</a>.</summary>
    <param name="baseShadingRate">A constant from the <see cref="D3D12_SHADING_RATE" /> enumeration describing the base shading rate to set.</param>
    <param name="combiners">
      <para>An optional pointer to a constant array of <see cref="D3D12_SHADING_RATE_COMBINER" /> containing the shading rate combiners to set. The count of <see cref="D3D12_SHADING_RATE_COMBINER" /> elements in the array must be equal to the constant <a href="https://docs.microsoft.com//windows/win32/direct3d12/constants">D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT</a>, which is equal to <b>2</b>.</para>
      <para>Because per-primitive and screen-space image-based VRS isn't supported on Tier1 <a href="https://docs.microsoft.com//windows/win32/direct3d12/vrs">Variable-rate shading (VRS)</a>, for these values to be meaningful, the adapter requires Tier2 VRS support. See <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS6" /> and <see cref="D3D12_VARIABLE_SHADING_RATE_TIER" />.</para>
      <para>A <b>NULL</b> pointer is equivalent to the default shading combiners, which are both <see cref="D3D12_SHADING_RATE_COMBINER_PASSTHROUGH" />.</para>
      <para>The algorithm for final shading-rate is determined by the following.</para>
      <code>postRasterizerRate = ApplyCombiner(Combiners[0], CommandListShadingRate, Primitive-&gt;PrimitiveSpecifiedShadingRate); finalRate = ApplyCombiner(Combiners[1], postRasterizerRate, ScreenSpaceImage[xy]);</code>
      <para>where <code>ApplyCombiner</code> is</para>
      <code>UINT ApplyCombiner(D3D12_SHADING_RATE_COMBINER combiner, UINT a, UINT b) { MaxShadingRate = options6.AdditionalShadingRatesSupported ? 4 : 2; switch (combiner) { case D3D12_SHADING_RATE_COMBINER_PASSTHROUGH: // default return a; case D3D12_SHADING_RATE_COMBINER_OVERRIDE: return b; case D3D12_SHADING_RATE_COMBINER_MAX: return max(a, b); case D3D12_SHADING_RATE_COMBINER_MIN: return min(a, b); case D3D12_SHADING_RATE_COMBINER_SUM: return min(MaxShadingRate, a + b); case default: return a; } }</code>
    </param>
  </member>
  <member name="ID3D12GraphicsCommandList5.RSSetShadingRateImage">
    <summary>Sets the screen-space shading-rate image for variable-rate shading (VRS). For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3d12/vrs">Variable-rate shading (VRS)</a>. This method requires Tier2 <a href="https://docs.microsoft.com//windows/desktop/direct3d12/vrs">Variable-rate shading (VRS)</a> support. See <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS6" /> and <see cref="D3D12_VARIABLE_SHADING_RATE_TIER" />.</summary>
    <param name="shadingRateImage">
      <para>An optional pointer to an <see cref="ID3D12Resource" /> representing a screen-space shading-rate image. If <b>NULL</b>, the effect is the same as having a shading-rate image where all values are a shading rate of 1x1.</para>
      <para>This texture must have the <see cref="D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE" /> state applied.</para>
      <para>The tile-size of the shading-rate image can be determined via <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS6" />. The size of the shading-rate image should therefore be</para>
      <code>ceil((float)rtWidth / VRSTileSize), ceil((float)rtHeight / VRSTileSize)</code>
      <para>The shading-rate image must be a 2D texture with a single mip, and format <see cref="DXGI_FORMAT_R8_UINT" />. Each texel must be a value corresponding to <see cref="D3D12_SHADING_RATE" />. It must have layout <see cref="D3D12_TEXTURE_LAYOUT_UNKNOWN" /> and can't be a depth-stencil, render-target, simultaneous-access, or cross-adapter resource.</para>
      <para>As (0, 0) is the top left in DirectX, a too-small or large shading-rate image results in the bottom or right having no shading-rate image area, or the image extending in these directions. When there is excess, it is ignored (but legal), and when the image is too small, all out-of-bounds areas in the bottom and right will have the default shading rate of 1x1 from the image (however, this does not mean that is the final shading rate. The combiners will still be applied to this 1x1 default value).</para>
    </param>
  </member>
  <member name="ID3D12GraphicsCommandList5">
    <summary>Encapsulates a list of graphics commands for rendering, extending the interface to support variable-rate shading (VRS). For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3d12/vrs">Variable-rate shading (VRS)</a>.</summary>
  </member>
</doc>