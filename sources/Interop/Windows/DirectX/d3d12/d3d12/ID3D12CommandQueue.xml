<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12CommandQueue.BeginEvent">
    <summary>
      <para>Not intended to be called directly.  Use the
<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command queue.</para>
    </summary>
    <param name="Metadata">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Internal.</para>
    </param>
    <param name="pData">
      <para>Type: <b>const void*</b></para>
      <para>Internal.</para>
    </param>
    <param name="Size">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Internal.</para>
    </param>
    <remarks>
      <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
      <para>To mark the start of an instrumentation region at the current location within a D3D12 command queue, use the <b>PIXBeginEvent</b> function or <b>PIXScopedEvent</b> macro.  These are provided by the <a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.CopyTileMappings">
    <summary>
      <para>Copies mappings from a source reserved resource to a destination reserved resource.</para>
    </summary>
    <param name="pDstResource">
      <para>A pointer to the destination reserved resource.</para>
    </param>
    <param name="pDstRegionStartCoordinate">
      <para>A pointer to a
<see cref="D3D12_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the destination reserved resource.</para>
    </param>
    <param name="pSrcResource">
      <para>A pointer to the source reserved resource.</para>
    </param>
    <param name="pSrcRegionStartCoordinate">
      <para>A pointer to a <see cref="D3D12_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the source reserved resource.</para>
    </param>
    <param name="pRegionSize">
      <para>A pointer to a <see cref="D3D12_TILE_REGION_SIZE" /> structure that describes the size of the reserved region.</para>
    </param>
    <param name="Flags">
      <para>One member of <see cref="D3D12_TILE_MAPPING_FLAGS" />.</para>
    </param>
    <remarks>
      <para>Use <b>CopyTileMappings</b> to copy the tile mappings from one reserved resource to another, either to duplicate a resource mapping, or to initialize a new mapping before modifying it using <see cref="UpdateTileMappings" />.</para>
      <para>
        <b>CopyTileMappings</b> helps with tasks such as shifting mappings around within and across reserved resources, for example, scrolling tiles.
The source and destination regions can overlap; the result of the copy in this situation is as if the source was saved to a temporary location
and from there written to the destination.</para>
      <para>The destination and the source regions must each entirely fit in their resource or behavior is undefined and the debug layer will emit an error.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
    <seealso cref="UpdateTileMappings" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/volume-tiled-resources">Volume Tiled Resources</seealso>
  </member>
  <member name="ID3D12CommandQueue.EndEvent">
    <summary>
      <para>Not intended to be called directly.  Use the
<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command queue.</para>
    </summary>
    <remarks>
      <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
      <para>To mark the end of an instrumentation region at the current location within a D3D12 command queue, use the <b>PIXEndEvent</b> function or <b>PIXScopedEvent</b> macro.  These are provided by the <a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.ExecuteCommandLists">
    <summary>
      <para>Submits an array of command lists for execution.</para>
    </summary>
    <param name="NumCommandLists">
      <para>The number of command lists to be executed.</para>
    </param>
    <param name="ppCommandLists">
      <para>The array of <see cref="ID3D12CommandList" /> command lists to be executed.</para>
    </param>
    <remarks>
      <para>Calling <b>ExecuteCommandLists</b> twice in succession (from the same thread, or different threads) guarantees that the first workload (A) finishes before the second workload (B). Calling <b>ExecuteCommandLists</b> with <i>two</i> command lists allows the driver to merge the two command lists such that the second command list (D) may begin executing work before all work from the first (C) has finished. Specifically, your application is allowed to insert a fence signal or wait between A and B, and the driver has no visibility into this, so the driver must ensure that everything in A is complete before the fence operation. There is no such opportunity in a single call to the API, so the driver is able to optimize that scenario.</para>
      <para>The driver is free to patch the submitted command lists. It is the calling application’s responsibility to ensure that the graphics processing unit (GPU) is not currently reading the any of the submitted command lists from a previous execution.</para>
      <para>Applications are encouraged to batch together command list executions to reduce fixed costs associated with submitted commands to the GPU.</para>
      <h3>Runtime validation</h3>
      <para>Bundles can't be submitted to a command queue directly. If a bundle is passed to this method, the runtime will drop the call. The runtime will also drop the call if the <see cref="Close" /> function has not been called on one or more of the command lists.</para>
      <para>The runtime will detect if the command allocators associated with the command lists have been reset after <see cref="Close" /> was called.  The runtime will drop the call and remove the device in this situation.</para>
      <para>The runtime will drop the call and remove the device if the command queue fence indicates that a previous execution of any of the command lists has not yet completed.</para>
      <para>The runtime will validate the "before" and "after" states of resource transition barriers inside of <b>ExecuteCommandLists</b>.  If the “before” state of a transition does not match up with the “after” state of a previous transition, then the runtime will drop the call and remove the device.</para>
      <para>The runtime will validate the “before” and “after” states of queries used by the command lists.  If an error is detected, then the runtime will drop the call and remove the device.</para>
      <h3>Debug layer</h3>
      <para>The debug layer issues errors for all cases where the runtime would drop the call.</para>
      <para>The debug layer issues an error if it detects that any resource referenced by the command lists, including queries, has been destroyed.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.GetClockCalibration">
    <summary>
      <para>This method samples the CPU and GPU timestamp counters at the same moment in time.</para>
    </summary>
    <param name="pGpuTimestamp">
      <para>Type: <b>UINT64*</b></para>
      <para>The value of the GPU timestamp counter.</para>
    </param>
    <param name="pCpuTimestamp">
      <para>Type: <b>UINT64*</b></para>
      <para>The value of the CPU timestamp counter.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>For more information, refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/timing">Timing</a>.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.GetDesc">
    <summary>
      <para>Gets the description of the command queue.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D3D12_COMMAND_QUEUE_DESC" /></b></para>
      <para>The description of the command queue, as a <see cref="D3D12_COMMAND_QUEUE_DESC" /> structure.</para>
    </returns>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.GetTimestampFrequency">
    <summary>
      <para>This method is used to determine the rate at which the GPU timestamp counter increments.</para>
    </summary>
    <param name="pFrequency">
      <para>Type: <b>UINT64*</b></para>
      <para>The GPU timestamp counter frequency (in ticks/second).</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>For more information, refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/timing">Timing</a>.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.SetMarker">
    <summary>
      <para>Not intended to be called directly.  Use the
<a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">PIX event runtime</a> to insert events into a command queue.</para>
    </summary>
    <param name="Metadata">
      <para>Type: <b>UINT</b></para>
      <para>Internal.</para>
    </param>
    <param name="pData">
      <para>Type: <b>const void*</b></para>
      <para>Internal.</para>
    </param>
    <param name="Size">
      <para>Type: <b>UINT</b></para>
      <para>Internal.</para>
    </param>
    <remarks>
      <para>This is a support method used internally by the PIX event runtime.  It is not intended to be called directly.</para>
      <para>To insert instrumentation markers at the current location within a D3D12 command queue, use the <b>PIXSetMarker</b> function.  This is provided by the <a href="https://devblogs.microsoft.com/pix/winpixeventruntime/">WinPixEventRuntime</a> NuGet package.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
  </member>
  <member name="ID3D12CommandQueue.Signal">
    <summary>
      <para>Updates a fence to a specified value.</para>
    </summary>
    <param name="pFence">
      <para>Type: <b><see cref="ID3D12Fence" />*</b></para>
      <para>A pointer to the <see cref="ID3D12Fence" /> object.</para>
    </param>
    <param name="Value">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT64</a></b></para>
      <para>The value to set the fence to.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Use this method to set a fence value from the GPU side. Use <see cref="ID3D12Fence.Signal" /> to set a fence from the CPU side.</para>
      <h4>Examples</h4>
      <para>Adds a signal to the command queue, then waits for the compute shader to complete the simulation, finally signal and increment the fence value.</para>
      <code>// Wait for the compute shader to complete the simulation.
UINT64 threadFenceValue = InterlockedIncrement(&amp;amp;amp;amp;amp;amp;m_threadFenceValues[threadIndex]);
ThrowIfFailed(pCommandQueue-&gt;Signal(pFence, threadFenceValue));
ThrowIfFailed(pFence-&gt;SetEventOnCompletion(threadFenceValue, m_threadFenceEvents[threadIndex]));
WaitForSingleObject(m_threadFenceEvents[threadIndex], INFINITE);

</code>
      <code>// Add a signal command to the queue.
ThrowIfFailed(m_commandQueue-&gt;Signal(m_renderContextFence.Get(), m_renderContextFenceValue));

</code>
      <code>// Signal and increment the fence value.
ThrowIfFailed(m_commandQueue-&gt;Signal(m_renderContextFence.Get(), m_renderContextFenceValue));
m_renderContextFenceValue++;

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/win32/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
    <seealso href="https://docs.microsoft.com//windows/win32/direct3d12/user-mode-heap-synchronization">Multi-engine synchronization</seealso>
  </member>
  <member name="ID3D12CommandQueue.UpdateTileMappings">
    <summary>
      <para>Updates mappings of tile locations in reserved resources to memory locations in a resource heap.</para>
    </summary>
    <param name="pResource">
      <para>A pointer to the reserved resource.</para>
    </param>
    <param name="NumResourceRegions">
      <para>The number of reserved resource regions.</para>
    </param>
    <param name="pResourceRegionStartCoordinates">
      <para>An array of <see cref="D3D12_TILED_RESOURCE_COORDINATE" /> structures that describe the starting coordinates of the reserved resource regions. The <i>NumResourceRegions</i> parameter specifies the number of <b>D3D12_TILED_RESOURCE_COORDINATE</b> structures in the array.</para>
    </param>
    <param name="pResourceRegionSizes">
      <para>An array of <see cref="D3D12_TILE_REGION_SIZE" /> structures that describe the sizes of the reserved resource regions. The <i>NumResourceRegions</i> parameter specifies the number of <b>D3D12_TILE_REGION_SIZE</b> structures in the array.</para>
    </param>
    <param name="pHeap">
      <para>A pointer to the resource heap.</para>
    </param>
    <param name="NumRanges">
      <para>The number of tile  ranges.</para>
    </param>
    <param name="pRangeFlags">
      <para>A pointer to an  array of <see cref="D3D12_TILE_RANGE_FLAGS" /> values that describes each tile range. The <i>NumRanges</i> parameter specifies the number of values in the array.</para>
    </param>
    <param name="pHeapRangeStartOffsets">
      <para>An array of offsets into the resource heap. These are 0-based tile offsets, counting in tiles (not bytes).</para>
    </param>
    <param name="pRangeTileCounts">
      <para>An array of tiles.
An array of values that specify the number of tiles in each tile range. The <i>NumRanges</i> parameter specifies the number of values in the array.</para>
    </param>
    <param name="Flags">
      <para>A combination of <see cref="D3D12_TILE_MAPPING_FLAGS" /> values that are combined by using a bitwise OR operation.</para>
    </param>
    <remarks>
      <para>Use <b>UpdateTileMappings</b> to map the virtual pages of a reserved resource to the physical pages of a heap. The mapping does not have to be in order. The operation is similar to  <see cref="ID3D11DeviceContext2.UpdateTileMappings" /> with the one key difference that D3D12 allows a reserved resource to have tiles from multiple heaps.</para>
      <para>In a single call to <b>UpdateTileMappings</b>, you can map one or more ranges of resource tiles to one or more ranges of heap tiles.</para>
      <para>You can organize the parameters of  <b>UpdateTileMappings</b> in these ways to perform an update:</para>
      <list type="bullet">
        <item>
          <description>
            <b>Reserved resource whose mappings are updated.</b> Mappings start off all NULL when a resource is initially created.
</description>
        </item>
        <item>
          <description>
            <b>Set of tile regions on the reserved resource whose mappings are updated.</b> You can make one <b>UpdateTileMappings</b> call to update many mappings or multiple calls with a bit more API call overhead as well if that is more convenient. <list type="bullet"><item><description><i>NumResourceRegions</i> specifies how many regions there are.</description></item><item><description><i>pResourceRegionStartCoordinates</i> and <i>pResourceRegionSizes</i> are each arrays that identify the start location and extend of each region. If <i>NumResourceRegions</i> is 1, for convenience either or both of the arrays that describe the regions can be NULL.  NULL for <i>pResourceRegionStartCoordinates</i> means the start coordinate is all 0s, and NULL for <i>pResourceRegionSizes</i> identifies a default region that is the full set of tiles for the entire reserved resource, including all mipmaps, array slices, or both.  </description></item><item><description><para>If <i>pResourceRegionStartCoordinates</i> isn't NULL and <i>pResourceRegionSizes</i> is NULL, the region size defaults to 1 tile for all regions.  This makes it easy to define mappings for a set of individual tiles each at disparate locations by providing an array of locations in <i>pResourceRegionStartCoordinates</i> without having to send an array of <i>pResourceRegionSizes</i> all set to 1.</para></description></item></list><para>The updates are applied from first region to last; so, if regions overlap in a single call, the updates later in the list overwrite the areas that overlap with previous updates.</para></description>
        </item>
        <item>
          <description>
            <b>Heap that provides memory where tile mappings can go.</b>  If <b>UpdateTileMappings</b> only defines NULL mappings, you don't need to specify a heap.</description>
        </item>
        <item>
          <description>
            <b>Set of tile ranges where mappings are going.</b> Each given tile range can specify one of a few types of ranges: a range of tiles in a heap (default), a count of tiles in the reserved resource to map to a single tile in a heap (sharing the tile), a count of tile mappings in the reserved resource to skip and leave as they are, or a count of tiles in the heap to map to NULL.<i>NumRanges</i> specifies the number of tile ranges, where the total tiles identified across all ranges must match the total number of tiles in the tile regions from the previously described reserved resource.  Mappings are defined by iterating through the tiles in the tile regions in sequential order - x then y then z order for box regions - while walking through the set of tile ranges in sequential order.  The breakdown of tile regions doesn't have to line up with the breakdown of tile ranges, but the total number of tiles on both sides must be equal so that each reserved resource tile specified has a mapping specified.
<para><i>pRangeFlags</i>, <i>pHeapRangeStartOffsets</i>, and <i>pRangeTileCounts</i> are all arrays, of size <i>NumRanges</i>, that describe the tile ranges.  If <i>pRangeFlags</i> is NULL, all ranges are sequential tiles in the heap; otherwise, for each range i,<i>pRangeFlags[i]</i> identifies how the mappings in that range of tiles work:</para><list type="bullet"><item><description>If <i>pRangeFlags[i]</i> is <b>D3D12_TILE_RANGE_FLAG_NONE</b>, that range defines sequential tiles in the heap, with the number of tiles being <i>pRangeTileCounts[i]</i> and the starting location <i>pHeapRangeStartOffsets[i]</i>.  If <i>NumRanges</i> is 1, <i>pRangeTileCounts</i> can be NULL and defaults to the total number of tiles specified by all the tile regions.
</description></item><item><description>If <i>pRangeFlags[i]</i> is <b>D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE</b>, <i>pHeapRangeStartOffsets[i]</i> identifies the single tile in the heap to map to, and <i>pRangeTileCounts[i]</i> specifies how many tiles from the tile regions to map to that heap location.  If <i>NumRanges</i> is 1, <i>pRangeTileCounts</i> can be NULL and defaults to the total number of tiles specified by all the tile regions.
</description></item><item><description>If <i>pRangeFlags[i]</i> is <b>D3D12_TILE_RANGE_FLAG_NULL</b>, <i>pRangeTileCounts[i]</i> specifies how many tiles from the tile regions to map to NULL.  If <i>NumRanges</i> is 1, <i>pRangeTileCounts</i> can be NULL and defaults to the total number of tiles specified by all the tile regions. <i>pHeapRangeStartOffsets[i]</i> is ignored for NULL mappings.
</description></item><item><description>If <i>pRangeFlags[i]</i> is <b>D3D12_TILE_RANGE_FLAG_SKIP</b>, <i>pRangeTileCounts[i]</i> specifies how many tiles from the tile regions to skip over and leave existing mappings unchanged for.  This can be useful if a tile region conveniently bounds an area of tile mappings to update except with some exceptions that need to be left the same as whatever they were mapped to before. <i>pHeapRangeStartOffsets[i]</i> is ignored for SKIP mappings.
</description></item></list></description>
        </item>
      </list>
      <para>Reserved resources must follow the same rules for tile aliasing, initialization, and data inheritance as placed resources. See <see cref="CreatePlacedResource" /> for more details.</para>
      <para>Here are some examples of common <b>UpdateTileMappings</b> cases:</para>
      <h4>Examples</h4>
      <para>The examples reference the following structures and enums:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="D3D12_TILED_RESOURCE_COORDINATE" />
          </description>
        </item>
        <item>
          <description>
            <see cref="D3D12_TILE_REGION_SIZE" />
          </description>
        </item>
        <item>
          <description>
            <see cref="D3D12_TILE_RANGE_FLAGS" />
          </description>
        </item>
      </list>
      <para>Clearing an entire surface's mappings to NULL</para>
      <code>// - NULL for pResourceRegionStartCoordinates and pResourceRegionSizes defaults to the entire resource
// - NULL for pHeapRangeStartOffsets since it isn't needed for mapping tiles to NULL
// - NULL for pRangeTileCounts when NumRanges is 1 defaults to the same number of tiles as the resource region (which is
//   the entire surface in this case)
//
UINT RangeFlags = D3D12_TILE_RANGE_FLAG_NULL;
pCommandQueue-&gt;UpdateTileMappings(pResource, 1, NULL, NULL, NULL, 1, &amp;amp;amp;amp;amp;amp;RangeFlags, NULL, NULL, D3D12_TILE_MAPPING_FLAG_NONE);

</code>
      <para>Mapping a region of tiles to a single tile:</para>
      <code>// - This maps a 2x3 tile region at tile offset (1,1) in a resource to tile [12] in a heap
//
D3D12_TILED_RESOURCE_COORDINATE TRC;
TRC.X = 1;
TRC.Y = 1;
TRC.Z = 0;
TRC.Subresource = 0;

D3D12_TILE_REGION_SIZE TRS;
TRS.bUseBox = TRUE;
TRS.Width = 2;
TRS.Height = 3;
TRS.Depth = 1;
TRS.NumTiles = TRS.Width * TRS.Height * TRS.Depth;

UINT RangeFlags = D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE;
UINT StartOffset = 12;

pCommandQueue-&gt;UpdateTileMappings(pResource,1,&amp;amp;amp;amp;amp;amp;TRC,&amp;amp;amp;amp;amp;amp;TRS,pHeap,1,&amp;amp;amp;amp;amp;amp;RangeFlags,&amp;amp;amp;amp;amp;amp;StartOffset,NULL,D3D12_TILE_MAPPING_FLAG_NONE);

</code>
      <para>Defining mappings for a set of disjoint individual tiles:</para>
      <code>// - This can also be accomplished in multiple calls.
//   A single call to define multiple mapping updates can reduce CPU call overhead slightly,
//   at the cost of having to pass arrays as parameters.
// - Passing NULL for pResourceRegionSizes defaults to each region in the resource
//   being a single tile.  So all that is needed are the coordinates of each one.
// - Passing NULL for pRangeFlags defaults to no flags (since none are needed in this case)
// - Passing NULL for pRangeTileCounts defaults to each range in the heap being size 1.
//   So all that is needed are the start offsets for each tile in the heap
//
D3D12_TILED_RESOURCE_COORDINATE TRC[3];
UINT StartOffsets[3];
UINT NumSingleTiles = 3;
TRC[0].X = 1;
TRC[0].Y = 1;
TRC[0].Subresource = 0;

StartOffsets[0] = 1;
TRC[1].X = 4;
TRC[1].Y = 7;
TRC[1].Subresource = 0;
StartOffsets[1] = 4;

TRC[2].X = 2;
TRC[2].Y = 3;
TRC[2].Subresource = 0;
StartOffsets[2] = 7;

pCommandQueue-&gt;UpdateTileMappings(pResource,NumSingleTiles,&amp;amp;amp;amp;amp;amp;TRC,NULL,pHeap,NumSingleTiles,NULL,StartOffsets,
NULL,D3D12_TILE_MAPPING_FLAG_NONE);

</code>
      <para>Complex example - defining mappings for regions with some skips, some NULL mappings.</para>
      <code>// - This complex example hard codes the parameter arrays, whereas in practice the
//   application would likely configure the parameters programatically or in a data driven way.
// - Suppose we have 3 regions in a resource to configure mappings for, 2x3 at coordinate (1,1),
//   3x3 at coordinate (4,7), and 7x1 at coordinate (20,30)
// - The tiles in the regions are walked from first to last, in X then Y then Z order,
//   while stepping forward through the specified Tile Ranges to determine each mapping.
//   In this example, 22 tile mappings need to be defined.
// - Suppose we want the first 3 tiles to be mapped to a contiguous range in the heap starting at
//   heap location [9], the next 8 to be skipped (left unchanged), the next 2 to map to NULL,
//   the next 5 to share a single tile (heap location [17]) and the remaining
//   4 tiles to each map to to unique heap locations, [2], [9], [4] and [17]:
//
D3D12_TILED_RESOURCE_COORDINATE TRC[3];
D3D12_TILE_REGION_SIZE TRS[3];
UINT NumRegions = 3;

TRC[0].X = 1;
TRC[0].Y = 1;
TRC[0].Subresource = 0;
TRS[0].bUseBox = TRUE;
TRS[0].Width = 2;
TRS[0].Height = 3;
TRS[0].NumTiles = TRS[0].Width * TRS[0].Height;

TRC[1].X = 4;
TRC[1].Y = 7;
TRC[1].Subresource = 0;
TRS[1].bUseBox = TRUE;
TRS[1].Width = 3;
TRS[1].Height = 3;
TRS[1].NumTiles = TRS[1].Width * TRS[1].Height;

TRC[2].X = 20;
TRC[2].Y = 30;
TRC[2].Subresource = 0;
TRS[2].bUseBox = TRUE;
TRS[2].Width = 7;
TRS[2].Height = 1;
TRS[2].NumTiles = TRS[2].Width * TRS[2].Height;

UINT NumRanges = 8;
UINT RangeFlags[8];
UINT HeapRangeStartOffsets[8];
UINT RangeTileCounts[8];

RangeFlags[0] = 0;
HeapRangeStartOffsets[0] = 9;
RangeTileCounts[0] = 3;

RangeFlags[1] = D3D12_TILE_RANGE_FLAG_SKIP;
HeapRangeStartOffsets[1] = 0; // offset is ignored for skip mappings
RangeTileCounts[1] = 8;

RangeFlags[2] = D3D12_TILE_RANGE_FLAG_NULL;
HeapRangeStartOffsets[2] = 0; // offset is ignored for NULL mappings
RangeTileCounts[2] = 2;

RangeFlags[3] = D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE;
HeapRangeStartOffsets[3] = 17;
RangeTileCounts[3] = 5;

RangeFlags[4] = 0;
HeapRangeStartOffsets[4] = 2;
RangeTileCounts[4] = 1;

RangeFlags[5] = 0;
HeapRangeStartOffsets[5] = 9;
RangeTileCounts[5] = 1;

RangeFlags[6] = 0;
HeapRangeStartOffsets[6] = 4;
RangeTileCounts[6] = 1;

RangeFlags[7] = 0;
HeapRangeStartOffsets[7] = 17;
RangeTileCounts[7] = 1;

pCommandQueue-&gt;UpdateTileMappings(pResource,NumRegions,TRC,TRS,pHeap,NumRanges,RangeFlags,
HeapRangeStartOffsets,RangeTileCounts,D3D12_TILE_MAPPING_FLAG_NONE);

</code>
    </remarks>
    <seealso cref="CopyTileMappings" />
    <seealso cref="ID3D12CommandQueue" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/volume-tiled-resources">Volume Tiled Resources</seealso>
  </member>
  <member name="ID3D12CommandQueue.Wait">
    <summary>
      <para>Queues a GPU-side wait, and returns immediately. A GPU-side wait is where the GPU waits until the specified fence reaches or exceeds the specified value.</para>
    </summary>
    <param name="pFence">
      <para>Type: <b><see cref="ID3D12Fence" />*</b></para>
      <para>A pointer to the <see cref="ID3D12Fence" /> object.</para>
    </param>
    <param name="Value">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT64</a></b></para>
      <para>The value that the command queue is waiting for the fence to reach or exceed.  So when  <see cref="ID3D12Fence.GetCompletedValue" /> is greater than or equal to <i>Value</i>, the wait is terminated.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Because a wait is being queued, the API returns immediately. It's the command queue that waits (during which time no work is executed) until the fence specified reaches the requested value.</para>
      <para>If you want to perform a CPU-side wait (where the calling thread blocks until a fence reaches a particular value), then you should use the <see cref="ID3D12Fence.SetEventOnCompletion" /> API in conjunction with <see cref="WaitForSingleObject" /> (or a similar API).</para>
    </remarks>
    <seealso cref="ID3D12CommandQueue" />
    <seealso href="https://docs.microsoft.com//windows/win32/direct3d12/user-mode-heap-synchronization">Multi-engine synchronization</seealso>
  </member>
  <member name="ID3D12CommandQueue">
    <summary>
      <para>Provides methods for submitting command lists, synchronizing command list execution, instrumenting the command queue, and updating resource tile mappings.</para>
    </summary>
    <remarks>
      <para>Use <see cref="ID3D12Device.CreateCommandQueue" /> to create a command queue object.</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12nBodyGravity</a> sample uses <b>ID3D12CommandQueue</b> as follows:</para>
      <para>Header file declarations.</para>
      <code>// Compute objects.
ComPtr&lt;ID3D12CommandAllocator&gt; m_computeAllocator[ThreadCount];
ComPtr&lt;ID3D12CommandQueue&gt; m_computeCommandQueue[ThreadCount];
ComPtr&lt;ID3D12GraphicsCommandList&gt; m_computeCommandList[ThreadCount];

</code>
      <para>Asynchronous compute thread.</para>
      <code>DWORD D3D12nBodyGravity.AsyncComputeThreadProc(int threadIndex)
{
    ID3D12CommandQueue* pCommandQueue = m_computeCommandQueue[threadIndex].Get();
    ID3D12CommandAllocator* pCommandAllocator = m_computeAllocator[threadIndex].Get();
    ID3D12GraphicsCommandList* pCommandList = m_computeCommandList[threadIndex].Get();
    ID3D12Fence* pFence = m_threadFences[threadIndex].Get();

    while (0 == InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_terminating))
    {
        // Run the particle simulation.
        Simulate(threadIndex);

        // Close and execute the command list.
        ThrowIfFailed(pCommandList-&gt;Close());
        ID3D12CommandList* ppCommandLists[] = { pCommandList };

        pCommandQueue-&gt;ExecuteCommandLists(1, ppCommandLists);

        // Wait for the compute shader to complete the simulation.
        UINT64 threadFenceValue = InterlockedIncrement(&amp;amp;amp;amp;amp;amp;m_threadFenceValues[threadIndex]);
        ThrowIfFailed(pCommandQueue-&gt;Signal(pFence, threadFenceValue));
        ThrowIfFailed(pFence-&gt;SetEventOnCompletion(threadFenceValue, m_threadFenceEvents[threadIndex]));
        WaitForSingleObject(m_threadFenceEvents[threadIndex], INFINITE);

        // Wait for the render thread to be done with the SRV so that
        // the next frame in the simulation can run.
        UINT64 renderContextFenceValue = InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex]);
        if (m_renderContextFence-&gt;GetCompletedValue() &lt; renderContextFenceValue)
        {
            ThrowIfFailed(pCommandQueue-&gt;Wait(m_renderContextFence.Get(), renderContextFenceValue));
            InterlockedExchange(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex], 0);
        }

        // Swap the indices to the SRV and UAV.
        m_srvIndex[threadIndex] = 1 - m_srvIndex[threadIndex];

        // Prepare for the next frame.
        ThrowIfFailed(pCommandAllocator-&gt;Reset());
        ThrowIfFailed(pCommandList-&gt;Reset(pCommandAllocator, m_computeState.Get()));
    }

    return 0;
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12Pageable" />
  </member>
</doc>