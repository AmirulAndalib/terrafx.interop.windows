<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS">
    <summary>Describes Direct3D 12 feature options in the current graphics driver.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.DoublePrecisionFloatShaderOps">
    <summary>
      <para>Specifies whether <b>double</b> types are allowed for shader operations. If <b>TRUE</b>, double types are allowed; otherwise <b>FALSE</b>. The supported operations are equivalent to Direct3D 11's <b>ExtendedDoublesShaderInstructions</b> member of the <see cref="D3D11_FEATURE_DATA_D3D11_OPTIONS" /> structure.</para>
      <para>To use any HLSL shader that is compiled with a <b>double</b> type, the runtime must set <b>DoublePrecisionFloatShaderOps</b> to <b>TRUE</b>.</para>
    </summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.OutputMergerLogicOp">
    <summary>Specifies whether logic operations are available in blend state. The runtime sets this member to <b>TRUE</b> if logic operations are available in blend state and <b>FALSE</b> otherwise. This member is <b>FALSE</b> for feature level 9.1, 9.2, and 9.3. This member is optional for feature level 10, 10.1, and 11. This member is <b>TRUE</b> for feature level 11.1 and 12.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.MinPrecisionSupport">
    <summary>A combination of <see cref="D3D12_SHADER_MIN_PRECISION_SUPPORT" />-typed values that are combined by using a bitwise OR operation. The resulting value specifies minimum precision levels that the driver supports for shader stages. A value of zero indicates that the driver supports only full 32-bit precision for all shader stages.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.TiledResourcesTier">
    <summary>Specifies whether the hardware and driver support tiled resources. The runtime sets this member to a <see cref="D3D12_TILED_RESOURCES_TIER" />-typed value that indicates if the hardware and driver support tiled resources and at what tier level.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.ResourceBindingTier">
    <summary>Specifies the level at which the hardware and driver support resource binding. The runtime sets this member to a <see cref="D3D12_RESOURCE_BINDING_TIER" />-typed value that indicates the tier level.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.PSSpecifiedStencilRefSupported">
    <summary>Specifies whether pixel shader stencil ref is supported. If <b>TRUE</b>, it's supported; otherwise <b>FALSE</b>.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.TypedUAVLoadAdditionalFormats">
    <summary>Specifies whether the loading of additional formats for typed unordered-access views (UAVs) is supported. If <b>TRUE</b>, it's supported; otherwise <b>FALSE</b>.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.ROVsSupported">
    <summary>Specifies whether <a href="https://docs.microsoft.com//windows/desktop/direct3d12/directx-12-glossary">Rasterizer Order Views</a> (ROVs) are supported. If <b>TRUE</b>, they're supported; otherwise <b>FALSE</b>.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.ConservativeRasterizationTier">
    <summary>Specifies the level at which the hardware and driver support conservative rasterization. The runtime sets this member to a <see cref="D3D12_CONSERVATIVE_RASTERIZATION_TIER" />-typed value that indicates the tier level.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.MaxGPUVirtualAddressBitsPerResource">
    <summary>Don't use this field; instead, use the <see cref="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT" /> query (a structure with a <b>MaxGPUVirtualAddressBitsPerResource</b> member), which is more accurate.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.StandardSwizzle64KBSupported">
    <summary>TRUE if the hardware supports textures with the 64KB standard swizzle pattern. Support for this pattern enables zero-copy texture optimizations while providing near-equilateral locality for each dimension within the texture. For texture swizzle options and restrictions, see <see cref="D3D12_TEXTURE_LAYOUT" />.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.CrossNodeSharingTier">
    <summary>A <see cref="D3D12_CROSS_NODE_SHARING_TIER" /> enumeration constant that specifies the level of sharing across nodes of an adapter that has multiple nodes, such as Tier 1 Emulated, Tier 1, or Tier 2.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.CrossAdapterRowMajorTextureSupported">
    <summary>FALSE means the device only supports copy operations to and from cross-adapter row-major textures. TRUE means the device supports shader resource views, unordered access views, and render target views of cross-adapter row-major textures. "Cross-adapter" means between multiple adapters (even from different IHVs).</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation">
    <summary>Whether the viewport (VP) and Render Target (RT) array index from any shader feeding the rasterizer are supported without geometry shader emulation. Compare the <b>VPAndRTArrayIndexFromAnyShaderFeedingRasterizer</b> member of the <see cref="D3D11_FEATURE_DATA_D3D11_OPTIONS3" /> structure. In <see cref="ID3D12ShaderReflection.GetRequiresFlags" />, see the #define D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER.</summary>
  </member>
  <member name="D3D12_FEATURE_DATA_D3D12_OPTIONS.ResourceHeapTier">
    <summary>Specifies the level at which the hardware and driver require heap attribution related to resource type. The runtime sets this member to a <see cref="D3D12_RESOURCE_HEAP_TIER" /> enumeration constant.</summary>
  </member>
</doc>