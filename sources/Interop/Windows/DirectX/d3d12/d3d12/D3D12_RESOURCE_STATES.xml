<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_RESOURCE_STATES">
    <summary>Defines constants that specify the state of a resource regarding how the resource is being used.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_COMMON">
    <summary>
      <para>Your application should transition to this state only for accessing a resource across different graphics engine types.</para>
      <para>Specifically, a resource must be in the COMMON state before being used on a COPY queue (when previously used on DIRECT/COMPUTE), and before being used on DIRECT/COMPUTE (when previously used on COPY). This restriction doesn't exist when accessing data between DIRECT and COMPUTE queues.</para>
      <para>The COMMON state can be used for all usages on a Copy queue using the implicit state transitions. For more info, in <a href="https://docs.microsoft.com//windows/win32/direct3d12/user-mode-heap-synchronization">Multi-engine synchronization</a>, find "common".</para>
      <para>Additionally, textures must be in the COMMON state for CPU access to be legal, assuming the texture was created in a CPU-visible heap in the first place.</para>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER">
    <summary>A subresource must be in this state when it is accessed by the GPU as a vertex buffer or constant buffer. This is a read-only state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_INDEX_BUFFER">
    <summary>A subresource must be in this state when it is accessed by the 3D pipeline as an index buffer. This is a read-only state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_RENDER_TARGET">
    <summary>
      <para>The resource is used as a render target. A subresource must be in this state when it is rendered to, or when it is cleared with <see cref="ID3D12GraphicsCommandList.ClearRenderTargetView" />.</para>
      <para>This is a write-only state. To read from a render target as a shader resource, the resource must be in either <b>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</b> or <b>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</b>.</para>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_UNORDERED_ACCESS">
    <summary>The resource is used for unordered access. A subresource must be in this state when it is accessed by the GPU via an unordered access view. A subresource must also be in this state when it is cleared with <see cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewInt" /> or <see cref="ID3D12GraphicsCommandList.ClearUnorderedAccessViewFloat" />. This is a read/write state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_DEPTH_WRITE">
    <summary>
      <b>D3D12_RESOURCE_STATE_DEPTH_WRITE</b> is a state that is mutually exclusive with other states. You should use it for <see cref="ID3D12GraphicsCommandList.ClearDepthStencilView" /> when the flags (see <see cref="D3D12_CLEAR_FLAGS" />) indicate a given subresource should be cleared (otherwise the subresource state doesn't matter), or when using it in a writable depth stencil view (see <see cref="D3D12_DSV_FLAGS" />) when the PSO has depth write enabled (see <see cref="D3D12_DEPTH_STENCIL_DESC" />).</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_DEPTH_READ">
    <summary>DEPTH_READ is a state that can be combined with other states. It should be used when the subresource is in a read-only depth stencil view, or when depth write of <see cref="D3D12_DEPTH_STENCIL_DESC" /> is disabled. It can be combined with other read states (for example, <b>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</b>), such that the resource can be used for the depth or stencil test, and accessed by a shader within the same draw call. Using it when depth will be written by a draw call or clear command is invalid.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE">
    <summary>The resource is used with a shader other than the pixel shader. A subresource must be in this state before being read by any stage (except for the pixel shader stage) via a shader resource view. You can still use the resource in a pixel shader with this flag as long as it also has the flag <b>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</b> set. This is a read-only state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE">
    <summary>The resource is used with a pixel shader. A subresource must be in this state before being read by the pixel shader via a shader resource view. This is a read-only state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_STREAM_OUT">
    <summary>The resource is used with stream output. A subresource must be in this state when it is accessed by the 3D pipeline as a stream-out target. This is a write-only state.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT">
    <summary>
      <code> The resource is used as an indirect argument. Subresources must be in this state when they are used as the argument buffer passed to the indirect drawing method &lt;a href="/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect"&gt;ID3D12GraphicsCommandList.ExecuteIndirect&lt;/a&gt;. This is a read-only state.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_COPY_DEST">
    <summary>
      <code> The resource is used as the destination in a copy operation. Subresources must be in this state when they are used as the destination of copy operation, or a blt operation. This is a write-only state.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_COPY_SOURCE">
    <summary>
      <code> The resource is used as the source in a copy operation. Subresources must be in this state when they are used as the source of copy operation, or a blt operation. This is a read-only state.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_RESOLVE_DEST">
    <summary>
      <code> The resource is used as the destination in a resolve operation.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_RESOLVE_SOURCE">
    <summary>
      <code> The resource is used as the source in a resolve operation.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE">
    <summary>
      <para>When a buffer is created with this as its initial state, it indicates that the resource is a raytracing acceleration structure, for use in <see cref="ID3D12GraphicsCommandList4.BuildRaytracingAccelerationStructure" />, <see cref="ID3D12GraphicsCommandList4.CopyRaytracingAccelerationStructure" />, or <see cref="ID3D12Device.CreateShaderResourceView" /> for the <see cref="D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE" /> dimension.</para>
      <blockquote>[!NOTE] A resource to be used for the <b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b> state must be created in that state, and then never transitioned out of it. Nor may a resource that was created not in that state be transitioned into it. For more info, see <a href="https://microsoft.github.io/directx-specs/d3d/raytracing.html#acceleration-structure-memory-restrictions">Acceleration structure memory restrictions</a> in the DirectX raytracing (DXR) functional specification on GitHub.</blockquote>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE">
    <summary>Starting with Windows 10, version 1903 (10.0; Build 18362), indicates that the resource is a screen-space shading-rate image for variable-rate shading (VRS). For more info, see <a href="https://docs.microsoft.com//windows/win32/direct3d12/vrs">Variable-rate shading (VRS)</a>.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_GENERIC_READ">
    <summary>D3D12_RESOURCE_STATE_GENERIC_READ is a logically OR'd combination of other read-state bits. This is the required starting state for an upload heap. Your application should generally avoid transitioning to D3D12_RESOURCE_STATE_GENERIC_READ when possible, since that can result in premature cache flushes, or resource layout changes (for example, compress/decompress), causing unnecessary pipeline stalls. You should instead transition resources only to the actually-used states.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE">
    <summary>Equivalent to <code>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</code>.</summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_PRESENT">
    <summary>
      <code> Synonymous with D3D12_RESOURCE_STATE_COMMON.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_PREDICATION">
    <summary>
      <code> The resource is used for &lt;a href="/windows/win32/direct3d12/predication"&gt;Predication&lt;/a&gt;.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_DECODE_READ">
    <summary>
      <code> The resource is used as a source in a decode operation. Examples include reading the compressed bitstream and reading from decode references,</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE">
    <summary>
      <code> The resource is used as a destination in the decode operation. This state is used for decode output and histograms.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ">
    <summary>
      <code> The resource is used to read video data during video processing; that is, the resource is used as the source in a processing operation such as video encoding (compression).</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE">
    <summary>
      <code> The resource is used to write video data during video processing; that is, the resource is used as the destination in a processing operation such as video encoding (compression).</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ">
    <summary>
      <code> The resource is used as the source in an encode operation. This state is used for the input and reference of motion estimation.</code>
    </summary>
  </member>
  <member name="D3D12_RESOURCE_STATES.D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE">
    <summary>
      <code> This resource is used as the destination in an encode operation. This state is used for the destination texture of a resolve motion vector heap operation.</code>
    </summary>
  </member>
</doc>