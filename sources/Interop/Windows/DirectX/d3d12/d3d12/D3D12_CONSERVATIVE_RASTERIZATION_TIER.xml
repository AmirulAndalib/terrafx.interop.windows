<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_CONSERVATIVE_RASTERIZATION_TIER">
    <summary>Identifies the tier level of conservative rasterization.</summary>
  </member>
  <member name="D3D12_CONSERVATIVE_RASTERIZATION_TIER.D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED">
    <summary>Conservative rasterization is not supported.</summary>
  </member>
  <member name="D3D12_CONSERVATIVE_RASTERIZATION_TIER.D3D12_CONSERVATIVE_RASTERIZATION_TIER_1">
    <summary>Tier 1 enforces a maximum 1/2 pixel uncertainty region and does not support post-snap degenerates. This is good for tiled rendering, a texture atlas, light map generation and sub-pixel shadow maps.</summary>
  </member>
  <member name="D3D12_CONSERVATIVE_RASTERIZATION_TIER.D3D12_CONSERVATIVE_RASTERIZATION_TIER_2">
    <summary>Tier 2 reduces the maximum uncertainty region to 1/256 and requires post-snap degenerates not be culled. This tier is helpful for CPU-based algorithm acceleration (such as voxelization).</summary>
  </member>
  <member name="D3D12_CONSERVATIVE_RASTERIZATION_TIER.D3D12_CONSERVATIVE_RASTERIZATION_TIER_3">
    <summary>Tier 3 maintains a maximum 1/256 uncertainty region and adds support for inner input coverage. Inner input coverage adds the new value <code>SV_InnerCoverage</code> to High Level Shading Language (HLSL). This is a 32-bit scalar integer that can be specified on input to a pixel shader, and represents the underestimated conservative rasterization information (that is, whether a pixel is guaranteed-to-be-fully covered). This tier is helpful for occlusion culling.</summary>
  </member>
</doc>