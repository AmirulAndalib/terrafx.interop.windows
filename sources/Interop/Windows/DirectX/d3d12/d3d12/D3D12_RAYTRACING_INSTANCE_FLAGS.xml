<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS">
    <summary>Flags for a raytracing acceleration structure instance. These flags can be used to override <see cref="D3D12_RAYTRACING_GEOMETRY_FLAGS" /> for individual instances.</summary>
  </member>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS.D3D12_RAYTRACING_INSTANCE_FLAG_NONE">
    <summary>No options specified.</summary>
  </member>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS.D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE">
    <summary>Disables front/back face culling for this instance. The Ray flags <b>RAY_FLAG_CULL_BACK_FACING_TRIANGLES</b> and <b>RAY_FLAG_CULL_FRONT_FACING_TRIANGLES</b> will have no effect on this instance.</summary>
  </member>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS.D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE">
    <summary>
      <para>This flag reverses front and back facings, which is useful if the application’s natural winding order differs from the default. By default, a triangle is front facing if its vertices appear clockwise from the ray origin and back facing if its vertices appear counter-clockwise from the ray origin, in object space in a left-handed coordinate system.</para>
      <para>Since these winding direction rules are defined in object space, they are unaffected by instance transforms. For example, an instance transform matrix with negative determinant (e.g. mirroring some geometry) does not change the facing of the triangles within the instance. Per-geometry transforms defined in <see cref="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC" /> , by contrast, get combined with the associated vertex data in object space, so a negative determinant matrix there does flip triangle winding.</para>
    </summary>
  </member>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS.D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE">
    <summary>
      <para>The instance will act as if <see cref="D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE" /> had been specified for all the geometries in the bottom-level acceleration structure referenced by the instance. Note that this behavior can be overridden by the ray flag <b>RAY_FLAG_FORCE_NON_OPAQUE</b>.</para>
      <para>This flag is mutually exclusive to the <b>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE</b> flag.</para>
    </summary>
  </member>
  <member name="D3D12_RAYTRACING_INSTANCE_FLAGS.D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE">
    <summary>
      <para>The instance will act as if <see cref="D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE" /> had not been specified for any of the geometries in the bottom-level acceleration structure referenced by the instance. Note that this behavior can be overridden by the ray flag <b>RAY_FLAG_FORCE_OPAQUE</b>.</para>
      <para>This flag is mutually exclusive to the <b>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE</b> flag.</para>
    </summary>
  </member>
</doc>