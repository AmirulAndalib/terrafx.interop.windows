<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12DeviceChild.GetDevice">
    <summary>
      <para>Gets a pointer to the device that created this interface.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The globally unique identifier (<b>GUID</b>) for the device interface.
The <b>REFIID</b>, or <b>GUID</b>, of the interface to the device can be obtained by using the __uuidof() macro.
For example, __uuidof(<see cref="ID3D12Device" />) will get the <b>GUID</b> of the interface to a device.</para>
    </param>
    <param name="ppvDevice">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <see cref="ID3D12Device" /> interface for the device.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Any returned interfaces have their reference count incremented by one, so be sure to call .release() on the returned pointers before they are freed or else you will have a memory leak.</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12Multithreading</a> sample uses <b>ID3D12DeviceChild.GetDevice</b> as follows:</para>
      <code>// Returns required size of a buffer to be used for data upload
inline UINT64 GetRequiredIntermediateSize(
    _In_ ID3D12Resource* pDestinationResource,
    _In_range_(0,D3D12_REQ_SUBRESOURCES) UINT FirstSubresource,
    _In_range_(0,D3D12_REQ_SUBRESOURCES-FirstSubresource) UINT NumSubresources)
{
    D3D12_RESOURCE_DESC Desc = pDestinationResource-&gt;GetDesc();
    UINT64 RequiredSize = 0;

    ID3D12Device* pDevice;
    pDestinationResource-&gt;GetDevice(__uuidof(*pDevice), reinterpret_cast&lt;void**&gt;(&amp;amp;amp;amp;amp;amp;pDevice));
    pDevice-&gt;GetCopyableFootprints(&amp;amp;amp;amp;amp;amp;Desc, FirstSubresource, NumSubresources, 0, nullptr, nullptr, nullptr, &amp;amp;amp;amp;amp;amp;RequiredSize);
    pDevice-&gt;Release();

    return RequiredSize;
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso cref="ID3D12DeviceChild" />
  </member>
  <member name="ID3D12DeviceChild">
    <summary>
      <para>An interface from which other core interfaces inherit from, including (but not limited to) <see cref="ID3D12PipelineLibrary" />,  <see cref="ID3D12CommandList" />, <see cref="ID3D12Pageable" />, and <see cref="ID3D12RootSignature" />. It provides a method to get back to the device object it was created against.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12Object" />
  </member>
</doc>