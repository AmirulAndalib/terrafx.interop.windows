<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12ShaderReflection.GetBitwiseInstructionCount">
    <summary>
      <para>Gets the number of bitwise instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of bitwise instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetConstantBufferByIndex">
    <summary>
      <para>Gets a constant buffer by index.</para>
    </summary>
    <param name="Index">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Zero-based index.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D12ShaderReflectionConstantBuffer" />*</b></para>
      <para>A pointer to a constant buffer (see <see cref="ID3D12ShaderReflectionConstantBuffer Interface" />).</para>
    </returns>
    <remarks>
      <para>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetConstantBufferByName">
    <summary>
      <para>Gets a constant buffer by name.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>The constant-buffer name.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D12ShaderReflectionConstantBuffer" />*</b></para>
      <para>A pointer to a constant buffer (see <see cref="ID3D12ShaderReflectionConstantBuffer Interface" />).</para>
    </returns>
    <remarks>
      <para>A constant buffer supplies either scalar constants or texture constants to a shader.
A shader can use one or more constant buffers.
For best performance, separate constants into buffers based on the frequency they are updated.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetConversionInstructionCount">
    <summary>
      <para>Gets the number of conversion instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of conversion instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetDesc">
    <summary>
      <para>Gets a shader description.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SHADER_DESC" />*</b></para>
      <para>A shader description, as a pointer to a <see cref="D3D12_SHADER_DESC" /> structure.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetGSInputPrimitive">
    <summary>
      <para>Gets the geometry-shader input-primitive description.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D3D_PRIMITIVE" /></b></para>
      <para>The input-primitive description.  See
<see cref="D3D_PRIMITIVE_TOPOLOGY" />.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetInputParameterDesc">
    <summary>
      <para>Gets an input-parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A pointer to a shader-input-signature description. See <see cref="D3D12_SIGNATURE_PARAMETER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>An input-parameter description is also called a shader signature.
The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetMinFeatureLevel">
    <summary>
      <para>Gets the minimum feature level.</para>
    </summary>
    <param name="pLevel">
      <para>Type: <b><see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>A pointer to one of the enumerated values in <see cref="D3D_FEATURE_LEVEL" />, which represents the minimum feature level.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetMovcInstructionCount">
    <summary>
      <para>Gets the number of Movc instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of Movc instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetMovInstructionCount">
    <summary>
      <para>Gets the number of Mov instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of Mov instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetNumInterfaceSlots">
    <summary>
      <para>Gets the number of interface slots in a shader.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of interface slots in the shader.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetOutputParameterDesc">
    <summary>
      <para>Gets an output-parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A shader-output-parameter description, as a pointer to a <see cref="D3D12_SIGNATURE_PARAMETER_DESC" /> structure.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetPatchConstantParameterDesc">
    <summary>
      <para>Gets a patch-constant parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A pointer to a shader-input-signature description. See <see cref="D3D12_SIGNATURE_PARAMETER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetRequiresFlags">
    <summary>
      <para>Gets a group of flags that indicates the requirements of a shader.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT64</b></para>
      <para>A value that contains a combination of one or more shader requirements #define flags; each flag specifies a requirement of the shader.
A default value of 0 means there are no requirements.</para>
      <list type="table">
        <listheader>
          <description>Shader requirement #define flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_DOUBLES</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support double data type.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</b>
          </description>
          <description>Shader requires an early depth stencil.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</b>
          </description>
          <description>Shader requires unordered access views (UAVs) at every pipeline stage.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_64_UAVS</b>
          </description>
          <description>Shader requires 64 UAVs.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</b>
          </description>
          <description>Shader requires the graphics driver and hardware to support minimum precision.
For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/using-hlsl-minimum-precision">Using HLSL minimum precision</a>.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support extended doubles instructions.
For more info, see the <b>ExtendedDoublesShaderInstructions</b> member of <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" />.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-msad4">msad4</a> intrinsic function in shaders.
For more info, see the <b>SAD4ShaderInstructions</b> member of <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" />.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support Direct3D 9 shadow support.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_TILED_RESOURCES</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support tiled resources.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_STENCIL_REF</b>
          </description>
          <description>Shader requires a reference value for depth stencil tests.
For more info, see the <b>PSSpecifiedStencilRefSupported</b> member of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure,
and <see cref="ID3D12GraphicsCommandList.OMSetStencilRef" />.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_INNER_COVERAGE</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support inner coverage.For more info, see the enumeration constants D3D_NAME_INNER_COVERAGE and D3D11_NAME_INNER_COVERAGE in <see cref="D3D_NAME" />.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support the loading of additional formats for typed unordered-access views (UAVs).
See the <b>TypedUAVLoadAdditionalFormats</b> member of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_ROVS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support rasterizer ordered views (ROVs).
See <a href="https://docs.microsoft.com//windows/desktop/direct3d12/rasterizer-order-views">Rasterizer Ordered Views</a>.
</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support viewport and render target array index values from any shader-feeding rasterizer.For more info, see the member <b>VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure.
</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Here is how the D3D12Shader.h header defines the shader requirements flags:</para>
      <code>#define D3D_SHADER_REQUIRES_DOUBLES                                                         0x00000001
#define D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL                                             0x00000002
#define D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE                                             0x00000004
#define D3D_SHADER_REQUIRES_64_UAVS                                                         0x00000008
#define D3D_SHADER_REQUIRES_MINIMUM_PRECISION                                               0x00000010
#define D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS                                          0x00000020
#define D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS                                          0x00000040
#define D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING                                    0x00000080
#define D3D_SHADER_REQUIRES_TILED_RESOURCES                                                 0x00000100
#define D3D_SHADER_REQUIRES_STENCIL_REF                                                     0x00000200
#define D3D_SHADER_REQUIRES_INNER_COVERAGE                                                  0x00000400
#define D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS                               0x00000800
#define D3D_SHADER_REQUIRES_ROVS                                                            0x00001000
#define D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER  0x00002000

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/checking-hardware-feature-support">Checking Hardware Feature Support</seealso>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetResourceBindingDesc">
    <summary>
      <para>Gets a description of how a resource is bound to a shader.</para>
    </summary>
    <param name="ResourceIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based resource index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SHADER_INPUT_BIND_DESC" />*</b></para>
      <para>A pointer to an input-binding description. See <see cref="D3D12_SHADER_INPUT_BIND_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <b>GetResourceBindingDesc</b> gets information about how one resource in the set is bound as an input to the shader. The  <i>ResourceIndex</i> parameter specifies the index for the resource.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetResourceBindingDescByName">
    <summary>
      <para>Gets a description of how a resource is bound to a shader.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>The constant-buffer name of the resource.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D12_SHADER_INPUT_BIND_DESC" />*</b></para>
      <para>A pointer to an input-binding description. See <see cref="D3D12_SHADER_INPUT_BIND_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <b>GetResourceBindingDescByName</b> gets information about how one resource in the set is bound as an input to the shader. The  <i>Name</i> parameter specifies the name of the resource.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetThreadGroupSize">
    <summary>
      <para>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</para>
    </summary>
    <param name="pSizeX">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</para>
    </param>
    <param name="pSizeY">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</para>
    </param>
    <param name="pSizeZ">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the total size, in threads, of the thread-group grid by calculating the product of the size of each dimension.</para>
      <code>*pSizeX * *pSizeY * *pSizeZ;
</code>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
      <para>When a compute shader is written it defines the actions of a single thread group only. If multiple thread groups are required, it is the role of the <see cref="ID3D12GraphicsCommandList.Dispatch" /> call to issue multiple thread groups.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.GetVariableByName">
    <summary>
      <para>Gets a variable by name.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>A pointer to a string containing the variable name.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D12ShaderReflectionVariable" />*</b></para>
      <para>Returns a <see cref="ID3D12ShaderReflectionVariable Interface" /> interface.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection.IsSampleFrequencyShader">
    <summary>
      <para>Indicates whether a shader is a sample frequency shader.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns true if the shader is a sample frequency shader; otherwise returns false.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D12ShaderReflection" />
  </member>
  <member name="ID3D12ShaderReflection">
    <summary>
      <para>A shader-reflection interface accesses shader information.</para>
    </summary>
    <remarks>
      <para>An <b>ID3D12ShaderReflection</b> interface can be retrieved for a shader by using <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dreflect">D3DReflect</a>.</para>
      <blockquote>
        <para>[!NOTE]
This function from <code>d3dcompiler.dll</code> supports Shader Model 2 - 5.1. For Shader Model 6 shader reflection, see <code>dxcompiler.dll</code> and  <a href="https://github.com/microsoft/directxshadercompiler/wiki/using-dxc.exe-and-dxcompiler.dll">Using dxc.exe and dxcompiler.dll</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-shader-interfaces">Shader Interfaces</seealso>
  </member>
</doc>