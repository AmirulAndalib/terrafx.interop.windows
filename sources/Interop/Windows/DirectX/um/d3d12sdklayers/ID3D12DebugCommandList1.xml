<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12DebugCommandList1.AssertResourceState">
    <summary>
      <para>Validates that the given state matches the state of the subresource, assuming the state of the given subresource is known during recording of a command list (e.g. the resource was transitioned earlier in the same command list recording).  If the state is not yet known this method sets the known state for further validation later in the same command list recording.</para>
    </summary>
    <param name="pResource">
      <para>Type: <b>ID3D12Resource*</b></para>
      <para>Specifies the <see cref="ID3D12Resource" /> to check.</para>
    </param>
    <param name="Subresource">
      <para>Type: <b>UINT</b></para>
      <para>The index of the subresource to check. This can be set to an index, or D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES.</para>
    </param>
    <param name="State">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the state to check for. This can be one or more <see cref="D3D12_RESOURCE_STATES" /> flags Or'ed together.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>This method returns <b>true</b> if the tracked state of the resource or subresource matches the specified state, <b>false</b> otherwise.</para>
    </returns>
    <remarks>
      <para>Since execution of command lists occurs sometime after recording, the state of a resource often cannot be known during command list recording.  <b>AssertResourceState</b> gives an application developer the ability to impose an assumed state on a resource or subresource at a fixed recording point in a command list.</para>
      <para>Often the state of a resource or subresource can either be known due to a previous barrier or inferred-by-use (for example, was used in an earlier call to <see cref="CopyBufferRegion" />) during command list recording.  In such cases <b>AssertResourceState</b> can produce a debug message if the given state does not match the known or assumed state.</para>
      <para>This API is for debug validation only and does not affect the actual runtime or GPU state of the resource.</para>
    </remarks>
    <seealso cref="ID3D12DebugCommandList1" />
  </member>
  <member name="ID3D12DebugCommandList1.GetDebugParameter">
    <summary>
      <para>Gets optional Command List Debug Layer settings.</para>
    </summary>
    <param name="Type">
      <para>Type: <b><see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /></b></para>
      <para>Specifies a <see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /> value that determines which debug parameter data to copy to the memory pointed to by <i>pData</i>.</para>
    </param>
    <param name="pData">
      <para>Type: <b>void*</b></para>
      <para>Points to the memory that will be filled with a copy of the debug parameter data. The interpretation of this data depends on the <see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /> given in the <i>Type</i> parameter.</para>
    </param>
    <param name="DataSize">
      <para>Type: <b>UINT</b></para>
      <para>Size in bytes of the memory buffer pointed to by <i>pData</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK if successful, otherwise E_INVALIDARG.</para>
    </returns>
    <seealso cref="ID3D12DebugCommandList1" />
    <seealso cref="SetDebugParameter" />
  </member>
  <member name="ID3D12DebugCommandList1.SetDebugParameter">
    <summary>
      <para>Modifies optional Debug Layer settings of a command list.</para>
    </summary>
    <param name="Type">
      <para>Type: <b><see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /></b></para>
      <para>Specifies a <see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /> value that indicates which debug parameter data to set.</para>
    </param>
    <param name="pData">
      <para>Type: <b>const void*</b></para>
      <para>Pointer to debug parameter data to set.  The interpretation of this data depends on the <see cref="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE" /> given in the <i>Type</i> parameter.</para>
    </param>
    <param name="DataSize">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the size in bytes of the debug parameter <i>pData</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Certain debug behaviors of D3D12 Debug Layer can be modified by setting debug parameters.  These can be used to toggle extra validation or expose experimental debug features.</para>
      <para>
        <b>ID3D12DebugCommandList1.SetDebugParameter</b> only impacts debug settings for the associated command list.  For device-wide debug parameters see the <see cref="ID3D12DebugDevice1.SetDebugParameter" /> method.</para>
      <para>Resetting a command list restores the debug parameters to the default values.  This is because a command list reset is treated as equivalent to creating a new command list.</para>
    </remarks>
    <seealso cref="GetDebugParameter" />
    <seealso cref="ID3D12DebugCommandList1" />
  </member>
  <member name="ID3D12DebugCommandList1">
    <summary>
      <para>This interface enables modification of additional command list debug layer settings.</para>
    </summary>
    <remarks>
      <para>This interface is currently in Preview mode.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-sdklayers-interfaces">Debug Layer Interfaces</seealso>
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/using-d3d12-debug-layer-gpu-based-validation">Using D3D12 Debug Layer GPU-Based Validation</seealso>
  </member>
</doc>