<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteTextFormat.GetFlowDirection">
    <summary>Gets the direction that text lines flow.</summary>
    <returns>The direction that text lines flow within their parent container. For example, <see cref="DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM" /> indicates that text lines are placed from top to bottom.</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontCollection">
    <summary>Gets the current font collection.</summary>
    <param name="fontCollection">When this method returns, contains an address of a pointer to the font collection being used for the current text.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontFamilyName">
    <summary>Gets a copy of the font family name.</summary>
    <param name="fontFamilyName">When this method returns, contains a pointer to a character array, which is null-terminated, that receives the current font family name. The buffer allocated for this array should be at least the size, in elements, of <i>nameSize</i>.</param>
    <param name="nameSize">The size of the <i>fontFamilyName</i> character array, in character count, including the terminated <b>NULL</b> character. To find the size of <i>fontFamilyName</i>, use <see cref="GetFontFamilyNameLength" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontFamilyNameLength">
    <summary>Gets the length of the font family name.</summary>
    <returns>The size of the character array, in character count, not including the terminated <b>NULL</b> character.</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontSize">
    <summary>Gets the font size in DIP unites.</summary>
    <returns>The current font size in DIP units.</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontStretch">
    <summary>Gets the font stretch of the text.</summary>
    <returns>A value which indicates the type of font stretch (such as normal or condensed).</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontStyle">
    <summary>Gets the font style of the text.</summary>
    <returns>A value which indicates the type of font style (such as slope or incline).</returns>
  </member>
  <member name="IDWriteTextFormat.GetFontWeight">
    <summary>Gets the font weight of the text.</summary>
    <returns>A value that indicates the type of weight (such as normal, bold, or black).</returns>
  </member>
  <member name="IDWriteTextFormat.GetIncrementalTabStop">
    <summary>Gets the incremental tab stop position.</summary>
    <returns>The incremental tab stop value.</returns>
  </member>
  <member name="IDWriteTextFormat.GetLineSpacing">
    <summary>Gets the line spacing adjustment set for a multiline text paragraph.</summary>
    <param name="lineSpacingMethod">A value that indicates how line height is determined.</param>
    <param name="lineSpacing">When this method returns, contains the line height, or distance between one baseline to another.</param>
    <param name="baseline">When this method returns, contains the distance from top of line to baseline. A reasonable ratio to <i>lineSpacing</i> is 80 percent.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.GetLocaleName">
    <summary>Gets a copy of the locale name.</summary>
    <param name="localeName">Contains a character array that receives the current locale name.</param>
    <param name="nameSize">The size of the character array, in character count, including the terminated <b>NULL</b> character. Use <see cref="GetLocaleNameLength" /> to get the size of the locale name character array.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.GetLocaleNameLength">
    <summary>Gets the length of the locale name.</summary>
    <returns>The size of the character array in character count, not including the terminated <b>NULL</b> character.</returns>
  </member>
  <member name="IDWriteTextFormat.GetParagraphAlignment">
    <summary>Gets the alignment option of a paragraph which is relative to the top and bottom edges of a layout box.</summary>
    <returns>A value that indicates the current paragraph alignment option.</returns>
  </member>
  <member name="IDWriteTextFormat.GetReadingDirection">
    <summary>Gets the current reading direction for text in a paragraph.</summary>
    <returns>A value that indicates the current reading direction for text in a paragraph.</returns>
  </member>
  <member name="IDWriteTextFormat.GetTextAlignment">
    <summary>Gets the alignment option of text relative to the layout box's leading and trailing edge.</summary>
    <returns>Returns the text alignment option of the current paragraph.</returns>
  </member>
  <member name="IDWriteTextFormat.GetTrimming">
    <summary>Gets the trimming options for text that overflows the layout box.</summary>
    <param name="trimmingOptions">When this method returns, it contains a pointer to a <see cref="DWRITE_TRIMMING" /> structure that holds the text trimming options for the overflowing text.</param>
    <param name="trimmingSign">When this method returns, contains an address of a pointer to a trimming omission sign. This parameter may be <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.GetWordWrapping">
    <summary>Gets the word wrapping option.</summary>
    <returns>Returns the word wrapping option; see <see cref="DWRITE_WORD_WRAPPING" /> for more information.</returns>
  </member>
  <member name="IDWriteTextFormat.SetFlowDirection">
    <summary>Sets the paragraph flow direction.</summary>
    <param name="flowDirection">The paragraph flow direction; see <see cref="DWRITE_FLOW_DIRECTION" /> for more information.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetIncrementalTabStop">
    <summary>Sets a fixed distance between two adjacent tab stops.</summary>
    <param name="incrementalTabStop">The fixed distance between two adjacent tab stops.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetLineSpacing">
    <summary>Sets the line spacing.</summary>
    <param name="lineSpacingMethod">Specifies how line height is being determined; see <see cref="DWRITE_LINE_SPACING_METHOD" /> for more information.</param>
    <param name="lineSpacing">The line height, or distance between one baseline to another.</param>
    <param name="baseline">The distance from top of line to baseline. A reasonable ratio to <i>lineSpacing</i> is 80 percent.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetParagraphAlignment">
    <summary>Sets the alignment option of a paragraph relative to the layout box's top and bottom edge.</summary>
    <param name="paragraphAlignment">The paragraph alignment option being set for a paragraph; see <see cref="DWRITE_PARAGRAPH_ALIGNMENT" /> for more information.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetReadingDirection">
    <summary>Sets the paragraph reading direction.</summary>
    <param name="readingDirection">The text reading direction (for example, <see cref="DWRITE_READING_DIRECTION_RIGHT_TO_LEFT" /> for languages, such as Arabic, that read from right to left) for a paragraph.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetTextAlignment">
    <summary>Sets the alignment of text in a paragraph, relative to the leading and trailing edge of a layout box for a <see cref="IDWriteTextFormat" /> interface.</summary>
    <param name="textAlignment">The text alignment option being set for the paragraph of type DWRITE_TEXT_ALIGNMENT. For more information, see Remarks.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The textAlignment argument is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDWriteTextFormat.SetTrimming">
    <summary>Sets trimming options for text overflowing the layout width.</summary>
    <param name="trimmingOptions">Text trimming options.</param>
    <param name="trimmingSign">Application-defined omission sign. This parameter may be <b>NULL</b>. See <see cref="IDWriteInlineObject" /> for more information.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat.SetWordWrapping">
    <summary>Sets the word wrapping option.</summary>
    <param name="wordWrapping">The word wrapping option being set for a paragraph; see <see cref="DWRITE_WORD_WRAPPING" /> for more information.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextFormat">
    <summary>The <b>IDWriteTextFormat</b> interface describes the font and paragraph properties used to format text, and it describes locale information.</summary>
  </member>
</doc>