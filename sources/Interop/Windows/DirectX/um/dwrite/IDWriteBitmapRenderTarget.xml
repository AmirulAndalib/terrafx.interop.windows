<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteBitmapRenderTarget.DrawGlyphRun">
    <summary>Draws a run of glyphs to a bitmap target at the specified position.</summary>
    <param name="baselineOriginX">The horizontal position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB.</param>
    <param name="baselineOriginY">The vertical position of the baseline origin, in DIPs, relative to the upper-left corner of the DIB.</param>
    <param name="measuringMode">The measuring method for glyphs in the run, used with the other properties to determine the rendering mode.</param>
    <param name="glyphRun">The structure containing the properties of the glyph run.</param>
    <param name="renderingParams">The object that controls rendering behavior.</param>
    <param name="textColor">The foreground color of the text.</param>
    <param name="blackBoxRect">The optional rectangle that receives the bounding box (in pixels not DIPs) of all the pixels affected by drawing the glyph run. The black box rectangle may extend beyond the dimensions of the bitmap.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.GetCurrentTransform">
    <summary>Gets the transform that maps abstract coordinates to DIPs. By default this is the identity transform. Note that this is unrelated to the world transform of the underlying device context.</summary>
    <param name="transform">When this method returns, contains a transform matrix.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.GetMemoryDC">
    <summary>Gets a handle to the memory device context.</summary>
    <returns>Returns a device context handle to the memory device context.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.GetPixelsPerDip">
    <summary>Gets the number of bitmap pixels per DIP.</summary>
    <returns>The number of bitmap pixels per DIP.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.GetSize">
    <summary>Gets the dimensions of the target bitmap.</summary>
    <param name="size">Returns the width and height of the bitmap in pixels.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.Resize">
    <summary>Resizes the bitmap.</summary>
    <param name="width">The new bitmap width, in pixels.</param>
    <param name="height">The new bitmap height, in pixels.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.SetCurrentTransform">
    <summary>Sets the transform that maps abstract coordinate to DIPs (device-independent pixel). This does not affect the world transform of the underlying device context.</summary>
    <param name="transform">Specifies the new transform. This parameter can be <b>NULL</b>, in which case the identity transform is implied.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget.SetPixelsPerDip">
    <summary>Sets the number of bitmap pixels per DIP (device-independent pixel). A DIP is 1/96 inch, so this value is the number if pixels per inch divided by 96.</summary>
    <param name="pixelsPerDip">A value that specifies the number of pixels per DIP.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteBitmapRenderTarget">
    <summary>Encapsulates a 32-bit device independent bitmap and device context, which can be used for rendering glyphs.</summary>
  </member>
</doc>