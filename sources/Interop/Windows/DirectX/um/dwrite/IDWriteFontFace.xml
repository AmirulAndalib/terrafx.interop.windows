<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteFontFace.GetDesignGlyphMetrics">
    <summary>
      <para>Obtains ideal (resolution-independent) glyph metrics in font design units.</para>
    </summary>
    <param name="glyphIndices">
      <para>Type: <b>const UINT16*</b></para>
      <para>An array of glyph indices for which to compute  metrics. The array must contain at least as many elements as specified by <i>glyphCount</i>.</para>
    </param>
    <param name="glyphCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of elements in the <i>glyphIndices</i> array.</para>
    </param>
    <param name="glyphMetrics">
      <para>Type: <b><see cref="DWRITE_GLYPH_METRICS" />*</b></para>
      <para>When this method returns, contains an array of DWRITE_GLYPH_METRICS structures.  <i>glyphMetrics</i> must be initialized with an empty buffer that contains at least as many elements as <i>glyphCount</i>.
The metrics returned by this function are in font design units.</para>
    </param>
    <param name="isSideways">
      <para>Type: <b>BOOL</b></para>
      <para>Indicates whether the font is being used in a sideways run. This can affect the glyph metrics if the font has oblique simulation
because sideways oblique simulation differs from non-sideways oblique simulation</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Design glyph metrics are used for glyph positioning.</para>
    </remarks>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetFiles">
    <summary>
      <para>Obtains the font files representing a font face.</para>
    </summary>
    <param name="numberOfFiles">
      <para>Type: <b>UINT32*</b></para>
      <para>If <i>fontFiles</i> is <b>NULL</b>, receives the number of files representing the font face.  Otherwise, the number of font files being requested should be passed.  See the Remarks section below for more information.</para>
    </param>
    <param name="fontFiles">
      <para>Type: <b><see cref="IDWriteFontFile" />**</b></para>
      <para>When this method returns, contains a pointer to a user-provided array that stores pointers to font files representing the font face.
This parameter can be <b>NULL</b> if the user wants only the number of files representing the font face.
This API increments reference count of the font file pointers returned according to COM conventions, and the client
should release them when finished.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <b>IDWriteFontFace.GetFiles</b> method should be called twice.  The first time you call <b>GetFiles</b><i>fontFiles</i> should be <b>NULL</b>. When the method returns, <i>numberOfFiles</i> receives the number of font files that represent the font face.</para>
      <para>Then, call the method a second time, passing the <i>numberOfFiles</i> value that was output the first call, and a non-null buffer of the correct size to store the <see cref="IDWriteFontFile" /> pointers.</para>
    </remarks>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetGdiCompatibleGlyphMetrics">
    <summary>
      <para>Obtains glyph metrics in font design units with the return values compatible with what GDI would produce.</para>
    </summary>
    <param name="emSize">
      <para>Type: <b>FLOAT</b></para>
      <para>The logical size of the font in DIP units.</para>
    </param>
    <param name="pixelsPerDip">
      <para>Type: <b>FLOAT</b></para>
      <para>The number of physical pixels per DIP.</para>
    </param>
    <param name="transform">
      <para>Type: <b>const <see cref="DWRITE_MATRIX" />*</b></para>
      <para>An optional transform applied to the glyphs and their positions. This transform is applied after the
scaling specified by the font size and <i>pixelsPerDip</i>.</para>
    </param>
    <param name="useGdiNatural">
      <para>Type: <b>BOOL</b></para>
      <para>When set to <b>FALSE</b>, the metrics are the same as the metrics of GDI aliased text.  When set to <b>TRUE</b>, the metrics are the same as the metrics of text measured by GDI using a font created with <b>CLEARTYPE_NATURAL_QUALITY</b>.</para>
    </param>
    <param name="glyphIndices">
      <para>Type: <b>const UINT16*</b></para>
      <para>An array of glyph indices for which to compute the metrics.</para>
    </param>
    <param name="glyphCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of elements in the <i>glyphIndices</i> array.</para>
    </param>
    <param name="glyphMetrics">
      <para>Type: <b><see cref="DWRITE_GLYPH_METRICS" />*</b></para>
      <para>An array of <see cref="DWRITE_GLYPH_METRICS" /> structures filled by this function. The metrics are in font design units.</para>
    </param>
    <param name="isSideways">
      <para>Type: <b>BOOL</b></para>
      <para>A BOOL value that indicates whether the font is being used in a sideways run.  This can affect the glyph metrics if the font has oblique simulation because sideways oblique simulation differs from non-sideways oblique simulation.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Standard <b>HRESULT</b> error code. If any of the input glyph indices are outside of the valid glyph index range for the current font face, <b>E_INVALIDARG</b> will be returned.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetGdiCompatibleMetrics">
    <summary>
      <para>Obtains design units and common metrics for the font face.
These metrics are applicable to all the glyphs within a fontface and are used by applications for layout calculations.</para>
    </summary>
    <param name="emSize">
      <para>Type: <b>FLOAT</b></para>
      <para>The logical size of the font in DIP units.</para>
    </param>
    <param name="pixelsPerDip">
      <para>Type: <b>FLOAT</b></para>
      <para>The number of physical pixels per DIP.</para>
    </param>
    <param name="transform">
      <para>Type: <b>const <see cref="DWRITE_MATRIX" />*</b></para>
      <para>An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and <i>pixelsPerDip</i>.</para>
    </param>
    <param name="fontFaceMetrics">
      <para>Type: <b><see cref="DWRITE_FONT_METRICS" />*</b></para>
      <para>A pointer to a <see cref="DWRITE_FONT_METRIC" />S structure to fill in. The metrics returned by this function are in font design units.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Standard HRESULT error code.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetGlyphCount">
    <summary>
      <para>Obtains the number of glyphs in the font face.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT16</b></para>
      <para>The number of glyphs in the font face.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetGlyphIndices">
    <summary>
      <para>Returns the nominal mapping of UCS4 Unicode code points to glyph indices as defined by the font 'CMAP' table.</para>
    </summary>
    <param name="codePoints">
      <para>Type: <b>const UINT32*</b></para>
      <para>An array of USC4 code points from which to obtain nominal glyph indices. The array must be allocated and be able to contain the number of elements specified by <i>codePointCount</i>.</para>
    </param>
    <param name="codePointCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of elements in the <i>codePoints</i> array.</para>
    </param>
    <param name="glyphIndices">
      <para>Type: <b>UINT16*</b></para>
      <para>When this method returns, contains a pointer to an array of nominal glyph indices filled by this function.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Note that this mapping is primarily provided for line layout engines built on top of the physical font API.
Because of OpenType glyph substitution and line layout character substitution, the nominal conversion does not always correspond
to how a Unicode string will map to glyph indices when rendering using a particular font face.
Also, note that Unicode variant selectors provide for alternate mappings for character to glyph.
This call will always return the default variant.</para>
      <para>When characters are not present in the font this method returns the index 0, which is the undefined glyph or ".notdef" glyph.  If a character isn't in a font, IDWriteFont.HasCharacter returns false and GetUnicodeRanges doesn't return it in the range.</para>
    </remarks>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetGlyphRunOutline">
    <summary>
      <para>Computes the outline of a run of glyphs by calling back to the outline sink interface.</para>
    </summary>
    <param name="emSize">
      <para>Type: <b>FLOAT</b></para>
      <para>The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch.</para>
    </param>
    <param name="glyphIndices">
      <para>Type: <b>const UINT16*</b></para>
      <para>An array of glyph indices. The glyphs are in logical order and the advance direction depends on the <i>isRightToLeft</i> parameter. The array must be allocated and be able to contain the number of elements specified by <i>glyphCount</i>.</para>
    </param>
    <param name="glyphAdvances">
      <para>Type: <b>const FLOAT*</b></para>
      <para>An optional array of glyph advances in DIPs. The advance of a glyph is the amount to advance the position (in the direction of the baseline) after drawing the glyph. <i>glyphAdvances</i> contains the number of elements specified by <i>glyphCount</i>.</para>
    </param>
    <param name="glyphOffsets">
      <para>Type: <b>const <see cref="DWRITE_GLYPH_OFFSET" />*</b></para>
      <para>An optional array of glyph offsets, each of which specifies the offset along the baseline and offset perpendicular to the baseline of a glyph relative to the current pen position.   <i>glyphOffsets</i> contains the number of elements specified by <i>glyphCount</i>.</para>
    </param>
    <param name="glyphCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of glyphs in the run.</para>
    </param>
    <param name="isSideways">
      <para>Type: <b>BOOL</b></para>
      <para>If <b>TRUE</b>, the ascender of the glyph runs alongside the baseline. If <b>FALSE</b>, the glyph ascender runs perpendicular to the baseline. For example, an English alphabet on a vertical baseline would have <i>isSideways</i> set to <b>FALSE</b>.</para>
      <para>A client can render a vertical run by setting <i>isSideways</i> to <b>TRUE</b> and rotating the resulting geometry 90 degrees to the
right using a transform. The <i>isSideways</i> and <i>isRightToLeft</i> parameters cannot both be true.</para>
    </param>
    <param name="isRightToLeft">
      <para>Type: <b>BOOL</b></para>
      <para>The visual order of the glyphs. If this parameter is <b>FALSE</b>, then glyph advances are from left to right. If <b>TRUE</b>, the advance direction is right to left. By default, the advance direction
is left to right.</para>
    </param>
    <param name="geometrySink">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/DirectWrite/idwritegeometrysink">IDWriteGeometrySink</a>*</b></para>
      <para>A pointer to the interface that is called back to perform outline drawing operations.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetIndex">
    <summary>
      <para>Obtains the index of a font face in the context of its font files.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT32</b></para>
      <para>The zero-based index of a font face in cases when the font files contain a collection of font faces.
If the font files contain a single face, this value is zero.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetMetrics">
    <summary>
      <para>Obtains design units and common metrics for the font face.
These metrics are applicable to all the glyphs within a font face and are used by applications for layout calculations.</para>
    </summary>
    <param name="fontFaceMetrics">
      <para>Type: <b><see cref="DWRITE_FONT_METRICS" />*</b></para>
      <para>When this method returns, a <see cref="DWRITE_FONT_METRICS" /> structure that holds metrics (such as ascent, descent, or cap height) for the current font face element.
The metrics returned by this function are in font design units.</para>
    </param>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetRecommendedRenderingMode">
    <summary>
      <para>Determines the recommended rendering mode for the font, using the specified size and rendering parameters.</para>
    </summary>
    <param name="emSize">
      <para>Type: <b>FLOAT</b></para>
      <para>The logical size of the font in DIP units. A DIP ("device-independent pixel") equals 1/96 inch.</para>
    </param>
    <param name="pixelsPerDip">
      <para>Type: <b>FLOAT</b></para>
      <para>The number of physical pixels per DIP. For example, if the DPI of the rendering surface is 96, this
value is 1.0f. If the DPI is 120, this value is 120.0f/96.</para>
    </param>
    <param name="measuringMode">
      <para>Type: <b><see cref="DWRITE_MEASURING_MODE" /></b></para>
      <para>The measuring method that will be used for glyphs in the font.
Renderer implementations may choose different rendering modes for different measuring methods, for example:</para>
      <list type="bullet">
        <item>
          <description>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL for <see cref="DWRITE_MEASURING_MODE_NATURAL" /></description>
        </item>
        <item>
          <description>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC for <see cref="DWRITE_MEASURING_MODE_GDI_CLASSIC" /></description>
        </item>
        <item>
          <description>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL for <see cref="DWRITE_MEASURING_MODE_GDI_NATURAL" /></description>
        </item>
      </list>
    </param>
    <param name="renderingParams">
      <para>Type: <b><see cref="IDWriteRenderingParams" />*</b></para>
      <para>A pointer to an object that contains rendering settings such as gamma level, enhanced contrast, and ClearType level. This parameter is necessary in case the rendering parameters
object overrides the rendering mode.</para>
    </param>
    <param name="renderingMode">
      <para>Type: <b><see cref="DWRITE_RENDERING_MODE" />*</b></para>
      <para>When this method returns, contains a value that indicates the recommended rendering mode to use.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetSimulations">
    <summary>
      <para>Obtains the algorithmic style simulation flags of a font face.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="DWRITE_FONT_SIMULATIONS" /></b></para>
      <para>Font face simulation flags for algorithmic means of making text bold or italic.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.GetType">
    <summary>
      <para>Obtains the file format type of a font face.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="DWRITE_FONT_FACE_TYPE" /></b></para>
      <para>A value that indicates the type of format for the font face (such as Type 1, TrueType, vector, or bitmap).</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.IsSymbolFont">
    <summary>
      <para>Determines whether the font is a symbol font.</para>
    </summary>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>Returns <b>TRUE</b> if the font is a symbol font, otherwise <b>FALSE</b>.</para>
    </returns>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.ReleaseFontTable">
    <summary>
      <para>Releases the table obtained earlier from <see cref="TryGetFontTable" />.</para>
    </summary>
    <param name="tableContext">
      <para>Type: <b>void*</b></para>
      <para>A pointer to the opaque context from <see cref="TryGetFontTable" />.</para>
    </param>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace.TryGetFontTable">
    <summary>
      <para>Finds the specified OpenType font table if it exists and returns a pointer to it.
The function accesses the underlying font data through the <see cref="IDWriteFontFileStream" /> interface
implemented by the font file loader.</para>
    </summary>
    <param name="openTypeTableTag">
      <para>Type: <b>UINT32</b></para>
      <para>The four-character tag of a OpenType font table to find.
Use the <b>DWRITE_MAKE_OPENTYPE_TAG</b> macro to create it as an <b>UINT32</b>.
Unlike GDI, it does not support the special TTCF and null tags to access the whole font.</para>
    </param>
    <param name="tableData">
      <para>Type: <b>const void**</b></para>
      <para>When this method returns, contains the address of  a pointer to the base of the table in memory.
The pointer is valid only as long as the font face used to get the font table still exists;
(not any other font face, even if it actually refers to the same physical font).
This parameter is passed uninitialized.</para>
    </param>
    <param name="tableSize">
      <para>Type: <b>UINT32*</b></para>
      <para>When this method returns, contains a pointer to the size, in bytes, of the font table.</para>
    </param>
    <param name="tableContext">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, the address of a pointer to  the opaque context, which must be freed by calling <see cref="ReleaseFontTable" />.
The context actually comes from the lower-level <see cref="IDWriteFontFileStream" />,
which may be implemented by the application or DWrite itself.
It is possible for a <b>NULL</b><i>tableContext</i> to be returned, especially if
the implementation performs direct memory mapping on the whole file.
Nevertheless, always release it later, and do not use it as a test for function success.
The same table can be queried multiple times,
but because each returned context can be different, you must release each context separately.</para>
    </param>
    <param name="exists">
      <para>Type: <b>BOOL*</b></para>
      <para>When this method returns, <b>TRUE</b> if the font table exists; otherwise, <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The context for the same tag may be different for each call,
so each one must be held and released separately.</para>
    </remarks>
    <seealso cref="IDWriteFontFace" />
  </member>
  <member name="IDWriteFontFace">
    <summary>
      <para>This interface exposes various font data such as metrics, names, and glyph outlines. It contains font face type, appropriate file references, and face identification data.</para>
      <para>This interface extends <see cref="IUnknown" />.</para>
    </summary>
  </member>
</doc>