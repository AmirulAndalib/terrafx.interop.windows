<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteTextAnalyzer.AnalyzeBidi">
    <summary>Analyzes a text range for script directionality, reading attributes from the source and reporting levels to the sink callback <see cref="SetBidiLevel" />.</summary>
    <param name="analysisSource">A pointer to a source object to analyze.</param>
    <param name="textPosition">The starting text position within the source object.</param>
    <param name="textLength">The text length to analyze.</param>
    <param name="analysisSink">A pointer to the sink callback object that receives the text analysis.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.AnalyzeLineBreakpoints">
    <summary>Analyzes a text range for potential breakpoint opportunities, reading attributes from the source and reporting breakpoint opportunities to the sink callback <see cref="SetLineBreakpoints" />.</summary>
    <param name="analysisSource">A pointer to the source object to analyze.</param>
    <param name="textPosition">The starting text position within the source object.</param>
    <param name="textLength">The text length to analyze.</param>
    <param name="analysisSink">A pointer to the sink callback object that receives the text analysis.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.AnalyzeNumberSubstitution">
    <summary>Analyzes a text range for spans where number substitution is applicable, reading attributes from the source and reporting substitutable ranges to the sink callback <see cref="SetNumberSubstitution" />.</summary>
    <param name="analysisSource">The source object to analyze.</param>
    <param name="textPosition">The starting position within the source object.</param>
    <param name="textLength">The length to analyze.</param>
    <param name="analysisSink">A pointer to the sink callback object that receives the text analysis.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.AnalyzeScript">
    <summary>Analyzes a text range for script boundaries, reading text attributes from the source and reporting the Unicode script ID to the sink callback <see cref="SetScript" />.</summary>
    <param name="analysisSource">A pointer to the source object to analyze.</param>
    <param name="textPosition">The starting text position within the source object.</param>
    <param name="textLength">The text length to analyze.</param>
    <param name="analysisSink">A pointer to the sink callback object that receives the text analysis.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.GetGdiCompatibleGlyphPlacements">
    <summary>Place glyphs output from the <see cref="GetGlyphs" /> method according to the font and the writing system's rendering rules.</summary>
    <param name="textString">An array of characters containing the original string from which the glyphs came.</param>
    <param name="clusterMap">A pointer to the mapping from character ranges to glyph ranges. This is returned by <see cref="GetGlyphs" />.</param>
    <param name="textProps">A pointer to an array of structures that contains shaping properties for each character. This structure is returned by<see cref="GetGlyphs" />.</param>
    <param name="textLength">The text length of <i>textString</i>.</param>
    <param name="glyphIndices">An array of glyph indices returned by <see cref="GetGlyphs" />.</param>
    <param name="glyphProps">A pointer to an array of structures that contain shaping properties for each glyph returned by <see cref="GetGlyphs" />.</param>
    <param name="glyphCount">The number of glyphs returned from <see cref="GetGlyphs" />.</param>
    <param name="fontFace">A pointer to the font face that is the source for the output glyphs.</param>
    <param name="fontEmSize">The logical font size in DIPs.</param>
    <param name="pixelsPerDip">The number of physical pixels per DIP.</param>
    <param name="transform">An optional transform applied to the glyphs and their positions. This transform is applied after the scaling specified by the font size and <i>pixelsPerDip</i>.</param>
    <param name="useGdiNatural">When set to <b>FALSE</b>, the metrics are the same as the metrics of GDI aliased text. When set to <b>TRUE</b>, the metrics are the same as the metrics of text measured by GDI using a font created with <b>CLEARTYPE_NATURAL_QUALITY</b>.</param>
    <param name="isSideways">A Boolean flag set to <b>TRUE</b> if the text is intended to be drawn vertically.</param>
    <param name="isRightToLeft">A Boolean flag set to <b>TRUE</b> for right-to-left text.</param>
    <param name="scriptAnalysis">A pointer to a Script analysis result from an<see cref="AnalyzeScript" /> call.</param>
    <param name="localeName">An array of characters containing the locale to use when selecting glyphs. For example, the same character may map to different glyphs for ja-jp versus zh-chs. If this is <b>NULL</b>, then the default mapping based on the script is used.</param>
    <param name="features">An array of pointers to the sets of typographic features to use in each feature range.</param>
    <param name="featureRangeLengths">The length of each feature range, in characters.<br />The sum of all lengths should be equal to <i>textLength</i>.</param>
    <param name="featureRanges">The number of feature ranges.</param>
    <param name="glyphAdvances">When this method returns, contains the advance width of each glyph.</param>
    <param name="glyphOffsets">When this method returns, contains the offset of the origin of each glyph.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.GetGlyphPlacements">
    <summary>Places glyphs output from the <see cref="GetGlyphs" /> method according to the font and the writing system's rendering rules.</summary>
    <param name="textString">An array of characters containing the original string from which the glyphs came.</param>
    <param name="clusterMap">A pointer to the mapping from character ranges to glyph ranges. This is returned by <see cref="GetGlyphs" />.</param>
    <param name="textProps">A pointer to an array of structures that contains shaping properties for each character. This structure is returned by<see cref="GetGlyphs" />.</param>
    <param name="textLength">The text length of <i>textString</i>.</param>
    <param name="glyphIndices">An array of glyph indices returned by <see cref="GetGlyphs" />.</param>
    <param name="glyphProps">A pointer to an array of structures that contain shaping properties for each glyph returned by <see cref="GetGlyphs" />.</param>
    <param name="glyphCount">The number of glyphs returned from <see cref="GetGlyphs" />.</param>
    <param name="fontFace">A pointer to the font face that is the source for the output glyphs.</param>
    <param name="fontEmSize">The logical font size in DIPs.</param>
    <param name="isSideways">A Boolean flag set to <b>TRUE</b> if the text is intended to be drawn vertically.</param>
    <param name="isRightToLeft">A Boolean flag set to <b>TRUE</b> for right-to-left text.</param>
    <param name="scriptAnalysis">A pointer to a Script analysis result from an <see cref="AnalyzeScript" /> call.</param>
    <param name="localeName">An array of characters containing the locale to use when selecting glyphs. For example, the same character may map to different glyphs for ja-jp versus zh-chs. If this is <b>NULL</b>, the default mapping based on the script is used.</param>
    <param name="features">An array of pointers to the sets of typographic features to use in each feature range.</param>
    <param name="featureRangeLengths">The length of each feature range, in characters.<br />The sum of all lengths should be equal to <i>textLength</i>.</param>
    <param name="featureRanges">The number of feature ranges.</param>
    <param name="glyphAdvances">When this method returns, contains the advance width of each glyph.</param>
    <param name="glyphOffsets">When this method returns, contains the offset of the origin of each glyph.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer.GetGlyphs">
    <summary>Parses the input text string and maps it to the set of glyphs and associated glyph data according to the font and the writing system's rendering rules.</summary>
    <param name="textString">An array of characters to convert to glyphs.</param>
    <param name="textLength">The length of <i>textString</i>.</param>
    <param name="fontFace">The font face that is the source of the output glyphs.</param>
    <param name="isSideways">A Boolean flag set to <b>TRUE</b> if the text is intended to be drawn vertically.</param>
    <param name="isRightToLeft">A Boolean flag set to <b>TRUE</b> for right-to-left text.</param>
    <param name="scriptAnalysis">A pointer to a Script analysis result from an <see cref="AnalyzeScript" /> call.</param>
    <param name="localeName">The locale to use when selecting glyphs. For example the same character may map to different glyphs for ja-jp versus zh-chs. If this is <b>NULL</b>, then the default mapping based on the script is used.</param>
    <param name="numberSubstitution">A pointer to an optional number substitution which selects the appropriate glyphs for digits and related numeric characters, depending on the results obtained from <see cref="AnalyzeNumberSubstitution" />. Passing <b>NULL</b> indicates that no substitution is needed and that the digits should receive nominal glyphs.</param>
    <param name="features">An array of pointers to the sets of typographic features to use in each feature range.</param>
    <param name="featureRangeLengths">The length of each feature range, in characters.<br />The sum of all lengths should be equal to <i>textLength</i>.</param>
    <param name="featureRanges">The number of feature ranges.</param>
    <param name="maxGlyphCount">The maximum number of glyphs that can be returned.</param>
    <param name="clusterMap">When this method returns, contains the mapping from character ranges to glyph ranges.</param>
    <param name="textProps">When this method returns, contains a pointer to an array of structures that contains shaping properties for each character.</param>
    <param name="glyphIndices">The output glyph indices.</param>
    <param name="glyphProps">When this method returns, contains a pointer to an array of structures that contain shaping properties for each output glyph.</param>
    <param name="actualGlyphCount">When this method returns, contains the actual number of glyphs returned if the call succeeds.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer">
    <summary>Analyzes various text properties for complex script processing such as bidirectional (bidi) support for languages like Arabic, determination of line break opportunities, glyph placement, and number substitution.</summary>
  </member>
</doc>