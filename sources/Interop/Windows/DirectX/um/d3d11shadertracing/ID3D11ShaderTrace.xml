<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11ShaderTrace.GetInitialRegisterContents">
    <summary>
      <para>Retrieves the initial contents of the specified input register.</para>
    </summary>
    <param name="pRegister">
      <para>A pointer to a <see cref="D3D11_TRACE_REGISTER" /> structure that describes the input register to retrieve the initial contents from. You can retrieve valid initial data from only the following input register types. That is, to retrieve valid data, the  <b>RegType</b> member of  <b>D3D11_TRACE_REGISTER</b> must be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>D3D11_TRACE_INPUT_REGISTER</description>
        </item>
        <item>
          <description>D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER</description>
        </item>
        <item>
          <description>D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER</description>
        </item>
      </list>
      <para>Valid data is indicated by the <b>ValidMask</b> member of the <see cref="D3D11_TRACE_VALUE" /> structure that  <i>pValue</i> points to.</para>
    </param>
    <param name="pValue">
      <para>A pointer to a  <see cref="D3D11_TRACE_VALUE" /> structure. <b>GetInitialRegisterContents</b> fills the members of this structure with information about the initial contents.</para>
    </param>
    <returns>
      <para>
        <b>GetInitialRegisterContents</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the method retrieves the initial register contents.</description>
        </item>
        <item>
          <description>
            <b>E_FAIL</b> if a trace is not available.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if <i>pRegister</i> is invalid or NULL or if <i>pValue</i> is NULL.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You can call <b>GetInitialRegisterContents</b> for registers other than the input register types that are specified in the <i>pRegister</i> parameter description. However, <b>GetInitialRegisterContents</b> sets the <b>ValidMask</b> member of the <see cref="D3D11_TRACE_VALUE" /> structure to which  <i>pValue</i> points to empty (all zeros, 0000), and the register values that the <b>Bits</b> member of <b>D3D11_TRACE_VALUE</b> specifies are meaningless. The data that <b>GetInitialRegisterContents</b> returns is not affected by stepping in a trace; however, the data that is returned is affected by changing the stamp index through a call to  <see cref="ID3D11ShaderTrace.PSSelectStamp" />.</para>
      <para>
        <b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.GetReadRegister">
    <summary>
      <para>Retrieves information about a register that was read by a step in the trace.</para>
    </summary>
    <param name="stepIndex">
      <para>The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <see cref="D3D11_TRACE_STATS" /> structure. You can retrieve information in any step order.</para>
    </param>
    <param name="readRegisterIndex">
      <para>The index of the register within  the trace step. The range of the index is [0...NumRegistersRead-1], where <b>NumRegistersRead</b> is a member of the  <see cref="D3D11_TRACE_STEP" /> structure.</para>
    </param>
    <param name="pRegister">
      <para>A pointer to a <see cref="D3D11_TRACE_REGISTER" /> structure. <b>GetReadRegister</b> fills the members of this structure with information about the register that was read by the step in the trace.</para>
    </param>
    <param name="pValue">
      <para>A pointer to a  <see cref="D3D11_TRACE_VALUE" /> structure. <b>GetReadRegister</b> fills the members of this structure with information about the value that was read from the register.</para>
    </param>
    <returns>
      <para>
        <b>GetReadRegister</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the method retrieves the register information.</description>
        </item>
        <item>
          <description>
            <b>E_FAIL</b> if a trace is not available or if the trace was not created with the D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS flag.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if <i>stepIndex</i> or <i>readRegisterIndex</i> is out of range or if <i>pRegister</i> or <i>pValue</i> is NULL.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.GetStep">
    <summary>
      <para>Retrieves information about the specified step in the trace.</para>
    </summary>
    <param name="stepIndex">
      <para>The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <see cref="D3D11_TRACE_STATS" /> structure. You can retrieve information about a step in any step order.</para>
    </param>
    <param name="pTraceStep">
      <para>A pointer to a  <see cref="D3D11_TRACE_STEP" /> structure. <b>GetStep</b> fills the members of this structure with information about the trace step that is specified by the <i>stepIndex</i>  parameter.</para>
    </param>
    <returns>
      <para>
        <b>GetStep</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the method retrieves the step information.</description>
        </item>
        <item>
          <description>
            <b>E_FAIL</b> if a trace is not available.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if <i>stepIndex</i> is out of range or if <i>pTraceStep</i> is NULL.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.GetTraceStats">
    <summary>
      <para>Returns statistics about the trace.</para>
    </summary>
    <param name="pTraceStats">
      <para>A pointer to a <see cref="D3D11_TRACE_STATS" /> structure. <b>GetTraceStats</b> fills the members of this structure with statistics about the trace.</para>
    </param>
    <returns>
      <para>
        <b>GetTraceStats</b> returns:</para>
      <list type="bullet">
        <item>
          <description>S_OK if statistics about the trace are successfully obtained.</description>
        </item>
        <item>
          <description>E_FAIL if no trace statistics are available yet; <see cref="ID3D11ShaderTrace.TraceReady" /> must return S_OK before <b>GetTraceStats</b> can succeed.</description>
        </item>
        <item>
          <description>E_INVALIDARG if <i>pTraceStats</i> is NULL.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.GetWrittenRegister">
    <summary>
      <para>Retrieves information about a register that was written by a step in the trace.</para>
    </summary>
    <param name="stepIndex">
      <para>The index of the step within the trace. The range of the index is [0...NumTraceSteps-1], where <b>NumTraceSteps</b> is a member of the  <see cref="D3D11_TRACE_STATS" /> structure. You can retrieve information in any step order.</para>
    </param>
    <param name="writtenRegisterIndex">
      <para>The index of the register within  the trace step. The range of the index is [0...NumRegistersWritten-1], where <b>NumRegistersWritten</b> is a member of the  <see cref="D3D11_TRACE_STEP" /> structure.</para>
    </param>
    <param name="pRegister">
      <para>A pointer to a <see cref="D3D11_TRACE_REGISTER" /> structure. <b>GetWrittenRegister</b> fills the members of this structure with information about the register that was written by the step in the trace.</para>
    </param>
    <param name="pValue">
      <para>A pointer to a  <see cref="D3D11_TRACE_VALUE" /> structure. <b>GetWrittenRegister</b> fills the members of this structure with information about the value that was written to the register.</para>
    </param>
    <returns>
      <para>
        <b>GetWrittenRegister</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the method retrieves the register information.</description>
        </item>
        <item>
          <description>
            <b>E_FAIL</b> if a trace is not available or if the trace was not created with the D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES flag.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if <i>stepIndex</i> or <i>writtenRegisterIndex</i> is out of range or if <i>pRegister</i> or <i>pValue</i> is NULL.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.PSSelectStamp">
    <summary>
      <para>Sets the specified pixel-shader stamp.</para>
    </summary>
    <param name="stampIndex">
      <para>The index of the stamp to select.</para>
    </param>
    <returns>
      <para>
        <b>PSSelectStamp</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the method set the pixel-shader stamp, and if the primitive covers the pixel and sample for the stamp.</description>
        </item>
        <item>
          <description>
            <b>S_FALSE</b> if the method set the pixel-shader stamp, and if the invocation for the selected stamp falls off the primitive.</description>
        </item>
        <item>
          <description>
            <b>E_FAIL</b> if you called the method for a vertex shader or geometry shader;   <b>PSSelectStamp</b> is meaningful only for pixel shaders.</description>
        </item>
        <item>
          <description>
            <b>E_INVALIDARG</b> if <i>stampIndex</i> is out of range [0..3].</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>After you call <b>PSSelectStamp</b> to set the pixel-shader stamp, you can call the <see cref="ID3D11ShaderTrace.GetInitialRegisterContents" />,  <see cref="ID3D11ShaderTrace.GetStep" />, <see cref="ID3D11ShaderTrace.GetWrittenRegister" />, and <see cref="ID3D11ShaderTrace.GetReadRegister" /> methods to get trace data for that stamp.</para>
      <para>
        <b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.ResetTrace">
    <summary>
      <para>Resets the shader-trace object.</para>
    </summary>
    <remarks>
      <para>After you call <b>ResetTrace</b>, the <see cref="ID3D11ShaderTrace" /> object behaves as if it had just been created. Thereafter, shader invocations for the trace start from 0 again; calls to <see cref="ID3D11ShaderTrace.TraceReady" /> return <b>S_FALSE</b> until the selected shader invocation number is reached, and <b>TraceReady</b> records a new trace.</para>
      <para>
        <b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace.TraceReady">
    <summary>
      <para>Specifies that the shader trace recorded and is ready to use.</para>
    </summary>
    <param name="pTestCount">
      <para>An optional pointer to a variable that receives the number of times that a matching invocation for the trace occurred. If not used, set to NULL.
For more information about this number, see Remarks.</para>
    </param>
    <returns>
      <para>
        <b>TraceReady</b> returns:</para>
      <list type="bullet">
        <item>
          <description>
            <b>S_OK</b> if the trace is ready.</description>
        </item>
        <item>
          <description>
            <b>S_FALSE</b> if the trace is not ready.</description>
        </item>
        <item>
          <description>
            <b>E_OUTOFMEMORY</b> if memory ran out while the trace was in the process of recording. You can try to record the trace again by calling <see cref="ID3D11ShaderTrace.ResetTrace" /> and then redrawing. If you decide not to record the trace again, release the <see cref="ID3D11ShaderTrace" /> interface.</description>
        </item>
        <item>
          <description>Possibly other error codes that are described in <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a trace is meant to record invocation 3 but only two invocations have happened so far, <b>TraceReady</b> sets the variable to which <i>pTestCount</i> points to 2.  You can use this value to understand why a trace is not ready yet. Conversely, the variable to which <i>pTestCount</i> points might be larger than the requested invocation count for a trace that is ready.  You can use this value to determine the number of invocations that ran past the required trace invocation count.  For example, you might not know the number of overdraws that occur on a pixel for a given shader in a draw call.  If you can redraw the scene identically, you can set up the traces this next time based on the value that <b>TraceReady</b> returned at <i>pTestCount</i> on the first pass.</para>
      <para>If the shader trace recorded, you can successfully call the <see cref="ID3D11ShaderTrace.GetTraceStats" />, <see cref="ID3D11ShaderTrace.GetInitialRegisterContents" />, and  <see cref="ID3D11ShaderTrace.GetStep" /> methods. You can call the <see cref="ID3D11ShaderTrace.ResetTrace" /> and <see cref="ID3D11ShaderTrace.PSSelectStamp" /> methods regardless of whether the shader trace recorded.</para>
      <para>
        <b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="ID3D11ShaderTrace" />
  </member>
  <member name="ID3D11ShaderTrace">
    <summary>
      <para>An <b>ID3D11ShaderTrace</b> interface implements methods for obtaining traces of shader executions.</para>
    </summary>
    <remarks>
      <para>To retrieve an instance of <b>ID3D11ShaderTrace</b>, call the <see cref="ID3D11ShaderTraceFactory.CreateShaderTrace" /> method. To retrieve an instance of <see cref="ID3D11ShaderTraceFactory" />, call <see cref="IUnknown.QueryInterface" /> on a <see cref="ID3D11Device" /> that you created with <see cref="D3D11_CREATE_DEVICE_DEBUGGABLE" />. Although shader tracing operates without setting <b>D3D11_CREATE_DEVICE_DEBUGGABLE</b>, we recommend that you create a shader debugging device because some devices (for example, <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-create-warp">WARP</a> devices) might make behind-the-scenes shader optimizations that will lead to slightly incorrect shader traces when <b>D3D11_CREATE_DEVICE_DEBUGGABLE</b> isn't set.</para>
      <para>All <b>ID3D11ShaderTrace</b> methods are thread safe.</para>
      <para>All <b>ID3D11ShaderTrace</b> methods immediately force the reference device to flush rendering commands. Therefore, the most current trace status is always available on the reference device. That is, if you expect a trace to be ready after a draw operation, it will be ready.</para>
      <para>
        <b>Note</b>  This API requires the Windows Software Development Kit (SDK) for Windows 8.</para>
    </remarks>
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-shader-interfaces">Shader Interfaces</seealso>
  </member>
</doc>