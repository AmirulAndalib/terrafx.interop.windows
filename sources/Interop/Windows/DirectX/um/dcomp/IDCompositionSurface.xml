<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDCompositionSurface.BeginDraw">
    <summary>
      <para>Initiates drawing on this Microsoft DirectComposition surface object. The update rectangle must be within the boundaries of the surface; otherwise, this method fails.</para>
    </summary>
    <param name="updateRect">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>The rectangle to be updated. If this parameter is NULL, the entire bitmap is updated.</para>
    </param>
    <param name="iid">
      <para>Type: <b>REFIID</b></para>
      <para>The identifier of the interface to retrieve.</para>
    </param>
    <param name="updateObject">
      <para>Type: <b>void**</b></para>
      <para>Receives an interface pointer of the type specified in the <i>iid</i> parameter.   This parameter must not be NULL.</para>
      <para>
        <b>Note</b>  In Windows 8, this parameter was <i>surface</i>.</para>
    </param>
    <param name="updateOffset">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
      <para>The offset into the surface where the application should draw updated content. This offset will reference the upper left corner of the update rectangle.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method enables an application to incrementally update the contents of a DirectComposition surface object. The application must use the following sequence:</para>
      <list type="number">
        <item>
          <description>Call <b>BeginDraw</b> to initiate the incremental update.</description>
        </item>
        <item>
          <description>Use the retrieved surface as a render target and draw the updated contents at the retrieved offset.</description>
        </item>
        <item>
          <description>Call the <see cref="IDCompositionSurface.EndDraw" /> method to finish the update.</description>
        </item>
      </list>
      <para>The update object returned by this method is either a Direct2D device context or a DXGI surface, depending on the value of the <i>iid</i> parameter and on how the DirectComposition surface object was created. If the <i>iid</i> parameter is __uuidof(ID2D1DeviceContext), then the returned object is a Direct2D device context that already has the DirectComposition surface selected as a render target. Otherwise, it is a DXGI surface which the application may use as a render target. In either case, the returned object is associated with the Direct2D or DXGI device passed by the application to the DCompositionCreateDevice2 function or the <see cref="IDCompositionDevice2.CreateSurfaceFactory" /> method.</para>
      <para>The <i>iid</i> parameter may only be __uuidof(ID2D1DeviceContext) if the DirectComposition surface object was created from a DirectComposition device or surface factory that was, itself, created with an associated Direct2D device. In particular, the application must have called either the DCompositionCreateDevice2 function or the <see cref="IDCompositionDevice2.CreateSurfaceFactory" /> method with a Direct2D device as the <i>renderingDevice</i> parameter. If the DirectComposition surface was created via a surface factory that was not associated with a Direct2D device, or if it was created directly via the IDCompositionDevice2 interface and the device was not directly associated with a Direct2D device, then passing __uuidof(ID2D1DeviceContext) as the iid parameter causes this method to return E_INVALIDARG.</para>
      <para>If the application successfully retrieves a Direct2D device context as the update object, then the application should not call either the ID2D1DeviceContext.BeginDraw or ID2D1DeviceContext.EndDraw methods on the returned Direct2D device context.</para>
      <para>The retrieved offset is not necessarily the same as the top-left corner of the requested update rectangle. The application must transform its rendering primitives to draw within a rectangle of the same width and height as the input rectangle, but at the given offset. The application should not draw outside of this rectangle.</para>
      <para>If the <i>updateRectangle</i> parameter is NULL, the entire surface is updated. In that case, because the retrieved offset still might not be (0,0), the application still needs to transform its rendering primitives accordingly.</para>
      <para>If the surface is not a virtual surface, then the first time the application calls this method for a particular non-virtual surface, the update rectangle must cover the entire surface, either by specifying the full surface in the requested update rectangle, or by specifying NULL as the <i>updateRectangle</i> parameter. For virtual surfaces, the first call may be any sub-rectangle of the surface.</para>
      <para>Because each call to this method might retrieve a different object in the <i>updateObject</i> surface, the application should not cache the retrieved surface pointer. The application should release the retrieved pointer as soon as it finishes drawing.</para>
      <para>The retrieved surface rectangle does not contain the previous contents of the bitmap. The application must update every pixel in the update rectangle, either by first clearing the render target, or by issuing enough rendering primitives to fully cover the update rectangle. Because the initial contents of the update surface are undefined, failing to update every pixel leads to undefined behavior.</para>
      <para>Only one DirectComposition surface can be updated at a time. An application must suspend drawing on one surface before beginning or resuming to draw on another surface. If the application calls <b>BeginDraw</b> twice, either for the same surface or for another surface belonging to the same DirectComposition device, without an intervening call to <see cref="IDCompositionSurface.EndDraw" />, the second call fails. If the application calls <see cref="IDCompositionDevice2.Commit" /> without calling <b>EndDraw</b>, the update remains pending. The update takes effect only after the application calls <b>EndDraw</b> and then  calls the <b>IDCompositionDevice2.Commit</b>  method.</para>
    </remarks>
    <seealso cref="IDCompositionSurface" />
    <seealso cref="IDCompositionSurface.EndDraw" />
  </member>
  <member name="IDCompositionSurface.EndDraw">
    <summary>
      <para>Marks the end of drawing on this Microsoft DirectComposition surface object.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code, which can include <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED</a>.</para>
    </returns>
    <remarks>
      <para>This method completes an update that was begun by a previous call to the <see cref="IDCompositionSurface.BeginDraw" /> method. After this method returns, the application can start another update on the same surface object or on a different one.</para>
      <para>If the application calls <see cref="IDCompositionDevice2.Commit" /> before calling <b>IDCompositionSurface.EndDraw</b> for a surface with a pending update, that update is not processed by that Commit call. The update only takes effect on screen after the application calls <b>IDCompositionSurface.EndDraw</b> followed by the IDCompositionDevice2.Commit method.</para>
    </remarks>
    <seealso cref="IDCompositionSurface" />
    <seealso cref="IDCompositionSurface.BeginDraw" />
    <seealso cref="IDCompositionSurface.EndDraw" />
  </member>
  <member name="IDCompositionSurface.ResumeDraw">
    <summary>
      <para>Resumes drawing on this Microsoft DirectComposition surface object.</para>
    </summary>
    <returns>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code, which can include <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED</a> and <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED</a>.</para>
    </returns>
    <remarks>
      <para>This method allows the surface update to continue unless there are other surfaces that have active, unsuspended draws.</para>
    </remarks>
    <seealso cref="IDCompositionSurface" />
    <seealso cref="IDCompositionSurface.SuspendDraw" />
  </member>
  <member name="IDCompositionSurface.Scroll">
    <summary>
      <para>Scrolls a rectangular area of a Microsoft DirectComposition logical surface.</para>
    </summary>
    <param name="scrollRect">
      <para>The rectangular area of the surface to be scrolled, relative to the upper-left corner of the surface. If this parameter is NULL, the entire surface is scrolled.</para>
    </param>
    <param name="clipRect">
      <para>The <i>clipRect</i> clips the destination (<i>scrollRect</i> after offset) of the scroll.
The only bitmap content that will be scrolled are those that remain inside the clip rectangle after the scroll is completed.</para>
    </param>
    <param name="offsetX">
      <para>The amount of horizontal scrolling, in pixels. Use positive values to scroll right, and negative values to scroll left.</para>
    </param>
    <param name="offsetY">
      <para>The amount of vertical scrolling, in pixels. Use positive values to scroll down, and negative values to scroll up.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method allows an application to blt/copy a sub-rectangle of a DirectComposition surface object. This avoids re-rendering content that is already available.</para>
      <para>The <i>scrollRect</i> rectangle must be contained in the boundaries of the surface.  If the <i>scrollRect</i> rectangle goes outside the bounds of the surface, this method fails.</para>
      <para>The bits copied by the scroll operation (source) are defined by the intersection of the <i>scrollRect</i> and <i>clipRect</i> rectangles.</para>
      <para>The bits shown on the screen (destination) are defined by the intersection of the offset source rectangle and <i>clipRect</i>.</para>
      <para>Scroll operations can only be called before calling <see cref="BeginDraw" /> or after calling <see cref="EndDraw" />.  Suspended or resumed surfaces are not candidates for scrolling because they are still being updated.</para>
      <para>The application is responsible for ensuring that the scrollable area for an <see cref="IDCompositionVirtualSurface" /> is limited to valid pixels. The behavior for invalid pixels in the <i>scrollRect</i> is undefined.</para>
      <para>Virtual surface sub-rectangular areas that were discarded by a trim or a resize operation can't be scrolled even if the trim or resize is applied in the same batch.  <see cref="Trim" /> and <see cref="Resize" /> are applied immediately.</para>
    </remarks>
    <seealso cref="IDCompositionSurface" />
  </member>
  <member name="IDCompositionSurface.SuspendDraw">
    <summary>
      <para>Suspends the drawing on this Microsoft DirectComposition surface object.</para>
    </summary>
    <returns>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code, which can include <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED</a> and <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED</a>.</para>
    </returns>
    <remarks>
      <para>Because only one surface can be open for drawing at a time, calling <b>SuspendDraw</b> allows the user to call <see cref="IDCompositionSurface.BeginDraw" /> on a different surface. Drawing to this surface can be resumed by calling <see cref="IDCompositionSurface.ResumeDraw" />.</para>
    </remarks>
    <seealso cref="IDCompositionSurface" />
    <seealso cref="IDCompositionSurface.ResumeDraw" />
  </member>
  <member name="IDCompositionSurface">
    <summary>
      <para>Represents a physical bitmap that can be associated with a visual for composition in a visual tree.  This interface can also be used to update the bitmap contents.</para>
    </summary>
    <seealso cref="DCompositionCreateSurfaceHandle" />
    <seealso cref="IDCompositionVirtualSurface" />
    <seealso cref="IDCompositionVisual.SetContent" />
  </member>
</doc>