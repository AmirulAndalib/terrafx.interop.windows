<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.DCompositionAttachMouseDragToHwnd">
    <summary>Creates an Interaction/InputSink to route mouse button down and any subsequent move and up events to the given HWND. There is no move thresholding; when enabled, all events including and following the down are unconditionally redirected to the specified window. After calling this API, the device owning the visual must be committed.</summary>
    <param name="visual">The visual to route messages from.</param>
    <param name="hwnd">The HWND to route messages to.</param>
    <param name="enable">Boolean value indicating whether to enable or disable routing.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="DirectX.DCompositionAttachMouseWheelToHwnd">
    <summary>Creates an Interaction/InputSink to route mouse wheel messages to the given HWND. This will fail if there is already an interaction attached to this visual. After calling this API, the device that owns the visual must be committed.</summary>
    <param name="visual">The visual to route messages from.</param>
    <param name="hwnd">The HWND to route messages to.</param>
    <param name="enable">Boolean value indicating whether to enable or disable routing.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="DirectX.DCompositionBoostCompositorClock">
    <summary>Requests that the system dynamically switch to a higher refresh rate to enhance latency-sensitive content.</summary>
    <param name="enable">
      <code>TRUE</code> to request that the system dynamically switch to a higher refresh rate; otherwise, <code>FALSE</code>.</param>
    <returns>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</returns>
  </member>
  <member name="DirectX.DCompositionCreateDevice">
    <summary>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</summary>
    <param name="dxgiDevice">The DXGI device to use to create DirectComposition surface objects.</param>
    <param name="iid">The identifier of the interface to retrieve.</param>
    <param name="dcompositionDevice">Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</param>
    <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a> for a list of error codes.</returns>
  </member>
  <member name="DirectX.DCompositionCreateDevice2">
    <summary>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</summary>
    <param name="renderingDevice">An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the <see cref="IDXGIDevice" /> or <see cref="ID2D1Device" /> interfaces.</param>
    <param name="iid">The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice).</param>
    <param name="dcompositionDevice">Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</param>
    <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a> for a list of error codes.</returns>
  </member>
  <member name="DirectX.DCompositionCreateDevice3">
    <summary>Creates a new DirectComposition device object, which can be used to create other DirectComposition objects.</summary>
    <param name="renderingDevice">An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the <see cref="IDXGIDevice" /> or <see cref="ID2D1Device" /> interfaces.</param>
    <param name="iid">The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice).</param>
    <param name="dcompositionDevice">Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="DirectX.DCompositionCreateSurfaceHandle">
    <summary>Creates a new composition surface object that can be bound to a Microsoft DirectX swap chain or swap buffer and associated with a visual.</summary>
    <param name="desiredAccess">
      <para>The requested access to the composition surface object. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader></listheader>
              <listheader>
                <term>0x0000L</term>
              </listheader>
            </list>
          </description>
          <description>No access.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPOSITIONSURFACE_READ</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001L</term>
              </listheader>
            </list>
          </description>
          <description>Read access. For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPOSITIONSURFACE_WRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002L</term>
              </listheader>
            </list>
          </description>
          <description>Write access. For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPOSITIONSURFACE_ALL_ACCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0003L</term>
              </listheader>
            </list>
          </description>
          <description>Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set <i>desiredAccess</i> to 0.</description>
        </listheader>
      </list>
    </param>
    <param name="securityAttributes">Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is NULL, the composition surface object is created with default security attributes that grant read and write access to the current process, but do not enable child processes to inherit the handle.</param>
    <param name="surfaceHandle">The handle of the new composition surface object. This parameter must not be NULL.</param>
    <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a> for a list of error codes.</returns>
  </member>
  <member name="DirectX.DCompositionGetFrameId">
    <summary>Gets the identifier of the most recent compositor frame of the specified type.</summary>
    <param name="frameIdType">The type of the compositor frame.</param>
    <param name="frameId">The identifer of the most recent compositor frame of the specified type.</param>
    <returns>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</returns>
  </member>
  <member name="DirectX.DCompositionGetStatistics">
    <summary>Gets basic information about the composition frame and a list of render target ID's that are part of the frame.</summary>
    <param name="frameId">The identifier of the composition frame about which to get information.</param>
    <param name="frameStats">A struct that contains information about the composition frame.</param>
    <param name="targetIdCount">The number of render targets about which to get information.</param>
    <param name="targetIds">The identifiers of the render targets about which to get information.</param>
    <param name="actualTargetIdCount">The actual number of render targets.</param>
    <returns>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</returns>
  </member>
  <member name="DirectX.DCompositionGetTargetStatistics">
    <summary>Gets per-target information for the specified composition frame and render target.</summary>
    <param name="frameId">The identifier of the composition frame about which to get information.</param>
    <param name="targetId">The identifier of the render target about which to get information.</param>
    <param name="targetStats">Information about the specified composition frame and render target.</param>
    <returns>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</returns>
  </member>
  <member name="DirectX.DCompositionWaitForCompositorClock">
    <summary>Halts a thread until the next signal from the compositor clock occurs.</summary>
    <param name="count">The number of <i><code>handles</code></i>.</param>
    <param name="handles">Handles to events for which the compositor clock should send signals.</param>
    <param name="timeoutInMs">Amount of time in milliseconds to wait before the operation times out.</param>
  </member>
</doc>