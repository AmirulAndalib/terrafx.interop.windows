<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.DCompositionAttachMouseDragToHwnd">
    <summary>
      <para>Creates an Interaction/InputSink to route mouse button down and any
subsequent move and up events to the given HWND. There is no move
thresholding; when enabled, all events including and following the down
are unconditionally redirected to the specified window. After calling this
API, the device owning the visual must be committed.</para>
    </summary>
    <param name="visual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The visual to route messages from.</para>
    </param>
    <param name="hwnd">
      <para>Type: <b>HWND</b></para>
      <para>The HWND to route messages to.</para>
    </param>
    <param name="enable">
      <para>Type: <b>BOOL</b></para>
      <para>Boolean value indicating whether to enable or disable routing.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="DirectX.DCompositionAttachMouseWheelToHwnd">
    <summary>
      <para>Creates an Interaction/InputSink to route mouse wheel messages to the
given HWND.  This will fail if there is already an interaction attached
to this visual. After calling this API, the device that owns the visual must
be committed.</para>
    </summary>
    <param name="visual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The visual to route messages from.</para>
    </param>
    <param name="hwnd">
      <para>Type: <b>HWND</b></para>
      <para>The HWND to route messages to.</para>
    </param>
    <param name="enable">
      <para>Type: <b>BOOL</b></para>
      <para>Boolean value indicating whether to enable or disable routing.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="DirectX.DCompositionBoostCompositorClock">
    <summary>
      <para>Requests that the system dynamically switch to a higher refresh rate to enhance latency-sensitive content.</para>
    </summary>
    <param name="enable">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">BOOL</a></b></para>
      <para>
        <code>TRUE</code> to request that the system dynamically switch to a higher refresh rate; otherwise, <code>FALSE</code>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</para>
    </returns>
    <seealso cref="DCompositionGetTargetStatistics" />
    <seealso cref="DCompositionGetStatistics" />
    <seealso cref="DCompositionGetFrameId" />
    <seealso cref="DCompositionWaitForCompositorClock" />
  </member>
  <member name="DirectX.DCompositionCreateDevice">
    <summary>
      <para>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</para>
    </summary>
    <param name="dxgiDevice">
      <para>Type: <b><see cref="IDXGIDevice" />*</b></para>
      <para>The DXGI device to use to create DirectComposition surface objects.</para>
    </param>
    <param name="iid">
      <para>Type: <b>REFIID</b></para>
      <para>The identifier of the interface to retrieve.</para>
    </param>
    <param name="dcompositionDevice">
      <para>Type: <b>void**</b></para>
      <para>Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>A  device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the <see cref="IDCompositionDevice.Commit" /> method.</para>
      <para>The DXGI device specified by <i>dxgiDevice</i> is used to create all DirectComposition surface objects. In particular, the <see cref="IDCompositionSurface.BeginDraw" /> method returns an interface pointer to a DXGI surface that belongs to the device specified by the <i>dxgiDevice</i> parameter.</para>
      <para>When creating the DXGI device, developers must specify the <see cref="D3D11_CREATE_DEVICE BGRA_SUPPORT" /> or <see cref="D3D10_CREATE_DEVICE_BGRA_SUPPORT" /> flag for Direct2D interoperability with Microsoft Direct3D resources.</para>
      <para>The <i>iid</i> parameter must be <code>__uuidof(IDCompositionDevice)</code>, and the <i>dcompositionDevice</i> parameter receives a pointer to an <see cref="IDCompositionDevice" /> interface.</para>
      <h4>Examples</h4>
      <para>The following example shows how to create a device object as part of initialing DirectComposition objects.</para>
      <code>#include &lt;dcomp.h&gt;
#include &lt;d3d11.h&gt;

HRESULT InitializeDirectCompositionDevice(HWND hwndTarget,
        ID3D11Device **ppD3D11Device, IDCompositionDevice **ppDevice,
        IDCompositionTarget **ppCompTarget)
{
    HRESULT hr = S_OK;
    D3D_FEATURE_LEVEL featureLevelSupported;
    IDXGIDevice *pDXGIDevice = nullptr;

    // Verify that the arguments are valid.
    if (hwndTarget == NULL || ppD3D11Device == nullptr || ppDevice == nullptr ||
                            ppCompTarget == nullptr)
    {
        return E_INVALIDARG;
    }

    // Create the D3D device object. Note that the
    // D3D11_CREATE_DEVICE_BGRA_SUPPORT flag is needed for rendering
    // on surfaces using Direct2D.
    hr = D3D11CreateDevice(
        nullptr,
        D3D_DRIVER_TYPE_HARDWARE,
        NULL,
        D3D11_CREATE_DEVICE_BGRA_SUPPORT, // needed for rendering on surfaces using Direct2D
        NULL,
        0,
        D3D11_SDK_VERSION,
        ppD3D11Device,
        &amp;amp;amp;amp;amp;amp;featureLevelSupported,
        NULL);

    if (SUCCEEDED(hr))
    {
        // Create the DXGI device used to create bitmap surfaces.
        hr = (*ppD3D11Device)-&gt;QueryInterface(&amp;amp;amp;amp;amp;amp;pDXGIDevice);
    }

    if (SUCCEEDED(hr))
    {
        // Create the DirectComposition device object.
        hr = DCompositionCreateDevice(pDXGIDevice, __uuidof(IDCompositionDevice),
                reinterpret_cast&lt;void **&gt;(ppDevice));
    }

    if (SUCCEEDED(hr))
    {
        // Bind the DirectComposition device to the target window.
        hr = (*ppDevice)-&gt;CreateTargetForHwnd(hwndTarget, TRUE, ppCompTarget);
    }

    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/directcomp/functions">Functions</seealso>
  </member>
  <member name="DirectX.DCompositionCreateDevice2">
    <summary>
      <para>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</para>
    </summary>
    <param name="renderingDevice">
      <para>An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the <see cref="IDXGIDevice" /> or <see cref="ID2D1Device" /> interfaces.</para>
    </param>
    <param name="iid">
      <para>The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice).</para>
    </param>
    <param name="dcompositionDevice">
      <para>Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>A device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the IDCompositionDevice2.Commit method.</para>
      <para>The <i>renderingDevice</i> parameter may point to a <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dx-graphics-dxgi">DXGI</a>, Direct3D, Direct2D device object, or it may be NULL. This parameter affects the behavior of the IDCompositionDevice2.CreateSurface, IDCompositionDevice2.CreateVirtualSurface and IDCompositionSurface.BeginDraw methods.</para>
      <para>If the <i>renderingDevice</i> parameter is NULL then the returned DirectComposition device cannot directly create DirectComposition surface objects. In particular, IDCompositionDevice2.CreateSurface and IDCompositionDevice2.CreateVirtualSurface methods return E_INVALIDARG, regardless of the supplied parameters. However, such a DirectComposition device object can still be used to indirectly create surfaces if the application creates a surface factory object via the IDCompositionDevice2.CreateSurfaceFactory method.</para>
      <para>If the <i>renderingDevice</i> parameter points to a DXGI device, that device is used to allocate all video memory needed by the IDCompositionDevice2.CreateSurface and IDCompositionDevice2.CreateVirtualSurface methods. Moreover, the IDCompositionSurface.BeginDraw method returns an interface pointer to a DXGI surface that belongs to that same DXGI device.</para>
      <para>If the <i>renderingDevice</i> parameter points to a Direct2D device object, DirectComposition extracts from it the underlying DXGI device object and uses it as if that DXGI device object had been passed in as the <i>renderingDevice</i> parameter. However, passing in a Direct2D object further causes IDCompositionSurface.BeginDraw to accept __uuidof(ID2D1DeviceContext) for its <i>iid</i> parameter for any objects created with the IDCompositionDevice2.CreateSurface or IDCompositionDevice2.CreateVirtualSurface methods. In that case, the Direct2D device context object returned by IDCompositionSurface.BeginDraw will belong to the same Direct2D device passed as the <i>renderingDevice</i> parameter.</para>
      <para>If the <i>iid</i> parameter is __uuidof(IDCompositionDevice), then the dcompositionDevice parameter receives a pointer to a Version 1 IDCompositionDevice interface, but the underlying object is a Version 2 desktop device object. The application can later obtain a pointer to either the IDCompositionDevice2 or IDCompositionDesktopDevice interfaces by calling the <see cref="QueryInterface" /> method on that device. Similarly, all DirectComposition objects created from such a device are Version 2 objects under the covers. For example, the IDCompositionDevice.CreateVisual method will return an IDCompositionVisual interface to the created visual, but the application can obtain a pointer to the IDCompositionVisual2 interface via the QueryInterface method. This behavior allows an application written to the DirectComposition V1 API to incrementally adopt DirectComposition V2 features by changing the device creation method from DCompositionCreateDevice to DCompositionCreateDevice2, while still requesting the IDCompositionDevice2 interface. This allows the rest of the code to remain unchanged, while allowing the application to use QueryInterface in just the places where new functionality is needed.</para>
    </remarks>
  </member>
  <member name="DirectX.DCompositionCreateDevice3">
    <summary>
      <para>Creates a new DirectComposition device object, which can be used to create other DirectComposition objects.</para>
    </summary>
    <param name="renderingDevice">
      <para>Type: <b>IUnknown*</b></para>
      <para>An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the <see cref="IDXGIDevice" /> or <see cref="ID2D1Device" /> interfaces.</para>
    </param>
    <param name="iid">
      <para>Type: <b>REFIID</b></para>
      <para>The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice).</para>
    </param>
    <param name="dcompositionDevice">
      <para>Type: <b>void**</b></para>
      <para>Receives an interface pointer to the newly created device object. The pointer is of the type specified by the <i>iid</i> parameter. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="DirectX.DCompositionCreateSurfaceHandle">
    <summary>
      <para>Creates a new composition surface object that can be bound to a
Microsoft DirectX swap chain or swap buffer and associated
with a visual.</para>
    </summary>
    <param name="desiredAccess">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>The requested access to the composition surface object. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x0000L</description>
              </item>
            </list>
          </description>
          <description>
            <para>No access.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COMPOSITIONSURFACE_READ</b>
                </description>
              </item>
              <item>
                <description>0x0001L</description>
              </item>
            </list>
          </description>
          <description>
            <para>Read access. For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COMPOSITIONSURFACE_WRITE</b>
                </description>
              </item>
              <item>
                <description>0x0002L</description>
              </item>
            </list>
          </description>
          <description>
            <para>Write access. For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COMPOSITIONSURFACE_ALL_ACCESS</b>
                </description>
              </item>
              <item>
                <description>0x0003L</description>
              </item>
            </list>
          </description>
          <description>
            <para>Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set <i>desiredAccess</i> to 0.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="securityAttributes">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>*</b></para>
      <para>Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is NULL, the composition surface object is created with default security attributes  that grant read and write access to the current process,  but do not enable child processes to  inherit the handle.</para>
    </param>
    <param name="surfaceHandle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HANDLE</a>*</b></para>
      <para>The handle of the new composition surface object. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
  </member>
  <member name="DirectX.DCompositionGetFrameId">
    <summary>
      <para>Gets the identifier of the most recent compositor frame of the specified type.</para>
    </summary>
    <param name="frameIdType">
      <para>Type: <b><see cref="COMPOSITION_FRAME_ID_TYPE" /></b></para>
      <para>The type of the compositor frame.</para>
    </param>
    <param name="frameId">
      <para>Type: <b>COMPOSITION_FRAME_ID*</b></para>
      <para>The identifer of the most recent compositor frame of the specified type.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</para>
    </returns>
    <seealso cref="DCompositionGetTargetStatistics" />
    <seealso cref="DCompositionGetStatistics" />
    <seealso cref="DCompositionBoostCompositorClock" />
    <seealso cref="DCompositionWaitForCompositorClock" />
  </member>
  <member name="DirectX.DCompositionGetStatistics">
    <summary>
      <para>Gets basic information about the composition frame and a list of render target ID's that are part of the frame.</para>
    </summary>
    <param name="frameId">
      <para>Type: <b>COMPOSITION_FRAME_ID</b></para>
      <para>The identifier of the composition frame about which to get information.</para>
    </param>
    <param name="frameStats">
      <para>Type: <b><see cref="COMPOSITION_FRAME_STATS" />*</b></para>
      <para>A struct that contains information about the composition frame.</para>
    </param>
    <param name="targetIdCount">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of render targets about which to get information.</para>
    </param>
    <param name="targetIds">
      <para>Type: <b><see cref="COMPOSITION_TARGET_ID" />*</b></para>
      <para>The identifiers of the render targets about which to get information.</para>
    </param>
    <param name="actualTargetIdCount">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>The actual number of render targets.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</para>
    </returns>
    <seealso cref="DCompositionGetTargetStatistics" />
    <seealso cref="DCompositionGetFrameId" />
    <seealso cref="DCompositionBoostCompositorClock" />
    <seealso cref="DCompositionWaitForCompositorClock" />
  </member>
  <member name="DirectX.DCompositionGetTargetStatistics">
    <summary>
      <para>Gets per-target information for the specified composition frame and render target.</para>
    </summary>
    <param name="frameId">
      <para>Type: <b>COMPOSITION_FRAME_ID</b></para>
      <para>The identifier of the composition frame about which to get information.</para>
    </param>
    <param name="targetId">
      <para>Type: <b><see cref="COMPOSITION_TARGET_ID" />*</b></para>
      <para>The identifier of the render target about which to get information.</para>
    </param>
    <param name="targetStats">
      <para>Type: <b><see cref="COMPOSITION_TARGET_STATS" />*</b></para>
      <para>Information about the specified composition frame and render target.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <code>S_OK</code>; otherwise, it returns an <code>HRESULT</code> value that indicates the error.</para>
    </returns>
    <seealso cref="DCompositionGetStatistics" />
    <seealso cref="DCompositionGetFrameId" />
    <seealso cref="DCompositionBoostCompositorClock" />
    <seealso cref="DCompositionWaitForCompositorClock" />
  </member>
  <member name="DirectX.DCompositionWaitForCompositorClock">
    <summary>
      <para>Halts a thread until the next signal from the compositor clock occurs.</para>
    </summary>
    <param name="count">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of <i><code>handles</code></i>.</para>
    </param>
    <param name="handles">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">HANDLE</a>*</b></para>
      <para>Handles to events for which the compositor clock should send signals.</para>
    </param>
    <param name="timeoutInMs">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b></para>
      <para>Amount of time in milliseconds to wait before the operation times out.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">DWORD</a></b></para>
    </returns>
    <seealso cref="DCompositionGetTargetStatistics" />
    <seealso cref="DCompositionGetStatistics" />
    <seealso cref="DCompositionGetFrameId" />
    <seealso cref="DCompositionBoostCompositorClock" />
  </member>
</doc>