<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDCompositionVisual.AddVisual">
    <summary>
      <para>Adds a new child visual to the children list of this visual.</para>
    </summary>
    <param name="visual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The child visual to add. This parameter must not be NULL.</para>
    </param>
    <param name="insertAbove">
      <para>Type: <b>BOOL</b></para>
      <para>TRUE to place the new child visual in front of the visual specified by the <i>referenceVisual</i> parameter, or FALSE to place it behind <i>referenceVisual</i>.</para>
    </param>
    <param name="referenceVisual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The existing child visual next to which the new visual should be added.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>Child visuals are arranged in an ordered list. The contents of a child visual are drawn in front of (or above) the contents of its parent visual,  but behind (or below) the contents of its children.</para>
      <para>The <i>referenceVisual</i> parameter must be an existing child of the parent visual, or it must be NULL. The <i>insertAbove</i> parameter indicates whether the new child should be rendered immediately above the reference visual in the Z order, or immediately below it.</para>
      <para>If the <i>referenceVisual</i> parameter is NULL, the specified visual is rendered above or below all children of the parent visual, depending on the value of the <i>insertAbove</i> parameter. If <i>insertAbove</i> is TRUE, the new child visual is above no sibling, therefore it is rendered  below all of its siblings. Conversely, if <i>insertAbove</i> is FALSE, the visual is below no sibling, therefore it is rendered above all of its siblings.</para>
      <para>The visual specified by the <i>visual</i> parameter cannot be either a child of a single other visual, or the root of a visual tree that is associated with a composition target. If <i>visual</i> is already a child of another visual, <b>AddVisual</b> fails. The child visual must be removed from the children list of its previous parent before adding it to the children list of the new parent. If <i>visual</i> is the root of a visual tree, the visual must be dissociated from that visual tree before adding it to the children list of the new parent. To dissociate the visual from a visual tree, call the <see cref="IDCompositionTarget.SetRoot" /> method and specify either a different visual or NULL as the <i>visual</i> parameter.</para>
      <para>A child visual need not have been created by the same <see cref="IDCompositionDevice" /> interface as its parent. When visuals from different devices are combined in the same visual tree,  Microsoft DirectComposition composes the  tree as it normally would, except that changes to a particular visual take effect only when <see cref="IDCompositionDevice.Commit" /> is called on the device object that created the visual. The ability to combine visuals from different devices  enables multiple threads to create and manipulate a single visual tree while maintaining independent devices that can be used to commit changes asynchronously</para>
      <para>This method fails if <i>visual</i> or <i>referenceVisual</i> is an invalid pointer, or if the visual referenced by the <i>referenceVisual</i> parameter is not a child of the parent visual. These  interfaces cannot be custom implementations; only interfaces created by DirectComposition can be used with this method.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/directcomp/how-to--build-a-visual-tree">How to Build a Simple Visual Tree</a>.</para>
    </remarks>
    <seealso cref="IDCompositionDevice.CreateVisual" />
    <seealso cref="IDCompositionTarget.SetRoot" />
    <seealso cref="IDCompositionVisual" />
    <seealso cref="IDCompositionVisual.RemoveAllVisuals" />
    <seealso cref="IDCompositionVisual.RemoveVisual" />
  </member>
  <member name="IDCompositionVisual.RemoveAllVisuals">
    <summary>
      <para>Removes all visuals from the children list of this visual.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method can be called even if this visual has no children.</para>
    </remarks>
    <seealso cref="IDCompositionDevice.CreateVisual" />
    <seealso cref="IDCompositionVisual" />
    <seealso cref="IDCompositionVisual.AddVisual" />
    <seealso cref="IDCompositionVisual.RemoveVisual" />
  </member>
  <member name="IDCompositionVisual.RemoveVisual">
    <summary>
      <para>Removes a child visual from the children list of this visual.</para>
    </summary>
    <param name="visual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The child visual to remove from the children list. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The child visual is removed from the list of children. The order of the remaining child visuals is not changed.</para>
      <para>This method fails if <i>visual</i> is not a child of the parent visual.</para>
    </remarks>
    <seealso cref="IDCompositionDevice.CreateVisual" />
    <seealso cref="IDCompositionVisual" />
    <seealso cref="IDCompositionVisual.AddVisual" />
    <seealso cref="IDCompositionVisual.RemoveAllVisuals" />
  </member>
  <member name="IDCompositionVisual.SetBitmapInterpolationMode">
    <summary>
      <para>Sets the BitmapInterpolationMode property, which specifies the mode for Microsoft DirectComposition to use when interpolating pixels from bitmaps that are not axis-aligned or drawn exactly at scale.</para>
    </summary>
    <param name="interpolationMode">
      <para>Type: <b><see cref="DCOMPOSITION_BITMAP_INTERPOLATION_MODE" /></b></para>
      <para>The interpolation mode to use.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The interpolation mode affects how a bitmap is composed when it is transformed such that there is no one-to-one correspondence between pixels in the bitmap and pixels on the screen.</para>
      <para>By default, a visual inherits the interpolation mode of the parent visual, which may inherit the interpolation mode of its parent visual, and so on. A visual uses the default interpolation mode if this method is never called for the visual, or if this method is called with <see cref="DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT" />. If no visuals set the interpolation mode, the default for the entire visual tree is nearest neighbor interpolation, which offers the lowest visual quality but the highest performance.</para>
      <para>If the <i>interpolationMode</i> parameter is anything other than <see cref="DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT" />, this visual's bitmap is composed with the specified interpolation mode, and this mode becomes the new default mode for the children of this visual. That is, if the interpolation mode of this visual's children is unchanged or explicitly set to <b>DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT</b>, the bitmaps of the child visuals are composed using the interpolation mode of this visual.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetBorderMode">
    <summary>
      <para>Sets the BorderMode property, which specifies how to compose the edges of bitmaps and clips associated with this visual, or with visuals in the subtree rooted at this visual.</para>
    </summary>
    <param name="borderMode">
      <para>Type: <b><see cref="DCOMPOSITION_BORDER_MODE" /></b></para>
      <para>The border mode to use.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The border mode affects how the edges of a bitmap are composed when the bitmap is transformed such that the edges are not exactly axis-aligned and at precise pixel boundaries. It also affects how content is clipped at the corners of a clip that has rounded corners, and at the edge of a clip that is transformed such that the edges are not exactly axis-aligned and at precise pixel boundaries.</para>
      <para>By default, a visual inherits the border mode of  its parent visual, which may inherit the border mode of its parent visual, and so on. A visual uses the default border mode if this method is never called for the visual, or if this method is called with <see cref="DCOMPOSITION_BORDER_MODE_INHERIT" />. If no visuals set the border mode, the default for the entire visual tree is aliased rendering, which offers the lowest visual quality but the highest performance.</para>
      <para>If the <i>borderMode</i> parameter is anything other than <see cref="DCOMPOSITION_BORDER_MODE_INHERIT" />, this visual's bitmap and clip are composed with the specified border mode. In addition, this border mode becomes the new default for the children of the current visual. That is, if the border mode of this visual's children is unchanged or explicitly set to <b>DCOMPOSITION_BORDER_MODE_INHERIT</b>, the bitmaps and clips of the child visuals are composed using the border mode of this visual.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetClip">
    <summary>
      <para>Sets the Clip property of this visual to the specified rectangle. The Clip property restricts the rendering of the
visual subtree that is rooted at this visual to the specified rectangular region.</para>
    </summary>
    <param name="rect">
      <para>Type: <b>const <see cref="D2D_RECT_F" /></b></para>
      <para>The rectangle to use to clip this visual. All properties of the rect parameter have a numerical limit of -2^21 to 2^21.
The API accepts numbers outside of this range, but they are always clamped to this range.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code.
See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>Setting the Clip property clips this visual along with all visuals in the subtree that is rooted at this visual. The clip is transformed by the OffsetX, OffsetY, and Transform properties.</para>
      <para>If the Clip property previously specified a clip object, the newly specified clip rectangle replaces the clip object.</para>
      <para>This method fails if any members of the <i>rect</i> structure are NaN, positive infinity, or negative infinity.</para>
      <para>If the clip rectangle is empty, the visual is fully clipped; that is, the visual is included in the visual tree, but it does not render anything.
To exclude a particular visual from a composition, remove the visual from the visual tree instead of setting an empty clip rectangle.
Removing the visual results in better performance.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/directcomp/clipping">Clipping</seealso>
    <seealso cref="IDCompositionRectangleClip" />
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetClip">
    <summary>
      <para>Sets the Clip property of this visual to the specified clip object. The Clip property restricts the rendering of the visual subtree
that is rooted at this visual to a rectangular region.</para>
    </summary>
    <param name="clip">
      <para>Type: <b><see cref="IDCompositionClip" />*</b></para>
      <para>The clip object to associate with this visual. This parameter can be NULL.  All float properties of IDCompositionRectangleClip have a numerical limit of -2^21 to 2^21.
The API accepts numbers outside of this range, but they are always clamped to this range.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code.
See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>Setting the Clip property clips this visual along with all visuals in the subtree that is rooted at this visual. The clip is transformed by the OffsetX, OffsetY,  and Transform properties.</para>
      <para>If the Clip property previously specified a clip rectangle, the newly specified Clip object replaces the clip rectangle.</para>
      <para>This method fails if <i>clip</i> is an invalid pointer or if it was not created by the
same <see cref="IDCompositionDevice" /> interface that created this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
      <para>If <i>clip</i> is NULL, the visual is not clipped relative to its parent. However, the visual is clipped by the clip object of the parent visual,
or by the closest ancestor visual that has a clip object. Setting <i>clip</i> to NULL is similar to specifying a clip object whose
clip rectangle has the left and top sides set to negative infinity, and the right and bottom sides set to positive infinity. Using a NULL clip object results in slightly better performance.</para>
      <para>If <i>clip</i> specifies a clip object that has an empty rectangle, the visual is fully clipped; that is, the visual is included in the visual tree,
but it does not render anything. To exclude a particular visual from a composition, remove the visual from the visual tree instead of setting an empty clip rectangle.
Removing the visual results in better performance.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/directcomp/clipping">Clipping</seealso>
    <seealso cref="IDCompositionRectangleClip" />
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetCompositeMode">
    <summary>
      <para>Sets the blending mode for this visual.</para>
    </summary>
    <param name="compositeMode">
      <para>Type: <b><see cref="DCOMPOSITION_COMPOSITE_MODE" /></b></para>
      <para>The blending mode to use when composing the visual to the screen.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The composite mode determines how visual's bitmap is blended with the screen. By default, the visual is blended with "source over" semantics; that is, the colors are blended with per-pixel transparency.</para>
    </remarks>
    <seealso cref="IDCompositionEffectGroup" />
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetContent">
    <summary>
      <para>Sets the Content property of this visual to the specified bitmap or window wrapper.</para>
    </summary>
    <param name="content">
      <para>Type: <b><see cref="IUnknown" />*</b></para>
      <para>The object that is the new content of this visual. This parameter can be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The <i>content</i> parameter must point to one of the following:</para>
      <list type="bullet">
        <item>
          <description>An object that implements the <see cref="IDCompositionSurface" /> interface.</description>
        </item>
        <item>
          <description>An object that implements the <b>IDXGISwapChain1</b> interface.</description>
        </item>
        <item>
          <description>A wrapper object that is returned by the <see cref="CreateSurfaceFromHandle" /> or  <see cref="CreateSurfaceFromHwnd" /> method.
</description>
        </item>
      </list>
      <para>The new content replaces any content that was previously associated with the visual. If the <i>content</i> parameter is NULL, the visual has no associated content.</para>
      <para>A visual can be associated with a bitmap object or a window wrapper. A bitmap is either a Microsoft DirectX swap chain or a Microsoft DirectComposition surface.</para>
      <para>A window wrapper is created with the <see cref="CreateSurfaceFromHwnd" /> method and is a stand-in for the rasterization of another window, which must be a top-level window or a layered child window. A window wrapper is conceptually equivalent to a bitmap that is the size of the target window on which the contents of the window are drawn. The contents include the target window's child windows (layered or otherwise), and any DirectComposition content that is drawn in the child windows.</para>
      <para>A DirectComposition surface wrapper is created with the <see cref="CreateSurfaceFromHandle" /> method and is a reference to a swap chain. An application might use a surface wrapper in a cross-process scenario where one process creates the swap chain and another process associates the bitmap with a visual.</para>
      <para>The bitmap is always drawn at position (0,0) relative to the visual's coordinate system, although the coordinate system is directly affected by the OffsetX, OffsetY, and Transform properties, as well as indirectly by the transformations on ancestor visuals. The bitmap of a visual is always drawn behind the children of that visual.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetEffect">
    <summary>
      <para>Sets the Effect property of this visual. The Effect property modifies how the subtree that is rooted at this visual is blended with the background, and can apply a 3D perspective transform to the visual.</para>
    </summary>
    <param name="effect">
      <para>Type: <b><see cref="IDCompositionEffect" />*</b></para>
      <para>A pointer to an effect object. This parameter can be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method creates an implicit off-screen surface to which the subtree that is rooted at this visual is composed. The surface is used as one of the inputs to the specified effect. The output of the effect is composed directly to the composition target. Some effects also use the composition target as another implicit input. This is typically the case for compositional or blend effects such as opacity, where the composition target is considered to be the "background." In that case, any visuals that are "behind" the current visual are included in the composition target when the current visual is rendered and are considered to be the "background" that this visual composes to.</para>
      <para>If this visual is not the root of a visual tree and one of its ancestors also has an effect applied to it, the off-screen surface created by the closest ancestor is the composition target to which this visual's effect is composed. Otherwise, the composition target is the root composition target. As a consequence, the background for compositional and blend effects includes only the visuals up to the closest ancestor that itself has an effect. Conversely, any effects applied to visuals under the current visual use the newly created off-screen surface as the background, which may affect how those visuals ultimately compose on top of what the end user perceives as being "behind" those visuals.</para>
      <para>If the <i>effect</i> parameter is NULL,  no bitmap effect is applied to this visual. Any previous effects that were associated with this visual are removed. The off-screen surface is also removed and the visual subtree is composed directly to the parent composition target, which may also affect how compositional or blend effects under this visual are rendered.</para>
      <para>This method fails if <i>effect</i> is an invalid pointer or if it was not created by the same <see cref="IDCompositionDevice" /> interface that created this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
    </remarks>
    <seealso cref="IDCompositionEffect" />
    <seealso cref="IDCompositionEffectGroup" />
    <seealso cref="IDCompositionMatrixTransform3D" />
    <seealso cref="IDCompositionRotateTransform3D" />
    <seealso cref="IDCompositionScaleTransform3D" />
    <seealso cref="IDCompositionTranslateTransform3D" />
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual.SetOffsetX">
    <summary>
      <para>Changes the value of the OffsetX property of this visual.  The OffsetX property specifies the new offset of the visual along the x-axis, relative to the parent visual.</para>
    </summary>
    <param name="offsetX">
      <para>Type: <b>float</b></para>
      <para>The new offset of the visual along the x-axis, in pixels.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method fails if the <i>offsetX</i> parameter is NaN, positive infinity, or negative infinity.</para>
      <para>Changing the OffsetX property of a visual transforms the coordinate system of the entire visual subtree that is rooted at that visual. If the Clip property of this visual is specified, the clip rectangle is also transformed.</para>
      <para>A transformation that is specified by the Transform property is applied after the OffsetX property.  In other words, the effect of setting the Transform property and the OffsetX property is the same as setting only the Transform property on a transform group  object where the first member of the group is an <see cref="IDCompositionTranslateTransform" /> object that has the same OffsetX value as <i>offsetX</i>. However, you should use  <b>IDCompositionVisual.SetOffsetX</b> whenever possible because it is slightly faster.</para>
      <para>If the OffsetX and OffsetY properties are set to 0, and the Transform property is set to NULL, the coordinate system of the visual is the same as that of its parent.</para>
      <para>If the OffsetX property was previously animated, this method removes the animation and sets the property to the specified static value.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/directcomp/how-to--build-a-visual-tree">How to Build a Simple Visual Tree</a>.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449171(v=vs.85)">IDCompositionVisual.SetOffsetY</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449178(v=vs.85)">IDCompositionVisual.SetTransform</seealso>
  </member>
  <member name="IDCompositionVisual.SetOffsetX">
    <summary>
      <para>Changes the value of the OffsetX property of this visual.  The OffsetX property specifies the new offset of the visual along the x-axis, relative to the parent visual.</para>
    </summary>
    <param name="animation">
      <para>Type: <b><see cref="IDCompositionAnimation" />*</b></para>
      <para>An animation object that determines how the value of the OffsetX property changes over time. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method makes a copy of the specified animation. If the animation object referenced by the <i>animation</i> parameter is changed after this call, the change does not affect the OffsetX property unless this method is called again. If the OffsetX property was previously animated, this method replaces that animation with the new animation.</para>
      <para>This method fails if <i>animation</i> is an invalid pointer or if it was not created by the same <see cref="IDCompositionDevice" /> interface that created this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449171(v=vs.85)">IDCompositionVisual.SetOffsetY</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449178(v=vs.85)">IDCompositionVisual.SetTransform</seealso>
  </member>
  <member name="IDCompositionVisual.SetOffsetY">
    <summary>
      <para>Changes the value of the OffsetY property of this visual.  The OffsetY property specifies the new offset of the visual along the y-axis, relative to the parent visual.</para>
    </summary>
    <param name="offsetY">
      <para>Type: <b>float</b></para>
      <para>The new offset of the visual along the y-axis, in pixels.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method fails if the <i>offsetY</i> parameter is NaN, positive infinity, or negative infinity.</para>
      <para>Changing the OffsetY property transforms the coordinate system of the entire visual subtree that is rooted at this visual. If the Clip property of this visual is specified, the clip rectangle is also transformed.</para>
      <para>A transformation that is specified by the Transform property is applied after the OffsetY property.  In other words, the effect of setting the Transform property and the OffsetY property is the same as setting only the Transform property on a transform group object where the first member of the group is an <see cref="IDCompositionTranslateTransform" /> object that has the same OffsetY value as <i>offsetY</i>. However, you should use  <b>IDCompositionVisual.SetOffsetY</b> whenever possible because it is slightly faster.</para>
      <para>If the OffsetX and OffsetY properties are set to 0, and the Transform property is set to NULL, the coordinate system of the visual is the same as that of its parent.</para>
      <para>If the OffsetY property was previously animated, this method removes the animation and sets the property to the specified static value.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/directcomp/how-to--build-a-visual-tree">How to Build a Simple Visual Tree</a>.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449165(v=vs.85)">IDCompositionVisual.SetOffsetX</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449178(v=vs.85)">IDCompositionVisual.SetTransform</seealso>
  </member>
  <member name="IDCompositionVisual.SetOffsetY">
    <summary>
      <para>Animates the value of the OffsetY property of this visual.  The OffsetY property specifies the new offset of the visual along the y-axis, relative to the parent visual.</para>
    </summary>
    <param name="animation">
      <para>Type: <b><see cref="IDCompositionAnimation" />*</b></para>
      <para>An animation object that determines how the value of the OffsetY property changes over time. This parameter must not be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>This method makes a copy of the specified animation. If the animation object referenced by the <i>animation</i> parameter is changed after this call, the change does not affect the OffsetY property unless this method is called again. If the OffsetY property was previously animated, this method replaces that animation with the new animation.</para>
      <para>This method fails if <i>animation</i> is an invalid pointer or if it was not created by the same <see cref="IDCompositionDevice" /> interface that created this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449165(v=vs.85)">IDCompositionVisual.SetOffsetX</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449178(v=vs.85)">IDCompositionVisual.SetTransform</seealso>
  </member>
  <member name="IDCompositionVisual.SetTransform">
    <summary>
      <para>Sets the Transform property of this visual to the specified 3-by-2 transform matrix.</para>
    </summary>
    <param name="matrix">
      <para>Type: <b>const <see cref="D2D_MATRIX_3X2_F" /></b></para>
      <para>The 3-by-2 transform matrix that is used to modify  the coordinate system of this visual.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>Setting the Transform property transforms the coordinate system of the entire visual subtree that is rooted at this visual. If the Clip property of this visual is specified, the clip rectangle is also transformed.</para>
      <para>If the Transform property previously specified a transform object, the newly specified transform matrix replaces the transform object.</para>
    </remarks>
    <seealso cref="IDCompositionMatrixTransform" />
    <seealso cref="IDCompositionRotateTransform" />
    <seealso cref="IDCompositionScaleTransform" />
    <seealso cref="IDCompositionSkewTransform" />
    <seealso cref="IDCompositionTransform" />
    <seealso cref="IDCompositionTranslateTransform" />
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449165(v=vs.85)">IDCompositionVisual.SetOffsetX</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449171(v=vs.85)">IDCompositionVisual.SetOffsetY</seealso>
  </member>
  <member name="IDCompositionVisual.SetTransform">
    <summary>
      <para>Sets the Transform property of this visual to the specified 2D transform object.</para>
    </summary>
    <param name="transform">
      <para>Type: <b><see cref="IDCompositionTransform" />*</b></para>
      <para>The transform object that is used to modify  the coordinate system of this visual. This parameter can point to an <see cref="IDCompositionTransform" /> interface or one of its derived interfaces. This parameter can be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <b>HRESULT</b> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>Setting the Transform property transforms the coordinate system of the entire visual subtree that is rooted at this visual. If the Clip property of this visual is specified, the clip rectangle is also transformed.</para>
      <para>If the Transform property previously specified a transform matrix, the newly specified transform object replaces the transform matrix.</para>
      <para>A transformation specified by the Transform property is applied after the OffsetX and OffsetY properties. In other words, the effect of setting the Transform property and the OffsetX and OffsetY properties is the same as setting only the Transform property on a transform group where the first member of the group is an <see cref="IDCompositionTranslateTransform" /> object that has those same OffsetX and OffsetY values. However, you should use the <see cref="IDCompositionVisual.SetOffsetX" /> and <see cref="SetOffsetY" /> methods whenever possible because they are slightly faster.</para>
      <para>This method fails if <i>transform</i> is an invalid pointer or if it was not created by the same <see cref="IDCompositionDevice" /> interface that created this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
      <para>If the <i>transform</i> parameter is NULL, the coordinate system of this visual is transformed only by its OffsetX and OffsetY properties. Setting the Transform property to NULL is equivalent to setting it to an <see cref="IDCompositionMatrixTransform" /> object where the specified matrix is the identity matrix. However, an application should set the Transform property to NULL whenever possible because it is slightly faster.</para>
      <para>If the OffsetX and OffsetY properties are set to 0, and the Transform property is set to NULL, the coordinate system of the visual is the same as that of its parent.</para>
    </remarks>
    <seealso cref="IDCompositionMatrixTransform" />
    <seealso cref="IDCompositionRotateTransform" />
    <seealso cref="IDCompositionScaleTransform" />
    <seealso cref="IDCompositionSkewTransform" />
    <seealso cref="IDCompositionTransform" />
    <seealso cref="IDCompositionTranslateTransform" />
    <seealso cref="IDCompositionVisual" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449165(v=vs.85)">IDCompositionVisual.SetOffsetX</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/hh449171(v=vs.85)">IDCompositionVisual.SetOffsetY</seealso>
  </member>
  <member name="IDCompositionVisual.SetTransformParent">
    <summary>
      <para>Sets the TransformParent property of this visual. The TransformParent property establishes the coordinate system relative to which this visual is composed.</para>
    </summary>
    <param name="visual">
      <para>Type: <b><see cref="IDCompositionVisual" />*</b></para>
      <para>The new visual that establishes the base coordinate system for this visual. This parameter can be NULL.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If the function succeeds, it returns S_OK. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a> error code. See <a href="https://docs.microsoft.com//windows/desktop/directcomp/directcomposition-error-codes">DirectComposition Error Codes</a>  for a list of error codes.</para>
    </returns>
    <remarks>
      <para>The coordinate system of a visual is modified by the OffsetX, OffsetY, and Transform properties. Normally, these properties define the coordinate system of a visual relative to its immediate parent. This method specifies the  visual relative to which the coordinate system for this visual is based. The specified visual must be an ancestor of the current visual. If it is not an ancestor, the coordinate system is based on this visual's immediate parent, just as if the TransformParent property were set to NULL. Because visuals can be reparented, this property can take effect again if the specified visual becomes an ancestor of the target visual through a reparenting operation.</para>
      <para>If the <i>visual</i> parameter is NULL, the coordinate system is always transformed relative to the visual's immediate parent. This is the default behavior if this method is not used.</para>
      <para>This method fails if the <i>visual</i> parameter is an invalid pointer or if it was not created by the same <see cref="IDCompositionDevice" /> interface as this visual. The interface cannot be a custom implementation; only interfaces created by Microsoft DirectComposition can be used with this method.</para>
    </remarks>
    <seealso cref="IDCompositionVisual" />
  </member>
  <member name="IDCompositionVisual">
    <summary>
      <para>Represents a Microsoft DirectComposition visual.</para>
    </summary>
    <seealso cref="IDCompositionDevice.CreateVisual" />
  </member>
</doc>