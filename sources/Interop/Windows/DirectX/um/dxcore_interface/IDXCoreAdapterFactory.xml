<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDXCoreAdapterFactory.CreateAdapterList">
    <summary>
      <para>Generates a list of adapter objects representing the current adapter state of the system, and meeting the criteria specified. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
    <param name="numAttributes">
      <para>Type: <b>uint32_t</b></para>
      <para>The number of elements in the array pointed to by the <i>filterAttributes</i> argument.</para>
    </param>
    <param name="filterAttributes">
      <para>Type: <b>const GUID*</b></para>
      <para>A pointer to an array of adapter attribute GUIDs. For a list of attribute GUIDs, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-adapter-attribute-guids">DXCore adapter attribute GUIDs</a>. At least one GUID must be provided. In the case that more than one GUID is provided in the array, only adapters that meet <i>all</i> of the requested attributes will be included in the returned list.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (GUID) of the interface that you wish to be returned in <i>ppvAdapterList</i>. This is expected to be the interface identifier (IID) of <see cref="IDXCoreAdapterList" />.</para>
    </param>
    <param name="ppvAdapterList">
      <para>Type: <b>void**</b></para>
      <para>The address of a pointer to an interface with the IID specified in the <i>riid</i> parameter. Upon successful return, <i>*ppvAdapterList</i> (the dereferenced address) contains a pointer to the the adapter list created.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_INVALIDARG|<code>nullptr</code> was provided for <i>filterAttributes</i>, or 0 was provided for <i>numAttributes</i>.|
|E_NOINTERFACE|An invalid value was provided for <i>riid</i>.|
|E_POINTER|<code>nullptr</code> was provided for <i>ppvAdapterList</i>.|</para>
    </returns>
    <remarks>
      <para>Even if no adapters are found, as long as the arguments are valid, <b>CreateAdapterList</b> creates a valid <see cref="IDXCoreAdapterList" /> object, and returns <b>S_OK</b>. Once generated, the adapters in this specific list won't change. But the list will be considered stale if one of the adapters later becomes invalid, or if a new adapter arrives that meets the provided filter criteria. The list returned by <b>CreateAdapterList</b> is not ordered in any particular way, and multiple calls to <b>CreateAdapterList</b> may produce differently ordered lists.</para>
      <para>The resulting list is not ordered in any particular way, but the ordering of a list is consistent across multiple calls, and even across operating system restarts. The ordering may change upon system configuration changes, including the addition or removal of an adapter, or a driver update on an existing adapter.</para>
    </remarks>
    <seealso cref="IDXCoreAdapterFactory" />
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-reference">DXCore Reference</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-adapter-attribute-guids">DXCore adapter attribute GUIDs</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</seealso>
  </member>
  <member name="IDXCoreAdapterFactory.GetAdapterByLuid">
    <summary>
      <para>Retrieves the DXCore adapter object (<see cref="IDXCoreAdapter" />) for a specified LUID, if available. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
    <param name="adapterLUID">
      <para>Type: <b><see cref="LUID" /> const&amp;</b></para>
      <para>The locally unique value that identifies the adapter instance.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (GUID) of the interface that you wish to be returned in <i>ppvAdapter</i>. This is expected to be the interface identifier (IID) of <see cref="IDXCoreAdapter" />.</para>
    </param>
    <param name="ppvAdapter">
      <para>Type: <b>void**</b></para>
      <para>The address of a pointer to an interface with the IID specified in the <i>riid</i> parameter. Upon successful return, <i>*ppvAdapter</i> (the dereferenced address) contains a pointer to the the DXCore adapter created.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|DXGI_ERROR_DEVICE_REMOVED|The adapter LUID passed in <i>adapterLUID</i> is recognized, but the adapter is no longer in a valid state.|
|E_INVALIDARG|No such adapter LUID as the value passed in <i>adapterLUID</i> is available through DXCore.|
|E_NOINTERFACE|An invalid value was provided for <i>riid</i>.|
|E_POINTER|<code>nullptr</code> was provided for <i>ppvAdapter</i>.|</para>
    </returns>
    <remarks>
      <para>Multiple calls passing the same <see cref="LUID" /> return identical interface pointers. As a result, it's safe to compare interface pointers to determine whether multiple pointers refer to the same adapter object.</para>
    </remarks>
    <seealso cref="IDXCoreAdapterFactory" />
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-reference">DXCore Reference</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</seealso>
  </member>
  <member name="IDXCoreAdapterFactory.IsNotificationTypeSupported">
    <summary>
      <para>Determines whether a specified notification type is supported by the operating system (OS). For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
    <param name="notificationType">
      <para>Type: <b><see cref="DXCoreNotificationType" /></b></para>
      <para>The type of notification that you're querying about support for. See the table in <see cref="DXCoreNotificationType" /> for info about the notification types.</para>
    </param>
    <returns>
      <para>Type: <b>bool</b></para>
      <para>Returns <code>true</code> if the notification type is supported by the system. Otherwise, returns <code>false</code>.</para>
    </returns>
    <remarks>
      <para>You can call <b>IsNotificationTypeSupported</b> to determine whether a given notification type is known to this version of the OS. For example, a notification type that's introduced in a particular version of Windows is unknown to previous versions of Windows.</para>
    </remarks>
    <seealso cref="IDXCoreAdapterFactory" />
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-reference">DXCore Reference</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-adapter-attribute-guids">DXCore adapter attribute GUIDs</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</seealso>
  </member>
  <member name="IDXCoreAdapterFactory.RegisterEventNotification">
    <summary>
      <para>Registers to receive notifications of specific conditions from a DXCore adapter or adapter list. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
    <param name="dxCoreObject">
      <para>Type: <b><see cref="IUnknown" />*</b></para>
      <para>The DXCore object (<see cref="IDXCoreAdapter" /> or <see cref="IDXCoreAdapterList" />) whose notifications you're subscribing to.</para>
    </param>
    <param name="notificationType">
      <para>Type: <b><see cref="DXCoreNotificationType" /></b></para>
      <para>The type of notification that you're registering for. See the table in <see cref="DXCoreNotificationType" /> for info about what types are valid with which kinds of objects.</para>
    </param>
    <param name="callbackFunction">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/api/dxcore_interface/nc-dxcore_interface-pfn_dxcore_notification_callback">PFN_DXCORE_NOTIFICATION_CALLBACK</a></b></para>
      <para>A pointer to a callback function (implemented by your application), which is called by the DXCore object for notification events. For the signature of the function, see <a href="https://docs.microsoft.com//windows/win32/api/dxcore_interface/nc-dxcore_interface-pfn_dxcore_notification_callback">PFN_DXCORE_NOTIFICATION_CALLBACK</a>.</para>
    </param>
    <param name="callbackContext">
      <para>Type: <b>void*</b></para>
      <para>An optional pointer to an object containing context info. This object is passed to your callback function when the notification is raised.</para>
    </param>
    <param name="eventCookie">
      <para>Type: <b>uint32_t*</b></para>
      <para>A pointer to a <b>uint32_t</b> value. If successful, the function dereferences the pointer and sets the value to a non-zero cookie value representing this registration. Use this cookie value to unregister from the notification by calling <see cref="IDXCoreAdapterFactory.UnregisterEventNotification" />. See <b>Remarks</b>.</para>
      <para>If unsuccessful, the function dereferences the pointer and sets the value to zero, which represents an invalid cookie value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|DXGI_ERROR_INVALID_CALL|<i>notificationType</i> is unsupported by the operating system (OS).|
|E_INVALIDARG|<code>nullptr</code> was provided for <i>dxCoreObject</i>, or if an invalid <i>notificationType</i> and <i>dxCoreObject</i> combination was provided.|
|E_POINTER|<code>nullptr</code> was provided for either <i>callbackFunction</i> or <i>eventCookie</i>.|</para>
    </returns>
    <remarks>
      <para>You use <b>RegisterEventNotification</b> to register for events raised by <see cref="IDXCoreAdapterList" /> and <see cref="IDXCoreAdapter" /> interfaces. These notification types are supported.</para>
      <para>|<see cref="DXCoreNotificationType" />|Supported <i>dxCoreObject</i>|Notes|
|-|-|-|
|AdapterListStale|<b>IDXCoreAdapterList</b>|Indicates that the list of adapters meeting your filter criteria has changed. If the adapter list is stale at the time of registration, then your callback is immediately called. This callback occurs at most one time per registration.|
|AdapterNoLongerValid|<b>IDXCoreAdapter</b>|Indicates that the adapter is no longer valid. If the adapter is invalid at registration time, then your callback is immediately called.|
|AdapterBudgetChange|<b>IDXCoreAdapter</b>|Indicates that a memory budgeting event has occurred, and that you should call <see cref="IDXCoreAdapter.QueryState" /> (with <see cref="DXCoreAdapterState.AdapterMemoryBudget" />) to evaluate the current memory budget state. Upon registration, an initial callback will always occur to allow you to query the initial state.|
|AdapterHardwareContentProtectionTeardown|<b>IDXCoreAdapter</b>|Indicates that you should re-evaluate the current crypto session status; for example, by calling <see cref="ID3D11VideoContext1.CheckCryptoSessionStatus" /> to determine the impact of the hardware teardown for a specific <see cref="ID3D11CryptoSession" /> interface. Upon registration, an initial callback will always occur to allow you to query the initial state.|</para>
      <para>A call to the function that you provide in <i>callbackFunction</i> is made asynchronously on a background thread by DXCore when the detected event occurs. No guarantee is made as to the ordering or timing of callbacks—multiple callbacks may occur in any order, or even simultaneously. It's even possible for your callback to be invoked before <b>RegisterEventNotification</b> has completed. In that case, DXCore guarantees that your <i>eventCookie</i> is set before your callback is called. Multiple callbacks for a specific registration will be serialized in order.</para>
      <para>Callbacks may occur at any time until you call <see cref="UnregisterEventNotification" />, and it completes. Callbacks occur on their own threads, and you may make calls into the DXCore API on those threads, including <b>UnregisterEventNotification</b>, and releasing of the <i>dxCoreObject</i>.</para>
      <blockquote>
        <para>[!IMPORTANT]
Before you destroy the DXCore object represented by the <i>dxCoreObject</i> argument passed to <b>RegisterEventNotification</b>, you must use the cookie value to unregister that object from notifications by calling <see cref="IDXCoreAdapterFactory.UnregisterEventNotification" />. If you don't do that, then a fatal exception is raised when the situation is detected.</para>
      </blockquote>
    </remarks>
    <seealso cref="IDXCoreAdapter" />
    <seealso cref="IDXCoreAdapterList" />
    <seealso cref="IDXCoreAdapterFactory.UnregisterEventNotification" />
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-reference">DXCore Reference</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</seealso>
  </member>
  <member name="IDXCoreAdapterFactory.UnregisterEventNotification">
    <summary>
      <para>Unregisters from a notification that you previously registered for. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
    <param name="eventCookie">
      <para>Type: <b>uint32_t</b></para>
      <para>The cookie value (returned when you called <see cref="IDXCoreAdapterFactory.RegisterEventNotification" />) representing a prior registration that you now wish to unregister for.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_INVALIDARG|The value of <i>eventCookie</i> is not a valid cookie representing a prior registration.|</para>
    </returns>
    <remarks>
      <para>
        <b>UnregisterEventNotification</b> returns only after all pending/in-progress callbacks for this registration have completed. DXCore guarantees that no new callbacks will occur for this registration after <b>UnregisterEventNotification</b> has returned. However, to avoid a deadlock, if you call <b>UnregisterEventNotification</b> from within your callback, then <b>UnregisterEventNotification</b> doesn't wait for the active callback to complete.</para>
      <blockquote>
        <para>[!IMPORTANT]
Before you destroy the DXCore object represented by the <i>dxCoreObject</i> argument passed to <see cref="IDXCoreAdapterFactory.RegisterEventNotification" />, you must use the cookie value to unregister that object from notifications by calling <b>UnregisterEventNotification</b>. If you don't do that, then a fatal exception is raised when the situation is detected.</para>
      </blockquote>
      <para>Once you unregister a cookie value, that value is then eligible for being returned by a subsequent registration</para>
    </remarks>
    <seealso cref="IDXCoreAdapter" />
    <seealso cref="IDXCoreAdapterList" />
    <seealso cref="IDXCoreAdapterFactory.UnregisterEventNotification" />
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-reference">DXCore Reference</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</seealso>
  </member>
  <member name="IDXCoreAdapterFactory">
    <summary>
      <para>The <b>IDXCoreAdapterFactory</b> interface implements methods for generating DXCore adapter enumeration objects, and for retrieving their details. <b>IDXCoreAdapterFactory</b> inherits from the <see cref="IUnknown" /> interface. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/win32/dxcore/dxcore-enum-adapters">Using DXCore to enumerate adapters</a>.</para>
    </summary>
  </member>
</doc>