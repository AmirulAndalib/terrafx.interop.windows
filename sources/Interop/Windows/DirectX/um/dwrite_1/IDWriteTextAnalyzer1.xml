<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteTextAnalyzer1.AnalyzeVerticalGlyphOrientation">
    <summary>Analyzes a text range for script orientation, reading text and attributes from the source and reporting results to the sink callback <see cref="SetGlyphOrientation" />.</summary>
    <param name="analysisSource">Source object to analyze.</param>
    <param name="textPosition">Starting position within the source object.</param>
    <param name="textLength">Length to analyze.</param>
    <param name="analysisSink">Length to analyze.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.ApplyCharacterSpacing">
    <summary>Applies spacing between characters, properly adjusting glyph clusters and diacritics.</summary>
    <param name="leadingSpacing">The spacing before each character, in reading order.</param>
    <param name="trailingSpacing">The spacing after each character, in reading order.</param>
    <param name="minimumAdvanceWidth">The minimum advance of each character, to prevent characters from becoming too thin or zero-width. This must be zero or greater.</param>
    <param name="textLength">The length of the clustermap and original text.</param>
    <param name="glyphCount">The number of glyphs.</param>
    <param name="clusterMap">Mapping from character ranges to glyph ranges.</param>
    <param name="glyphAdvances">The advance width of each glyph.</param>
    <param name="glyphOffsets">The offset of the origin of each glyph.</param>
    <param name="glyphProperties">Properties of each glyph, from GetGlyphs.</param>
    <param name="modifiedGlyphAdvances">The new advance width of each glyph.</param>
    <param name="modifiedGlyphOffsets">The new offset of the origin of each glyph.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetBaseline">
    <summary>Retrieves the given baseline from the font.</summary>
    <param name="fontFace">The font face to read.</param>
    <param name="baseline">A <see cref="DWRITE_BASELINE" />-typed value that specifies the baseline of interest.</param>
    <param name="isVertical">Whether the baseline is vertical or horizontal.</param>
    <param name="isSimulationAllowed">Simulate the baseline if it is missing in the font.</param>
    <param name="scriptAnalysis">
      <para>Script analysis result from AnalyzeScript.</para>
      <div>
        <b>Note</b>  You can pass an empty script analysis structure, like this <code>DWRITE_SCRIPT_ANALYSIS scriptAnalysis = {};</code>, and this method will return the default baseline.</div>
    </param>
    <param name="localeName">The language of the run.</param>
    <param name="baselineCoordinate">The baseline coordinate value in design units.</param>
    <param name="exists">Whether the returned baseline exists in the font.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetGlyphOrientationTransform">
    <summary>Returns 2x3 transform matrix for the respective angle to draw the glyph run.</summary>
    <param name="glyphOrientationAngle">A <see cref="DWRITE_GLYPH_ORIENTATION_ANGLE" />-typed value that specifies the angle that was reported into<see cref="IDWriteTextAnalysisSink1.SetGlyphOrientation" />.</param>
    <param name="isSideways">Whether the run's glyphs are sideways or not.</param>
    <param name="transform">Returned transform.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetJustificationOpportunities">
    <summary>Retrieves justification opportunity information for each of the glyphs given the text and shaping glyph properties.</summary>
    <param name="fontFace">
      <para>Font face that was used for shaping. This is mainly important for returning correct results of the kashida width.</para>
      <para>May be NULL.</para>
    </param>
    <param name="fontEmSize">Font em size used for the glyph run.</param>
    <param name="scriptAnalysis">Script of the text from the itemizer.</param>
    <param name="textLength">Length of the text.</param>
    <param name="glyphCount">Number of glyphs.</param>
    <param name="textString">Characters used to produce the glyphs.</param>
    <param name="clusterMap">Clustermap produced from shaping.</param>
    <param name="glyphProperties">Glyph properties produced from shaping.</param>
    <param name="justificationOpportunities">A pointer to a <see cref="DWRITE_JUSTIFICATION_OPPORTUNITY" /> structure that receives info for the allowed justification expansion/compression for each glyph.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetJustifiedGlyphs">
    <summary>Fills in new glyphs for complex scripts where justification increased the advances of glyphs, such as Arabic with kashida.</summary>
    <param name="fontFace">
      <para>Font face used for shaping.</para>
      <para>May be NULL.</para>
    </param>
    <param name="fontEmSize">Font em size used for the glyph run.</param>
    <param name="scriptAnalysis">Script of the text from the itemizer.</param>
    <param name="textLength">Length of the text.</param>
    <param name="glyphCount">Number of glyphs.</param>
    <param name="maxGlyphCount">Maximum number of output glyphs allocated by caller.</param>
    <param name="clusterMap">Clustermap produced from shaping.</param>
    <param name="glyphIndices">Original glyphs produced from shaping.</param>
    <param name="glyphAdvances">Original glyph advances produced from shaping.</param>
    <param name="justifiedGlyphAdvances">Justified glyph advances from<see cref="IDWriteTextAnalyzer1.JustifyGlyphAdvances" />.</param>
    <param name="justifiedGlyphOffsets">Justified glyph offsets from<see cref="IDWriteTextAnalyzer1.JustifyGlyphAdvances" />.</param>
    <param name="glyphProperties">Properties of each glyph, from <see cref="IDWriteTextAnalyzer.GetGlyphs" />.</param>
    <param name="actualGlyphCount">The new glyph count written to the modified arrays, or the needed glyph count if the size is not large enough.</param>
    <param name="modifiedClusterMap">Updated clustermap.</param>
    <param name="modifiedGlyphIndices">Updated glyphs with new glyphs inserted where needed.</param>
    <param name="modifiedGlyphAdvances">Updated glyph advances.</param>
    <param name="modifiedGlyphOffsets">Updated glyph offsets.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetScriptProperties">
    <summary>Retrieves the properties for a given script.</summary>
    <param name="scriptAnalysis">The script for a run of text returned from <see cref="IDWriteTextAnalyzer.AnalyzeScript" />.</param>
    <param name="scriptProperties">A pointer to a <see cref="DWRITE_SCRIPT_PROPERTIES" /> structure that describes info for the script.</param>
    <returns>Returns properties for the given script. If the script is invalid, it returns generic properties for the unknown script and E_INVALIDARG.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.GetTextComplexity">
    <summary>Determines the complexity of text, and whether you need to call <see cref="IDWriteTextAnalyzer.GetGlyphs" /> for full script shaping.</summary>
    <param name="textString">The text to check for complexity. This string may be UTF-16, but any supplementary characters will be considered complex.</param>
    <param name="textLength">Length of the text to check.</param>
    <param name="fontFace">The font face to read.</param>
    <param name="isTextSimple">If true, the text is simple, and the<i>glyphIndices</i> array will already have the nominal glyphs for you. Otherwise, you need to call <see cref="IDWriteTextAnalyzer.GetGlyphs" /> to properly shape complex scripts and OpenType features.</param>
    <param name="textLengthRead">The length read of the text run with the same complexity, simple or complex. You may call again from that point onward.</param>
    <param name="glyphIndices">Optional glyph indices for the text. If the function returned that the text was simple, you already have the glyphs you need. Otherwise the glyph indices are not meaningful, and you need to call <see cref="IDWriteTextAnalyzer.GetGlyphs" /> for shaping instead.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1.JustifyGlyphAdvances">
    <summary>Justifies an array of glyph advances to fit the line width.</summary>
    <param name="lineWidth">The line width.</param>
    <param name="glyphCount">The glyph count.</param>
    <param name="justificationOpportunities">A pointer to a <see cref="DWRITE_JUSTIFICATION_OPPORTUNITY" /> structure that contains info for the allowed justification expansion/compression for each glyph. Get this info from <see cref="IDWriteTextAnalyzer1.GetJustificationOpportunities" />.</param>
    <param name="glyphAdvances">An array of glyph advances.</param>
    <param name="glyphOffsets">An array of glyph offsets.</param>
    <param name="justifiedGlyphAdvances">The returned array of justified glyph advances.</param>
    <param name="justifiedGlyphOffsets">The returned array of justified glyph offsets.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IDWriteTextAnalyzer1">
    <summary>Analyzes various text properties for complex script processing.</summary>
  </member>
</doc>