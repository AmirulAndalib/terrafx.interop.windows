<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11Device3.CreateDeferredContext3">
    <summary>Creates a deferred context, which can record <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-command-list">command lists</a>.</summary>
    <param name="ContextFlags">Reserved for future use. Pass 0.</param>
    <param name="ppDeferredContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext3" /> interface pointer is initialized.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device.</description>
        </item>
        <item>
          <description>Returns <b>DXGI_ERROR_INVALID_CALL</b> if the <b>CreateDeferredContext3</b> method can't be called from the current context. For example, if the device was created with the <see cref="D3D11_CREATE_DEVICE_SINGLETHREADED" /> value, <b>CreateDeferredContext3</b> returns <b>DXGI_ERROR_INVALID_CALL</b>.</description>
        </item>
        <item>
          <description>Returns <b>E_INVALIDARG</b> if the <i>ContextFlags</i> parameter is invalid.</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the app has exhausted available memory.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11Device3.CreateQuery1">
    <summary>Creates a query object for querying information from the graphics processing unit (GPU).</summary>
    <param name="pQueryDesc1">Pointer to a <see cref="D3D11_QUERY_DESC1" /> structure that represents a query description.</param>
    <param name="ppQuery1">A pointer to a memory block that receives a pointer to a <see cref="ID3D11Query1" /> interface for the created query object. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the query object.<br />See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device3.CreateRasterizerState2">
    <summary>Creates a rasterizer state object that informs the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a> how to behave and forces the sample count while UAV rendering or rasterizing.</summary>
    <param name="pRasterizerDesc">A pointer to a <see cref="D3D11_RASTERIZER_DESC2" /> structure that describes the rasterizer state.</param>
    <param name="ppRasterizerState">A pointer to a memory block that receives a pointer to a <see cref="ID3D11RasterizerState2" /> interface for the created rasterizer state object. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the rasterizer state object. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device3.CreateRenderTargetView1">
    <summary>Creates a render-target view for accessing resource data.</summary>
    <param name="pResource">Pointer to a <see cref="ID3D11Resource" /> that represents a render target. This resource must have been created with the <see cref="D3D11_BIND_RENDER_TARGET" /> flag.</param>
    <param name="pDesc1">Pointer to a <see cref="D3D11_RENDER_TARGET_VIEW_DESC1" /> that represents a render-target view description. Set this parameter to <b>NULL</b> to create a view that accesses all of the subresources in mipmap level 0.</param>
    <param name="ppRTView1">A pointer to a memory block that receives a pointer to a <see cref="ID3D11RenderTargetView1" /> interface for the created render-target view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device3.CreateShaderResourceView1">
    <summary>Creates a shader-resource view for accessing data in a resource.</summary>
    <param name="pResource">Pointer to the resource that will serve as input to a shader. This resource must have been created with the <see cref="D3D11_BIND_SHADER_RESOURCE" /> flag.</param>
    <param name="pDesc1">A pointer to a <see cref="D3D11_SHADER_RESOURCE_VIEW_DESC1" /> structure that describes a shader-resource view. Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</param>
    <param name="ppSRView1">A pointer to a memory block that receives a pointer to a <see cref="ID3D11ShaderResourceView1" /> interface for the created shader-resource view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the shader-resource view. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device3.CreateTexture2D1">
    <summary>Creates a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">2D texture</a>.</summary>
    <param name="pDesc1">A pointer to a <see cref="D3D11_TEXTURE2D_DESC1" /> structure that describes a 2D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">
      <para>A pointer to an array of <see cref="D3D11_SUBRESOURCE_DATA" /> structures that describe subresources for the 2D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <see cref="D3D11_USAGE" />). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources can't be initialized with data when they're created.</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
      <para>You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <b>D3D11_TEXTURE2D_DESC1</b> structure to which <i>pDesc1</i> points by using the following calculation:</para>
      <para>MipLevels * ArraySize</para>
      <para>For more info about this array size, see Remarks.</para>
    </param>
    <param name="ppTexture2D">A pointer to a memory block that receives a pointer to a <see cref="ID3D11Texture2D1" /> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is <b>S_OK</b>. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device3.CreateTexture3D1">
    <summary>Creates a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">3D texture</a>.</summary>
    <param name="pDesc1">A pointer to a <see cref="D3D11_TEXTURE3D_DESC1" /> structure that describes a 3D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">
      <para>A pointer to an array of <see cref="D3D11_SUBRESOURCE_DATA" /> structures that describe subresources for the 3D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <see cref="D3D11_USAGE" />). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources can't be initialized with data when they are created.</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
      <para>You can determine the size of this array from the value in the <b>MipLevels</b> member of the <b>D3D11_TEXTURE3D_DESC1</b> structure to which <i>pDesc1</i> points. Arrays of 3D volume textures aren't supported.</para>
      <para>For more information about this array size, see Remarks.</para>
    </param>
    <param name="ppTexture3D">A pointer to a memory block that receives a pointer to a <see cref="ID3D11Texture3D1" /> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is <b>S_OK</b>. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device3.CreateUnorderedAccessView1">
    <summary>Creates a view for accessing an <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">unordered access</a> resource.</summary>
    <param name="pResource">Pointer to an <see cref="ID3D11Resource" /> that represents a resources that will serve as an input to a shader.</param>
    <param name="pDesc1">Pointer to a <see cref="D3D11_UNORDERED_ACCESS_VIEW_DESC1" /> structure that represents an unordered-access view description. Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</param>
    <param name="ppUAView1">A pointer to a memory block that receives a pointer to a <see cref="ID3D11UnorderedAccessView1" /> interface for the created unordered-access view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the unordered-access view. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device3.GetImmediateContext3">
    <summary>Gets an immediate context, which can play back <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-command-list">command lists</a>.</summary>
    <param name="ppImmediateContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext3" /> interface pointer is initialized.</param>
  </member>
  <member name="ID3D11Device3.ReadFromSubresource">
    <summary>Copies data from a<see cref="D3D11_USAGE_DEFAULT" /> texture which was mapped using ID3D11DeviceContext3.<see cref="Map" /> while providing a NULL<see cref="D3D11_MAPPED_SUBRESOURCE" /> parameter.</summary>
    <param name="pDstData">A pointer to the destination data in memory.</param>
    <param name="DstRowPitch">The size of one row of the destination data.</param>
    <param name="DstDepthPitch">The size of one depth slice of destination data.</param>
    <param name="pSrcResource">A pointer to the source resource (see<see cref="ID3D11Resource" />).</param>
    <param name="SrcSubresource">A zero-based index, that identifies the destination subresource. For more details, see<see cref="D3D11CalcSubresource" />.</param>
    <param name="pSrcBox">
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data from. If NULL, the data is read from the destination subresource with no offset. The dimensions of the destination must fit the destination (see<see cref="D3D11_BOX" />).</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, this method doesn't perform any operation.</para>
    </param>
  </member>
  <member name="ID3D11Device3.WriteToSubresource">
    <summary>Copies data into a<see cref="D3D11_USAGE_DEFAULT" /> texture which was mapped using ID3D11DeviceContext3.<see cref="Map" /> while providing a NULL<see cref="D3D11_MAPPED_SUBRESOURCE" /> parameter.</summary>
    <param name="pDstResource">A pointer to the destination resource (an<see cref="ID3D11Resource" />).</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. For more details, see<see cref="D3D11CalcSubresource" />.</param>
    <param name="pDstBox">
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data into. If NULL, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see<see cref="D3D11_BOX" />).</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, this method doesn't perform any operation.</para>
    </param>
    <param name="pSrcData">A pointer to the source data in memory.</param>
    <param name="SrcRowPitch">The size of one row of the source data.</param>
    <param name="SrcDepthPitch">The size of one depth slice of source data.</param>
  </member>
  <member name="ID3D11Device3">
    <summary>The device interface represents a virtual adapter; it is used to create resources. <b>ID3D11Device3</b> adds new methods to those in <see cref="ID3D11Device2" />.</summary>
  </member>
</doc>