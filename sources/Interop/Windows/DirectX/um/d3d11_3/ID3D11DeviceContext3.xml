<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11DeviceContext3.Flush1">
    <summary>
      <para>Sends queued-up commands in the command buffer to the graphics processing unit (GPU), with a specified context type and an optional event handle to create an event query.</para>
    </summary>
    <param name="ContextType">
      <para>Type: <b><see cref="D3D11_CONTEXT_TYPE" /></b></para>
      <para>A <see cref="D3D11_CONTEXT_TYPE" /> that specifies the context in which a query occurs, such as a 3D command queue, 3D compute queue, 3D copy queue, video, or image.</para>
    </param>
    <param name="hEvent">
      <para>Type: <b>HANDLE</b></para>
      <para>An optional event handle. When specified, this method creates an event query.</para>
      <para>
        <b>Flush1</b> operates asynchronously, therefore it can return either before or after the GPU finishes executing the queued graphics commands, which will eventually complete.
To create an event query, you can call <see cref="ID3D11Device.CreateQuery" /> with the
value <see cref="D3D11_QUERY_EVENT" /> value.
To determine when the GPU is finished processing the graphics commands,
you can then use that event query in a call to <see cref="ID3D11DeviceContext.GetData" />.</para>
    </param>
    <remarks>
      <para>
        <b>Flush1</b> has parameters.
For more information, see
<see cref="ID3D11DeviceContext.Flush" />, which doesn't have parameters.</para>
    </remarks>
    <seealso cref="ID3D11DeviceContext3" />
    <seealso cref="ID3D11DeviceContext.Flush" />
  </member>
  <member name="ID3D11DeviceContext3.GetHardwareProtectionState">
    <summary>
      <para>Gets whether hardware protection is enabled.</para>
    </summary>
    <param name="pHwProtectionEnable">
      <para>Type: <b>BOOL*</b></para>
      <para>After this method returns, points to a BOOL that indicates whether hardware protection is enabled.</para>
    </param>
    <seealso cref="ID3D11DeviceContext3" />
  </member>
  <member name="ID3D11DeviceContext3.SetHardwareProtectionState">
    <summary>
      <para>Sets the hardware protection state.</para>
    </summary>
    <param name="HwProtectionEnable">
      <para>Type: <b>BOOL</b></para>
      <para>Specifies whether to enable hardware protection.</para>
    </param>
    <seealso cref="ID3D11DeviceContext3" />
  </member>
  <member name="ID3D11DeviceContext3">
    <summary>
      <para>The device context interface represents a device context; it is used to render commands.
<b>ID3D11DeviceContext3</b> adds new methods to those in <see cref="ID3D11DeviceContext2" />.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D11DeviceContext" />
    <seealso cref="ID3D11DeviceContext1" />
    <seealso cref="ID3D11DeviceContext2" />
  </member>
</doc>