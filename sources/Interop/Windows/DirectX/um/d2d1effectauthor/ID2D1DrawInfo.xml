<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1DrawInfo.SetPixelShader">
    <summary>Set the shader instructions for this transform.</summary>
    <param name="shaderId">The resource id for the shader.</param>
    <param name="pixelOptions">Additional information provided to the renderer to indicate the operations the pixel shader does.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DrawInfo.SetPixelShaderConstantBuffer">
    <summary>Sets the constant buffer for this transform's pixel shader.</summary>
    <param name="buffer">The data applied to the constant buffer.</param>
    <param name="bufferCount">The number of bytes of data in the constant buffer</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DrawInfo.SetResourceTexture">
    <summary>Sets the resource texture corresponding to the given shader texture index.</summary>
    <param name="textureIndex">The index of the texture to be bound to the pixel shader.</param>
    <param name="resourceTexture">The created resource texture.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DrawInfo.SetVertexProcessing">
    <summary>Sets a vertex buffer, a corresponding vertex shader, and options to control how the vertices are to be handled by the Direct2D context.</summary>
    <param name="vertexBuffer">The vertex buffer, if this is cleared, the default vertex shader and mapping to the transform rectangles will be used.</param>
    <param name="vertexOptions">Options that influence how the renderer will interact with the vertex shader.</param>
    <param name="blendDescription">How the vertices will be blended with the output texture.</param>
    <param name="vertexRange">The set of vertices to use from the buffer.</param>
    <param name="vertexShader">The GUID of the vertex shader.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DrawInfo.SetVertexShaderConstantBuffer">
    <summary>Sets the constant buffer for this transform's vertex shader.</summary>
    <param name="buffer">The data applied to the constant buffer</param>
    <param name="bufferCount">The number of bytes of data in the constant buffer.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DrawInfo">
    <summary>This interface is used to describe a GPU rendering pass on a vertex or pixel shader. It is passed to <see cref="ID2D1DrawTransform" />.</summary>
  </member>
</doc>