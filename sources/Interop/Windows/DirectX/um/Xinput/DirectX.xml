<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.XInputEnable">
    <summary>Sets the reporting state of XInput.</summary>
    <param name="enable">If enable is <b>FALSE</b>, XInput will only send neutral data in response to <see cref="XInputGetState" /> (all buttons up, axes centered, and triggers at 0). <see cref="XInputSetState" /> calls will be registered but not sent to the device. Sending any value other than <b>FALSE</b> will restore reading and writing functionality to normal.</param>
  </member>
  <member name="DirectX.XInputGetAudioDeviceIds">
    <summary>Retrieves the sound rendering and sound capture audio device IDs that are associated with the headset connected to the specified controller.</summary>
    <param name="dwUserIndex">Index of the gamer associated with the device.</param>
    <param name="pRenderDeviceId">Windows Core Audio device ID string for render (speakers).</param>
    <param name="pRenderCount">Size, in wide-chars, of the render device ID string buffer.</param>
    <param name="pCaptureDeviceId">Windows Core Audio device ID string for capture (microphone).</param>
    <param name="pCaptureCount">Size, in wide-chars, of capture device ID string buffer.</param>
    <returns>
      <para>If the function successfully retrieves the device IDs for render and capture, the return code is <b>ERROR_SUCCESS</b>.</para>
      <para>If there is no headset connected to the controller, the function will also retrieve <b>ERROR_SUCCESS</b> with <b>NULL</b> as the values for <i>pRenderDeviceId</i> and <i>pCaptureDeviceId</i>.</para>
      <para>If the controller port device is not physically connected, the function will return <b>ERROR_DEVICE_NOT_CONNECTED</b>.</para>
      <para>If the function fails, it will return a valid Win32 error code.</para>
    </returns>
  </member>
  <member name="DirectX.XInputGetBatteryInformation">
    <summary>Retrieves the battery type and charge status of a wireless controller.</summary>
    <param name="dwUserIndex">Index of the signed-in gamer associated with the device. Can be a value in the range 0–XUSER_MAX_COUNT − 1.</param>
    <param name="devType">Specifies which device associated with this user index should be queried. Must be <b>BATTERY_DEVTYPE_GAMEPAD</b> or <b>BATTERY_DEVTYPE_HEADSET</b>.</param>
    <param name="pBatteryInformation">Pointer to an <see cref="XINPUT_BATTERY_INFORMATION" /> structure that receives the battery information.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</returns>
  </member>
  <member name="DirectX.XInputGetCapabilities">
    <summary>Retrieves the capabilities and features of a connected controller.</summary>
    <param name="dwUserIndex">Index of the user's controller. Can be a value in the range 0–3. For information about how this value is determined and how the value maps to indicators on the controller, see <a href="https://docs.microsoft.com//windows/desktop/xinput/getting-started-with-xinput">Multiple Controllers</a>.</param>
    <param name="dwFlags">
      <para>Input flags that identify the controller type. If this value is 0, then the capabilities of all controllers connected to the system are returned. Currently, only one value is supported:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>XINPUT_FLAG_GAMEPAD</b>
          </description>
          <description>Limit query to devices of controller type.</description>
        </listheader>
      </list> <para>Any value of <i>dwflags</i> other than the above or 0 is illegal and will result in an error break when debugging.</para></param>
    <param name="pCapabilities">Pointer to an <see cref="XINPUT_CAPABILITIES" /> structure that receives the controller capabilities.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</para>
      <para>If the controller is not connected, the return value is <b>ERROR_DEVICE_NOT_CONNECTED</b>.</para>
      <para>If the function fails, the return value is an error code defined in WinError.h. The function does not use <i>SetLastError</i> to set the calling thread's last-error code.</para>
    </returns>
  </member>
  <member name="DirectX.XInputGetDSoundAudioDeviceGuids">
    <summary>Gets the sound rendering and sound capture device GUIDs that are associated with the headset connected to the specified controller.</summary>
    <param name="dwUserIndex">[in] Index of the user's controller. It can be a value in the range 0–3. For information about how this value is determined and how the value maps to indicators on the controller, see <a href="https://docs.microsoft.com//windows/desktop/xinput/getting-started-with-xinput">Multiple Controllers</a>.</param>
    <param name="pDSoundRenderGuid">[out] Pointer that receives the GUID of the headset sound rendering device.</param>
    <param name="pDSoundCaptureGuid">[out] Pointer that receives the GUID of the headset sound capture device.</param>
    <returns>
      <para>If the function successfully retrieves the device IDs for render and capture, the return code is <b>ERROR_SUCCESS</b>.</para>
      <para>If there is no headset connected to the controller, the function also retrieves <b>ERROR_SUCCESS</b> with <b>GUID_NULL</b> as the values for <i>pDSoundRenderGuid</i> and <i>pDSoundCaptureGuid</i>.</para>
      <para>If the controller port device is not physically connected, the function returns <b>ERROR_DEVICE_NOT_CONNECTED</b>.</para>
      <para>If the function fails, it returns a valid Win32 error code.</para>
    </returns>
  </member>
  <member name="DirectX.XInputGetKeystroke">
    <summary>Retrieves a gamepad input event.</summary>
    <param name="dwUserIndex">[in] Index of the signed-in gamer associated with the device. Can be a value in the range 0–XUSER_MAX_COUNT − 1, or XUSER_INDEX_ANY to fetch the next available input event from any user.</param>
    <param name="dwReserved">[in] Reserved</param>
    <param name="pKeystroke">[out] Pointer to an <see cref="XINPUT_KEYSTROKE" /> structure that receives an input event.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</para>
      <para>If no new keys have been pressed, the return value is <b>ERROR_EMPTY</b>.</para>
      <para>If the controller is not connected or the user has not activated it, the return value is <b>ERROR_DEVICE_NOT_CONNECTED</b>. See the Remarks section below.</para>
      <para>If the function fails, the return value is an error code defined in Winerror.h. The function does not use <see cref="SetLastError" /> to set the calling thread's last-error code.</para>
    </returns>
  </member>
  <member name="DirectX.XInputGetState">
    <summary>Retrieves the current state of the specified controller.</summary>
    <param name="dwUserIndex">Index of the user's controller. Can be a value from 0 to 3. For information about how this value is determined and how the value maps to indicators on the controller, see <a href="https://docs.microsoft.com//windows/desktop/xinput/getting-started-with-xinput">Multiple Controllers</a>.</param>
    <param name="pState">Pointer to an <see cref="XINPUT_STATE" /> structure that receives the current state of the controller.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</para>
      <para>If the controller is not connected, the return value is <b>ERROR_DEVICE_NOT_CONNECTED</b>.</para>
      <para>If the function fails, the return value is an error code defined in Winerror.h. The function does not use <b>SetLastError</b> to set the calling thread's last-error code.</para>
    </returns>
  </member>
  <member name="DirectX.XInputSetState">
    <summary>Sends data to a connected controller. This function is used to activate the vibration function of a controller.</summary>
    <param name="dwUserIndex">Index of the user's controller. Can be a value from 0 to 3. For information about how this value is determined and how the value maps to indicators on the controller, see <a href="https://docs.microsoft.com//windows/desktop/xinput/getting-started-with-xinput">Multiple Controllers</a>.</param>
    <param name="pVibration">Pointer to an <see cref="XINPUT_VIBRATION" /> structure containing the vibration information to send to the controller.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</para>
      <para>If the controller is not connected, the return value is <b>ERROR_DEVICE_NOT_CONNECTED</b>.</para>
      <para>If the function fails, the return value is an error code defined in WinError.h. The function does not use <i>SetLastError</i> to set the calling thread's last-error code.</para>
    </returns>
  </member>
</doc>