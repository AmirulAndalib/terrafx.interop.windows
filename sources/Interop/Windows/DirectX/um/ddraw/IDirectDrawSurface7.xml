<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDirectDrawSurface7.AddAttachedSurface">
    <summary>Attaches the specified z-buffer surface to this surface.</summary>
    <param name="unnamedParam1">Address of the <see cref="IDirectDrawSurface7" /> interface for the surface to be attached.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_CANNOTATTACHSURFACE</description>
        </item>
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACEALREADYATTACHED</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.AddOverlayDirtyRect">
    <summary>The <b>IDirectDrawSurface7.AddOverlayDirtyRect</b> method is not currently implemented.</summary>
    <param name="unnamedParam1">A pointer to a <b>RECT</b> structure for the rectangle to update.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.Blt">
    <summary>Performs a bit block transfer (bitblt). This method does not support z-buffering or alpha blending during bitblt operations.</summary>
    <param name="unnamedParam1">A pointer to a <b>RECT</b> structure that defines the upper-left and lower-right points of the rectangle to bitblt to on the destination surface. If this parameter is NULL, the entire destination surface is used.</param>
    <param name="unnamedParam2">A pointer to the <see cref="IDirectDrawSurface7" /> interface for the DirectDrawSurface object that is the source of the bitblt.</param>
    <param name="unnamedParam3">A pointer to a <b>RECT</b> structure that defines the upper-left and lower-right points of the rectangle to bitblt from on the source surface. If this parameter is NULL, the entire source surface is used.</param>
    <param name="unnamedParam4">
      <para>A combination of flags that determine the valid members of the associated <see cref="DDBLTFX" /> structure, specify color-key information, or request special behavior from the method. The following flags are defined:</para>
      <para>
        <b>Validation flags</b>
      </para>
      <h4>DDBLT_COLORFILL</h4>
      <para>Uses the <b>dwFillColor</b> member of the <see cref="DDBLTFX" /> structure as the RGB color that fills the destination rectangle on the destination surface.</para>
      <h4>DDBLT_DDFX</h4>
      <para>Uses the <b>dwDDFX</b> member of the <see cref="DDBLTFX" /> structure to specify the effects to use for this bitblt.</para>
      <h4>DDBLT_DDROPS</h4>
      <para>Uses the <b>dwDDROP</b> member of the <see cref="DDBLTFX" /> structure to specify the raster operations (ROPS) that are not part of the Win32 API.</para>
      <h4>DDBLT_DEPTHFILL</h4>
      <para>Uses the <b>dwFillDepth</b> member of the <see cref="DDBLTFX" /> structure as the depth value with which to fill the destination rectangle on the destination z-buffer surface.</para>
      <h4>DDBLT_KEYDESTOVERRIDE</h4>
      <para>Uses the <b>ddckDestColorkey</b> member of the <see cref="DDBLTFX" /> structure as the color key for the destination surface.</para>
      <h4>DDBLT_KEYSRCOVERRIDE</h4>
      <para>Uses the <b>ddckSrcColorkey</b> member of the <see cref="DDBLTFX" /> structure as the color key for the source surface.</para>
      <h4>DDBLT_ROP</h4>
      <para>Uses the <b>dwROP</b> member of the <see cref="DDBLTFX" /> structure for the ROP for this bitblt. These ROPs are the same as those defined in the Win32 API.</para>
      <h4>DDBLT_ROTATIONANGLE</h4>
      <para>Uses the <b>dwRotationAngle</b> member of the <see cref="DDBLTFX" /> structure as the rotation angle (specified in 1/100s of a degree) for the surface.</para>
      <para>
        <b>Color key flags</b>
      </para>
      <h4>DDBLT_KEYDEST</h4>
      <para>Uses the color key that is associated with the destination surface.</para>
      <h4>DDBLT_KEYSRC</h4>
      <para>Uses the color key that is associated with the source surface.</para>
      <para>
        <b>Behavior flags</b>
      </para>
      <h4>DDBLT_ASYNC</h4>
      <para>Performs this bitblt asynchronously through the first in, first out (FIFO) hardware in the order received. If no room is available in the FIFO hardware, the call fails.</para>
      <h4>DDBLT_DONOTWAIT</h4>
      <para>Returns without bitbltting and also returns DDERR_WASSTILLDRAWING if the bitbltter is busy.</para>
      <h4>DDBLT_WAIT</h4>
      <para>Postpones the DDERR_WASSTILLDRAWING return value if the bitbltter is busy, and returns as soon as the bitblt can be set up or another error occurs.</para>
      <para>
        <b>Obsolete and unsupported flags</b>
      </para>
      <h4>All DDBLT_ALPHA flag values</h4>
      <para>Not currently implemented.</para>
      <h4>All DDBLT_ZBUFFER flag values</h4>
      <para>This method does not currently support z-aware bitblt operations. None of the flags beginning with "DDBLT_ZBUFFER" are supported.</para>
    </param>
    <param name="unnamedParam5">A pointer to the <see cref="DDBLTFX" /> structure for the bitblt.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDCLIPLIST</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDRECT</description>
        </item>
        <item>
          <description>DDERR_NOALPHAHW</description>
        </item>
        <item>
          <description>DDERR_NOBLTHW</description>
        </item>
        <item>
          <description>DDERR_NOCLIPLIST</description>
        </item>
        <item>
          <description>DDERR_NODDROPSHW</description>
        </item>
        <item>
          <description>DDERR_NOMIRRORHW</description>
        </item>
        <item>
          <description>DDERR_NORASTEROPHW</description>
        </item>
        <item>
          <description>DDERR_NOROTATIONHW</description>
        </item>
        <item>
          <description>DDERR_NOSTRETCHHW</description>
        </item>
        <item>
          <description>DDERR_NOZBUFFERHW</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.BltBatch">
    <summary>The <b>IDirectDrawSurface7.BltBatch</b> method is not currently implemented.</summary>
    <param name="unnamedParam1">A pointer to the first <see cref="DDBLTBATCH" /> structure that defines the parameters for the bitblt operations.</param>
    <param name="unnamedParam2">Number of bitblt operations to be performed.</param>
    <param name="unnamedParam3">Currently not used and must be set to 0.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDCLIPLIST</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDRECT</description>
        </item>
        <item>
          <description>DDERR_NOALPHAHW</description>
        </item>
        <item>
          <description>DDERR_NOBLTHW</description>
        </item>
        <item>
          <description>DDERR_NOCLIPLIST</description>
        </item>
        <item>
          <description>DDERR_NODDROPSHW</description>
        </item>
        <item>
          <description>DDERR_NOMIRRORHW</description>
        </item>
        <item>
          <description>DDERR_NORASTEROPHW</description>
        </item>
        <item>
          <description>DDERR_NOROTATIONHW</description>
        </item>
        <item>
          <description>DDERR_NOSTRETCHHW</description>
        </item>
        <item>
          <description>DDERR_NOZBUFFERHW</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.BltFast">
    <summary>Performs a source copy bitblt or transparent bitblt by using a source color key or destination color key.</summary>
    <param name="unnamedParam1">The x-coordinate to bitblt to on the destination surface.</param>
    <param name="unnamedParam2">The y-coordinate to bitblt to on the destination surface.</param>
    <param name="unnamedParam3">A pointer to the <see cref="IDirectDrawSurface7" /> interface for the DirectDrawSurface object that is the source of the bitblt.</param>
    <param name="unnamedParam4">A pointer to a <b>RECT</b> structure that defines the upper-left and lower-right points of the rectangle to bitblt from on the source surface.</param>
    <param name="unnamedParam5">
      <para>Type of transfer. The following transfers are defined:</para>
      <h4>DDBLTFAST_DESTCOLORKEY</h4>
      <para>A transparent bitblt that uses the destination color key.</para>
      <h4>DDBLTFAST_NOCOLORKEY</h4>
      <para>A normal copy bitblt with no transparency.</para>
      <h4>DDBLTFAST_SRCCOLORKEY</h4>
      <para>A transparent bitblt that uses the source color key.</para>
      <h4>DDBLTFAST_WAIT</h4>
      <para>Postpones the DDERR_WASSTILLDRAWING message if the bitbltter is busy, and returns as soon as the bitblt can be set up or another error occurs.</para>
    </param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_EXCEPTION</description>
        </item>
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDRECT</description>
        </item>
        <item>
          <description>DDERR_NOBLTHW</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.ChangeUniquenessValue">
    <summary>Manually updates the uniqueness value for this surface.</summary>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_EXCEPTION</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.DeleteAttachedSurface">
    <summary>Detaches one or more attached surfaces.</summary>
    <param name="unnamedParam1">Currently not used and must be set to 0.</param>
    <param name="unnamedParam2">A pointer to the <see cref="IDirectDrawSurface7" /> interface for the DirectDrawSurface object to be detached. If this parameter is NULL, all attached surfaces become detached.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_CANNOTDETACHSURFACE</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_SURFACENOTATTACHED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.EnumAttachedSurfaces">
    <summary>Enumerates all the surfaces that are attached to this surface.</summary>
    <param name="unnamedParam1">Address of the application-defined structure that is passed to the enumeration member every time that it is called.</param>
    <param name="unnamedParam2">Address of the <a href="https://docs.microsoft.com//windows/desktop/api/ddraw/nc-ddraw-lpddenumsurfacescallback7">EnumSurfacesCallback7</a> function to be called for each surface that is attached to this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.EnumOverlayZOrders">
    <summary>Enumerates the overlay surfaces on the specified destination. You can enumerate the overlays in front-to-back or back-to-front order.</summary>
    <param name="unnamedParam1">
      <para>A value that can be set to one of the following flags:</para>
      <h4>DDENUMOVERLAYZ_BACKTOFRONT</h4>
      <para>Enumerates overlays back to front.</para>
      <h4>DDENUMOVERLAYZ_FRONTTOBACK</h4>
      <para>Enumerates overlays front to back.</para>
    </param>
    <param name="unnamedParam2">Address of the user-defined structure to be passed to the callback function for each overlay surface.</param>
    <param name="unnamedParam3">Address of the <a href="https://docs.microsoft.com//windows/desktop/api/ddraw/nc-ddraw-lpddenumsurfacescallback7">EnumSurfacesCallback7</a> callback function to be called for each surface to be overlaid on this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.Flip">
    <summary>Makes the surface memory that is associated with the DDSCAPS_BACKBUFFER surface become associated with the front-buffer surface.</summary>
    <param name="unnamedParam1">A pointer to the <see cref="IDirectDrawSurface7" /> interface for an arbitrary surface in the flipping chain. The default for this parameter is NULL, in which case DirectDraw cycles through the buffers in the order that they are attached to each other. If this parameter is not NULL, DirectDraw flips to the specified surface, instead of the next surface in the flipping chain. <b>Flip</b> fails if the specified surface is not a member of the flipping chain.</param>
    <param name="unnamedParam2">
      <para>A combination of flags that specify flip options. The following flags are defined:</para>
      <h4>DDFLIP_DONOTWAIT</h4>
      <para>On <see cref="IDirectDrawSurface7" /> interfaces, the default is DDFLIP_WAIT. If you want to override the default and use time when the accelerator is busy (as denoted by the DDERR_WASSTILLDRAWING return value), use DDFLIP_DONOTWAIT.</para>
      <h4>DDFLIP_EVEN</h4>
      <para>For use only when displaying video in an overlay surface. The new surface contains data from the even field of a video signal. This flag cannot be used with the DDFLIP_ODD flag.</para>
      <h4>DDFLIP_STEREO</h4>
      <para>DirectDraw flips and displays a main stereo surface. When this flag is set, stereo autoflipping is enabled. The hardware automatically flips between the left and right buffers during each screen refresh.</para>
      <h4>DDFLIP_INTERVAL2</h4>
      <h4>DDFLIP_INTERVAL3</h4>
      <h4>DDFLIP_INTERVAL4</h4>
      <para>The DDFLIP_INTERVAL2, DDFLIP_INTERVAL3, and DDFLIP_INTERVAL4 flags indicate how many vertical retraces to wait between each flip. The default is 1. DirectDraw returns DERR_WASSTILLDRAWING for each surface involved in the flip until the specified number of vertical retraces has occurred. If DDFLIP_INTERVAL2 is set, DirectDraw flips on every second vertical sync; if DDFLIP_INTERVAL3, on every third sync; and if DDFLIP_INTERVAL4, on every fourth sync.</para>
      <para>These flags are effective only if DDCAPS2_FLIPINTERVAL bit is set in the <b>dwCaps2</b> member of the <see cref="DDCAPS" /> structure that is returned for the display hardware.</para>
      <h4>DDFLIP_NOVSYNC</h4>
      <para>Causes DirectDraw to perform the physical flip as close as possible to the next scan line. Subsequent operations that involve the two flipped surfaces do not check whether the physical flip has finished—that is, they do not return DDERR_WASSTILLDRAWING for that reason (but might for other reasons). This allows an application to perform flips at a higher frequency than the monitor refresh rate, but might introduce visible artifacts.</para>
      <para>If DDCAPS2_FLIPNOVSYNC is not set in the <b>dwCaps2</b> member of the <see cref="DDCAPS" /> structure that is returned for the display hardware, DDFLIP_NOVSYNC has no effect.</para>
      <h4>DDFLIP_ODD</h4>
      <para>For use only when displaying video in an overlay surface. The new surface contains data from the odd field of a video signal. This flag cannot be used with the DDFLIP_EVEN flag.</para>
      <h4>DDFLIP_WAIT</h4>
      <para>Typically, if the flip cannot be set up because the state of the display hardware is not appropriate, the DDERR_WASSTILLDRAWING error returns immediately, and no flip occurs. Setting this flag causes <b>Flip</b> to continue trying to flip if it receives the DDERR_WASSTILLDRAWING error from the hardware abstraction layer (HAL). <b>Flip</b> does not return until the flipping operation has been successfully set up or another error, such as DDERR_SURFACEBUSY, is returned.</para>
    </param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOFLIPHW</description>
        </item>
        <item>
          <description>DDERR_NOTFLIPPABLE</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.FreePrivateData">
    <summary>Frees the specified private data that is associated with this surface.</summary>
    <param name="unnamedParam1">Reference to (C++) or address of (C) the globally unique identifier that identifies the private data to be freed.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOTFOUND</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetAttachedSurface">
    <summary>Obtains the attached surface that has the specified capabilities, and increments the reference count of the retrieved interface.</summary>
    <param name="unnamedParam1">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550292(v=vs.85)">DDSCAPS2</a> structure that indicates the hardware capabilities of the attached surface.</param>
    <param name="unnamedParam2">A pointer to a variable to receive a pointer to the retrieved surface's <see cref="IDirectDrawSurface7" /> interface. The retrieved surface is the one that matches the description, according to the <i>lpDDSCaps</i> parameter.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOTFOUND</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetBltStatus">
    <summary>Obtains status about a bit block transfer (bitblt) operation.</summary>
    <param name="unnamedParam1">
      <para>A value that can be set to one of the following flags.</para>
      <h4>DDGBS_CANBLT</h4>
      <para>Inquires whether a bitblt that involves this surface can occur immediately, and returns DD_OK if the bitblt can be completed.</para>
      <h4>DDGBS_ISBLTDONE</h4>
      <para>Inquires whether the bitblt is done, and returns DD_OK if the last bitblt on this surface has completed.</para>
    </param>
    <returns>
      <para>If the method succeeds, a bitbltter is present, and the return value is DD_OK.</para>
      <para>If it fails, the method returns DDERR_WASSTILLDRAWING if the bitbltter is busy, DDERR_NOBLTHW if there is no bitbltter, or one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOBLTHW</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetCaps">
    <summary>Retrieves the capabilities of this surface. These capabilities are not necessarily related to the capabilities of the display device.</summary>
    <param name="unnamedParam1">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550292(v=vs.85)">DDSCAPS2</a> structure that receives the hardware capabilities of this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetClipper">
    <summary>Retrieves the DirectDrawClipper object that is associated with this surface, and increments the reference count of the returned clipper.</summary>
    <param name="unnamedParam1">A pointer to a variable to receive a pointer to the clipper's <see cref="IDirectDrawClipper" /> interface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOCLIPPERATTACHED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetColorKey">
    <summary>Retrieves the color key value for this surface.</summary>
    <param name="unnamedParam1">
      <para>A value that can be set to one of the following flags to specify the color key to retrieve:</para>
      <h4>DDCKEY_DESTBLT</h4>
      <para>A color key or color space to be used as a destination color key for bit block transfer (bitblt) operations.</para>
      <h4>DDCKEY_DESTOVERLAY</h4>
      <para>A color key or color space to be used as a destination color key for overlay operations.</para>
      <h4>DDCKEY_SRCBLT</h4>
      <para>A color key or color space to be used as a source color key for bitblt operations.</para>
      <h4>DDCKEY_SRCOVERLAY</h4>
      <para>A color key or color space to be used as a source color key for overlay operations.</para>
    </param>
    <param name="unnamedParam2">A pointer to a <see cref="DDCOLORKEY" /> structure that receives the current values for the specified color key of the DirectDrawSurface object.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOCOLORKEY</description>
        </item>
        <item>
          <description>DDERR_NOCOLORKEYHW</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetDC">
    <summary>Creates a GDI-compatible handle of a device context for this surface.</summary>
    <param name="unnamedParam1">A pointer to a variable that receives the handle of the device context for this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_DCALREADYCREATED</description>
        </item>
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetDDInterface">
    <summary>Retrieves an interface to the DirectDraw object that was used to create this surface.</summary>
    <param name="unnamedParam1">A pointer to a variable that receives a valid interface pointer if the call succeeds. Cast this pointer to an <see cref="IUnknown" /> interface pointer; then query for the <see cref="IDirectDraw7" /> interface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetFlipStatus">
    <summary>Retrieves status about whether this surface has finished its flipping process.</summary>
    <param name="unnamedParam1">
      <para>A value that can be set to one of the following flags:</para>
      <h4>DDGFS_CANFLIP</h4>
      <para>Inquires whether this surface can be flipped immediately, and returns DD_OK if the flip can be completed.</para>
      <h4>DDGFS_ISFLIPDONE</h4>
      <para>Inquires whether the flip has finished, and returns DD_OK if the last flip on this surface has completed.</para>
    </param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return DDERR_WASSTILLDRAWING if the surface has not finished its flipping process, or one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetLOD">
    <summary>Retrieves the maximum level of detail (LOD) currently set for a managed mipmap surface. This method succeeds only on managed textures.</summary>
    <param name="unnamedParam1">A pointer to a variable that receives the maximum LOD value if the call succeeds.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetOverlayPosition">
    <summary>Retrieves the display coordinates of this surface. This method is used on a visible, active overlay surface (that is, a surface that has the DDSCAPS_OVERLAY flag set).</summary>
    <param name="unnamedParam1">A pointer to a variable that receives the x- display coordinate of this surface if the call succeeds.</param>
    <param name="unnamedParam2">A pointer to a variable that receives the y-display coordinate of this surface if the call succeeds.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDPOSITION</description>
        </item>
        <item>
          <description>DDERR_NOOVERLAYDEST</description>
        </item>
        <item>
          <description>DDERR_NOTAOVERLAYSURFACE</description>
        </item>
        <item>
          <description>DDERR_OVERLAYNOTVISIBLE</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetPalette">
    <summary>Retrieves the DirectDrawPalette object that is associated with this surface, and increments the reference count of the returned palette.</summary>
    <param name="unnamedParam1">A pointer to a variable to receive a pointer to the palette object's <see cref="IDirectDrawPalette" /> interface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOEXCLUSIVEMODE</description>
        </item>
        <item>
          <description>DDERR_NOPALETTEATTACHED</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetPixelFormat">
    <summary>Retrieves the color and pixel format of this surface.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="DDPIXELFORMAT" /> structure that receives a detailed description of the current pixel and color space format of this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetPriority">
    <summary>Retrieves the texture-management priority for this texture. This method succeeds only on managed textures.</summary>
    <param name="unnamedParam1">A pointer to a variable that receives the texture priority if the call succeeds.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the return value is an error. The method returns DDERR_INVALIDOBJECT if the parameter is invalid or if the texture is not managed by Direct3D.</para>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetPrivateData">
    <summary>Copies the private data that is associated with this surface to a provided buffer.</summary>
    <param name="unnamedParam1">Reference to (C++) or address of (C) the globally unique identifier that identifies the private data to be retrieved.</param>
    <param name="unnamedParam2">A pointer to a previously allocated buffer that receives the requested private data if the call succeeds. The application that calls this method must allocate and release this buffer.</param>
    <param name="unnamedParam3">A pointer to a variable that contains the size value of the buffer at <i>lpBuffer</i>, in bytes. If this value is less than the actual size of the private data (such as 0), <b>GetPrivateData</b> sets the variable to the required buffer size, and then returns DDERR_MOREDATA.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_EXPIRED</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_MOREDATA</description>
        </item>
        <item>
          <description>DDERR_NOTFOUND</description>
        </item>
        <item>
          <description>DDERR_OUTOFMEMORY</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetSurfaceDesc">
    <summary>Retrieves a description of this surface in its current condition.</summary>
    <param name="unnamedParam1">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550340(v=vs.85)">DDSURFACEDESC2</a> structure that receives the current description of this surface. You need only initialize this structure's <b>dwSize</b> member to the size, in bytes, of the structure prior to the call; no other preparation is required.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.GetUniquenessValue">
    <summary>Retrieves the current uniqueness value for this surface.</summary>
    <param name="unnamedParam1">A pointer to a variable that receives the surface's current uniqueness value if the call succeeds.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.Initialize">
    <summary>Initializes a DirectDrawSurface object.</summary>
    <param name="unnamedParam1">A pointer to the DirectDraw object to associate with the DirectDrawSurface object.</param>
    <param name="unnamedParam2">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550340(v=vs.85)">DDSURFACEDESC2</a> structure that describes how to initialize this surface.</param>
    <returns>
      <para>This method returns DDERR_ALREADYINITIALIZED.</para>
      <para>This method is provided for compliance with the Component Object Model (COM). Because the DirectDrawSurface object is initialized when it is created, this method always returns DDERR_ALREADYINITIALIZED.</para>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.IsLost">
    <summary>Determines whether the surface memory that is associated with a DirectDrawSurface object has been freed.</summary>
    <returns>
      <para>If the method succeeds, the return value is DD_OK because the memory has not been freed.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>You can use this method to determine when you need to reallocate surface memory. When a DirectDrawSurface object loses its surface memory, most methods return DDERR_SURFACELOST and perform no other action.</returns>
  </member>
  <member name="IDirectDrawSurface7.Lock">
    <summary>Obtains a pointer to the surface memory.</summary>
    <param name="unnamedParam1">A pointer to a <b>RECT</b> structure that identifies the region of the surface that is being locked. If this parameter is NULL, the entire surface is locked.</param>
    <param name="unnamedParam2">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550340(v=vs.85)">DDSURFACEDESC2</a> structure that describes relevant details about the surface and that receives information about the surface.</param>
    <param name="unnamedParam3">
      <para>A combination of flags that determine how to lock the surface. The following flags are defined:</para>
      <h4>DDLOCK_DONOTWAIT</h4>
      <para>On <see cref="IDirectDrawSurface7" /> interfaces, the default is DDLOCK_WAIT. If you want to override the default and use time when the accelerator is busy (as denoted by the DDERR_WASSTILLDRAWING return value), use DDLOCK_DONOTWAIT.</para>
      <h4>DDLOCK_EVENT</h4>
      <para>Not currently implemented.</para>
      <h4>DDLOCK_NOOVERWRITE</h4>
      <para>New for DirectX 7.0. Used only with Direct3D vertex-buffer locks. Indicates that no vertices that were referred to in a draw operation since the start of the frame (or the last lock without this flag) are modified during the lock. This can be useful when you want only to append data to the vertex buffer.</para>
      <h4>DDLOCK_NOSYSLOCK</h4>
      <para>Do not take the Win16Mutex (also known as Win16Lock). This flag is ignored when locking the primary surface.</para>
      <h4>DDLOCK_DISCARDCONTENTS</h4>
      <para>New for DirectX 7.0. Used only with Direct3D vertex-buffer locks. Indicates that no assumptions are made about the contents of the vertex buffer during this lock. This enables Direct3D or the driver to provide an alternative memory area as the vertex buffer. This is useful when you plan to clear the contents of the vertex buffer and fill in new data.</para>
      <h4>DDLOCK_OKTOSWAP</h4>
      <para>This flag is obsolete and was replaced by the DDLOCK_DISCARDCONTENTS flag.</para>
      <h4>DDLOCK_READONLY</h4>
      <para>Indicates that the surface being locked can only be read.</para>
      <h4>DDLOCK_SURFACEMEMORYPTR</h4>
      <para>Indicates that a valid memory pointer to the top of the specified rectangle should be returned. If no rectangle is specified, a pointer to the top of the surface is returned. This is the default.</para>
      <h4>DDLOCK_WAIT</h4>
      <para>If a lock cannot be obtained because a bit block transfer (bitblt) operation is in progress, <b>Lock</b> retries until a lock is obtained or another error occurs, such as DDERR_SURFACEBUSY.</para>
      <h4>DDLOCK_WRITEONLY</h4>
      <para>Indicates that the surface being locked is write-enabled.</para>
    </param>
    <param name="unnamedParam4">Handle of the event. This parameter is not currently used and must be set to NULL.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_OUTOFMEMORY</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.PageLock">
    <summary>Prevents a system-memory surface from being paged out while a bit block transfer (bitblt) operation that uses direct memory access (DMA) transfers to or from system memory is in progress.</summary>
    <param name="unnamedParam1">Currently not used and must be set to 0.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_CANTPAGELOCK</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.PageUnlock">
    <summary>Unlocks a system-memory surface, which then allows it to be paged out.</summary>
    <param name="unnamedParam1">Currently not used and must be set to 0.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_CANTPAGEUNLOCK</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOTPAGELOCKED</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.ReleaseDC">
    <summary>Releases the handle of a device context that was previously obtained by using the <see cref="IDirectDrawSurface7.GetDC" /> method.</summary>
    <param name="unnamedParam1">The handle of a device context that was previously obtained by <see cref="IDirectDrawSurface7.GetDC" />.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.Restore">
    <summary>Restores a surface that has been lost. This occurs when the surface memory that is associated with the DirectDrawSurface object has been freed.</summary>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_IMPLICITLYCREATED</description>
        </item>
        <item>
          <description>DDERR_INCOMPATIBLEPRIMARY</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOEXCLUSIVEMODE</description>
        </item>
        <item>
          <description>DDERR_OUTOFMEMORY</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WRONGMODE</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetClipper">
    <summary>Attaches a clipper object to, or deletes one from, this surface.</summary>
    <param name="unnamedParam1">A pointer to the <see cref="IDirectDrawClipper" /> interface for the DirectDrawClipper object to be attached to the DirectDrawSurface object. If you set this parameter to NULL, the current DirectDrawClipper object is detached.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_NOCLIPPERATTACHED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetColorKey">
    <summary>Sets the color key value for the DirectDrawSurface object if the hardware supports color keys on a per-surface basis.</summary>
    <param name="unnamedParam1">
      <para>A value that can be set to one of the following flags to specify the requested color key:</para>
      <h4>DDCKEY_COLORSPACE</h4>
      <para>The structure contains a color space. Not set if the structure contains a single color key.</para>
      <h4>DDCKEY_DESTBLT</h4>
      <para>A color key or color space to be used as a destination color key for bit block transfer (bitblt) operations.</para>
      <h4>DDCKEY_DESTOVERLAY</h4>
      <para>A color key or color space to be used as a destination color key for overlay operations.</para>
      <h4>DDCKEY_SRCBLT</h4>
      <para>A color key or color space to be used as a source color key for bitblt operations.</para>
      <h4>DDCKEY_SRCOVERLAY</h4>
      <para>A color key or color space to be used as a source color key for overlay operations.</para>
    </param>
    <param name="unnamedParam2">A pointer to a <see cref="DDCOLORKEY" /> structure that contains the new color key values for the DirectDrawSurface object. This value can be NULL to remove a previously set color key.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_NOOVERLAYHW</description>
        </item>
        <item>
          <description>DDERR_NOTAOVERLAYSURFACE</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_WASSTILLDRAWING</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetLOD">
    <summary>Sets the maximum level of detail (LOD) for a managed mipmap surface. This method succeeds only on managed textures.</summary>
    <param name="unnamedParam1">The maximum LOD value to be set for the mipmap chain if the call succeeds.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetOverlayPosition">
    <summary>Changes the display coordinates of an overlay surface.</summary>
    <param name="unnamedParam1">The new x- display coordinate of this surface.</param>
    <param name="unnamedParam2">The new y-display coordinate of this surface.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDPOSITION</description>
        </item>
        <item>
          <description>DDERR_NOOVERLAYDEST</description>
        </item>
        <item>
          <description>DDERR_NOTAOVERLAYSURFACE</description>
        </item>
        <item>
          <description>DDERR_OVERLAYNOTVISIBLE</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetPalette">
    <summary>Attaches a palette object to (or detaches one from) a surface. The surface uses this palette for all subsequent operations. The palette change takes place immediately, without regard to refresh timing.</summary>
    <param name="unnamedParam1">A pointer to the <see cref="IDirectDrawPalette" /> interface for the palette object to be used with this surface. If NULL, the current palette is detached.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDPIXELFORMAT</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_NOEXCLUSIVEMODE</description>
        </item>
        <item>
          <description>DDERR_NOPALETTEATTACHED</description>
        </item>
        <item>
          <description>DDERR_NOPALETTEHW</description>
        </item>
        <item>
          <description>DDERR_NOT8BITCOLOR</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetPriority">
    <summary>Assigns the texture-management priority for this texture. This method succeeds only on managed textures.</summary>
    <param name="unnamedParam1">A value that specifies the new texture-management priority for the texture.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the return value is an error. The method returns DDERR_INVALIDOBJECT if the parameter is invalid or if the texture is not managed by Direct3D.</para>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetPrivateData">
    <summary>Associates data with the surface that is intended for use by the application, not by DirectDraw. Data is passed by value, and multiple sets of data can be associated with a single surface.</summary>
    <param name="unnamedParam1">Reference to (C++) or address of (C) the globally unique identifier that identifies the private data to be set.</param>
    <param name="unnamedParam2">A pointer to a buffer that contains the data to be associated with the surface.</param>
    <param name="unnamedParam3">The size value of the buffer at <i>lpData</i>, in bytes.</param>
    <param name="unnamedParam4">
      <para>A value that can be set to one of the following flags. These flags describe the type of data being passed or request that the data be invalidated when the surface changes.</para>
      <h4>(none)</h4>
      <para>If no flags are specified, DirectDraw allocates memory to hold the data within the buffer and copies the data into the new buffer. The buffer allocated by DirectDraw is automatically freed, as appropriate.</para>
      <h4>DDSPD_IUNKNOWNPOINTER</h4>
      <para>The data at <i>lpData</i> is a pointer to an <see cref="IUnknown" /> interface. DirectDraw automatically calls the <see cref="IUnknown.AddRef" /> method of this interface. When this data is no longer needed, DirectDraw automatically calls the <see cref="IUnknown.Release" /> method of this interface.</para>
      <h4>DDSPD_VOLATILE</h4>
      <para>The buffer at <i>lpData</i> is only valid while the surface remains unchanged. If the surface's contents change, subsequent calls to the <see cref="IDirectDrawSurface7.GetPrivateData" /> method return DDERR_EXPIRED.</para>
    </param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_OUTOFMEMORY</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.SetSurfaceDesc">
    <summary>Sets the characteristics of an existing surface.</summary>
    <param name="unnamedParam1">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff550340(v=vs.85)">DDSURFACEDESC2</a> structure that contains the new surface characteristics.</param>
    <param name="unnamedParam2">Currently not used and must be set to 0.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_SURFACEBUSY</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_INVALIDPIXELFORMAT</description>
        </item>
        <item>
          <description>DDERR_INVALIDCAPS</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_GENERIC</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.Unlock">
    <summary>Notifies DirectDraw that the direct surface manipulations are complete.</summary>
    <param name="unnamedParam1">A pointer to a <b>RECT</b> structure that was used to lock the surface in the corresponding call to the <see cref="IDirectDrawSurface7.Lock" /> method. This parameter can be NULL only if the entire surface was locked by passing NULL in the <i>lpDestRect</i> parameter of the corresponding call to the <b>IDirectDrawSurface7.Lock</b> method.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDRECT</description>
        </item>
        <item>
          <description>DDERR_NOTLOCKED</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.UpdateOverlay">
    <summary>Repositions or modifies the visual attributes of an overlay surface. These surfaces must have the DDSCAPS_OVERLAY flag set.</summary>
    <param name="unnamedParam1">A pointer to a <b>RECT</b> structure that defines the x, y, width, and height of the region on the source surface being used as the overlay. This parameter can be NULL to hide an overlay or to indicate that the entire overlay surface is to be used and that the overlay surface conforms to any boundary and size-alignment restrictions imposed by the device driver.</param>
    <param name="unnamedParam2">A pointer to the <see cref="IDirectDrawSurface7" /> interface for the DirectDrawSurface object that is being overlaid.</param>
    <param name="unnamedParam3">A pointer to a <b>RECT</b> structure that defines the width, x, and height, y, of the region on the destination surface that the overlay should be moved to. This parameter can be NULL to hide the overlay.</param>
    <param name="unnamedParam4">
      <para>A combination of the following flags that determine the overlay update:</para>
      <h4>DDOVER_ADDDIRTYRECT</h4>
      <para>Adds a dirty rectangle to an emulated overlay surface.</para>
      <h4>DDOVER_ALPHADEST</h4>
      <para>Obsolete.</para>
      <h4>DDOVER_ALPHADESTCONSTOVERRIDE</h4>
      <para>Uses the <b>dwAlphaDestConst</b> member of the <see cref="DDOVERLAYFX" /> structure as the destination alpha channel for this overlay.</para>
      <h4>DDOVER_ALPHADESTNEG</h4>
      <para>Indicates that the destination surface becomes more transparent as the alpha value increases (0 is opaque).</para>
      <h4>DDOVER_ALPHADESTSURFACEOVERRIDE</h4>
      <para>Uses the <b>lpDDSAlphaDest</b> member of the <see cref="DDOVERLAYFX" /> structure as the alpha channel destination for this overlay.</para>
      <h4>DDOVER_ALPHAEDGEBLEND</h4>
      <para>Uses the <b>dwAlphaEdgeBlend</b> member of the <see cref="DDOVERLAYFX" /> structure as the alpha channel for the edges of the image that border the color key colors.</para>
      <h4>DDOVER_ALPHASRC</h4>
      <para>Uses either the alpha information in pixel format or the alpha channel surface attached to the source surface as the source alpha channel for this overlay.</para>
      <h4>DDOVER_ALPHASRCCONSTOVERRIDE</h4>
      <para>Uses the <b>dwAlphaSrcConst</b> member of the <see cref="DDOVERLAYFX" /> structure as the source alpha channel for this overlay.</para>
      <h4>DDOVER_ALPHASRCNEG</h4>
      <para>Indicates that the source surface becomes more transparent as the alpha value increases (0 is opaque).</para>
      <h4>DDOVER_ALPHASRCSURFACEOVERRIDE</h4>
      <para>Uses the <b>lpDDSAlphaSrc</b> member of the <see cref="DDOVERLAYFX" /> structure as the alpha channel source for this overlay.</para>
      <h4>DDOVER_ARGBSCALEFACTORS</h4>
      <para>New for DirectX 7.0. Indicates that the <see cref="DDOVERLAYFX" /> structure contains valid ARGB scaling factors.</para>
      <h4>DDOVER_AUTOFLIP</h4>
      <para>Automatically flips to the next surface in the flipping chain each time that a video port VSYNC occurs.</para>
      <h4>DDOVER_BOB</h4>
      <para>Displays each field of the interlaced video stream individually without causing any artifacts to display.</para>
      <h4>DDOVER_BOBHARDWARE</h4>
      <para>Bob operations are performed by using hardware, rather than by using software or being emulated. This flag must be used with the DDOVER_BOB flag.</para>
      <h4>DDOVER_DDFX</h4>
      <para>Uses the overlay FX flags in the <i>lpDDOverlayFx</i> parameter to define special overlay effects.</para>
      <h4>DDOVER_DEGRADEARGBSCALING</h4>
      <para>New for DirectX 7.0. ARGB scaling factors can be degraded to fit driver capabilities.</para>
      <h4>DDOVER_HIDE</h4>
      <para>Turns off this overlay.</para>
      <h4>DDOVER_INTERLEAVED</h4>
      <para>The surface memory is composed of interleaved fields.</para>
      <h4>DDOVER_KEYDEST</h4>
      <para>Uses the color key associated with the destination surface.</para>
      <h4>DDOVER_KEYDESTOVERRIDE</h4>
      <para>Uses the <b>dckDestColorkey</b> member of the <see cref="DDOVERLAYFX" /> structure as the color key for the destination surface.</para>
      <h4>DDOVER_KEYSRC</h4>
      <para>Uses the color key associated with the source surface.</para>
      <h4>DDOVER_KEYSRCOVERRIDE</h4>
      <para>Uses the <b>dckSrcColorkey</b> member of the <see cref="DDOVERLAYFX" /> structure as the color key for the source surface.</para>
      <h4>DDOVER_OVERRIDEBOBWEAVE</h4>
      <para>Bob and weave decisions should not be overridden by other interfaces.</para>
      <h4>DDOVER_REFRESHALL</h4>
      <para>Redraws the entire surface on an emulated overlayed surface.</para>
      <h4>DDOVER_REFRESHDIRTYRECTS</h4>
      <para>Redraws all dirty rectangles on an emulated overlayed surface.</para>
      <h4>DDOVER_SHOW</h4>
      <para>Turns on this overlay.</para>
    </param>
    <param name="unnamedParam5">A pointer to the <see cref="DDOVERLAYFX" /> structure that describes the effects to be used. Can be NULL if the DDOVER_DDFX flag is not specified.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_DEVICEDOESNTOWNSURFACE</description>
        </item>
        <item>
          <description>DDERR_GENERIC</description>
        </item>
        <item>
          <description>DDERR_HEIGHTALIGN</description>
        </item>
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_INVALIDRECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDSURFACETYPE</description>
        </item>
        <item>
          <description>DDERR_NOSTRETCHHW</description>
        </item>
        <item>
          <description>DDERR_NOTAOVERLAYSURFACE</description>
        </item>
        <item>
          <description>DDERR_OUTOFCAPS</description>
        </item>
        <item>
          <description>DDERR_SURFACELOST</description>
        </item>
        <item>
          <description>DDERR_UNSUPPORTED</description>
        </item>
        <item>
          <description>DDERR_XALIGN</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="IDirectDrawSurface7.UpdateOverlayDisplay">
    <summary>The <b>IDirectDrawSurface7.UpdateOverlayDisplay</b> method is not currently implemented.</summary>
    <param name="unnamedParam1">The method is not currently implemented.</param>
    <returns>The method is not currently implemented.</returns>
  </member>
  <member name="IDirectDrawSurface7.UpdateOverlayZOrder">
    <summary>Sets the z-order of an overlay.</summary>
    <param name="unnamedParam1">
      <para>One of the following flags that determines the z-order of the overlay:</para>
      <h4>DDOVERZ_INSERTINBACKOF</h4>
      <para>Inserts this overlay in the overlay chain behind the reference overlay.</para>
      <h4>DDOVERZ_INSERTINFRONTOF</h4>
      <para>Inserts this overlay in the overlay chain in front of the reference overlay.</para>
      <h4>DDOVERZ_MOVEBACKWARD</h4>
      <para>Moves this overlay one position backward in the overlay chain.</para>
      <h4>DDOVERZ_MOVEFORWARD</h4>
      <para>Moves this overlay one position forward in the overlay chain.</para>
      <h4>DDOVERZ_SENDTOBACK</h4>
      <para>Moves this overlay to the back of the overlay chain.</para>
      <h4>DDOVERZ_SENDTOFRONT</h4>
      <para>Moves this overlay to the front of the overlay chain.</para>
    </param>
    <param name="unnamedParam2">A pointer to the <see cref="IDirectDrawSurface7" /> interface for the DirectDraw surface to be used as a relative position in the overlay chain. This parameter is needed only for the DDOVERZ_INSERTINBACKOF and DDOVERZ_INSERTINFRONTOF flags.</param>
    <returns>
      <para>If the method succeeds, the return value is DD_OK.</para>
      <para>If it fails, the method can return one of the following error values:</para>
      <list type="bullet">
        <item>
          <description>DDERR_INVALIDOBJECT</description>
        </item>
        <item>
          <description>DDERR_INVALIDPARAMS</description>
        </item>
        <item>
          <description>DDERR_NOTAOVERLAYSURFACE</description>
        </item>
      </list>
    </returns>
  </member>
</doc>