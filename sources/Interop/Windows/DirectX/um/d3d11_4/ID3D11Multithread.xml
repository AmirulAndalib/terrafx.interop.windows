<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11Multithread.Enter">
    <summary>
      <para>Enter a device's critical section.</para>
    </summary>
    <remarks>
      <para>If <see cref="SetMultithreadProtected" /> is set to true, then entering a device's critical section prevents other threads from simultaneously calling that device's methods, calling DXGI methods, and calling the methods of all resource, view, shader, state, and asynchronous interfaces.</para>
      <para>This function should be used in multithreaded applications when there is a series of graphics commands that must happen in order. This function is typically called at the beginning of the series of graphics commands, and <see cref="Leave" /> is typically called after those graphics commands.</para>
    </remarks>
    <seealso cref="ID3D11Multithread" />
  </member>
  <member name="ID3D11Multithread.GetMultithreadProtected">
    <summary>
      <para>Find out if multithread protection is turned on or not.</para>
    </summary>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>Returns true if multithread protection is turned on, false otherwise.</para>
    </returns>
    <seealso cref="ID3D11Multithread" />
    <seealso cref="SetMultithreadProtected" />
  </member>
  <member name="ID3D11Multithread.Leave">
    <summary>
      <para>Leave a device's critical section.</para>
    </summary>
    <remarks>
      <para>This function is typically used in multithreaded applications when there is a series of graphics commands
that must happen in order. <see cref="Enter" /> is typically called at the beginning of a series of graphics commands, and this function is typically
called after those graphics commands.</para>
    </remarks>
    <seealso cref="ID3D11Multithread" />
  </member>
  <member name="ID3D11Multithread.SetMultithreadProtected">
    <summary>
      <para>Turns multithread protection on or off.</para>
    </summary>
    <param name="bMTProtect">
      <para>Type: <b>BOOL</b></para>
      <para>Set to true to turn multithread protection on, false to turn it off.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>True if multithread protection was already turned on prior to calling this method, false otherwise.</para>
    </returns>
    <seealso cref="GetMultithreadProtected" />
    <seealso cref="ID3D11Multithread" />
  </member>
  <member name="ID3D11Multithread">
    <summary>
      <para>Provides threading protection for critical sections of a multi-threaded application.</para>
    </summary>
    <remarks>
      <para>This interface is obtained by querying it from an immediate device context created with the <see cref="ID3D11DeviceContext" /> (or later versions of this) interface
using <see cref="IUnknown.QueryInterface" />.</para>
      <para>Unlike D3D10, there is no multithreaded layer in D3D11. By default, multithread protection is turned off. Use <see cref="SetMultithreadProtected" /> to turn it on, then <see cref="Enter" /> and <see cref="Leave" /> to encapsulate graphics commands that  must be executed in a specific order.</para>
      <para>By default in D3D11, applications can only use one thread with the immediate context at a time. But, applications can use this interface to change that restriction. The interface can turn on threading protection for the immediate context, which will increase the overhead of each immediate context call in order to share one context with multiple threads.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-interfaces">Core Interfaces</seealso>
    <seealso cref="IUnknown" />
  </member>
</doc>