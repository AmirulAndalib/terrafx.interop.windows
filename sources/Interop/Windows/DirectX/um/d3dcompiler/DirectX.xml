<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.D3DCompile">
    <summary>Compile HLSL code or an effect file into bytecode for a given target.</summary>
    <param name="pSrcData">A pointer to uncompiled shader data; either ASCII HLSL code or a compiled effect.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="pSourceName">You can use this parameter for strings that specify error messages. If not used, set to <b>NULL</b>.</param>
    <param name="pDefines">An optional array of <see cref="D3D_SHADER_MACRO" /> structures that define shader macros. Each macro definition contains a name and a null-terminated definition. If not used, set to <b>NULL</b>. The last structure in the array serves as a terminator and must have all members set to <b>NULL</b>.</param>
    <param name="pInclude">
      <para>Optional. A pointer to an <see cref="ID3DInclude" /> for handling include files. Setting this to <b>NULL</b> will cause a compile error if a shader contains a #include. You can pass the <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b> macro, which is a pointer to a default include handler. This default include handler includes files that are relative to the current directory and files that are relative to the directory of the initial source file. When you use <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b>, you must specify the source file name in the <i>pSourceName</i> parameter; the compiler will derive the initial relative directory from <i>pSourceName</i>.</para>
      <code>#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)</code>
    </param>
    <param name="pEntrypoint">The name of the shader entry point function where shader execution begins. When you compile using a fx profile (for example, fx_4_0, fx_5_0, and so on), <b>D3DCompile</b> ignores <i>pEntrypoint</i>. In this case, we recommend that you set <i>pEntrypoint</i> to <b>NULL</b> because it is good programming practice to set a pointer parameter to <b>NULL</b> if the called function will not use it. For all other shader profiles, a valid <i>pEntrypoint</i> is required.</param>
    <param name="pTarget">A string that specifies the shader target or set of shader features to compile against. The shader target can be shader model 2, shader model 3, shader model 4, or shader model 5. The target can also be an effect type (for example, fx_4_1). For info about the targets that various profiles support, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/specifying-compiler-targets">Specifying Compiler Targets</a>.</param>
    <param name="Flags1">Flags defined by <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-constants">D3D compile constants</a>.</param>
    <param name="Flags2">Flags defined by <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-effect-constants">D3D compile effect constants</a>. When you compile a shader and not an effect file, <b>D3DCompile</b> ignores <i>Flags2</i>; we recommend that you set <i>Flags2</i> to zero because it is good programming practice to set a nonpointer parameter to zero if the called function will not use it.</param>
    <param name="ppCode">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the compiled code.</param>
    <param name="ppErrorMsgs">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access compiler error messages, or <b>NULL</b> if there are no errors.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DCompile2">
    <summary>Compiles Microsoft High Level Shader Language (HLSL) code into bytecode for a given target.</summary>
    <param name="pSrcData">A pointer to uncompiled shader data (ASCII HLSL code).</param>
    <param name="SrcDataSize">The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</param>
    <param name="pSourceName">An optional pointer to a constant null-terminated string containing the name that identifies the source data to use in error messages. If not used, set to <b>NULL</b>.</param>
    <param name="pDefines">An optional array of <see cref="D3D_SHADER_MACRO" /> structures that define shader macros. Each macro definition contains a name and a null-terminated definition. If not used, set to <b>NULL</b>. The last structure in the array serves as a terminator and must have all members set to <b>NULL</b>.</param>
    <param name="pInclude">
      <para>A pointer to an <see cref="ID3DInclude" /> interface that the compiler uses to handle include files. If you set this parameter to <b>NULL</b> and the shader contains a #include, a compile error occurs. You can pass the <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b> macro, which is a pointer to a default include handler. This default include handler includes files that are relative to the current directory and files that are relative to the directory of the initial source file. When you use <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b>, you must specify the source file name in the <i>pSourceName</i> parameter; the compiler will derive the initial relative directory from <i>pSourceName</i>.</para>
      <code>#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)</code>
    </param>
    <param name="pEntrypoint">A pointer to a constant null-terminated string that contains the name of the shader entry point function where shader execution begins. When you compile an effect, <b>D3DCompile2</b> ignores <i>pEntrypoint</i>; we recommend that you set <i>pEntrypoint</i> to <b>NULL</b> because it is good programming practice to set a pointer parameter to <b>NULL</b> if the called function will not use it.</param>
    <param name="pTarget">A pointer to a constant null-terminated string that specifies the shader target or set of shader features to compile against. The shader target can be a shader model (for example, shader model 2, shader model 3, shader model 4, or shader model 5). The target can also be an effect type (for example, fx_4_1). For info about the targets that various profiles support, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/specifying-compiler-targets">Specifying Compiler Targets</a>.</param>
    <param name="Flags1">A combination of shader <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-constants">D3D compile constants</a> that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how the compiler compiles the HLSL code.</param>
    <param name="Flags2">A combination of effect <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-effect-constants">D3D compile effect constants</a> that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how the compiler compiles the effect. When you compile a shader and not an effect file, <b>D3DCompile2</b> ignores <i>Flags2</i>; we recommend that you set <i>Flags2</i> to zero because it is good programming practice to set a nonpointer parameter to zero if the called function will not use it.</param>
    <param name="SecondaryDataFlags">
      <para>A combination of the following flags that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how the compiler compiles the HLSL code.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS (0x01)</description>
          <description>Merge unordered access view (UAV) slots in the secondary data that the <i>pSecondaryData</i> parameter points to.</description>
        </listheader>
        <listheader>
          <description>D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS (0x02)</description>
          <description>Preserve template slots in the secondary data that the <i>pSecondaryData</i> parameter points to.</description>
        </listheader>
        <listheader>
          <description>D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH (0x04)</description>
          <description>Require that templates in the secondary data that the <i>pSecondaryData</i> parameter points to match when the compiler compiles the HLSL code.</description>
        </listheader>
      </list>
      <para>If <i>pSecondaryData</i> is <b>NULL</b>, set to zero.</para>
    </param>
    <param name="pSecondaryData">A pointer to secondary data. If you don't pass secondary data, set to <b>NULL</b>. Use this secondary data to align UAV slots in two shaders. Suppose shader A has UAVs and they are bound to some slots. To compile shader B such that UAVs with the same names are mapped in B to the same slots as in A, pass A’s byte code to <b>D3DCompile2</b> as the secondary data.</param>
    <param name="SecondaryDataSize">The size, in bytes, of the block of memory that <i>pSecondaryData</i> points to. If <i>pSecondaryData</i> is <b>NULL</b>, set to zero.</param>
    <param name="ppCode">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the compiled code.</param>
    <param name="ppErrorMsgs">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access compiler error messages, or <b>NULL</b> if there are no errors.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DCompileFromFile">
    <summary>
      <div>
        <b>Note</b>  You can use this API to develop your Windows Store apps, but you can't use it in apps that you submit to the Windows Store. Refer to the section, "Compiling shaders for UWP", in the remarks for <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile2">D3DCompile2</a>.</div>Compiles Microsoft High Level Shader Language (HLSL) code into bytecode for a given target.</summary>
    <param name="pFileName">A pointer to a constant null-terminated string that contains the name of the file that contains the shader code.</param>
    <param name="pDefines">An optional array of <see cref="D3D_SHADER_MACRO" /> structures that define shader macros. Each macro definition contains a name and a null-terminated definition. If not used, set to <b>NULL</b>. The last structure in the array serves as a terminator and must have all members set to <b>NULL</b>.</param>
    <param name="pInclude">
      <para>An optional pointer to an <see cref="ID3DInclude" /> interface that the compiler uses to handle include files. If you set this parameter to <b>NULL</b> and the shader contains a #include, a compile error occurs. You can pass the <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b> macro, which is a pointer to a default include handler. This default include handler includes files that are relative to the current directory.</para>
      <code>#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)</code>
    </param>
    <param name="pEntrypoint">A pointer to a constant null-terminated string that contains the name of the shader entry point function where shader execution begins. When you compile an effect, <b>D3DCompileFromFile</b> ignores <i>pEntrypoint</i>; we recommend that you set <i>pEntrypoint</i> to <b>NULL</b> because it is good programming practice to set a pointer parameter to <b>NULL</b> if the called function will not use it.</param>
    <param name="pTarget">A pointer to a constant null-terminated string that specifies the shader target or set of shader features to compile against. The shader target can be a shader model (for example, shader model 2, shader model 3, shader model 4, or shader model 5 and later). The target can also be an effect type (for example, fx_4_1). For info about the targets that various profiles support, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/specifying-compiler-targets">Specifying Compiler Targets</a>.</param>
    <param name="Flags1">A combination of shader <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-constants">compile options</a> that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how the compiler compiles the HLSL code.</param>
    <param name="Flags2">A combination of effect <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompile-effect-constants">compile options</a> that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how the compiler compiles the effect. When you compile a shader and not an effect file, <b>D3DCompileFromFile</b> ignores <i>Flags2</i>; we recommend that you set <i>Flags2</i> to zero because it is good programming practice to set a nonpointer parameter to zero if the called function will not use it.</param>
    <param name="ppCode">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the compiled code.</param>
    <param name="ppErrorMsgs">An optional pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access compiler error messages, or <b>NULL</b> if there are no errors.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DCreateBlob">
    <summary>Creates a buffer.</summary>
    <param name="Size">Number of bytes in the blob.</param>
    <param name="ppBlob">The address of a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that is used to retrieve the buffer.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DDecompressShaders">
    <summary>
      <div>
        <b>Note</b>  You can use this API to develop your Windows Store apps, but you can't use it in apps that you submit to the Windows Store.</div>Decompresses one or more shaders from a compressed set.</summary>
    <param name="pSrcData">A pointer to uncompiled shader data; either ASCII HLSL code or a compiled effect.</param>
    <param name="SrcDataSize">Length of uncompiled shader data that <i>pSrcData</i> points to.</param>
    <param name="uNumShaders">The number of shaders to decompress.</param>
    <param name="uStartIndex">The index of the first shader to decompress.</param>
    <param name="pIndices">An array of indexes that represent the shaders to decompress.</param>
    <param name="uFlags">Flags that indicate how to decompress. Currently, no flags are defined.</param>
    <param name="ppShaders">The address of a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that is used to retrieve the decompressed shader data.</param>
    <param name="pTotalShaders">A pointer to a variable that receives the total number of shaders that <b>D3DDecompressShaders</b> decompressed.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DDisassemble">
    <summary>Disassembles compiled HLSL code.</summary>
    <param name="pSrcData">A pointer to source data as compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="Flags">
      <para>Flags affecting the behavior of <b>D3DDisassemble</b>. <i>Flags</i> can be a combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_ENABLE_COLOR_CODE</b>
          </description>
          <description>Enable the output of color codes.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS</b>
          </description>
          <description>Enable the output of default values.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING</b>
          </description>
          <description>Enable instruction numbering.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE</b>
          </description>
          <description>No effect.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_DISABLE_DEBUG_INFO</b>
          </description>
          <description>Disable debug information.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_ENABLE_INSTRUCTION_OFFSET</b>
          </description>
          <description>Enable instruction offsets.</description>
        </listheader>
        <listheader>
          <description>
            <b>D3D_DISASM_INSTRUCTION_ONLY</b>
          </description>
          <description>Disassemble instructions only.</description>
        </listheader>
        <listheader>
          <description>
            <b> D3D_DISASM_PRINT_HEX_LITERALS</b>
          </description>
          <description>Use hex symbols in disassemblies.</description>
        </listheader>
      </list>
    </param>
    <param name="szComments">The comment string at the top of the shader that identifies the shader constants and variables.</param>
    <param name="ppDisassembly">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that accesses assembly text.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DDisassemble10Effect">
    <summary>Disassembles compiled HLSL code from a Direct3D10 effect.</summary>
    <param name="pEffect">A pointer to source data as compiled HLSL code.</param>
    <param name="Flags">Shader <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-shader">compile options</a>.</param>
    <param name="ppDisassembly">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains disassembly text.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DDisassembleRegion">
    <summary>Disassembles a specific region of compiled Microsoft High Level Shader Language (HLSL) code.</summary>
    <param name="pSrcData">A pointer to compiled shader data.</param>
    <param name="SrcDataSize">The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</param>
    <param name="Flags">
      <para>A combination of zero or more of the following flags that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how <b>D3DDisassembleRegion</b> disassembles the compiled shader data.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_ENABLE_COLOR_CODE (0x01)</description>
          <description>Enable the output of color codes.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS (0x02)</description>
          <description>Enable the output of default values.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING (0x04)</description>
          <description>Enable instruction numbering.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE (0x08)</description>
          <description>No effect.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_DISABLE_DEBUG_INFO (0x10)</description>
          <description>Disable the output of debug information.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_ENABLE_INSTRUCTION_OFFSET (0x20)</description>
          <description>Enable the output of instruction offsets.</description>
        </listheader>
        <listheader>
          <description>D3D_DISASM_INSTRUCTION_ONLY (0x40)</description>
          <description>This flag has no effect in <b>D3DDisassembleRegion</b>. Cycle information comes from the trace; therefore, cycle information is available only in <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3ddisassemble11trace">D3DDisassemble11Trace</a>'s trace disassembly.</description>
        </listheader>
      </list>
    </param>
    <param name="szComments">A pointer to a constant null-terminated string at the top of the shader that identifies the shader constants and variables.</param>
    <param name="StartByteOffset">The number of bytes offset into the compiled shader data where <b>D3DDisassembleRegion</b> starts the disassembly.</param>
    <param name="NumInsts">The number of instructions to disassemble.</param>
    <param name="pFinishByteOffset">A pointer to a variable that receives the number of bytes offset into the compiled shader data where <b>D3DDisassembleRegion</b> finishes the disassembly.</param>
    <param name="ppDisassembly">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that accesses the disassembled HLSL code.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetBlobPart">
    <summary>Retrieves a specific part from a compilation result.</summary>
    <param name="pSrcData">A pointer to uncompiled shader data; either ASCII HLSL code or a compiled effect.</param>
    <param name="SrcDataSize">Length of uncompiled shader data that <i>pSrcData</i> points to.</param>
    <param name="Part">A <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_PART</a>-typed value that specifies the part of the buffer to retrieve.</param>
    <param name="Flags">Flags that indicate how to retrieve the blob part. Currently, no flags are defined.</param>
    <param name="ppPart">The address of a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that is used to retrieve the specified part of the buffer.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetDebugInfo">
    <summary>
      <div>
        <b>Note</b>  You can use this API to develop your Windows Store apps, but you can't use it in apps that you submit to the Windows Store.</div>Gets shader debug information.</summary>
    <param name="pSrcData">A pointer to source data; either uncompiled or compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="ppDebugInfo">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains debug information.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetInputAndOutputSignatureBlob">
    <summary>
      <div>
        <b>Note</b>  <b>D3DGetInputAndOutputSignatureBlob</b> may be altered or unavailable for releases after Windows 8.1. Instead use <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dgetblobpart">D3DGetBlobPart</a> with the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB</a> value.</div>Gets the input and output signatures from a compilation result.</summary>
    <param name="pSrcData">A pointer to source data as compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="ppSignatureBlob">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains a compiled shader.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetInputSignatureBlob">
    <summary>
      <div>
        <b>Note</b>  <b>D3DGetInputSignatureBlob</b> may be altered or unavailable for releases after Windows 8.1. Instead use <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dgetblobpart">D3DGetBlobPart</a> with the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_INPUT_SIGNATURE_BLOB</a> value.</div>Gets the input signature from a compilation result.</summary>
    <param name="pSrcData">A pointer to source data as compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="ppSignatureBlob">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains a compiled shader.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetOutputSignatureBlob">
    <summary>
      <div>
        <b>Note</b>  <b>D3DGetOutputSignatureBlob</b> may be altered or unavailable for releases after Windows 8.1. Instead use <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dgetblobpart">D3DGetBlobPart</a> with the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_OUTPUT_SIGNATURE_BLOB</a> value.</div>Gets the output signature from a compilation result.</summary>
    <param name="pSrcData">A pointer to source data as compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="ppSignatureBlob">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains a compiled shader.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DGetTraceInstructionOffsets">
    <summary>Retrieves the byte offsets for instructions within a section of shader code.</summary>
    <param name="pSrcData">A pointer to the compiled shader data.</param>
    <param name="SrcDataSize">The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</param>
    <param name="Flags">
      <para>A combination of the following flags that are combined by using a bitwise <b>OR</b> operation. The resulting value specifies how <b>D3DGetTraceInstructionOffsets</b> retrieves the instruction offsets.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE (0x01)</description>
          <description>Include non-executable code in the retrieved information.</description>
        </listheader>
      </list>
    </param>
    <param name="StartInstIndex">The index of the instruction in the compiled shader data for which <b>D3DGetTraceInstructionOffsets</b> starts to retrieve the byte offsets.</param>
    <param name="NumInsts">The number of instructions for which <b>D3DGetTraceInstructionOffsets</b> retrieves the byte offsets.</param>
    <param name="pOffsets">A pointer to a variable that receives the actual number of offsets.</param>
    <param name="pTotalInsts">A pointer to a variable that receives the total number of instructions in the section of shader code.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DPreprocess">
    <summary>Preprocesses uncompiled HLSL code.</summary>
    <param name="pSrcData">A pointer to uncompiled shader data; either ASCII HLSL code or a compiled effect.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="pSourceName">The name of the file that contains the uncompiled HLSL code.</param>
    <param name="pDefines">An array of NULL-terminated macro definitions (see <see cref="D3D_SHADER_MACRO" />).</param>
    <param name="pInclude">
      <para>A pointer to an <see cref="ID3DInclude" /> for handling include files. Setting this to <b>NULL</b> will cause a compile error if a shader contains a #include. You can pass the <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b> macro, which is a pointer to a default include handler. This default include handler includes files that are relative to the current directory and files that are relative to the directory of the initial source file. When you use <b>D3D_COMPILE_STANDARD_FILE_INCLUDE</b>, you must specify the source file name in the <i>pSourceName</i> parameter; the compiler will derive the initial relative directory from <i>pSourceName</i>.</para>
      <code>#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)</code>
    </param>
    <param name="ppCodeText">The address of a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> that contains the compiled code.</param>
    <param name="ppErrorMsgs">A pointer to an <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> that contains compiler error messages, or <b>NULL</b> if there were no errors.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DReadFileToBlob">
    <summary>
      <div>
        <b>Note</b>  You can use this API to develop your Windows Store apps, but you can't use it in apps that you submit to the Windows Store.</div>Reads a file that is on disk into memory.</summary>
    <param name="pFileName">A pointer to a constant null-terminated string that contains the name of the file to read into memory.</param>
    <param name="ppContents">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains information that <b>D3DReadFileToBlob</b> read from the <i>pFileName</i> file. You can use this <b>ID3DBlob</b> interface to access the file information and pass it to other compiler functions.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DReflect">
    <summary>Gets a pointer to a reflection interface.</summary>
    <param name="pSrcData">A pointer to source data as compiled HLSL code.</param>
    <param name="SrcDataSize">Length of <i>pSrcData</i>.</param>
    <param name="pInterface">The reference GUID of the COM interface to use. For example, <b>IID_ID3D11ShaderReflection</b>.</param>
    <param name="ppReflector">A pointer to a reflection interface.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DSetBlobPart">
    <summary>Sets information in a compilation result.</summary>
    <param name="pSrcData">A pointer to compiled shader data.</param>
    <param name="SrcDataSize">The length of the compiled shader data that <i>pSrcData</i> points to.</param>
    <param name="Part">A <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_PART</a>-typed value that specifies the part to set. Currently, you can update only private data; that is, <b>D3DSetBlobPart</b> currently only supports the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3d-blob-part">D3D_BLOB_PRIVATE_DATA</a> value.</param>
    <param name="Flags">Flags that indicate how to set the blob part. Currently, no flags are defined; therefore, set to zero.</param>
    <param name="pPart">A pointer to data to set in the compilation result.</param>
    <param name="PartSize">The length of the data that <i>pPart</i> points to.</param>
    <param name="ppNewShader">A pointer to a buffer that receives the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface for the new shader in which the new part data is set.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DStripShader">
    <summary>Removes unwanted blobs from a compilation result.</summary>
    <param name="pShaderBytecode">A pointer to source data as compiled HLSL code.</param>
    <param name="BytecodeLength">Length of <i>pSrcData</i>.</param>
    <param name="uStripFlags">Strip flag options, represented by <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dcompiler-strip-flags">D3DCOMPILER_STRIP_FLAGS</a>.</param>
    <param name="ppStrippedBlob">A pointer to a variable that receives a pointer to the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the unwanted stripped out shader code.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
  <member name="DirectX.D3DWriteBlobToFile">
    <summary>
      <div>
        <b>Note</b>  You can use this API to develop your Windows Store apps, but you can't use it in apps that you submit to the Windows Store.</div>Writes a memory blob to a file on disk.</summary>
    <param name="pBlob">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that contains the memory blob to write to the file that the <i>pFileName</i> parameter specifies.</param>
    <param name="pFileName">A pointer to a constant null-terminated string that contains the name of the file to which to write.</param>
    <param name="bOverwrite">A Boolean value that specifies whether to overwrite information in the <i>pFileName</i> file. TRUE specifies to overwrite information and FALSE specifies not to overwrite information.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 return codes</a>.</returns>
  </member>
</doc>