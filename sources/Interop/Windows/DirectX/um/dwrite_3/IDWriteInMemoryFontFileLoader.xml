<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDWriteInMemoryFontFileLoader.CreateInMemoryFontFileReference">
    <summary>Creates a font file reference (<see cref="IDWriteFontFile" /> object) from an array of bytes. The font file reference is bound to the <see cref="IDWriteInMemoryFontFileLoader" /> instance with which it was created and remains valid for as long as that loader is registered with the factory.</summary>
    <param name="factory">Factory object used to create the font file reference.</param>
    <param name="fontData">Pointer to a memory block containing the font data.</param>
    <param name="fontDataSize">Size of the font data.</param>
    <param name="ownerObject">Optional object that owns the memory specified by the fontData parameter. If this parameter is not NULL, the method stores a pointer to the font data and adds a reference to the owner object. The fontData pointer must remain valid until the owner object is released. If this parameter is NULL, the method makes a copy of the font data.</param>
    <param name="fontFile">Receives a pointer to the newly-created font file reference.</param>
    <returns>This method returns an HRESULT success or error code.</returns>
  </member>
  <member name="IDWriteInMemoryFontFileLoader.GetFileCount">
    <summary>Returns the number of font file references that have been created using this loader instance.</summary>
    <returns>Returns the number of font file references that have been created using this loader instance.</returns>
  </member>
  <member name="IDWriteInMemoryFontFileLoader">
    <summary>Represents a font file loader that can access in-memory fonts. The <see cref="IDWriteFactory5.CreateInMemoryFontFileLoader" /> method returns an instance of this interface, which the client can use to load in-memory fonts without having to implement a custom loader. A client can also create its own custom implementation, however. In either case, the client is responsible for registering and unregistering the loader using <see cref="IDWriteFactory.RegisterFontFileLoader" />and <see cref="IDWriteFactory.UnregisterFontFileLoader" />.</summary>
  </member>
</doc>