<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D10Multithread.Enter">
    <summary>
      <para>Enter a device's critical section.</para>
    </summary>
    <remarks>
      <para>Entering a device's critical section prevents other threads from simultaneously calling that device's methods (if <see cref="multithread protection" /> is set to true), calling DXGI methods, and calling the methods of all resource, view, shader, state, and asynchronous interfaces.</para>
      <para>This function should be used in multithreaded applications when there is a series of graphics commands that must happen in order. This function is typically called at the beginning of the series of graphics commands, and <see cref="ID3D10Multithread.Leave" /> is typically called after those graphics commands.</para>
    </remarks>
    <seealso cref="ID3D10Device Interface" />
    <seealso cref="ID3D10Multithread" />
  </member>
  <member name="ID3D10Multithread.GetMultithreadProtected">
    <summary>
      <para>Find out if multithreading is turned on or not.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Whether or not multithreading is turned on. True means on, false means off.</para>
    </returns>
    <seealso cref="ID3D10Multithread Interface" />
  </member>
  <member name="ID3D10Multithread.Leave">
    <summary>
      <para>Leave a device's critical section.</para>
    </summary>
    <remarks>
      <para>This function is typically used in multithreaded applications when there is a series of graphics commands that must happen in order. <see cref="ID3D10Multithread.Enter" /> is typically called at the beginning of a series of graphics commands, and this function is typically called after those graphics commands.</para>
    </remarks>
    <seealso cref="ID3D10Device Interface" />
    <seealso cref="ID3D10Multithread" />
  </member>
  <member name="ID3D10Multithread.SetMultithreadProtected">
    <summary>
      <para>Turn multithreading on or off.</para>
    </summary>
    <param name="bMTProtect">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>True to turn multithreading on, false to turn it off.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>True if multithreading was turned on prior to calling this method, false otherwise.</para>
    </returns>
    <seealso cref="ID3D10Multithread Interface" />
  </member>
  <member name="ID3D10Multithread">
    <summary>
      <para>A multithread interface accesses multithread settings and can only be used if the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-api-features-layers">thread-safe layer</a> is turned on.</para>
    </summary>
    <remarks>
      <para>This interface is obtained by querying it from the <see cref="ID3D10Device Interface" /> using <see cref="IUnknown.QueryInterface" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-d3d10-core-interfaces">Core Interfaces</seealso>
  </member>
</doc>