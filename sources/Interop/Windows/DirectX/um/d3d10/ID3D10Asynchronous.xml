<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D10Asynchronous.Begin">
    <summary>
      <para>Starts the collection of GPU data.</para>
    </summary>
    <remarks>
      <para>Calling Begin starts the asynchronous collection of GPU data. Calling <see cref="ID3D10Asynchronous.End" /> causes data collection to stop.
See <see cref="ID3D10Asynchronous Interface" /> for additional information.</para>
    </remarks>
    <seealso cref="ID3D10Asynchronous Interface" />
  </member>
  <member name="ID3D10Asynchronous.End">
    <summary>
      <para>Ends the collection of GPU data.</para>
    </summary>
    <remarks>
      <para>Calling <see cref="ID3D10Asynchronous.Begin" /> starts the asynchronous collection of GPU data. Calling <b>ID3D10Asynchronous.End</b> causes data
collection to stop. See <see cref="ID3D10Asynchronous Interface" /> for additional information.</para>
    </remarks>
    <seealso cref="ID3D10Asynchronous Interface" />
  </member>
  <member name="ID3D10Asynchronous.GetData">
    <summary>
      <para>Get data from the GPU asynchronously.</para>
    </summary>
    <param name="pData">
      <para>Type: <b>void*</b></para>
      <para>Address of memory that will receive the data. If <b>NULL</b>, <b>GetData</b> will be used only to check status. The type of data output depends on the type of asynchronous interface. See Remarks.</para>
    </param>
    <param name="DataSize">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Size of the data to retrieve or 0. This value can be obtained with <see cref="ID3D10Asynchronous.GetDataSize" />. Must be 0 when <i>pData</i> is <b>NULL</b>.</para>
    </param>
    <param name="GetDataFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Optional flags. Can be 0 or any combination of the flags enumerated by
<see cref="D3D10_ASYNC_GETDATA_FLAG" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this function succeeds, it returns S_OK. Otherwise, possible
return values are the following:</para>
      <list type="bullet">
        <item>
          <description>S_FALSE</description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_REMOVED</description>
        </item>
        <item>
          <description>DXGI_ERROR_INVALID_CALL</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>GetData</b> retrieves the data collected between calls to <see cref="ID3D10Asynchronous.Begin" /> and <see cref="ID3D10Asynchronous.End" />.  Certain queries only require a call to <b>ID3D10Asynchronous.End</b> in which case the data returned by <b>GetData</b> is accurate up to the last call to <b>ID3D10Asynchronous.End</b> (See <see cref="ID3D10Query Interface" />).</para>
      <para>If <i>DataSize</i> is 0, <b>GetData</b> is only used to check status where a return value of S_OK indicates that data is available to give to an application, and a return value of S_FALSE indicates data is not yet available.</para>
      <para>It is invalid to invoke this function on a predicate created with the flag D3D10_QUERY_MISCFLAG_PREDICATEHINT.</para>
      <para>If the asynchronous interface that calls this function is <see cref="ID3D10Query Interface" />, then the following table applies.</para>
      <list type="table">
        <listheader>
          <description>Query Type</description>
          <description>Output Data Type</description>
          <description>Supports Begin Method</description>
        </listheader>
        <item>
          <description>D3D10_QUERY_EVENT</description>
          <description>BOOL</description>
          <description>NO</description>
        </item>
        <item>
          <description>D3D10_QUERY_OCCLUSION</description>
          <description>UINT64</description>
          <description>YES</description>
        </item>
        <item>
          <description>D3D10_QUERY_TIMESTAMP</description>
          <description>UINT64</description>
          <description>NO</description>
        </item>
        <item>
          <description>D3D10_QUERY_TIMESTAMP_DISJOINT</description>
          <description>D3D10_QUERY_DATA_TIMESTAMP_DISJOINT</description>
          <description>YES</description>
        </item>
        <item>
          <description>D3D10_QUERY_PIPELINE_STATISTICS</description>
          <description>D3D10_QUERY_DATA_PIPELINE_STATISTICS</description>
          <description>YES</description>
        </item>
        <item>
          <description>D3D10_QUERY_OCCLUSION_PREDICATE</description>
          <description>BOOL</description>
          <description>YES</description>
        </item>
        <item>
          <description>D3D10_QUERY_SO_STATISTICS</description>
          <description>D3D10_QUERY_DATA_SO_STATISTICS</description>
          <description>YES</description>
        </item>
        <item>
          <description>D3D10_QUERY_SO_OVERFLOW_PREDICATE</description>
          <description>BOOL</description>
          <description>YES</description>
        </item>
      </list>
      <para>If the asynchronous interface that calls this API is <see cref="ID3D10Counter Interface" />, then the following applies.</para>
      <list type="table">
        <listheader>
          <description>Counter Type</description>
          <description>Output Data Type</description>
          <description>Units</description>
        </listheader>
        <item>
          <description>D3D10_COUNTER_GPU_IDLE</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_VERTEX_PROCESSING</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_GEOMETRY_PROCESSING</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_PIXEL_PROCESSING</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_OTHER_GPU_PROCESSING</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION</description>
          <description>FLOAT32</description>
          <description>fraction of theoretical maximum</description>
        </item>
        <item>
          <description>D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION</description>
          <description>FLOAT32</description>
          <description>fraction of theoretical maximum</description>
        </item>
        <item>
          <description>D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION</description>
          <description>FLOAT32</description>
          <description>fraction of theoretical maximum</description>
        </item>
        <item>
          <description>D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION</description>
          <description>FLOAT32</description>
          <description>fraction of theoretical maximum</description>
        </item>
        <item>
          <description>D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION</description>
          <description>FLOAT32</description>
          <description>fraction of theoretical maximum</description>
        </item>
        <item>
          <description>D3D10_COUNTER_VS_MEMORY_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_VS_COMPUTATION_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_GS_MEMORY_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_GS_COMPUTATION_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_PS_MEMORY_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_PS_COMPUTATION_LIMITED</description>
          <description>FLOAT32</description>
          <description>fraction of time</description>
        </item>
        <item>
          <description>D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE</description>
          <description>FLOAT32</description>
          <description>fraction</description>
        </item>
        <item>
          <description>D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE</description>
          <description>FLOAT32</description>
          <description>fraction</description>
        </item>
      </list>
      <para>The value returned by a D3D10_COUNTER_GPU_IDLE, D3D10_COUNTER_VERTEX_PROCESSING, D3D10_COUNTER_GEOMETRY_PROCESSING, D3D10_COUNTER_PIXEL_PROCESSING, or D3D10_COUNTER_OTHER_GPU_PROCESSING counter may be different depending on the number of parallel counters that exist on a video card, and those values can be interpreted with the following equation:</para>
      <para>
        <img alt="Equation to interpret the number of parallel counters" src="https://docs.microsoft.com/windows/win32/api/d3d10mages/parallelUnits.jpg" />
      </para>
      <para>The number of parallel counters that a video card has is available from <b>NumDetectableParallelUnits</b> in <see cref="D3D10_COUNTER_INFO" />, and it can be retrieved by calling <see cref="ID3D10Device.CheckCounterInfo" />.</para>
    </remarks>
    <seealso cref="ID3D10Asynchronous Interface" />
  </member>
  <member name="ID3D10Asynchronous.GetDataSize">
    <summary>
      <para>Get the size of the data (in bytes) that is output when calling <see cref="ID3D10Asynchronous.GetData" />.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Size of the data (in bytes) that is output when calling GetData.</para>
    </returns>
    <seealso cref="ID3D10Asynchronous Interface" />
  </member>
  <member name="ID3D10Asynchronous">
    <summary>
      <para>This interface encapsulates methods for retrieving data from the GPU asynchronously.</para>
    </summary>
    <remarks>
      <para>There are three types of asynchronous interfaces, all of which inherit this interface:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="ID3D10Query Interface" /> - Queries information from the GPU.</description>
        </item>
        <item>
          <description>
            <see cref="ID3D10Predicate Interface" /> - Determines whether a piece of geometry should be processed or not depending on the results of a previous draw call.</description>
        </item>
        <item>
          <description>
            <see cref="ID3D10Counter Interface" /> - Measures GPU performance.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-d3d10-core-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D10DeviceChild" />
  </member>
</doc>