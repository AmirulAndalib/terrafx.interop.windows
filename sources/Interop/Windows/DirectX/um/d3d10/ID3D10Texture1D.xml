<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D10Texture1D.GetDesc">
    <summary>
      <para>Get the properties of the texture resource.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D10_TEXTURE1D_DESC" />*</b></para>
      <para>Pointer to a resource description (see <see cref="D3D10_TEXTURE1D_DESC" />).</para>
    </param>
    <seealso cref="ID3D10Texture1D Interface" />
  </member>
  <member name="ID3D10Texture1D.Map">
    <summary>
      <para>Get a pointer to the data contained in a subresource, and deny the GPU access to that subresource.</para>
    </summary>
    <param name="Subresource">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Index number of the subresource. See <see cref="D3D10CalcSubresource" /> for more details.</para>
    </param>
    <param name="MapType">
      <para>Type: <b><see cref="D3D10_MAP" /></b></para>
      <para>Specifies the CPU's read and write permissions for a resource. For possible values, see <see cref="D3D10_MAP" />.</para>
    </param>
    <param name="MapFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>
        <see cref="Flag" /> that specifies what the CPU should do when the GPU is busy. This flag is optional.</para>
    </param>
    <param name="ppData">
      <para>Type: <b>void**</b></para>
      <para>Pointer to the texture resource data.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this function succeeds, it returns S_OK. For other restrictions, and a listing of error values that can be returned by any of the <b>Map</b> methods, see Remarks.</para>
    </returns>
    <remarks>
      <h3></h3>
      <para>Mapping a texture enables the CPU to directly access the underlying data in the subresource of a texture. For the method to succeed, the texture being mapped must be created with the appropriate flags (see <see cref="D3D10_CPU_ACCESS_FLAG" />), and its specified usage (see <see cref="D3D10_USAGE" />) must be either D3D10_USAGE_DYNAMIC or D3D10_USAGE_STAGING.</para>
      <para>Common failures of <b>Map</b> methods are indicated by the following return values:</para>
      <list type="table">
        <listheader>
          <description>Item</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>DXGI_ERROR_WAS_STILL_DRAWING
</description>
          <description>
            <para>If <i>MapFlags</i> specifies D3D10_MAP_FLAG_DO_NOT_WAIT and the GPU is not yet finished with the resource, <b>Map</b> returns DXGI_ERROR_WAS_STILL_DRAWING.</para>
          </description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_REMOVED
</description>
          <description>
            <b>Map</b> returns DXGI_ERROR_DEVICE_REMOVED if <i>MapType</i> allows any CPU read access and the video card has been removed.
</description>
        </item>
      </list>
      <para>For more information about the preceding return values, see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</para>
      <para>
        <b>Map</b> has the following restrictions:</para>
      <list type="bullet">
        <item>
          <description>A single subresource cannot be mapped multiple times; in other words, do not call <b>Map</b> on a subresource that is already mapped.</description>
        </item>
        <item>
          <description>Any subresource that is bound to the pipeline must be unmapped before any render operation (that is, before <see cref="ID3D10Device.Draw" />) can be executed.</description>
        </item>
      </list>
      <para>Applications must cast the void pData pointer to the appropriate type to meaningfully access the underlying subresource data. For example, the following code demonstrates how to read each texel of a 1D subresource. It is assumed that the texture was created using <see cref="DXGI_FORMAT_R32G32B32A32_FLOAT" /> and that pData is the pointer to the texture resource data output from a successful call to this method.</para>
      <code>
FLOAT* pTexels = (FLOAT*)pData;
for( UINT col = 0; col &lt; width; col++ )
{
  pTexels[col*4 + 0]; // Alpha
  pTexels[col*4 + 1]; // Blue
  pTexels[col*4 + 2]; // Green
  pTexels[col*4 + 3]; // Red
}

</code>
      <list type="table">
        <listheader>
          <description>
            <para>Differences between Direct3D 9 and Direct3D 10:</para>
            <para>
              <b>Map</b> in Direct3D 10 is analogous to resource <a href="https://docs.microsoft.com//windows/desktop/direct3d9/locking-resources">Lock</a> in Direct3D 9.</para>
          </description>
        </listheader>
      </list>
    </remarks>
    <seealso cref="ID3D10Texture1D Interface" />
  </member>
  <member name="ID3D10Texture1D.Unmap">
    <summary>
      <para>Invalidate the pointer to a resource that was retrieved by <see cref="ID3D10Texture1D.Map" />, and re-enable the GPU's access to that resource.</para>
    </summary>
    <param name="Subresource">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> to be unmapped. See <see cref="D3D10CalcSubresource" /> for more details.</para>
    </param>
    <remarks>
      <para>A subresource must be mapped before Unmap is called.</para>
      <list type="table">
        <listheader>
          <description>
            <para>Differences between Direct3D 9 and Direct3D 10:</para>
            <para>Unmap in Direct3D 10 is analogous to resource Unlock in Direct3D 9.</para>
          </description>
        </listheader>
      </list>
    </remarks>
    <seealso cref="ID3D10Texture1D Interface" />
  </member>
  <member name="ID3D10Texture1D">
    <summary>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">1D texture</a> interface accesses texel data, which is structured memory.</para>
    </summary>
    <remarks>
      <para>To create an empty 1D texture, call <see cref="ID3D10Device.CreateTexture1D" />. For more details on creating and loading textures, see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-creating-textures">Creating Texture Resources</a>.</para>
      <para>Textures cannot be bound directly to the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-pipeline-stages">pipeline</a>; instead, a <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-access-views">view</a> must be created and bound. Using a view, texture data can be interpreted at run time within certain restrictions. To use the texture as a render target or depth-stencil resource, call <see cref="ID3D10Device.CreateRenderTargetView" />, and <see cref="ID3D10Device.CreateDepthStencilView" />, respectively. To use the texture as an input to a shader, create a  by calling <see cref="ID3D10Device.CreateShaderResourceView" />.</para>
    </remarks>
    <seealso cref="ID3D10Resource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-resource-interfaces">Resource Interfaces</seealso>
  </member>
</doc>