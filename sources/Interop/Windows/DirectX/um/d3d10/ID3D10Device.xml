<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D10Device.CheckCounter">
    <summary>Get the type, name, units of measure, and a description of an existing counter.</summary>
    <param name="pDesc">Pointer to a counter description (see <see cref="D3D10_COUNTER_DESC" />). Specifies which counter information is to be retrieved about.</param>
    <param name="pType">Pointer to the data type of a counter (see <see cref="D3D10_COUNTER_TYPE" />). Specifies the data type of the counter being retrieved.</param>
    <param name="pActiveCounters">Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</param>
    <param name="szName">String to be filled with a brief name for the counter. May be <b>NULL</b> if the application is not interested in the name of the counter.</param>
    <param name="pNameLength">Length of the string returned to szName. Can be <b>NULL</b>.</param>
    <param name="szUnits">Name of the units a counter measures, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</param>
    <param name="pUnitsLength">Length of the string returned to szUnits. Can be <b>NULL</b>.</param>
    <param name="szDescription">A description of the counter, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</param>
    <param name="pDescriptionLength">Length of the string returned to szDescription. Can be <b>NULL</b>.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CheckCounterInfo">
    <summary>Get a counter's information.</summary>
    <param name="pCounterInfo">Pointer to counter information (see <see cref="D3D10_COUNTER_INFO" />).</param>
  </member>
  <member name="ID3D10Device.CheckFormatSupport">
    <summary>Get the support of a given format on the installed video device.</summary>
    <param name="Format">A <see cref="DXGI_FORMAT" /> enumeration that describes a format for which to check for support.</param>
    <param name="pFormatSupport">A bitfield of <see cref="D3D10_FORMAT_SUPPORT" /> enumeration values describing how the specified format is supported on the installed device. The values are ORed together.</param>
    <returns>Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Format</i> parameter is <b>NULL</b>, or returns E_FAIL if the described format does not exist.</returns>
  </member>
  <member name="ID3D10Device.CheckMultisampleQualityLevels">
    <summary>Get the number of quality levels available during multisampling.</summary>
    <param name="Format">The texture format. See <see cref="DXGI_FORMAT" />.</param>
    <param name="SampleCount">The number of samples during multisampling.</param>
    <param name="pNumQualityLevels">Number of quality levels supported by the adapter. See remarks.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.ClearDepthStencilView">
    <summary>Clears the depth-stencil resource.</summary>
    <param name="pDepthStencilView">Pointer to the depth stencil to be cleared.</param>
    <param name="ClearFlags">Which parts of the buffer to clear. See <see cref="D3D10_CLEAR_FLAG" />.</param>
    <param name="Depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1.</param>
    <param name="Stencil">Clear the stencil buffer with this value.</param>
  </member>
  <member name="ID3D10Device.ClearRenderTargetView">
    <summary>Set all the elements in a render target to one value.</summary>
    <param name="pRenderTargetView">Pointer to the render target.</param>
    <param name="ColorRGBA">A 4-component array that represents the color to fill the render target with.</param>
  </member>
  <member name="ID3D10Device.ClearState">
    <summary>Restore all default device settings; return the device to the state it was in when it was created. This will set all set all input/output resource slots, shaders, input layouts, predications, scissor rectangles, depth-stencil state, rasterizer state, blend state, sampler state, and viewports to <b>NULL</b>. The primitive topology will be set to UNDEFINED.</summary>
  </member>
  <member name="ID3D10Device.CopyResource">
    <summary>Copy the entire contents of the source resource to the destination resource using the GPU.</summary>
    <param name="pDstResource">A pointer to the destination resource (see <see cref="ID3D10Resource" />).</param>
    <param name="pSrcResource">A pointer to the source resource (see <see cref="ID3D10Resource" />).</param>
  </member>
  <member name="ID3D10Device.CopySubresourceRegion">
    <summary>Copy a region from a source resource to a destination resource.</summary>
    <param name="pDstResource">A pointer to the destination resource (see <see cref="ID3D10Resource" />).</param>
    <param name="DstSubresource">
      <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> index of the destination.</param>
    <param name="DstX">The x coordinate of the upper left corner of the destination region.</param>
    <param name="DstY">The y coordinate of the upper left corner of the destination region.</param>
    <param name="DstZ">The z coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</param>
    <param name="pSrcResource">A pointer to the source resource (see <see cref="ID3D10Resource" />).</param>
    <param name="SrcSubresource">
      <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Subresource</a> index of the source.</param>
    <param name="pSrcBox">
      <para>A 3D box (see <see cref="D3D10_BOX" />) that defines the source subresource that can be copied. If <b>NULL</b>, the entire source subresource is copied. The box must fit within the source resource.</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion</b> doesn't perform a copy operation.</para>
    </param>
  </member>
  <member name="ID3D10Device.CreateBlendState">
    <summary>Create a blend-state object that encapsulates blend state for the output-merger stage.</summary>
    <param name="pBlendStateDesc">Pointer to a blend-state description (see <see cref="D3D10_BLEND_DESC" />).</param>
    <param name="ppBlendState">Address of a pointer to the blend-state object created (see <see cref="ID3D10BlendState Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateBuffer">
    <summary>Create a <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">buffer</a> (vertex buffer, index buffer, or shader-constant buffer).</summary>
    <param name="pDesc">Pointer to a buffer description (see <see cref="D3D10_BUFFER_DESC" />).</param>
    <param name="pInitialData">Pointer to the initialization data (see <see cref="D3D10_SUBRESOURCE_DATA" />); use <b>NULL</b> to allocate space only.</param>
    <param name="ppBuffer">Address of a pointer to the buffer created (see <see cref="ID3D10Buffer Interface" />). Set this parameter to <b>NULL</b> to validate the other input parameters (S_FALSE indicates a pass).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateCounter">
    <summary>Create a counter object for measuring GPU performance.</summary>
    <param name="pCounterDesc">Pointer to a counter description (see <see cref="D3D10_COUNTER_DESC" />).</param>
    <param name="ppCounter">Address of a pointer to a counter (see <see cref="ID3D10Counter Interface" />).</param>
    <returns>
      <para>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG.</para>
      <para>DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it.</para>
      <para>DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment.</para>
      <para>E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted.</para>
    </returns>
  </member>
  <member name="ID3D10Device.CreateDepthStencilState">
    <summary>Create a depth-stencil state object that encapsulates <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">depth-stencil test</a> information for the output-merger stage.</summary>
    <param name="pDepthStencilDesc">Pointer to a depth-stencil state description (see <see cref="D3D10_DEPTH_STENCIL_DESC" />).</param>
    <param name="ppDepthStencilState">Address of a pointer to the depth-stencil state object created (see <see cref="ID3D10DepthStencilState Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateDepthStencilView">
    <summary>Create a depth-stencil <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-access-views">view</a> for accessing resource data.</summary>
    <param name="pResource">Pointer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as the depth-stencil surface. This resource must have been created with the <see cref="D3D10_BIND_DEPTH_STENCIL" /> flag.</param>
    <param name="pDesc">Pointer to a depth-stencil-view description (see <see cref="D3D10_DEPTH_STENCIL_VIEW_DESC" />). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</param>
    <param name="ppDepthStencilView">Address of a pointer to an <see cref="ID3D10DepthStencilView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateGeometryShader">
    <summary>Create a geometry shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader. To get this pointer see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</param>
    <param name="BytecodeLength">Size of the compiled geometry shader.</param>
    <param name="ppGeometryShader">Address of a pointer to an <see cref="ID3D10GeometryShader Interface" />. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateGeometryShaderWithStreamOutput">
    <summary>Creates a geometry shader that can write to streaming output buffers.</summary>
    <param name="pShaderBytecode">
      <para>A pointer to the compiled geometry shader for a standard geometry shader plus stream output. For info on how to get this pointer, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
      <para>To create the stream output without using a geometry shader, pass a pointer to the output signature for the prior stage. To obtain this output signature, call the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dgetoutputsignatureblob">D3DGetOutputSignatureBlob</a> compiler function. You can also pass a pointer to the compiled <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex shader</a> that is used in the prior stage. This compiled shader provides the output signature for the data.</para>
    </param>
    <param name="BytecodeLength">Size of the compiled geometry shader.</param>
    <param name="pSODeclaration">Pointer to a <see cref="D3D10_SO_DECLARATION_ENTRY" /> array. Cannot be <b>NULL</b> if <i>NumEntries</i>&gt; 0</param>
    <param name="NumEntries">The number of entries in the array pointed to by <i>pSODeclaration</i>. Minimum 0, maximum 64.</param>
    <param name="OutputStreamStride">The size, in bytes, of each element in the array pointed to by <i>pSODeclaration</i>. This parameter is only used when the output slot is 0 for all entries in <i>pSODeclaration</i>.</param>
    <param name="ppGeometryShader">Address of a pointer to an <see cref="ID3D10GeometryShader Interface" />. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateInputLayout">
    <summary>Create an input-layout object to describe the input-buffer data for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler stage</a>.</summary>
    <param name="pInputElementDescs">An array of the input-assembler stage input data types; each type is described by an element description (see <see cref="D3D10_INPUT_ELEMENT_DESC" />).</param>
    <param name="NumElements">The number of input-data types in the array of input-elements.</param>
    <param name="pShaderBytecodeWithInputSignature">A pointer to the compiled shader. To get this pointer see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>. The compiled shader code contains a <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-signatures">input signature</a> which is validated against the array of elements. See remarks.</param>
    <param name="BytecodeLength">Size of the compiled shader.</param>
    <param name="ppInputLayout">A pointer to the input-layout object created (see <see cref="ID3D10InputLayout Interface" />). To validate the other input parameters, set this pointer to be <b>NULL</b> and verify that the method returns S_FALSE.</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D10Device.CreatePixelShader">
    <summary>Create a pixel shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader. To get this pointer see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</param>
    <param name="BytecodeLength">Size of the compiled pixel shader.</param>
    <param name="ppPixelShader">Address of a pointer to an <see cref="ID3D10PixelShader Interface" />. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreatePredicate">
    <summary>Creates a predicate.</summary>
    <param name="pPredicateDesc">Pointer to a query description where the type of query must be a D3D10_QUERY_SO_OVERFLOW_PREDICATE or D3D10_QUERY_OCCLUSION_PREDICATE (see <see cref="D3D10_QUERY_DESC" />).</param>
    <param name="ppPredicate">Address of a pointer to a predicate (see <see cref="ID3D10Predicate Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateQuery">
    <summary>This interface encapsulates methods for querying information from the GPU.</summary>
    <param name="pQueryDesc">Pointer to a query description (see <see cref="D3D10_QUERY_DESC" />).</param>
    <param name="ppQuery">Address of a pointer to the query object created (see <see cref="ID3D10Query Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateRasterizerState">
    <summary>Create a rasterizer state object that tells the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a> how to behave.</summary>
    <param name="pRasterizerDesc">Pointer to a rasterizer state description (see <see cref="D3D10_RASTERIZER_DESC" />).</param>
    <param name="ppRasterizerState">Address of a pointer to the rasterizer state object created (see <see cref="ID3D10RasterizerState Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateRenderTargetView">
    <summary>Create a render-target <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-access-views">view</a> for accessing resource data.</summary>
    <param name="pResource">Pointer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as the render target. This resource must have been created with the <see cref="D3D10_BIND_RENDER_TARGET" /> flag.</param>
    <param name="pDesc">Pointer to a render-target-view description (see <see cref="D3D10_RENDER_TARGET_VIEW_DESC" />). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</param>
    <param name="ppRTView">Address of a pointer to an <see cref="ID3D10RenderTargetView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateSamplerState">
    <summary>Create a sampler-state object that encapsulates sampling information for a <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-type">texture</a>.</summary>
    <param name="pSamplerDesc">Pointer to a sampler state description (see <see cref="D3D10_SAMPLER_DESC" />).</param>
    <param name="ppSamplerState">Address of a pointer to the sampler state object created (see <see cref="ID3D10SamplerState Interface" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateShaderResourceView">
    <summary>Create a shader-resource <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-access-views">view</a> for accessing data in a resource.</summary>
    <param name="pResource">Pointer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">resource</a> that will serve as input to a shader. This resource must have been created with the <see cref="D3D10_BIND_SHADER_RESOURCE" /> flag.</param>
    <param name="pDesc">Pointer to a shader-resource-view description (see <see cref="D3D10_SHADER_RESOURCE_VIEW_DESC" />). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</param>
    <param name="ppSRView">Address of a pointer to an <see cref="ID3D10ShaderResourceView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.CreateTexture1D">
    <summary>Create an array of 1D textures (see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Texture1D</a>).</summary>
    <param name="pDesc">Pointer to a 1D texture description (see <see cref="D3D10_TEXTURE1D_DESC" />). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">Pointer to an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <see cref="D3D10_SUBRESOURCE_DATA" />); one for each subresource (ordered by texture array index). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <see cref="D3D10_USAGE" />). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</param>
    <param name="ppTexture1D">Address of a pointer to the created texture (see <see cref="ID3D10Texture1D Interface" />). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D10Device.CreateTexture2D">
    <summary>Create an array of 2D textures (see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Texture2D</a>).</summary>
    <param name="pDesc">Pointer to a 2D texture description (see <see cref="D3D10_TEXTURE2D_DESC" />). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">Pointer to an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <see cref="D3D10_SUBRESOURCE_DATA" />); one for each subresource (ordered by texture array index, then mip level). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <see cref="D3D10_USAGE" />). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</param>
    <param name="ppTexture2D">Address of a pointer to the created texture (see <see cref="ID3D10Texture2D Interface" />). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D10Device.CreateTexture3D">
    <summary>Create a single 3D texture (see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">Texture3D</a>).</summary>
    <param name="pDesc">Pointer to a 3D texture description (see <see cref="D3D10_TEXTURE3D_DESC" />). To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">Pointer to an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> descriptions (see <see cref="D3D10_SUBRESOURCE_DATA" />); one for each subresource (ordered by texture array index, then slice index, then mip level). Applications may not specify <b>NULL</b> for pInitialData when creating IMMUTABLE resources (see <see cref="D3D10_USAGE" />). If the resource is multisampled, pInitialData must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</param>
    <param name="ppTexture3D">Address of a pointer to the created texture (see <see cref="ID3D10Texture3D Interface" />). Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D10Device.CreateVertexShader">
    <summary>Create a vertex-shader object from a compiled shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader. To get this pointer see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</param>
    <param name="BytecodeLength">Size of the compiled vertex shader.</param>
    <param name="ppVertexShader">Address of a pointer to an <see cref="ID3D10VertexShader Interface" />. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.Draw">
    <summary>Draw non-indexed, non-instanced primitives.</summary>
    <param name="VertexCount">Number of vertices to draw.</param>
    <param name="StartVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer; it could also be used as the first vertex id generated for a shader parameter marked with the <b>SV_TargetId</b> <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">system-value semantic</a>.</param>
  </member>
  <member name="ID3D10Device.DrawAuto">
    <summary>Draw geometry of an unknown size that was created by the geometry shader stage. See remarks.</summary>
  </member>
  <member name="ID3D10Device.DrawIndexed">
    <summary>Draw indexed, non-instanced primitives.</summary>
    <param name="IndexCount">Number of indices to draw.</param>
    <param name="StartIndexLocation">Index of the first index to use when accessing the vertex buffer; begin at <i>StartIndexLocation</i> to index vertices from the vertex buffer.</param>
    <param name="BaseVertexLocation">Offset from the start of the vertex buffer to the first vertex.</param>
  </member>
  <member name="ID3D10Device.DrawIndexedInstanced">
    <summary>Draw indexed, instanced primitives.</summary>
    <param name="IndexCountPerInstance">Size of the index buffer used in each instance.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartIndexLocation">Index of the first index.</param>
    <param name="BaseVertexLocation">Index of the first vertex. The index is signed, which allows a negative index. If the negative index plus the index value from the index buffer are less than 0, the result is undefined.</param>
    <param name="StartInstanceLocation">Index of the first instance.</param>
  </member>
  <member name="ID3D10Device.DrawInstanced">
    <summary>Draw non-indexed, instanced primitives.</summary>
    <param name="VertexCountPerInstance">Number of vertices to draw.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartVertexLocation">Index of the first vertex.</param>
    <param name="StartInstanceLocation">Index of the first instance.</param>
  </member>
  <member name="ID3D10Device.Flush">
    <summary>Send queued-up commands in the command buffer to the GPU.</summary>
  </member>
  <member name="ID3D10Device.GenerateMips">
    <summary>Generates mipmaps for the given shader resource.</summary>
    <param name="pShaderResourceView">A pointer to an <see cref="ID3D10ShaderResourceView" />. The mipmaps will be generated for this shader resource.</param>
  </member>
  <member name="ID3D10Device.GetCreationFlags">
    <summary>Get the flags used during the call to create the device with <see cref="D3D10CreateDevice" />.</summary>
    <returns>A bitfield containing the flags used to create the device. See <see cref="D3D10_CREATE_DEVICE_FLAG" />.</returns>
  </member>
  <member name="ID3D10Device.GetDeviceRemovedReason">
    <summary>Get the reason why the device was removed.</summary>
    <returns>
      <para>Possible return values include:</para>
      <list type="bullet">
        <item>
          <description>DXGI_ERROR_DEVICE_HUNG</description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_REMOVED</description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_RESET</description>
        </item>
        <item>
          <description>DXGI_ERROR_DRIVER_INTERNAL_ERROR</description>
        </item>
        <item>
          <description>DXGI_ERROR_INVALID_CALL</description>
        </item>
        <item>
          <description>S_OK</description>
        </item>
      </list>For more detail on these return codes, see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
  </member>
  <member name="ID3D10Device.GetExceptionMode">
    <summary>Get the exception-mode flags.</summary>
    <returns>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <see cref="D3D10_RAISE_FLAG" />. A default value of 0 means there are no flags.</returns>
  </member>
  <member name="ID3D10Device.GetPredication">
    <summary>Get the rendering predicate state.</summary>
    <param name="ppPredicate">Address of a pointer to a predicate (see <see cref="ID3D10Predicate" />). Value stored here will be <b>NULL</b> upon device creation.</param>
    <param name="pPredicateValue">Address of a boolean to fill with the predicate comparison value. <b>FALSE</b> upon device creation.</param>
  </member>
  <member name="ID3D10Device.GetPrivateData">
    <summary>Get data from a device that is associated with a guid.</summary>
    <param name="guid">Guid associated with the data.</param>
    <param name="pDataSize">Size of the data.</param>
    <param name="pData">Pointer to the data stored with the device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.GetTextFilterSize">
    <summary>This method is not implemented.</summary>
    <param name="pWidth">Not applicable</param>
    <param name="pHeight">Not applicable</param>
  </member>
  <member name="ID3D10Device.GSGetConstantBuffers">
    <summary>Get the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">geometry shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
    <param name="NumBuffers">Number of buffers to retrieve.</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D10Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.GSGetSamplers">
    <summary>Get an array of sampler states from the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">geometry shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting samplers from.</param>
    <param name="NumSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Array of sampler-state pointers (see <see cref="ID3D10SamplerState" />) to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.GSGetShader">
    <summary>Get the geometry shader currently set on the device.</summary>
    <param name="ppGeometryShader">Address of a pointer to a geometry shader (see <see cref="ID3D10GeometryShader" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.GSGetShaderResources">
    <summary>Get the geometry shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.GSSetConstantBuffers">
    <summary>Set the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">geometry shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
    <param name="NumBuffers">Number of buffers to set.</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D10Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D10Device.GSSetSamplers">
    <summary>Set an array of sampler states to the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">geometry shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to.</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D10SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D10Device.GSSetShader">
    <summary>Set a geometry shader to the device.</summary>
    <param name="pShader">Pointer to a geometry shader (see <see cref="ID3D10GeometryShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
  </member>
  <member name="ID3D10Device.GSSetShaderResources">
    <summary>Bind an array of shader resources to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/geometry-shader-stage">geometry shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D10Device.IAGetIndexBuffer">
    <summary>Get a pointer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">index buffer</a> that is bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler</a> stage.</summary>
    <param name="pIndexBuffer">A pointer to an index buffer returned by the method (see <see cref="ID3D10Buffer" />).</param>
    <param name="Format">Specifies format of the data in the index buffer (see <see cref="DXGI_FORMAT" />). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</param>
    <param name="Offset">Offset (in bytes) from the start of the index buffer, to the first index to use.</param>
  </member>
  <member name="ID3D10Device.IAGetInputLayout">
    <summary>Get a pointer to the input-layout object that is bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler stage</a>.</summary>
    <param name="ppInputLayout">A pointer to the input-layout object (see <see cref="ID3D10InputLayout" />), which describes the input buffers that will be read by the IA stage.</param>
  </member>
  <member name="ID3D10Device.IAGetPrimitiveTopology">
    <summary>Get information about the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-primitive-topologies">primitive type</a>, and data order that describes input data for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input assembler</a> stage.</summary>
    <param name="pTopology">A pointer to the type of primitive, and ordering of the primitive data (see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>).</param>
  </member>
  <member name="ID3D10Device.IAGetVertexBuffers">
    <summary>Get the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">vertex buffers</a> bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler</a> stage.</summary>
    <param name="StartSlot">The <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">input slot</a> of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. A maximum of 16 or 32 input slots (ranges from 0 to either D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 or D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</param>
    <param name="NumBuffers">The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</param>
    <param name="ppVertexBuffers">A pointer to an array of vertex buffers returned by the method (see <see cref="ID3D10Buffer" />).</param>
    <param name="pStrides">Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer.</param>
    <param name="pOffsets">Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</param>
  </member>
  <member name="ID3D10Device.IASetIndexBuffer">
    <summary>Bind an <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">index buffer</a> to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler</a> stage.</summary>
    <param name="pIndexBuffer">A pointer to a buffer (see <see cref="ID3D10Buffer" />) that contains indices. The index buffer must have been created with the <see cref="D3D10_BIND_INDEX_BUFFER" /> flag.</param>
    <param name="Format">Specifies format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (<see cref="DXGI_FORMAT_R16_UINT" />) and 32-bit (<b>DXGI_FORMAT_R32_UINT</b>) integers.</param>
    <param name="Offset">Offset (in bytes) from the start of the index buffer to the first index to use.</param>
  </member>
  <member name="ID3D10Device.IASetInputLayout">
    <summary>Bind an input-layout object to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler stage</a>.</summary>
    <param name="pInputLayout">A pointer to the input-layout object (see <see cref="ID3D10InputLayout" />), which describes the input buffers that will be read by the IA stage.</param>
  </member>
  <member name="ID3D10Device.IASetPrimitiveTopology">
    <summary>Bind information about the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-primitive-topologies">primitive type</a>, and data order that describes input data for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input assembler</a> stage.</summary>
    <param name="Topology">The type of primitive and ordering of the primitive data (see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>).</param>
  </member>
  <member name="ID3D10Device.IASetVertexBuffers">
    <summary>Bind an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">vertex buffers</a> to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler</a> stage.</summary>
    <param name="StartSlot">The first <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">input slot</a> for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. A maximum of 16 or 32 input slots (ranges from 0 to either D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 or D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</param>
    <param name="NumBuffers">The number of vertex buffers in the array. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</param>
    <param name="ppVertexBuffers">A pointer to an array of vertex buffers (see <see cref="ID3D10Buffer" />). The vertex buffers must have been created with the <see cref="D3D10_BIND_VERTEX_BUFFER" /> flag.</param>
    <param name="pStrides">Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer.</param>
    <param name="pOffsets">Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</param>
  </member>
  <member name="ID3D10Device.OMGetBlendState">
    <summary>Get the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">blend state</a> of the output-merger stage.</summary>
    <param name="ppBlendState">Address of a pointer to a blend-state interface (see <see cref="ID3D10BlendState" />).</param>
    <param name="BlendFactor">Array of blend factors, one for each RGBA component.</param>
    <param name="pSampleMask">Pointer to a <see cref="sample mask" />.</param>
  </member>
  <member name="ID3D10Device.OMGetDepthStencilState">
    <summary>Gets the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">depth-stencil</a> state of the output-merger stage.</summary>
    <param name="ppDepthStencilState">Address of a pointer to a depth-stencil state interface (see <see cref="ID3D10DepthStencilState" />) to be filled with information from the device.</param>
    <param name="pStencilRef">Pointer to the stencil reference value used in the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">depth-stencil</a> test.</param>
  </member>
  <member name="ID3D10Device.OMGetRenderTargets">
    <summary>Get pointers to the render targets and the depth-stencil buffer that are available to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a>.</summary>
    <param name="NumViews">Number of render targets to retrieve.</param>
    <param name="ppRenderTargetViews">Pointer to an array of render targets views (see <see cref="ID3D10RenderTargetView" />) to be filled with the render targets from the device. Specify <b>NULL</b> for this parameter when retrieval of a render target is not needed.</param>
    <param name="ppDepthStencilView">Pointer to a depth-stencil view (see <see cref="ID3D10DepthStencilView" />) to be filled with the depth-stencil information from the device. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not needed.</param>
  </member>
  <member name="ID3D10Device.OMSetBlendState">
    <summary>Set the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">blend state</a> of the output-merger stage.</summary>
    <param name="pBlendState">Pointer to a blend-state interface (see <see cref="ID3D10BlendState" />). Passing in <b>NULL</b> implies a default blend state. See remarks for further details.</param>
    <param name="BlendFactor">Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created the blend-state object with <see cref="D3D10_BLEND_BLEND_FACTOR" /> or <see cref="D3D10_BLEND_INV_BLEND_FACTOR" />, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with <b>D3D10_BLEND_BLEND_FACTOR</b> or <b>D3D10_BLEND_INV_BLEND_FACTOR</b>, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call <see cref="ID3D11DeviceContext.OMGetBlendState" /> to retrieve the blend factors. If you pass <b>NULL</b>, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.</param>
    <param name="SampleMask">32-bit sample coverage. The default value is 0xffffffff. See remarks.</param>
  </member>
  <member name="ID3D10Device.OMSetDepthStencilState">
    <summary>Sets the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">depth-stencil</a> state of the output-merger stage.</summary>
    <param name="pDepthStencilState">Pointer to a depth-stencil state interface (see <see cref="ID3D10DepthStencilState" />) to bind to the device.</param>
    <param name="StencilRef">Reference value to perform against when doing a depth-stencil test. See remarks.</param>
  </member>
  <member name="ID3D10Device.OMSetRenderTargets">
    <summary>Bind one or more render targets and the depth-stencil buffer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a>.</summary>
    <param name="NumViews">Number of render targets to bind.</param>
    <param name="ppRenderTargetViews">Pointer to an array of render targets (see <see cref="ID3D10RenderTargetView" />) to bind to the device. If this parameter is <b>NULL</b>, no render targets are bound. See Remarks.</param>
    <param name="pDepthStencilView">Pointer to a depth-stencil view (see <see cref="ID3D10DepthStencilView" />) to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil state is not bound.</param>
  </member>
  <member name="ID3D10Device.OpenSharedResource">
    <summary>Give a device access to a shared resource created on a different Direct3d device.</summary>
    <param name="hResource">A resource handle. See remarks.</param>
    <param name="ReturnedInterface">The globally unique identifier (GUID) for the resource interface. See remarks.</param>
    <param name="ppResource">Address of a pointer to the resource we are gaining access to.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.PSGetConstantBuffers">
    <summary>Get the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">pixel shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
    <param name="NumBuffers">Number of buffers to retrieve.</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D10Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.PSGetSamplers">
    <summary>Get an array of sampler states from the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">pixel shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting samplers from.</param>
    <param name="NumSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Array of sampler-state interface pointers (see <see cref="ID3D10SamplerState" />) to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.PSGetShader">
    <summary>Get the pixel shader currently set on the device.</summary>
    <param name="ppPixelShader">Address of a pointer to a pixel shader (see <see cref="ID3D10PixelShader" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.PSGetShaderResources">
    <summary>Get the pixel shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.PSSetConstantBuffers">
    <summary>Set the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">pixel shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
    <param name="NumBuffers">Number of buffers to set.</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D10Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D10Device.PSSetSamplers">
    <summary>Set an array of sampler states to the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">pixel shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to.</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D10SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D10Device.PSSetShader">
    <summary>Sets a pixel shader to the device.</summary>
    <param name="pPixelShader">Pointer to a pixel shader (see <see cref="ID3D10PixelShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
  </member>
  <member name="ID3D10Device.PSSetShaderResources">
    <summary>Bind an array of shader resources to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/pixel-shader-stage">pixel shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D10Device.ResolveSubresource">
    <summary>Copy a multisampled resource into a non-multisampled resource. This API is most useful when re-using the resulting rendertarget of one render pass as an input to a second render pass.</summary>
    <param name="pDstResource">Destination resource. Must be a created with the <see cref="D3D10_USAGE_DEFAULT" /> flag and be single-sampled. See <see cref="ID3D10Resource" />.</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. See <see cref="D3D10CalcSubresource" /> for more details.</param>
    <param name="pSrcResource">Source resource. Must be multisampled.</param>
    <param name="SrcSubresource">The source subresource of the source resource.</param>
    <param name="Format">
      <see cref="DXGI_FORMAT" /> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</param>
  </member>
  <member name="ID3D10Device.RSGetScissorRects">
    <summary>Get the array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-getting-started">scissor rectangles</a> bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a>.</summary>
    <param name="NumRects">Number of scissor rectangles to get. If pRects is <b>NULL</b>, this will be filled with the number of scissor rectangles currently bound.</param>
    <param name="pRects">An array of scissor rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0.</param>
  </member>
  <member name="ID3D10Device.RSGetState">
    <summary>Get the <see cref="rasterizer state" /> from the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a> of the pipeline.</summary>
    <param name="ppRasterizerState">Address of a pointer to a rasterizer-state interface (see <see cref="ID3D10RasterizerState" />) to fill with information from the device.</param>
  </member>
  <member name="ID3D10Device.RSGetViewports">
    <summary>Get the array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-getting-started">viewports</a> bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a></summary>
    <param name="NumViewports">Number of viewports in <i>pViewports</i>.<br />If <i>pViewports</i> is <b>NULL</b>, this will be filled with the number of viewports currently bound.</param>
    <param name="pViewports">An array of viewports (see <see cref="D3D10_VIEWPORT" />) to be filled with information from the device. If NumViewports is greater than the actual number of viewports currently bound, then unused members of the array will contain 0.</param>
  </member>
  <member name="ID3D10Device.RSSetScissorRects">
    <summary>Bind an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-getting-started">scissor rectangles</a> to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a>.</summary>
    <param name="NumRects">Number of scissor rectangles to bind.</param>
    <param name="pRects">An array of scissor rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-rect">D3D10_RECT</a>).</param>
  </member>
  <member name="ID3D10Device.RSSetState">
    <summary>Set the <see cref="rasterizer state" /> for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a> of the pipeline.</summary>
    <param name="pRasterizerState">Pointer to a rasterizer-state interface (see <see cref="ID3D10RasterizerState" />) to bind to the pipeline.</param>
  </member>
  <member name="ID3D10Device.RSSetViewports">
    <summary>Bind an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage-getting-started">viewports</a> to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-rasterizer-stage">rasterizer stage</a> of the pipeline.</summary>
    <param name="NumViewports">Number of viewports to bind.</param>
    <param name="pViewports">An array of viewports (see <see cref="D3D10_VIEWPORT" />) to bind to the device. Each viewport must have its extents within the allowed ranges: D3D10_VIEWPORT_BOUNDS_MIN, D3D10_VIEWPORT_BOUNDS_MAX, D3D10_MIN_DEPTH, and D3D10_MAX_DEPTH.</param>
  </member>
  <member name="ID3D10Device.SetExceptionMode">
    <summary>Get the exception-mode flags.</summary>
    <param name="RaiseFlags">A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <see cref="D3D10_RAISE_FLAG" />. A default value of 0 means there are no flags.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.SetPredication">
    <summary>Set a rendering predicate.</summary>
    <param name="pPredicate">Pointer to a predicate (see <see cref="ID3D10Predicate" />). A <b>NULL</b> value indicates "no" predication; in this case, the value of PredicateValue is irrelevant but will be preserved for <see cref="ID3D10Device.GetPredication" />.</param>
    <param name="PredicateValue">If <b>TRUE</b>, rendering will be affected by when the predicate's conditions are met. If <b>FALSE</b>, rendering will be affected when the conditions are not met.</param>
  </member>
  <member name="ID3D10Device.SetPrivateData">
    <summary>Set data to a device and associate that data with a guid.</summary>
    <param name="guid">Guid associated with the data.</param>
    <param name="DataSize">Size of the data.</param>
    <param name="pData">Pointer to the data to be stored with this device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.SetPrivateDataInterface">
    <summary>Associate an <see cref="IUnknown" />-derived interface with this device and associate that interface with an application-defined guid.</summary>
    <param name="guid">Guid associated with the interface.</param>
    <param name="pData">Pointer to an <see cref="IUnknown" />-derived interface to be associated with the device.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-returnvalues">Direct3D 10 Return Codes</a>.</returns>
  </member>
  <member name="ID3D10Device.SetTextFilterSize">
    <summary>This method is not implemented.</summary>
    <param name="Width">Not applicable</param>
    <param name="Height">Not applicable</param>
  </member>
  <member name="ID3D10Device.SOGetTargets">
    <summary>Get the target output <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">buffers</a> for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">StreamOutput</a> stage of the pipeline.</summary>
    <param name="NumBuffers">Number of buffers to get. A maximum of four output buffers can be retrieved.</param>
    <param name="ppSOTargets">An array of output buffers (see <see cref="ID3D10Buffer" />) to be retrieved from the device.</param>
    <param name="pOffsets">Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values are in bytes.</param>
  </member>
  <member name="ID3D10Device.SOSetTargets">
    <summary>Set the target output <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">buffers</a> for the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">StreamOutput</a> stage, which enables/disables the pipeline to stream-out data.</summary>
    <param name="NumBuffers">The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to <b>NULL</b>. See Remarks.</param>
    <param name="ppSOTargets">The array of output buffers (see <see cref="ID3D10Buffer" />) to bind to the device. The buffers must have been created with the <see cref="D3D10_BIND_STREAM_OUTPUT" /> flag.</param>
    <param name="pOffsets">Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values must be in bytes.</param>
  </member>
  <member name="ID3D10Device.UpdateSubresource">
    <summary>The CPU copies data from memory to a <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">subresource</a> created in non-mappable memory. See remarks.</summary>
    <param name="pDstResource">A pointer to the destination resource (see <see cref="ID3D10Resource Interface" />).</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. See <see cref="D3D10CalcSubresource" /> for more details.</param>
    <param name="pDstBox">
      <para>A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <see cref="D3D10_BOX" />).</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource</b> doesn't perform an update operation.</para>
    </param>
    <param name="pSrcData">A pointer to the source data in memory.</param>
    <param name="SrcRowPitch">The size of one row of the source data.</param>
    <param name="SrcDepthPitch">The size of one depth slice of source data.</param>
  </member>
  <member name="ID3D10Device.VSGetConstantBuffers">
    <summary>Get the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
    <param name="NumBuffers">Number of buffers to retrieve.</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D10Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.VSGetSamplers">
    <summary>Get an array of sampler states from the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting samplers from.</param>
    <param name="NumSamplers">Number of samplers to get from the device. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Array of sampler-state interface pointers (see <see cref="ID3D10SamplerState" />) to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.VSGetShader">
    <summary>Get the vertex shader currently set on the device.</summary>
    <param name="ppVertexShader">Address of a pointer to a vertex shader (see <see cref="ID3D10VertexShader" />) to be returned by the method.</param>
  </member>
  <member name="ID3D10Device.VSGetShaderResources">
    <summary>Get the vertex shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D10Device.VSSetConstantBuffers">
    <summary>Set the <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">constant buffers</a> used by the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
    <param name="NumBuffers">Number of buffers to set.</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D10Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D10Device.VSSetSamplers">
    <summary>Set an array of sampler states to the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex shader</a> pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to.</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available.</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D10SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D10Device.VSSetShader">
    <summary>Set a vertex shader to the device.</summary>
    <param name="pVertexShader">Pointer to a vertex shader (see <see cref="ID3D10VertexShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
  </member>
  <member name="ID3D10Device.VSSetShaderResources">
    <summary>Bind an array of shader resources to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/vertex-shader-stage">vertex shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources.</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D10Device">
    <summary>The device interface represents a virtual adapter for Direct3D 10.0; it is used to perform rendering and create Direct3D resources.</summary>
  </member>
</doc>