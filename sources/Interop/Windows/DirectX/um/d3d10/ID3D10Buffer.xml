<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D10Buffer.GetDesc">
    <summary>
      <para>Get the properties of a buffer resource.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D10_BUFFER_DESC" />*</b></para>
      <para>Pointer to a resource description (see <see cref="D3D10_BUFFER_DESC" />) filled in by the method. This pointer cannot be <b>NULL</b>.</para>
    </param>
    <seealso cref="ID3D10Buffer Interface" />
  </member>
  <member name="ID3D10Buffer.Unmap">
    <summary>
      <para>Invalidate the pointer to the resource retrieved by <see cref="ID3D10Buffer.Map" /> and reenable GPU access to the resource.</para>
    </summary>
    <remarks>
      <list type="table">
        <listheader>
          <description>
            <para>Differences between Direct3D 9 and Direct3D 10:</para>
            <para>Unmap() in Direct3D 10 is analogous to resource Unlock() in Direct3D 9.</para>
          </description>
        </listheader>
      </list>
    </remarks>
    <seealso cref="ID3D10Buffer Interface" />
  </member>
  <member name="ID3D10Buffer">
    <summary>
      <para>A buffer interface accesses a <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">buffer resource</a>, which is unstructured memory. Buffers typically store vertex or index data.</para>
    </summary>
    <remarks>
      <para>Three types of buffers can be created; <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">vertex</a>, index, and shader-constant buffers. To create a buffer resource, call <see cref="ID3D10Device.CreateBuffer" />.</para>
      <para>A buffer must be bound to the pipeline before it can be accessed. Buffers can be bound to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler</a> stage by calls to <see cref="ID3D10Device.IASetVertexBuffers" /> and <see cref="ID3D10Device.IASetIndexBuffer" />, and to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-stream-stage">stream-output</a> stage by a call to <see cref="ID3D10Device.SOSetTargets" />.</para>
      <para>Buffers can be bound to multiple pipeline stages simultaneously for reading. A buffer can also be bound to a single pipeline stage for writing; however, the same buffer cannot be bound for reading and writing simultaneously. For more information, see <a href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-types">binding resources</a>.</para>
    </remarks>
    <seealso cref="ID3D10Resource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-resource-interfaces">Resource Interfaces</seealso>
  </member>
</doc>