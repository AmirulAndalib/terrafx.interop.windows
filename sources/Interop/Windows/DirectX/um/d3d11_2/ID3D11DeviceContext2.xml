<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11DeviceContext2.BeginEventInt">
    <summary>Allows applications to annotate the beginning of a range of graphics commands.</summary>
    <param name="pLabel">An optional string that will be logged to <a href="https://docs.microsoft.com//previous-versions/dotnet/netframework-3.0/ms751538(v=vs.85)">ETW</a> when ETW logging is active. If <b>‘#d’</b> appears in the string, it will be replaced by the value of the <i>Data</i> parameter similar to the way <b>printf</b> works.</param>
    <param name="Data">A signed data value that will be logged to ETW when ETW logging is active.</param>
  </member>
  <member name="ID3D11DeviceContext2.CopyTileMappings">
    <summary>Copies mappings from a source tiled resource to a destination tiled resource.</summary>
    <param name="pDestTiledResource">A pointer to the destination tiled resource.</param>
    <param name="pDestRegionStartCoordinate">A pointer to a <see cref="D3D11_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the destination tiled resource.</param>
    <param name="pSourceTiledResource">A pointer to the source tiled resource.</param>
    <param name="pSourceRegionStartCoordinate">A pointer to a <see cref="D3D11_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the source tiled resource.</param>
    <param name="pTileRegionSize">A pointer to a <see cref="D3D11_TILE_REGION_SIZE" /> structure that describes the size of the tiled region.</param>
    <param name="Flags">A combination of <see cref="D3D11_TILE_MAPPING_FLAGS" /> values that are combined by using a bitwise OR operation. The only valid value is <b>D3D11_TILE_MAPPING_NO_OVERWRITE</b>, which indicates that previously submitted commands to the device that may still be executing do not reference any of the tile region being updated. The device can then avoid having to flush previously submitted work to perform the tile mapping update. If the app violates this promise by updating tile mappings for locations in tiled resources that are still being referenced by outstanding commands, undefined rendering behavior results, including the potential for significant slowdowns on some architectures. This is like the "no overwrite" concept that exists elsewhere in the Direct3D API, except applied to the tile mapping data structure itself (which in hardware is a page table). The absence of the <b>D3D11_TILE_MAPPING_NO_OVERWRITE</b> value requires that tile mapping updates that <b>CopyTileMappings</b> specifies must be completed before any subsequent Direct3D command can proceed.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>E_INVALIDARG</b> if various conditions such as invalid flags or passing in non Tiled Resources result in the call being dropped. The dest and the source regions must each entirely fit in their resource or behavior is undefined (debug layer will emit an error).</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the call results in the driver having to allocate space for new page table mappings but running out of memory. If out of memory occurs when this is called in a commandlist and the commandlist is being executed, the device will be removed. Applications can avoid this situation by only doing update calls that change existing mappings from Tiled Resources within commandlists (so drivers will not have to allocate page table memory, only change the mapping).</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11DeviceContext2.CopyTiles">
    <summary>Copies tiles from buffer to tiled resource or vice versa.</summary>
    <param name="pTiledResource">A pointer to a tiled resource.</param>
    <param name="pTileRegionStartCoordinate">A pointer to a <see cref="D3D11_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the tiled resource.</param>
    <param name="pTileRegionSize">A pointer to a <see cref="D3D11_TILE_REGION_SIZE" /> structure that describes the size of the tiled region.</param>
    <param name="pBuffer">A pointer to an <see cref="ID3D11Buffer" /> that represents a default, dynamic, or staging buffer.</param>
    <param name="BufferStartOffsetInBytes">The offset in bytes into the buffer at <i>pBuffer</i> to start the operation.</param>
    <param name="Flags">A combination of <see cref="D3D11_TILE_COPY_FLAG" />-typed values that are combined by using a bitwise OR operation and that identifies how to copy tiles.</param>
  </member>
  <member name="ID3D11DeviceContext2.EndEvent">
    <summary>Allows applications to annotate the end of a range of graphics commands.</summary>
  </member>
  <member name="ID3D11DeviceContext2.IsAnnotationEnabled">
    <summary>Allows apps to determine when either a capture or profiling request is enabled.</summary>
    <returns>Returns <b>TRUE</b> if capture or profiling is enabled and <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="ID3D11DeviceContext2.ResizeTilePool">
    <summary>Resizes a tile pool.</summary>
    <param name="pTilePool">A pointer to an <see cref="ID3D11Buffer" /> for the tile pool to resize.</param>
    <param name="NewSizeInBytes">The new size in bytes of the tile pool. The size must be a multiple of 64 KB or 0.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>E_INVALIDARG</b> if the new tile pool size isn't a multiple of 64 KB or 0.</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the call results in the driver having to allocate space for new page table mappings but running out of memory.</description>
        </item>
        <item>
          <description>Returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred.</description>
        </item>
      </list>For <b>E_INVALIDARG</b> or <b>E_OUTOFMEMORY</b>, the existing tile pool remains unchanged, which includes existing mappings.</returns>
  </member>
  <member name="ID3D11DeviceContext2.SetMarkerInt">
    <summary>Allows applications to annotate graphics commands.</summary>
    <param name="pLabel">An optional string that will be logged to <a href="https://docs.microsoft.com//previous-versions/dotnet/netframework-3.0/ms751538(v=vs.85)">ETW</a> when ETW logging is active. If <b>‘#d’</b> appears in the string, it will be replaced by the value of the <i>Data</i> parameter similar to the way <b>printf</b> works.</param>
    <param name="Data">A signed data value that will be logged to ETW when ETW logging is active.</param>
  </member>
  <member name="ID3D11DeviceContext2.TiledResourceBarrier">
    <summary>Specifies a data access ordering constraint between multiple tiled resources. For more info about this constraint, see Remarks.</summary>
    <param name="pTiledResourceOrViewAccessBeforeBarrier">A pointer to an <see cref="ID3D11Resource" /> or <see cref="ID3D11View" /> for a resource that was created with the <see cref="D3D11_RESOURCE_MISC_TILED" /> flag. Access operations on this object must complete before the access operations on the object that <i>pTiledResourceOrViewAccessAfterBarrier</i> specifies.</param>
    <param name="pTiledResourceOrViewAccessAfterBarrier">A pointer to an <see cref="ID3D11Resource" /> or <see cref="ID3D11View" /> for a resource that was created with the <see cref="D3D11_RESOURCE_MISC_TILED" /> flag. Access operations on this object must begin after the access operations on the object that <i>pTiledResourceOrViewAccessBeforeBarrier</i> specifies.</param>
  </member>
  <member name="ID3D11DeviceContext2.UpdateTileMappings">
    <summary>Updates mappings of tile locations in tiled resources to memory locations in a tile pool.</summary>
    <param name="pTiledResource">A pointer to the tiled resource.</param>
    <param name="NumTiledResourceRegions">The number of tiled resource regions.</param>
    <param name="pTiledResourceRegionStartCoordinates">An array of <see cref="D3D11_TILED_RESOURCE_COORDINATE" /> structures that describe the starting coordinates of the tiled resource regions. The <i>NumTiledResourceRegions</i> parameter specifies the number of <b>D3D11_TILED_RESOURCE_COORDINATE</b> structures in the array.</param>
    <param name="pTiledResourceRegionSizes">An array of <see cref="D3D11_TILE_REGION_SIZE" /> structures that describe the sizes of the tiled resource regions. The <i>NumTiledResourceRegions</i> parameter specifies the number of <b>D3D11_TILE_REGION_SIZE</b> structures in the array.</param>
    <param name="pTilePool">A pointer to the tile pool.</param>
    <param name="NumRanges">The number of tile-pool ranges.</param>
    <param name="pRangeFlags">An array of <see cref="D3D11_TILE_RANGE_FLAG" /> values that describe each tile-pool range. The <i>NumRanges</i> parameter specifies the number of values in the array.</param>
    <param name="pTilePoolStartOffsets">An array of offsets into the tile pool. These are 0-based tile offsets, counting in tiles (not bytes).</param>
    <param name="pRangeTileCounts">
      <para>An array of tiles.</para>
      <para>An array of values that specify the number of tiles in each tile-pool range. The <i>NumRanges</i> parameter specifies the number of values in the array.</para>
    </param>
    <param name="Flags">A combination of <see cref="D3D11_TILE_MAPPING_FLAGS" /> values that are combined by using a bitwise OR operation.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>E_INVALIDARG</b> if various conditions such as invalid flags result in the call being dropped.The debug layer will emit an error.</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the call results in the driver having to allocate space for new page table mappings but running out of memory.If out of memory occurs when this is called in a commandlist and the commandlist is being executed, the device will be removed. Apps can avoid this situation by only doing update calls that change existing mappings from tiled resources within commandlists (so drivers will not have to allocate page table memory, only change the mapping).</description>
        </item>
        <item>
          <description>Returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11DeviceContext2.UpdateTiles">
    <summary>Updates tiles by copying from app memory to the tiled resource.</summary>
    <param name="pDestTiledResource">A pointer to a tiled resource to update.</param>
    <param name="pDestTileRegionStartCoordinate">A pointer to a <see cref="D3D11_TILED_RESOURCE_COORDINATE" /> structure that describes the starting coordinates of the tiled resource.</param>
    <param name="pDestTileRegionSize">A pointer to a <see cref="D3D11_TILE_REGION_SIZE" /> structure that describes the size of the tiled region.</param>
    <param name="pSourceTileData">A pointer to memory that contains the source tile data that <b>UpdateTiles</b> uses to update the tiled resource.</param>
    <param name="Flags">A combination of <see cref="D3D11_TILE_COPY_FLAG" />-typed values that are combined by using a bitwise OR operation. The only valid value is <b>D3D11_TILE_COPY_NO_OVERWRITE</b>. The other values aren't meaningful here, though by definition the <b>D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE</b> value is basically what <b>UpdateTiles</b> does, but sources from app memory.</param>
  </member>
  <member name="ID3D11DeviceContext2">
    <summary>The device context interface represents a device context; it is used to render commands. <b>ID3D11DeviceContext2</b> adds new methods to those in <see cref="ID3D11DeviceContext1" />.</summary>
  </member>
</doc>