<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11Device2.CheckMultisampleQualityLevels1">
    <summary>Get the number of quality levels available during multisampling.</summary>
    <param name="Format">The texture format during multisampling.</param>
    <param name="SampleCount">The number of samples during multisampling.</param>
    <param name="Flags">A combination of <see cref="D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAGS" /> values that are combined by using a bitwise OR operation. Currently, only <see cref="D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE" /> is supported.</param>
    <param name="pNumQualityLevels">A pointer to a variable the receives the number of quality levels supported by the adapter. See Remarks.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device2.CreateDeferredContext2">
    <summary>Creates a deferred context, which can record <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-command-list">command lists</a>.</summary>
    <param name="ContextFlags">Reserved for future use. Pass 0.</param>
    <param name="ppDeferredContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext2" /> interface pointer is initialized.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device.</description>
        </item>
        <item>
          <description>Returns <b>DXGI_ERROR_INVALID_CALL</b> if the <b>CreateDeferredContext2</b> method can't be called from the current context. For example, if the device was created with the <see cref="D3D11_CREATE_DEVICE_SINGLETHREADED" /> value, <b>CreateDeferredContext2</b> returns <b>DXGI_ERROR_INVALID_CALL</b>.</description>
        </item>
        <item>
          <description>Returns <b>E_INVALIDARG</b> if the <i>ContextFlags</i> parameter is invalid.</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the app has exhausted available memory.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11Device2.GetImmediateContext2">
    <summary>Gets an immediate context, which can play back <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-render-multi-thread-command-list">command lists</a>.</summary>
    <param name="ppImmediateContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext2" /> interface pointer is initialized.</param>
  </member>
  <member name="ID3D11Device2.GetResourceTiling">
    <summary>Gets info about how a tiled resource is broken into tiles.</summary>
    <param name="pTiledResource">A pointer to the tiled resource to get info about.</param>
    <param name="pNumTilesForEntireResource">A pointer to a variable that receives the number of tiles needed to store the entire tiled resource.</param>
    <param name="pPackedMipDesc">A pointer to a <see cref="D3D11_PACKED_MIP_DESC" /> structure that <b>GetResourceTiling</b> fills with info about how the tiled resource's mipmaps are packed.</param>
    <param name="pStandardTileShapeForNonPackedMips">A pointer to a <see cref="D3D11_TILE_SHAPE" /> structure that <b>GetResourceTiling</b> fills with info about the tile shape. This is info about how pixels fit in the tiles, independent of tiled resource's dimensions, not including packed mipmaps. If the entire tiled resource is packed, this parameter is meaningless because the tiled resource has no defined layout for packed mipmaps. In this situation, <b>GetResourceTiling</b> sets the members of <b>D3D11_TILE_SHAPE</b> to zeros.</param>
    <param name="pNumSubresourceTilings">A pointer to a variable that contains the number of tiles in the subresource. On input, this is the number of subresources to query tilings for; on output, this is the number that was actually retrieved at <i>pSubresourceTilingsForNonPackedMips</i> (clamped to what's available).</param>
    <param name="FirstSubresourceTilingToGet">The number of the first subresource tile to get. <b>GetResourceTiling</b> ignores this parameter if the number that <i>pNumSubresourceTilings</i> points to is 0.</param>
    <param name="pSubresourceTilingsForNonPackedMips">
      <para>A pointer to a <see cref="D3D11_SUBRESOURCE_TILING" /> structure that <b>GetResourceTiling</b> fills with info about subresource tiles.</para>
      <para>If subresource tiles are part of packed mipmaps, <b>GetResourceTiling</b> sets the members of <see cref="D3D11_SUBRESOURCE_TILING" /> to zeros, except the <b>StartTileIndexInOverallResource</b> member, which <b>GetResourceTiling</b> sets to <b>D3D11_PACKED_TILE</b> (0xffffffff). The <b>D3D11_PACKED_TILE</b> constant indicates that the whole<b>D3D11_SUBRESOURCE_TILING</b> structure is meaningless for this situation, and the info that the <i>pPackedMipDesc</i> parameter points to applies.</para>
    </param>
  </member>
  <member name="ID3D11Device2">
    <summary>The device interface represents a virtual adapter; it is used to create resources. <b>ID3D11Device2</b> adds new methods to those in <see cref="ID3D11Device1" />.</summary>
  </member>
</doc>