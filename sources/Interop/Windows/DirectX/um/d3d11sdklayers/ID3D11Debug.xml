<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11Debug.GetFeatureMask">
    <summary>
      <para>Get a bitfield of flags that indicates which debug features are on or off.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Mask of feature-mask flags bitwise ORed together. If a flag is present, then that feature will be set to on, otherwise the feature will be set to off. See <see cref="ID3D11Debug.SetFeatureMask" /> for a list of possible feature-mask flags.</para>
    </returns>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.GetPresentPerRenderOpDelay">
    <summary>
      <para>Get the number of milliseconds to sleep after <see cref="IDXGISwapChain.Present" /> is called.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Number of milliseconds to sleep after Present is called.</para>
    </returns>
    <remarks>
      <para>Value is set with <see cref="ID3D11Debug.SetPresentPerRenderOpDelay" />.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.GetSwapChain">
    <summary>
      <para>Get the swap chain that the runtime will use for automatically calling <see cref="IDXGISwapChain.Present" />.</para>
    </summary>
    <param name="ppSwapChain">
      <para>Type: <b><see cref="IDXGISwapChain" />**</b></para>
      <para>Swap chain that the runtime will use for automatically calling <see cref="IDXGISwapChain.Present" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>The swap chain retrieved by this method will only be used if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the <see cref="feature mask" />.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.ReportLiveDeviceObjects">
    <summary>
      <para>Report information about a device object's lifetime.</para>
    </summary>
    <param name="Flags">
      <para>Type: <b><see cref="D3D11_RLDO_FLAGS" /></b></para>
      <para>A value from the
<see cref="D3D11_RLDO_FLAGS" /> enumeration.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>
        <b>ReportLiveDeviceObjects</b> uses the value in  <i>Flags</i> to determine the amount of information to report about a device object's lifetime.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.SetFeatureMask">
    <summary>
      <para>Set a bit field of flags that will turn debug features on and off.</para>
    </summary>
    <param name="Mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A combination of feature-mask flags that are combined by using a bitwise OR operation. If a flag is present, that feature will be set to on, otherwise the feature will be set to off. For descriptions of the feature-mask flags, see Remarks.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>Setting one of the following feature-mask flags will cause a rendering-operation method (listed below) to do some extra task when called.</para>
      <list type="table">
        <listheader>
          <description>D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP (0x2)</description>
          <description>Application will wait for the GPU to finish processing the rendering operation before continuing.</description>
        </listheader>
        <item>
          <description>D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP (0x1)</description>
          <description>Runtime will additionally call <see cref="ID3D11DeviceContext.Flush" />.</description>
        </item>
        <item>
          <description>D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP (0x4)</description>
          <description>Runtime will call <see cref="IDXGISwapChain.Present" />. Presentation of render buffers will occur according to the settings established by prior calls to <see cref="ID3D11Debug.SetSwapChain" /> and <see cref="ID3D11Debug.SetPresentPerRenderOpDelay" />.</description>
        </item>
      </list>
      <para>These feature-mask flags apply to the following rendering-operation methods:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="ID3D11DeviceContext.Draw" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.DrawIndexed" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.DrawInstanced" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.DrawIndexedInstanced" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.DrawAuto" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.ClearRenderTargetView" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.ClearDepthStencilView" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.CopySubresourceRegion" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.CopyResource" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.UpdateSubresource" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.GenerateMips" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D11DeviceContext.ResolveSubresource" />
          </description>
        </item>
      </list>
      <para>By setting one of the following feature-mask flags, you can control the behavior of the <see cref="IDXGIDevice2.OfferResources" /> and <see cref="IDXGIDevice2.ReclaimResources" /> methods to aid in testing and debugging.</para>
      <para>
        <b>Note</b>  These flags are supported by the Direct3D 11.1 runtime, which is available starting with Windows 8.</para>
      <list type="table">
        <listheader>
          <description>D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE (0x8)</description>
          <description>When you call <see cref="IDXGIDevice2.OfferResources" /> to offer resources while this flag is enabled, their content is always discarded.  Use this flag to test code paths that regenerate resource content on reclaim.  You cannot use this flag in combination with D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE.</description>
        </listheader>
        <item>
          <description>D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE (0x10)</description>
          <description>When you call <see cref="IDXGIDevice2.OfferResources" /> to offer resources while this flag is enabled, their content is never discarded.  Use this flag to test code paths that do not need to regenerate resource content on reclaim.  You cannot use this flag in combination with D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE.</description>
        </item>
      </list>
      <para>The behavior of the <see cref="IDXGIDevice2.OfferResources" /> and <see cref="IDXGIDevice2.ReclaimResources" /> methods depends on system-wide memory pressure. Therefore, the scenario where content is lost and must be regenerated is uncommon for most applications.  The preceding new options in the Direct3D debug layer let you simulate that scenario consistently and test code paths.</para>
      <para>The following flag is supported by the Direct3D 11.1 runtime.</para>
      <list type="table">
        <listheader>
          <description>D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS (0x40)</description>
          <description>Disables the following default debugging behavior.</description>
        </listheader>
      </list>
      <para>When the debug layer is enabled, it performs certain actions to reveal application problems.  By setting the D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS feature-mask flag, you can enable the debug layer without getting the following default debugging behavior:</para>
      <list type="bullet">
        <item>
          <description>If an application calls <see cref="ID3D11DeviceContext1.DiscardView" />, the runtime fills in the resource with a random color.</description>
        </item>
        <item>
          <description>If an application calls <see cref="IDXGISwapChain1.Present1" /> with partial presentation parameters, the runtime ignores the partial presentation information.</description>
        </item>
      </list>
      <para>The following flag is supported by the Direct3D 11.2 runtime.</para>
      <list type="table">
        <listheader>
          <description>D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION (0x80)</description>
          <description>Disables the following default debugging behavior.</description>
        </listheader>
      </list>
      <para>By default (that is, without D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION set), the debug layer validates the proper usage of all tile mappings for <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-2-features">tiled resources</a> for bound resources for every operation performed on the device context (for example, draw, copy, and so on).  Depending on the size of the tiled resources used (if any), this validation can be processor intensive and slow.  Apps might want to initially run with tiled resource tile mapping validation on; then, when they determine that the calling pattern is safe, they can disable the validation by setting D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION.</para>
      <para>If D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION is set when a tiled resource is created, the debug layer never performs the tracking of tile mapping for that resource for its entire lifetime.  Alternatively, if D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION is set for any given device context method call (like draw or copy calls) involving tiled resources, the debug layer skips all tile mapping validation for the call.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.SetPresentPerRenderOpDelay">
    <summary>
      <para>Set the number of milliseconds to sleep after <see cref="IDXGISwapChain.Present" /> is called.</para>
    </summary>
    <param name="Milliseconds">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Number of milliseconds to sleep after Present is called.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>The application will only sleep if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is a set in the <see cref="feature mask" />. If that flag is not set the number of milliseconds is set but ignored and the application does not sleep. 10ms is used as a default value if this method is never called.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.SetSwapChain">
    <summary>
      <para>Sets a swap chain that the runtime will use for automatically calling <see cref="IDXGISwapChain.Present" />.</para>
    </summary>
    <param name="pSwapChain">
      <para>Type: <b><see cref="IDXGISwapChain" />*</b></para>
      <para>Swap chain that the runtime will use for automatically calling <see cref="IDXGISwapChain.Present" />; must have been created with the DXGI_SWAP_EFFECT_SEQUENTIAL swap-effect flag.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this API in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>The swap chain set by this method will only be used if D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP is set in the <see cref="feature mask" />.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.ValidateContext">
    <summary>
      <para>Check to see if the draw pipeline state is valid.</para>
    </summary>
    <param name="pContext">
      <para>Type: <b><see cref="ID3D11DeviceContext" />*</b></para>
      <para>A pointer to the <see cref="ID3D11DeviceContext" />, that represents a device context.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Use validate prior to calling a draw method (for example, <see cref="ID3D11DeviceContext.Draw" />); validation requires the debug layer.</para>
    </remarks>
    <seealso cref="ID3D11Debug Interface" />
  </member>
  <member name="ID3D11Debug.ValidateContextForDispatch">
    <summary>
      <para>Verifies whether the dispatch pipeline state is valid.</para>
    </summary>
    <param name="pContext">
      <para>Type: <b><see cref="ID3D11DeviceContext" />*</b></para>
      <para>A pointer to the <see cref="ID3D11DeviceContext" /> that represents a device context.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the return codes described in the topic <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>Use this method before you call a dispatch method (for example, <see cref="ID3D11DeviceContext.Dispatch" />). Validation requires the debug layer.</para>
    </remarks>
    <seealso cref="ID3D11Debug" />
  </member>
  <member name="ID3D11Debug">
    <summary>
      <para>A debug interface controls debug settings, validates pipeline state and can only be used if the debug layer is turned on.</para>
    </summary>
    <remarks>
      <para>This interface is obtained by querying it from the <see cref="ID3D11Device" /> using <see cref="IUnknown.QueryInterface" />.</para>
      <para>For more information about the debug layer, see <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">Debug Layer</a>.</para>
      <para>
        <b>Windows Phone 8:
</b> This API is supported.</para>
    </remarks>
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-layer-interfaces">Layer Interfaces</seealso>
  </member>
</doc>