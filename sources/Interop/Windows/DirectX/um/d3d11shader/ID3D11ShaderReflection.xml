<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11ShaderReflection.GetBitwiseInstructionCount">
    <summary>
      <para>Gets the number of bitwise instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of bitwise instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetConstantBufferByIndex">
    <summary>
      <para>Get a constant buffer by index.</para>
    </summary>
    <param name="Index">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Zero-based index.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D11ShaderReflectionConstantBuffer" />*</b></para>
      <para>A pointer to a constant buffer (see <see cref="ID3D11ShaderReflectionConstantBuffer Interface" />).</para>
    </returns>
    <remarks>
      <para>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetConstantBufferByName">
    <summary>
      <para>Get a constant buffer by name.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>The constant-buffer name.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D11ShaderReflectionConstantBuffer" />*</b></para>
      <para>A pointer to a constant buffer (see <see cref="ID3D11ShaderReflectionConstantBuffer Interface" />).</para>
    </returns>
    <remarks>
      <para>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetConversionInstructionCount">
    <summary>
      <para>Gets the number of conversion instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of conversion instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetDesc">
    <summary>
      <para>Get a shader description.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SHADER_DESC" />*</b></para>
      <para>A pointer to a shader description. See <see cref="D3D11_SHADER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetGSInputPrimitive">
    <summary>
      <para>Gets the geometry-shader input-primitive description.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D3D_PRIMITIVE" /></b></para>
      <para>The input-primitive description.  See
<see cref="D3D_PRIMITIVE_TOPOLOGY" />,
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>, or
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb205334(v=vs.85)">D3D10_PRIMITIVE_TOPOLOGY</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetInputParameterDesc">
    <summary>
      <para>Get an input-parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A pointer to a shader-input-signature description. See <see cref="D3D11_SIGNATURE_PARAMETER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>An input-parameter description is also called a shader signature. The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetMinFeatureLevel">
    <summary>
      <para>Gets the minimum feature level.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: [out] <b><see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>A pointer to one of the enumerated values in <see cref="D3D_FEATURE_LEVEL" />, which represents the minimum feature level.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetMovcInstructionCount">
    <summary>
      <para>Gets the number of Movc instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of Movc instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetMovInstructionCount">
    <summary>
      <para>Gets the number of Mov instructions.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the number of Mov instructions.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetNumInterfaceSlots">
    <summary>
      <para>Gets the number of interface slots in a shader.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of interface slots in the shader.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetOutputParameterDesc">
    <summary>
      <para>Get an output-parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A pointer to a shader-output-parameter description. See <see cref="D3D11_SIGNATURE_PARAMETER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetPatchConstantParameterDesc">
    <summary>
      <para>Get a patch-constant parameter description for a shader.</para>
    </summary>
    <param name="ParameterIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based parameter index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SIGNATURE_PARAMETER_DESC" />*</b></para>
      <para>A pointer to a shader-input-signature description. See <see cref="D3D11_SIGNATURE_PARAMETER_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetRequiresFlags">
    <summary>
      <para>Gets a group of flags that indicates the requirements of a shader.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT64</b></para>
      <para>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements.</para>
      <list type="table">
        <listheader>
          <description>Shader requirement flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_DOUBLES</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support double data type. For more info, see <see cref="D3D11_FEATURE_DATA_DOUBLES" />.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</b>
          </description>
          <description>Shader requires an early depth stencil.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</b>
          </description>
          <description>Shader requires unordered access views (UAVs) at every pipeline stage.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_64_UAVS</b>
          </description>
          <description>Shader requires 64 UAVs.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</b>
          </description>
          <description>Shader requires the graphics driver and hardware to support minimum precision. For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/using-hlsl-minimum-precision">Using HLSL minimum precision</a>.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support extended doubles instructions. For more info, see the <b>ExtendedDoublesShaderInstructions</b> member of <see cref="D3D11_FEATURE_DATA_D3D11_OPTIONS" />.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-msad4">msad4</a> intrinsic function in shaders. For more info, see the <b>SAD4ShaderInstructions</b> member of <see cref="D3D11_FEATURE_DATA_D3D11_OPTIONS" />.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support Direct3D 9 shadow support. For more info, see <see cref="D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT" />.</description>
        </item>
        <item>
          <description>
            <b>D3D_SHADER_REQUIRES_TILED_RESOURCES</b>
          </description>
          <description>Shader requires that the graphics driver and hardware support tiled resources. For more info, see <see cref="GetResourceTiling" />. </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Here is how the D3D11Shader.h header defines the shader requirements flags:</para>
      <code>
#define D3D_SHADER_REQUIRES_DOUBLES                         0x00000001
#define D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL             0x00000002
#define D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE             0x00000004
#define D3D_SHADER_REQUIRES_64_UAVS                         0x00000008
#define D3D_SHADER_REQUIRES_MINIMUM_PRECISION               0x00000010
#define D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS          0x00000020
#define D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS          0x00000040
#define D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING    0x00000080

</code>
    </remarks>
    <seealso cref="ID3D11ShaderReflection" />
  </member>
  <member name="ID3D11ShaderReflection.GetResourceBindingDesc">
    <summary>
      <para>Get a description of how a resource is bound to a shader.</para>
    </summary>
    <param name="ResourceIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based resource index.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SHADER_INPUT_BIND_DESC" />*</b></para>
      <para>A pointer to an input-binding description. See <see cref="D3D11_SHADER_INPUT_BIND_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <b>GetResourceBindingDesc</b> gets information about how one resource in the set is bound as an input to the shader. The  <i>ResourceIndex</i> parameter specifies the index for the resource.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetResourceBindingDescByName">
    <summary>
      <para>Get a description of how a resource is bound to a shader.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>The constant-buffer name of the resource.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b><see cref="D3D11_SHADER_INPUT_BIND_DESC" />*</b></para>
      <para>A pointer to an input-binding description. See <see cref="D3D11_SHADER_INPUT_BIND_DESC" />.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <b>GetResourceBindingDescByName</b> gets information about how one resource in the set is bound as an input to the shader. The  <i>Name</i> parameter specifies the name of the resource.</para>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.GetThreadGroupSize">
    <summary>
      <para>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</para>
    </summary>
    <param name="pSizeX">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</para>
    </param>
    <param name="pSizeY">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</para>
    </param>
    <param name="pSizeZ">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a>*</b></para>
      <para>A pointer to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Returns the total size, in threads, of the thread-group grid by calculating the product of the size of each dimension.</para>
      <code>*pSizeX * *pSizeY * *pSizeZ;
</code>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
      <para>When a compute shader is written it defines the actions of a single thread group only. If multiple thread groups are required, it is the role of the <see cref="ID3D11DeviceContext.Dispatch" /> call to issue multiple thread groups.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection" />
  </member>
  <member name="ID3D11ShaderReflection.GetVariableByName">
    <summary>
      <para>Gets a variable by name.</para>
    </summary>
    <param name="Name">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>A pointer to a string containing the variable name.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="ID3D11ShaderReflectionVariable" />*</b></para>
      <para>Returns a <see cref="ID3D11ShaderReflectionVariable Interface" /> interface.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection.IsSampleFrequencyShader">
    <summary>
      <para>Indicates whether a shader is a sample frequency shader.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns true if the shader is a sample frequency shader; otherwise returns false.</para>
    </returns>
    <remarks>
      <para>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</para>
    </remarks>
    <seealso cref="ID3D11ShaderReflection Interface" />
  </member>
  <member name="ID3D11ShaderReflection">
    <summary>
      <para>A shader-reflection interface accesses shader information.</para>
    </summary>
    <remarks>
      <para>An <b>ID3D11ShaderReflection</b> interface can be retrieved for a shader by using  <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dreflect">D3DReflect</a>.  The following code illustrates retrieving a <b>ID3D11ShaderReflection</b>  from a shader.</para>
      <code>pd3dDevice-&gt;CreatePixelShader( pPixelShaderBuffer-&gt;GetBufferPointer(),
                               pPixelShaderBuffer-&gt;GetBufferSize(), g_pPSClassLinkage, &amp;amp;amp;amp;amp;amp;g_pPixelShader );

ID3D11ShaderReflection* pReflector = NULL;
D3DReflect( pPixelShaderBuffer-&gt;GetBufferPointer(), pPixelShaderBuffer-&gt;GetBufferSize(),
            IID_ID3D11ShaderReflection, (void**) &amp;amp;amp;amp;amp;amp;pReflector);
</code>
    </remarks>
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-shader-interfaces">Shader Interfaces</seealso>
  </member>
</doc>