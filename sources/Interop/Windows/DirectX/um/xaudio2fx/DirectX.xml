<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.ReverbConvertI3DL2ToNative">
    <summary>
      <para>Inline function that converts I3DL2 (Interactive 3D Audio Rendering Guidelines Level 2.0) parameters to native XAudio2 parameters.</para>
    </summary>
    <param name="pI3DL2">
      <para>Pointer to a <see cref="XAUDIO2FX_REVERB_I3DL2_PARAMETERS" /> structure containing the I3DL2 parameters to convert. There are many preset values defined for the <b>XAUDIO2FX_REVERB_I3DL2_PARAMETERS</b> structure; for more information, see <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2fx-i3dl2-preset">XAUDIO2FX_I3DL2_PRESET</a>.</para>
    </param>
    <param name="pNative">
      <para>Pointer to a <see cref="XAUDIO2FX_REVERB_PARAMETERS" /> structure that will receive the native parameters that are equivalent to the I3DL2 parameters.</para>
    </param>
    <param name="sevenDotOneReverb">
      <para>A boolean value indicating whether 7.1 reverb is enabled.</para>
      <para>
        <b>Note</b>  This parameter is supported beginning with Windows 10.</para>
    </param>
    <remarks>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2fx-i3dl2-preset">XAUDIO2FX_I3DL2_PRESET</seealso>
    <seealso cref="XAUDIO2FX_REVERB_I3DL2_PARAMETERS" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/functions">XAudio2.Functions</seealso>
  </member>
  <member name="DirectX.XAudio2CreateReverb">
    <summary>
      <para>Creates a new reverb audio processing object (APO), and returns a pointer to it.</para>
    </summary>
    <param name="ppApo">
      <para>Contains a pointer to the reverb APO that is created.</para>
    </param>
    <param name="DEFAULT">
      <para>Flags that specify the behavior of the APO. The value of this parameter must be 0.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>XAudio2CreateReverb</b> creates an effect performing Princeton Digital Reverb. The XAPO effect library (XAPOFX) includes an alternate reverb effect. Use <see cref="CreateFX" /> to create this alternate effect.</para>
      <para>The reverb APO supports has the following restrictions:</para>
      <list type="bullet">
        <item>
          <description>Input audio data must be FLOAT32.
</description>
        </item>
        <item>
          <description>Framerate must be within XAUDIO2FX_REVERB_MIN_FRAMERATE (20,000 Hz) and XAUDIO2FX_REVERB_MAX_FRAMERATE (48,000 Hz).
</description>
        </item>
        <item>
          <description>The input and output channels must be one of the following combinations.<list type="bullet"><item><description>Mono input and mono output
</description></item><item><description>Mono input and 5.1 output
</description></item><item><description>Stereo input and stereo output
</description></item><item><description>Stereo input and 5.1 output</description></item></list></description>
        </item>
      </list>The reverb APO maintains internal state information between processing samples. You can only use an instance of the APO with one source of audio data at a time. Multiple voices that require reverb effects would each need to create a separate reverb effect with <b>XAudio2CreateReverb</b>.
<para>For information about creating new effects for use with XAudio2, see the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</a>.</para><list type="table"><listheader><description>Windows</description></listheader><item><description><para>Because <b>XAudio2CreateReverb</b> calls <b>CoCreateInstance</b> on Windows, the application must have called the <b>CoInitializeEx</b> method before calling <b>XAudio2CreateReverb</b>. <see cref="XAudio2Create" /> has the same requirement, which means <b>CoInitializeEx</b> typically will be called long before <b>XAudio2CreateReverb</b> is called.</para><para>A typical calling pattern on Windows would be as follows:</para><code>#ifndef _XBOX
CoInitializeEx(NULL, COINIT_MULTITHREADED);
#endif
IXAudio2* pXAudio2 = NULL;
HRESULT hr;
if ( FAILED(hr = XAudio2Create( &amp;amp;amp;amp;amp;amp;pXAudio2, 0, XAUDIO2_DEFAULT_PROCESSOR ) ) )
    return hr;
...
IUnknown * pReverbAPO;
XAudio2CreateReverb(&amp;amp;amp;amp;amp;amp;pReverbAPO);

</code></description></item></list><para>The xaudio2fx.h header defines the <b>AudioReverb</b> class GUID as   a cross-platform audio processing object (XAPO).</para><code>class __declspec(uuid("C2633B16-471B-4498-B8C5-4F0959E2EC09")) AudioReverb;

</code><para><b>XAudio2CreateReverb</b> returns this object as a pointer to a pointer to <see cref="IUnknown" /> in the <i>ppApo</i> parameter. Although you can query the <see cref="IXAPO" /> and <see cref="IXAPOParameters" /> interfaces from this <b>IUnknown</b>, you typically never use these interfaces directly. Instead, you use them when you create a voice to add them as part of the effects chain.</para><para>The reverb uses the <see cref="XAUDIO2FX_REVERB_PARAMETERS" /> parameter structure that you access via the <see cref="IXAudio2Voice.SetEffectParameters" />.</para><para><b>Note</b>  <b>XAudio2CreateReverb</b> is an inline function in xaudio2fx.h that calls <b>CreateAudioReverb</b>:</para><code>
XAUDIO2FX_STDAPI CreateAudioReverb(_Outptr_ IUnknown** ppApo);
__inline HRESULT XAudio2CreateReverb(_Outptr_ IUnknown** ppApo, UINT32 /*Flags*/ DEFAULT(0))
{
    return CreateAudioReverb(ppApo);
}

</code><h3>Platform Requirements</h3><para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para></remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--create-an-effect-chain">How to: Create an Effect Chain</seealso>
    <seealso cref="IXAudio2Voice.SetEffectParameters" />
    <seealso cref="XAUDIO2FX_REVERB_PARAMETERS" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/functions">XAudio2 Functions</seealso>
  </member>
  <member name="DirectX.XAudio2CreateVolumeMeter">
    <summary>
      <para>Creates a new volume meter audio processing object (APO) and returns a pointer to it.</para>
    </summary>
    <param name="ppApo">
      <para>Contains the created volume meter APO.</para>
    </param>
    <param name="DEFAULT">
      <para>Flags that specify the behavior of the APO. The value of this parameter must be 0.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>For information on creating new effects for use with XAudio2, see the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</a>.</para>
      <list type="table">
        <listheader>
          <description>Windows</description>
        </listheader>
        <item>
          <description>
            <para>Because <b>XAudio2CreateVolumeMeter</b> calls <b>CoCreateInstance</b> on Windows, the application must have called the <b>CoInitializeEx</b> method before calling <b>XAudio2CreateVolumeMeter</b>. <see cref="XAudio2Create" /> has the same requirement, which means <b>CoInitializeEx</b> typically will be called long before <b>XAudio2CreateVolumeMeter</b> is called.</para>
            <para>A typical calling pattern on Windows would be as follows:</para>
            <code>#ifndef _XBOX
CoInitializeEx(NULL, COINIT_MULTITHREADED);
#endif
IXAudio2* pXAudio2 = NULL;
HRESULT hr;
if ( FAILED(hr = XAudio2Create( &amp;amp;amp;amp;amp;amp;pXAudio2, 0, XAUDIO2_DEFAULT_PROCESSOR ) ) )
    return hr;
...
IUnknown * pVolumeMeterAPO;
XAudio2CreateVolumeMeter(&amp;amp;amp;amp;amp;amp;pVolumeMeterAPO);

</code>
          </description>
        </item>
      </list>
      <para>The xaudio2fx.h header defines the <b>AudioVolumeMeter</b> class GUID as   a cross-platform audio processing object (XAPO).</para>
      <code>class __declspec(uuid("4FC3B166-972A-40CF-BC37-7DB03DB2FBA3")) AudioVolumeMeter;

</code>
      <para>
        <b>XAudio2CreateVolumeMeter</b> returns this object as a pointer to a pointer to <see cref="IUnknown" /> in the <i>ppApo</i> parameter. Although you can query the <see cref="IXAPO" /> and <see cref="IXAPOParameters" /> interfaces from this <b>IUnknown</b>, you typically never use these interfaces directly. Instead, you use them when you create a voice to add them as part of the effects chain.</para>
      <para>The volume meter uses the <see cref="XAUDIO2FX_VOLUMEMETER_LEVELS" /> parameter structure that you access via the <see cref="IXAudio2Voice.GetEffectParameters" /> method when the XAPO is bound to the audio graph.</para>
      <para>
        <b>Note</b>  <b>XAudio2CreateVolumeMeter</b> is an inline function in xaudio2fx.h that calls <b>CreateAudioVolumeMeter</b>:</para>
      <code>
XAUDIO2FX_STDAPI CreateAudioVolumeMeter(_Outptr_ IUnknown** ppApo);
__inline HRESULT XAudio2CreateVolumeMeter(_Outptr_ IUnknown** ppApo, UINT32 /*Flags*/ DEFAULT(0))
{
    return CreateAudioVolumeMeter(ppApo);
}

</code>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--create-an-effect-chain">How to: Create an Effect Chain</seealso>
    <seealso cref="IXAudio2Voice.SetEffectParameters" />
    <seealso cref="XAUDIO2FX_VOLUMEMETER_LEVELS" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/functions">XAudio2 Functions</seealso>
  </member>
</doc>