<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1Factory.CreateDCRenderTarget">
    <summary>Creates a render target that draws to a Windows Graphics Device Interface (GDI) device context.</summary>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. To enable the device context (DC) render target to work with GDI, set the DXGI format to <see cref="DXGI_FORMAT_B8G8R8A8_UNORM" /> and the alpha mode to <see cref="D2D1_ALPHA_MODE_PREMULTIPLIED" /> or <b>D2D1_ALPHA_MODE_IGNORE</b>. For more information about pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="dcRenderTarget">When this method returns, <i>dcRenderTarget</i> contains the address of the pointer to the <see cref="ID2D1DCRenderTarget" /> created by the method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateDrawingStateBlock">
    <summary>Creates an <see cref="ID2D1DrawingStateBlock" /> that can be used with the <see cref="SaveDrawingState" /> and <see cref="RestoreDrawingState" /> methods of a render target.</summary>
    <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags information.</param>
    <param name="textRenderingParams">Optional text parameters that indicate how text should be rendered.</param>
    <param name="drawingStateBlock">When this method returns, contains the address of a pointer to the new drawing state block created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateDrawingStateBlock">
    <summary>Creates an <see cref="ID2D1DrawingStateBlock" /> that can be used with the <see cref="SaveDrawingState" /> and <see cref="RestoreDrawingState" /> methods of a render target.</summary>
    <param name="drawingStateDescription">A structure that contains antialiasing, transform, and tags information.</param>
    <param name="drawingStateBlock">When this method returns, contains the address of a pointer to the new drawing state block created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateDrawingStateBlock">
    <summary>Creates an <see cref="ID2D1DrawingStateBlock" /> that can be used with the <see cref="SaveDrawingState" /> and <see cref="RestoreDrawingState" /> methods of a render target.</summary>
    <param name="drawingStateBlock">When this method returns, contains the address of a pointer to the new drawing state block created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateDxgiSurfaceRenderTarget">
    <summary>Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface.</summary>
    <param name="dxgiSurface">The IDXGISurface to which the render target will draw.</param>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="renderTarget">When this method returns, contains the address of the pointer to the <see cref="ID2D1RenderTarget" /> object created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateDxgiSurfaceRenderTarget">
    <summary>Creates a render target that draws to a DirectX Graphics Infrastructure (DXGI) surface.</summary>
    <param name="dxgiSurface">The IDXGISurface to which the render target will draw.</param>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="renderTarget">When this method returns, contains the address of the pointer to the <see cref="ID2D1RenderTarget" /> object created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateEllipseGeometry">
    <summary>Creates an <see cref="ID2D1EllipseGeometry" />.</summary>
    <param name="ellipse">A value that describes the center point, x-radius, and y-radius of the ellipse geometry.</param>
    <param name="ellipseGeometry">When this method returns, contains the address of the pointer to the ellipse geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateGeometryGroup">
    <summary>Creates an <see cref="ID2D1GeometryGroup" />, which is an object that holds other geometries.</summary>
    <param name="fillMode">A value that specifies the rule that a composite shape uses to determine whether a given point is part of the geometry.</param>
    <param name="geometries">An array containing the geometry objects to add to the geometry group. The number of elements in this array is indicated by the <i>geometriesCount</i> parameter.</param>
    <param name="geometriesCount">The number of elements in <i>geometries</i>.</param>
    <param name="geometryGroup">When this method returns, contains the address of a pointer to the geometry group created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateHwndRenderTarget">
    <summary>
      <para>Creates an <see cref="ID2D1HwndRenderTarget" />, a render target that renders to a window.</para>
      <para>When you create a render target, and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-error-codes">D2DERR_RECREATE_TARGET</a> error is received. When you receive this error, you need to recreate the render target (and any resources it created).</para>
      <h3>-param renderTargetProperties</h3>
      <para>The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
      <h3>-param hwndRenderTargetProperties</h3>
      <para>The window handle, initial size (in pixels), and present options.</para>
      <h3>-param hwndRenderTarget</h3>
      <para>When this method returns, contains the address of the pointer to the <see cref="ID2D1HwndRenderTarget" /> object created by this method.</para>
    </summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateHwndRenderTarget">
    <summary>
      <para>Creates an <see cref="ID2D1HwndRenderTarget" />, a render target that renders to a window.</para>
      <para>When you create a render target, and hardware acceleration is available, you allocate resources on the computer's GPU. By creating a render target once and retaining it as long as possible, you gain performance benefits. Your application should create render targets once and hold onto them for the life of the application or until the <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-error-codes">D2DERR_RECREATE_TARGET</a> error is received. When you receive this error, you need to recreate the render target (and any resources it created).</para>
    </summary>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="hwndRenderTargetProperties">The window handle, initial size (in pixels), and present options.</param>
    <param name="hwndRenderTarget">When this method returns, contains the address of the pointer to the <see cref="ID2D1HwndRenderTarget" /> object created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreatePathGeometry">
    <summary>Creates an empty <see cref="ID2D1PathGeometry" />.</summary>
    <param name="pathGeometry">When this method returns, contains the address to a pointer to the path geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateRectangleGeometry">
    <summary>Creates an <see cref="ID2D1RectangleGeometry" />.</summary>
    <param name="rectangle">The coordinates of the rectangle geometry.</param>
    <param name="rectangleGeometry">When this method returns, contains the address of the pointer to the rectangle geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateRectangleGeometry">
    <summary>Creates an <see cref="ID2D1RectangleGeometry" />.</summary>
    <param name="rectangle">The coordinates of the rectangle geometry.</param>
    <param name="rectangleGeometry">When this method returns, contains the address of the pointer to the rectangle geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateRoundedRectangleGeometry">
    <summary>Creates an <see cref="ID2D1RoundedRectangleGeometry" />.</summary>
    <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry.</param>
    <param name="roundedRectangleGeometry">When this method returns, contains the address of the pointer to the rounded rectangle geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateRoundedRectangleGeometry">
    <summary>Creates an <see cref="ID2D1RoundedRectangleGeometry" />.</summary>
    <param name="roundedRectangle">The coordinates and corner radii of the rounded rectangle geometry.</param>
    <param name="roundedRectangleGeometry">When this method returns, contains the address of the pointer to the rounded rectangle geometry created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateStrokeStyle">
    <summary>Creates an <see cref="ID2D1StrokeStyle" /> that describes start cap, dash pattern, and other features of a stroke.</summary>
    <param name="strokeStyleProperties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke.</param>
    <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width.</param>
    <param name="dashesCount">The number of elements in the <i>dashes</i> array.</param>
    <param name="strokeStyle">When this method returns, contains the address of the pointer to the stroke style created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateStrokeStyle">
    <summary>Creates an <see cref="ID2D1StrokeStyle" /> that describes start cap, dash pattern, and other features of a stroke.</summary>
    <param name="strokeStyleProperties">A structure that describes the stroke's line cap, dash offset, and other details of a stroke.</param>
    <param name="dashes">An array whose elements are set to the length of each dash and space in the dash pattern. The first element sets the length of a dash, the second element sets the length of a space, the third element sets the length of a dash, and so on. The length of each dash and space in the dash pattern is the product of the element value in the array and the stroke width.</param>
    <param name="dashesCount">The number of elements in the <i>dashes</i> array.</param>
    <param name="strokeStyle">When this method returns, contains the address of the pointer to the stroke style created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateTransformedGeometry">
    <summary>Transforms the specified geometry and stores the result as an <see cref="ID2D1TransformedGeometry" /> object.</summary>
    <param name="sourceGeometry">The geometry to transform.</param>
    <param name="transform">The transformation to apply.</param>
    <param name="transformedGeometry">When this method returns, contains the address of the pointer to the new transformed geometry object. The transformed geometry stores the result of transforming <i>sourceGeometry</i> by <i>transform</i>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateTransformedGeometry">
    <summary>Transforms the specified geometry and stores the result as an <see cref="ID2D1TransformedGeometry" /> object.</summary>
    <param name="sourceGeometry">The geometry to transform.</param>
    <param name="transform">The transformation to apply.</param>
    <param name="transformedGeometry">When this method returns, contains the address of the pointer to the new transformed geometry object. The transformed geometry stores the result of transforming <i>sourceGeometry</i> by <i>transform</i>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateWicBitmapRenderTarget">
    <summary>Creates a render target that renders to a Microsoft Windows Imaging Component (WIC) bitmap.</summary>
    <param name="target">The bitmap that receives the rendering output of the render target.</param>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="renderTarget">When this method returns, contains the address of the pointer to the <see cref="ID2D1RenderTarget" /> object created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.CreateWicBitmapRenderTarget">
    <summary>Creates a render target that renders to a Microsoft Windows Imaging Component (WIC) bitmap.</summary>
    <param name="target">The bitmap that receives the rendering output of the render target.</param>
    <param name="renderTargetProperties">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="renderTarget">When this method returns, contains the address of the pointer to the <see cref="ID2D1RenderTarget" /> object created by this method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory.GetDesktopDpi">
    <summary>
      <blockquote>[!IMPORTANT]<b>ID2D1Factory.GetDesktopDpi</b> is deprecated. For a desktop app, instead use <see cref="GetDpiForWindow" />. For a Universal Windows Platform (UWP) app, instead use <a href="https://docs.microsoft.com//uwp/api/windows.graphics.display.displayinformation.logicaldpi">DisplayInformation.LogicalDpi</a>.</blockquote>
      <para>Retrieves the current desktop dots per inch (DPI). To refresh this value, call <see cref="ReloadSystemMetrics" />.</para>
    </summary>
    <param name="dpiX">When this method returns, contains the horizontal DPI of the desktop. You must allocate storage for this parameter.</param>
    <param name="dpiY">When this method returns, contains the vertical DPI of the desktop. You must allocate storage for this parameter.</param>
  </member>
  <member name="ID2D1Factory.ReloadSystemMetrics">
    <summary>Forces the factory to refresh any system defaults that it might have changed since factory creation.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1Factory">
    <summary>Creates Direct2D resources.</summary>
  </member>
</doc>