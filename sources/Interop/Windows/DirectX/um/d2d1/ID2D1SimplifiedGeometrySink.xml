<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1SimplifiedGeometrySink.AddBeziers">
    <summary>
      <para>Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</para>
    </summary>
    <param name="beziers">
      <para>Type: <b>const <see cref="D2D1_BEZIER_SEGMENT" />*</b></para>
      <para>A pointer to an array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by <see cref="BeginFigure" />) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</para>
    </param>
    <param name="beziersCount">
      <para>Type: <b>UINT</b></para>
      <para>The number of Bezier segments in the <i>beziers</i> array.</para>
    </param>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink.AddLines">
    <summary>
      <para>Creates a sequence of lines using the specified points and adds them to the geometry sink.</para>
    </summary>
    <param name="points">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a>*</b></para>
      <para>A pointer to an array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by <see cref="BeginFigure" />) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.</para>
    </param>
    <param name="pointsCount">
      <para>Type: <b>UINT</b></para>
      <para>The number of points in the <i>points</i> array.</para>
    </param>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink.BeginFigure">
    <summary>
      <para>Starts a new figure at the specified point.</para>
    </summary>
    <param name="startPoint">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
      <para>The point at which to begin the new figure.</para>
    </param>
    <param name="figureBegin">
      <para>Type: <b><see cref="D2D1_FIGURE_BEGIN" /></b></para>
      <para>Whether the new figure should be hollow or filled.</para>
    </param>
    <remarks>
      <para>If this method is called while a figure is currently in progress, the interface is invalidated and all future methods will fail.</para>
    </remarks>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/path-geometries-overview">Path Geometries Overview</seealso>
  </member>
  <member name="ID2D1SimplifiedGeometrySink.Close">
    <summary>
      <para>Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>Do not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one <see cref="EndFigure" /> call for each call to <see cref="BeginFigure" />.</para>
      <para>After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction.</para>
    </remarks>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink.EndFigure">
    <summary>
      <para>Ends the current figure; optionally, closes it.</para>
    </summary>
    <param name="figureEnd">
      <para>Type: <b><see cref="D2D1_FIGURE_END" /></b></para>
      <para>A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by <see cref="BeginFigure" />.</para>
    </param>
    <remarks>
      <para>Calling this method without a matching call to <see cref="BeginFigure" />  places the geometry sink in an error state; subsequent calls are ignored, and the overall failure will be returned when the <see cref="Close" /> method is called.</para>
    </remarks>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink.SetFillMode">
    <summary>
      <para>Specifies the method used to determine which points are inside the geometry described by this geometry sink  and which points are outside.</para>
    </summary>
    <param name="fillMode">
      <para>Type: <b><see cref="D2D1_FILL_MODE" /></b></para>
      <para>The method used to determine whether a given point is part of the geometry.</para>
    </param>
    <remarks>
      <para>The fill mode defaults to D2D1_FILL_MODE_ALTERNATE. To set the fill mode, call <b>SetFillMode</b> before the first call to <see cref="BeginFigure" />. Not doing will put the geometry sink in an error state.</para>
    </remarks>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink.SetSegmentFlags">
    <summary>
      <para>Specifies stroke and join options to be applied to new segments added to the geometry sink.</para>
    </summary>
    <param name="vertexFlags">
      <para>Type: <b><see cref="D2D1_PATH_SEGMENT" /></b></para>
      <para>Stroke and join options to be applied to new segments added to the geometry sink.</para>
    </param>
    <remarks>
      <para>After this method is called, the specified segment flags are applied to each segment subsequently added to the sink. The segment flags are applied to every additional segment until this method is called again and a different set of segment flags is specified.</para>
    </remarks>
    <seealso cref="ID2D1SimplifiedGeometrySink" />
  </member>
  <member name="ID2D1SimplifiedGeometrySink">
    <summary>
      <para>Describes a geometric path that does not contain quadratic bezier curves or arcs.</para>
    </summary>
    <remarks>
      <para>A geometry sink consists of one or more figures. Each figure is made up of one or more line or Bezier curve segments. To create a figure, call the <see cref="BeginFigure" /> method and specify the figure's start point, then use <see cref="AddLines" /> and <see cref="AddBeziers" /> to add line and Bezier segments. When you are finished adding segments, call the <see cref="EndFigure" /> method. You can repeat this sequence to create additional figures. When you are finished creating figures, call the <see cref="Close" /> method.</para>
      <para>To create geometry paths that can contain arcs and quadratic Bezier curves, use an <see cref="ID2D1GeometrySink" />.</para>
    </remarks>
    <seealso cref="ID2D1GeometrySink" />
    <seealso cref="IUnknown" />
  </member>
</doc>