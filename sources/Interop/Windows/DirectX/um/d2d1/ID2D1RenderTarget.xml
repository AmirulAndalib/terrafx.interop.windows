<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1RenderTarget.BeginDraw">
    <summary>
      <para>Initiates drawing on this render target.</para>
    </summary>
    <remarks>
      <para>Drawing operations can only be issued between a <b>BeginDraw</b> and <see cref="EndDraw" /> call.</para>
      <para>BeginDraw and EndDraw are used to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="ID2D1RenderTarget" /> might behave differently when <b>BeginDraw</b> is called. An <see cref="ID2D1BitmapRenderTarget" /> may be locked between <b>BeginDraw</b>/<see cref="EndDraw" /> calls, a DXGI surface render target might be acquired on <b>BeginDraw</b> and released on <b>EndDraw</b>, while an <see cref="ID2D1HwndRenderTarget" /> may begin batching at <b>BeginDraw</b> and may present on <b>EndDraw</b>, for example.</para>
      <para>The BeginDraw method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of <b>BeginDraw</b>/<see cref="EndDraw" />.</para>
      <para>After <b>BeginDraw</b> is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the <see cref="Flush" /> method is called, or until <see cref="EndDraw" /> is called. The <b>EndDraw</b> method causes any batched drawing operations to complete, and then returns an HRESULT indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The <b>EndDraw</b> method always succeeds: it should not be called twice even if a previous <b>EndDraw</b> resulted in a failing HRESULT.</para>
      <para>If <see cref="EndDraw" /> is called without a matched call to <b>BeginDraw</b>, it returns an error indicating that <b>BeginDraw</b> must be called before <b>EndDraw</b>.</para>
      <para>Calling <b>BeginDraw</b> twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate HRESULT and error information when <b>EndDraw</b> is called.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.Clear">
    <summary>
      <para>Clears the drawing area to the specified color.</para>
    </summary>
    <param name="clearColor">
      <para>Type: [in, optional] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
      <para>The color to which the drawing area is cleared, or <b>NULL</b> for transparent black.</para>
    </param>
    <remarks>
      <para>Direct2D interprets the <i>clearColor</i> as straight alpha (not premultiplied).  If the render target's alpha mode is <see cref="D2D1_ALPHA_MODE_IGNORE" />, the alpha channel of <i>clearColor</i> is ignored and replaced with 1.0f (fully opaque).</para>
      <para>If the render target has an active clip (specified by <see cref="PushAxisAlignedClip" />), the clear command is applied only to the area within the clip region.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.Clear">
    <summary>
      <para>Clears the drawing area to the specified color.</para>
    </summary>
    <param name="clearColor">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-color-f">D2D1_COLOR_F</a> &amp;</b></para>
      <para>The color to which the drawing area is cleared.</para>
    </param>
    <remarks>
      <para>Direct2D interprets the <i>clearColor</i> as straight alpha (not premultiplied).  If the render target's alpha mode is <see cref="D2D1_ALPHA_MODE_IGNORE" />, the alpha channel of <i>clearColor</i> is ignored and replaced with 1.0f (fully opaque).</para>
      <para>If the render target has an active clip (specified by <see cref="PushAxisAlignedClip" />), the clear command is applied only to the area within the clip region.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmap">
    <summary>
      <para>Creates an uninitialized Direct2D bitmap.</para>
    </summary>
    <param name="size">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The dimension of the bitmap to create in pixels.</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BITMAP_PROPERTIES" /> &amp;</b></para>
      <para>The pixel format and dots per inch (DPI) of the bitmap to create.</para>
    </param>
    <param name="bitmap">
      <para>Type: [out] <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>
      <para>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</para>
    </summary>
    <param name="size">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The dimensions of the bitmap to create, in pixels.</para>
    </param>
    <param name="srcData">
      <para>Type: [in] <b>const void*</b></para>
      <para>A pointer to the memory location of the image data, or <b>NULL</b> to create an uninitialized bitmap.</para>
    </param>
    <param name="pitch">
      <para>Type: [in] <b>UINT32</b></para>
      <para>The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding. If <i>srcData</i> is <b>NULL</b>, this value is ignored. (Note that pitch is also sometimes called <i>stride</i>.)</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BITMAP_PROPERTIES" />*</b></para>
      <para>The pixel format and dots per inch (DPI) of the bitmap to create.</para>
    </param>
    <param name="bitmap">
      <para>Type: [out] <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap contents of the new brush.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-bitmap-brush">How to Create a Bitmap Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmap">
    <summary>
      <para>Creates a Direct2D bitmap from a pointer to in-memory source data.</para>
    </summary>
    <param name="size">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The dimensions of the bitmap to create in pixels.</para>
    </param>
    <param name="srcData">
      <para>Type: [in, optional] <b>const void*</b></para>
      <para>A pointer to the memory location of the image data, or <b>NULL</b> to create an uninitialized bitmap.</para>
    </param>
    <param name="pitch">
      <para>Type: [in] <b>UINT32</b></para>
      <para>The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding. If <i>srcData</i> is <b>NULL</b>, this value is ignored. (Note that pitch is also sometimes called <i>stride</i>.)</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BITMAP_PROPERTIES" /> &amp;</b></para>
      <para>The pixel format and dots per inch (DPI) of the bitmap to create.</para>
    </param>
    <param name="bitmap">
      <para>Type: [out] <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>
      <para>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap contents of the new brush.</para>
    </param>
    <param name="bitmapBrushProperties">
      <para>Type: <b><see cref="D2D1_BITMAP_BRUSH_PROPERTIES" />*</b></para>
      <para>The extend modes and interpolation mode of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush defaults to the <see cref="D2D1_EXTEND_MODE_CLAMP" />  horizontal and vertical extend modes and the <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" /> interpolation mode.</para>
    </param>
    <param name="brushProperties">
      <para>Type: <b><see cref="D2D1_BRUSH_PROPERTIES" />*</b></para>
      <para>A structure that contains the opacity and transform of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush sets the opacity member to 1.0F and the transform member to the identity matrix.</para>
    </param>
    <param name="bitmapBrush">
      <para>Type: <b><see cref="ID2D1BitmapBrush" />**</b></para>
      <para>When this method returns, this output parameter contains a pointer to a pointer to the new brush. Pass this parameter uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-bitmap-brush">How to Create a Bitmap Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>
      <para>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap contents of the new brush.</para>
    </param>
    <param name="bitmapBrushProperties">
      <para>Type: <b><see cref="D2D1_BITMAP_BRUSH_PROPERTIES" />*</b></para>
      <para>The extend modes and interpolation mode of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush defaults to the <see cref="D2D1_EXTEND_MODE_CLAMP" />  horizontal and vertical extend modes and the <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" /> interpolation mode.</para>
    </param>
    <param name="brushProperties">
      <para>Type: <b><see cref="D2D1_BRUSH_PROPERTIES" />*</b></para>
      <para>A structure that contains the opacity and transform of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush sets the opacity member to 1.0F and the transform member to the identity matrix.</para>
    </param>
    <param name="bitmapBrush">
      <para>Type: <b><see cref="ID2D1BitmapBrush" />**</b></para>
      <para>When this method returns, this output parameter contains a pointer to a pointer to the new brush. Pass this parameter uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-bitmap-brush">How to Create a Bitmap Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>
      <para>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap. The brush uses the default values for its opacity and transform.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap contents of the new brush.</para>
    </param>
    <param name="bitmapBrushProperties">
      <para>Type: <b>const <see cref="D2D1_BITMAP_BRUSH_PROPERTIES" /></b></para>
      <para>The extend modes and interpolation mode of the new brush.</para>
    </param>
    <param name="bitmapBrush">
      <para>Type: <b><see cref="ID2D1BitmapBrush" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The bitmap brush created by this method has an opacity of 1.0f and the identity matrix as its transform.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-bitmap-brush">How to Create a Bitmap Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>
      <para>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap. The brush uses the default values for its extend mode, interpolation mode, opacity, and transform.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap contents of the new brush.</para>
    </param>
    <param name="bitmapBrush">
      <para>Type: <b><see cref="ID2D1BitmapBrush" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The bitmap brush created by this method has <see cref="D2D1_EXTEND_MODE_CLAMP" />  horizontal and vertical extend modes and the <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" /> interpolation mode. Its opacity is 1.0f, and its transform is the identity matrix.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-bitmap-brush">How to Create a Bitmap Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>
      <para>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</para>
    </summary>
    <param name="wicBitmapSource">
      <para>Type: [in] <b><see cref="IWICBitmapSource" />*</b></para>
      <para>The WIC bitmap to copy.</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: [in, optional] <b>const <see cref="D2D1_BITMAP_PROPERTIES" />*</b></para>
      <para>The pixel format and DPI of the bitmap to create. The pixel format must match the pixel format of <i>wicBitmapSource</i>, or the method will fail. To prevent a mismatch, you can pass <b>NULL</b> or pass the value obtained from calling the <see cref="D2D1.PixelFormat" /> helper function without specifying any parameter values. If both <i>dpiX</i> and <i>dpiY</i> are 0.0f, the default DPI, 96, is used. DPI information embedded in <i>wicBitmapSource</i> is ignored.</para>
    </param>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>Before Direct2D can load a WIC bitmap, that bitmap must be converted to a supported pixel format and alpha mode. For a list of supported pixel formats and alpha modes, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-load-a-direct2d-bitmap-from-a-file">How to Load a Bitmap from a File</seealso>
    <seealso cref="ID2D1Bitmap" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>
      <para>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</para>
    </summary>
    <param name="wicBitmapSource">
      <para>Type: [in] <b><see cref="IWICBitmapSource" />*</b></para>
      <para>The WIC bitmap to copy.</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BITMAP_PROPERTIES" /> &amp;</b></para>
      <para>The pixel format and DPI of the bitmap to create. The pixel format must match the pixel format of <i>wicBitmapSource</i>, or the method will fail. To prevent a mismatch, you can pass <b>NULL</b> or pass the value obtained from calling the <see cref="D2D1.PixelFormat" /> helper function without specifying any parameter values. If both <i>dpiX</i> and <i>dpiY</i> are 0.0f, the default DPI, 96, is used. DPI information embedded in <i>wicBitmapSource</i> is ignored.</para>
    </param>
    <param name="bitmap">
      <para>Type: [out] <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>Before Direct2D can load a WIC bitmap, that bitmap must be converted to a supported pixel format and alpha mode. For a list of supported pixel formats and alpha modes, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-load-a-direct2d-bitmap-from-a-file">How to Load a Bitmap from a File</seealso>
    <seealso cref="ID2D1Bitmap" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>
      <para>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</para>
    </summary>
    <param name="wicBitmapSource">
      <para>Type: [in] <b><see cref="IWICBitmapSource" />*</b></para>
      <para>The WIC bitmap to copy.</para>
    </param>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>Before Direct2D can load a WIC image, it must be converted to a supported pixel format and alpha mode. For a list of supported pixel formats and alpha modes, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-load-a-direct2d-bitmap-from-a-file">How to Load a Bitmap from a File</seealso>
    <seealso cref="ID2D1Bitmap" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</para>
    </summary>
    <param name="desiredSize">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a>*</b></para>
      <para>The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</para>
    </param>
    <param name="desiredPixelSize">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a>*</b></para>
      <para>The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</para>
    </param>
    <param name="desiredFormat">
      <para>Type: [in] <b>const <see cref="D2D1_PIXEL_FORMAT" />*</b></para>
      <para>The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see  <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel  Formats and Alpha Modes</a>.</para>
    </param>
    <param name="options">
      <para>Type: [in] <b><see cref="D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS" /></b></para>
      <para>A value that specifies whether the new render target must be compatible with GDI.</para>
    </param>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The pixel size and DPI of the new render target can be altered by specifying values for <i>desiredSize</i> or <i>desiredPixelSize</i>:</para>
      <list type="bullet">
        <item>
          <description>If <i>desiredSize</i> is specified but <i>desiredPixelSize</i> is not, the pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target.  If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</description>
        </item>
        <item>
          <description>If the <i>desiredPixelSize</i> is specified and <i>desiredSize</i>  is not, the DPI of the new render target is the same as the original render target.</description>
        </item>
        <item>
          <description>If both <i>desiredSize</i>  and <i>desiredPixelSize</i> are specified, the DPI of the new render target is computed to account for the difference in scale.</description>
        </item>
        <item>
          <description>If neither <i>desiredSize</i> nor <i>desiredPixelSize</i> is specified, the new render target size and DPI match the original render target. </description>
        </item>
      </list>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</para>
    </summary>
    <param name="desiredSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</para>
    </param>
    <param name="desiredPixelSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</para>
    </param>
    <param name="desiredFormat">
      <para>Type: [in] <b><see cref="D2D1_PIXEL_FORMAT" /></b></para>
      <para>The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
    </param>
    <param name="options">
      <para>Type: [in] <b><see cref="D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS" /></b></para>
      <para>A value that specifies whether the new render target must be compatible with GDI.</para>
    </param>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The pixel size and DPI of the new render target can be altered by specifying values for <i>desiredSize</i> or <i>desiredPixelSize</i>.</para>
      <list type="bullet">
        <item>
          <description>If <i>desiredSize</i> is specified but <i>desiredPixelSize</i> is not, the pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target. If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</description>
        </item>
        <item>
          <description>If the <i>desiredPixelSize</i> is specified and <i>desiredSize</i> is not, the DPI of the new render target is the same as the original render target.</description>
        </item>
        <item>
          <description>If both <i>desiredSize</i> and <i>desiredPixelSize</i> are specified, the DPI of the new render target is computed to account for the difference in scale.</description>
        </item>
        <item>
          <description>If neither <i>desiredSize</i> nor <i>desiredPixelSize</i> is specified, the new render target size and DPI match the original render target. </description>
        </item>
      </list>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</para>
    </summary>
    <param name="desiredSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</para>
    </param>
    <param name="desiredPixelSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</para>
    </param>
    <param name="desiredFormat">
      <para>Type: [in] <b><see cref="D2D1_PIXEL_FORMAT" /></b></para>
      <para>The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
    </param>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The pixel size and DPI of the new render target can be altered by specifying values for <i>desiredSize</i> or <i>desiredPixelSize</i>.</para>
      <list type="bullet">
        <item>
          <description>If <i>desiredSize</i> is specified but <i>desiredPixelSize</i> is not, the pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target. If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</description>
        </item>
        <item>
          <description>If the <i>desiredPixelSize</i> is specified and <i>desiredSize</i> is not, the DPI of the new render target is the same as the original render target.</description>
        </item>
        <item>
          <description>If both <i>desiredSize</i> and <i>desiredPixelSize</i> are specified, the DPI of the new render target is computed to account for the difference in scale.</description>
        </item>
        <item>
          <description>If neither <i>desiredSize</i> nor <i>desiredPixelSize</i> is specified, the new render target size and DPI match the original render target. </description>
        </item>
      </list>
      <para>The bitmap render target created by this method is not compatible with GDI.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</para>
    </summary>
    <param name="desiredSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</para>
    </param>
    <param name="desiredPixelSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</para>
    </param>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The pixel size and DPI of the new render target can be altered by specifying values for <i>desiredSize</i> or <i>desiredPixelSize</i>.</para>
      <list type="bullet">
        <item>
          <description>If <i>desiredSize</i> is specified but <i>desiredPixelSize</i> is not, the pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target. If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</description>
        </item>
        <item>
          <description>If the <i>desiredPixelSize</i> is specified and <i>desiredSize</i> is not, the DPI of the new render target is the same as the original render target.</description>
        </item>
        <item>
          <description>If both <i>desiredSize</i> and <i>desiredPixelSize</i> are specified, the DPI of the new render target is computed to account for the difference in scale.</description>
        </item>
        <item>
          <description>If neither <i>desiredSize</i> nor <i>desiredPixelSize</i> is specified, the new render target size and DPI match the original render target. </description>
        </item>
      </list>
      <para>The bitmap render target created by this method is not compatible with GDI.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</para>
    </summary>
    <param name="desiredSize">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>The desired size of the new render target in device-independent pixels. The pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target. If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</para>
    </param>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The bitmap render target created by this method is not compatible with GDI.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel  Formats and Alpha Modes</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>
      <para>Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target and has the same size, DPI, and pixel format (but not alpha mode) as the current render target.</para>
    </summary>
    <param name="bitmapRenderTarget">
      <para>Type: [out] <b><see cref="ID2D1BitmapRenderTarget" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The bitmap render target created by this method is not compatible with GDI, and has an alpha mode of <see cref="D2D1_ALPHA_MODE_PREMULTIPLIED" />.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateGradientStopCollection">
    <summary>
      <para>Creates an <see cref="ID2D1GradientStopCollection" /> from the specified array of <see cref="D2D1_GRADIENT_STOP" /> structures.</para>
    </summary>
    <param name="gradientStops">
      <para>Type: [in] <b><see cref="D2D1_GRADIENT_STOP" />*</b></para>
      <para>A pointer to an array of <see cref="D2D1_GRADIENT_STOP" /> structures.</para>
    </param>
    <param name="gradientStopsCount">
      <para>Type: [in] <b>UINT</b></para>
      <para>A value greater than or equal to 1 that specifies the number of gradient stops in the <i>gradientStops</i> array.</para>
    </param>
    <param name="colorInterpolationGamma">
      <para>Type: [in] <b>D2D1_GAMMA</b></para>
      <para>The space in which color interpolation between the gradient stops is performed.</para>
    </param>
    <param name="extendMode">
      <para>Type: [in] <b>D2D1_EXTEND_MODE</b></para>
      <para>The behavior of the gradient outside the [0,1] normalized range.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [out] <b><see cref="ID2D1GradientStopCollection" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new gradient stop collection.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso cref="D2D1_GRADIENT_STOP" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-linear-gradient-brush">How to Create a Linear Gradient Brush</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-radial-gradient-brush">How to Create a Radial Gradient Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateGradientStopCollection">
    <summary>
      <para>Creates an <see cref="ID2D1GradientStopCollection" /> from the specified gradient stops that uses the <see cref="D2D1_GAMMA_2_2" /> color interpolation gamma and the clamp extend mode.</para>
    </summary>
    <param name="gradientStops">
      <para>Type: [in] <b><see cref="D2D1_GRADIENT_STOP" />*</b></para>
      <para>A pointer to an array of <see cref="D2D1_GRADIENT_STOP" /> structures.</para>
    </param>
    <param name="gradientStopsCount">
      <para>Type: [in] <b>UINT</b></para>
      <para>A value greater than or equal to 1 that specifies the number of gradient stops in the <i>gradientStops</i> array.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [out] <b><see cref="ID2D1GradientStopCollection" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new gradient stop collection.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso cref="D2D1_GRADIENT_STOP" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-linear-gradient-brush">How to Create a Linear Gradient Brush</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-radial-gradient-brush">How to Create a Radial Gradient Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>
      <para>Creates a layer resource that can be used with this render target and its compatible render targets.</para>
    </summary>
    <param name="size">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a>*</b></para>
      <para>If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when <see cref="PushLayer" /> is called.</para>
    </param>
    <param name="layer">
      <para>Type: [out] <b><see cref="ID2D1Layer" />**</b></para>
      <para>When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The layer automatically resizes itself, as needed.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>
      <para>Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.</para>
    </summary>
    <param name="size">
      <para>Type: [in] <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when <see cref="PushLayer" /> is called.</para>
    </param>
    <param name="layer">
      <para>Type: [out] <b><see cref="ID2D1Layer" />**</b></para>
      <para>When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>Regardless of whether a size is initially specified, the layer automatically resizes as needed.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>
      <para>Creates a layer resource that can be used with this render target and its compatible render targets.</para>
    </summary>
    <param name="layer">
      <para>Type: [out] <b><see cref="ID2D1Layer" />**</b></para>
      <para>When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The layer automatically resizes itself, as needed.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1LinearGradientBrush" /> object for painting areas with a linear gradient.</para>
    </summary>
    <param name="linearGradientBrushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES" />*</b></para>
      <para>The start and end points of the gradient.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" />*</b></para>
      <para>The transform and base opacity of the new brush.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</para>
    </param>
    <param name="linearGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1LinearGradientBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso cref="CreateGradientStopCollection" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-linear-gradient-brush">How to Create a Linear Gradient Brush</seealso>
    <seealso cref="ID2D1GradientStopCollection" />
    <seealso cref="ID2D1LinearGradientBrush" />
    <seealso cref="ID2D1RadialGradientBrush" />
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1LinearGradientBrush" /> that contains the specified gradient stops and has the specified transform and base opacity.</para>
    </summary>
    <param name="linearGradientBrushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The start and end points of the gradient.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The transform and base opacity of the new brush.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</para>
    </param>
    <param name="linearGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1LinearGradientBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso cref="CreateGradientStopCollection" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-linear-gradient-brush">How to Create a Linear Gradient Brush</seealso>
    <seealso cref="ID2D1GradientStopCollection" />
    <seealso cref="ID2D1LinearGradientBrush" />
    <seealso cref="ID2D1RadialGradientBrush" />
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1LinearGradientBrush" /> that contains the specified gradient stops, has no transform, and has a base opacity of 1.0.</para>
    </summary>
    <param name="linearGradientBrushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The start and end points of the gradient.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</para>
    </param>
    <param name="linearGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1LinearGradientBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso cref="CreateGradientStopCollection" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-linear-gradient-brush">How to Create a Linear Gradient Brush</seealso>
    <seealso cref="ID2D1GradientStopCollection" />
    <seealso cref="ID2D1LinearGradientBrush" />
    <seealso cref="ID2D1RadialGradientBrush" />
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateMesh">
    <summary>
      <para>Create a mesh that uses triangles to describe a shape.</para>
    </summary>
    <param name="mesh">
      <para>Type: <b><see cref="ID2D1Mesh" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new mesh.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>To populate a mesh, use its <see cref="Open" /> method to obtain an <see cref="ID2D1TessellationSink" />. To draw the mesh, use the render target's <see cref="FillMesh" /> method.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1RadialGradientBrush" /> object that can be used to paint areas with a radial gradient.</para>
    </summary>
    <param name="radialGradientBrushProperties">
      <para>Type: <b>const <see cref="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES" />*</b></para>
      <para>The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" />*</b></para>
      <para>The transform and base opacity of the new brush.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</para>
    </param>
    <param name="radialGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1RadialGradientBrush" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-radial-gradient-brush">How to Create a Radial Gradient Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1RadialGradientBrush" /> that contains the specified gradient stops and has the specified transform and base opacity.</para>
    </summary>
    <param name="radialGradientBrushProperties">
      <para>Type: <b>const <see cref="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The transform and base opacity of the new brush.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</para>
    </param>
    <param name="radialGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1RadialGradientBrush" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-create-a-radial-gradient-brush">How to Create a Radial Gradient Brush</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>
      <para>Creates an <see cref="ID2D1RadialGradientBrush" /> that contains the specified gradient stops, has no transform, and has a base opacity of 1.0.</para>
    </summary>
    <param name="radialGradientBrushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</para>
    </param>
    <param name="gradientStopCollection">
      <para>Type: [in] <b><see cref="ID2D1GradientStopCollection" />*</b></para>
      <para>A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</para>
    </param>
    <param name="radialGradientBrush">
      <para>Type: [out] <b><see cref="ID2D1RadialGradientBrush" />**</b></para>
      <para>When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateSharedBitmap">
    <summary>
      <para>Creates an <see cref="ID2D1Bitmap" /> whose data is shared with another resource.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The interface ID of the object supplying the source data.</para>
    </param>
    <param name="data">
      <para>Type: <b>void*</b></para>
      <para>An <see cref="ID2D1Bitmap" />, <see cref="IDXGISurface" />, or an <see cref="IWICBitmapLock" /> that contains the data to share with the new <b>ID2D1Bitmap</b>. For more information, see the Remarks section.</para>
    </param>
    <param name="bitmapProperties">
      <para>Type: <b><see cref="D2D1_BITMAP_PROPERTIES" />*</b></para>
      <para>The pixel format  and DPI of the bitmap to create . The <see cref="DXGI_FORMAT" /> portion of the pixel format  must match the <see cref="DXGI_FORMAT" /> of <i>data</i> or the method will fail, but the alpha modes don't have to match. To prevent a  mismatch, you can pass <b>NULL</b> or the value obtained from the <see cref="D2D1.PixelFormat" /> helper function. The DPI settings do not have to match those of <i>data</i>. If both <i>dpiX</i> and <i>dpiY</i> are  0.0f, the DPI of the render target is used.</para>
    </param>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>The <b>CreateSharedBitmap</b> method is useful for efficiently reusing bitmap data and can also be used to provide interoperability with Direct3D.</para>
      <h3>Sharing an ID2D1Bitmap</h3>
      <para>By passing an <see cref="ID2D1Bitmap" /> created by a render target that is resource-compatible, you can share a bitmap with that render target; both the original <b>ID2D1Bitmap</b> and the new <b>ID2D1Bitmap</b> created by this method will point to the same bitmap data. For more information about when render target resources can be shared, see the Sharing Render Target Resources section of the <a href="https://docs.microsoft.com//windows/win32/Direct2D/resources-and-resource-domains">Resources Overview</a>.</para>
      <para>You may also use this method to reinterpret the data of an existing bitmap and specify a new DPI or alpha mode. For example, in the case of a bitmap atlas, an <see cref="ID2D1Bitmap" /> may contain multiple sub-images, each of which should be rendered with a different <see cref="D2D1_ALPHA_MODE" /> (<b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>  or <b>D2D1_ALPHA_MODE_IGNORE</b>). You could use the <b>CreateSharedBitmap</b> method to reinterpret the bitmap using the desired alpha mode  without having to load a separate copy of the bitmap into memory.</para>
      <h3>Sharing an IDXGISurface</h3>
      <para>When using a DXGI surface render target (an <see cref="ID2D1RenderTarget" /> object created by the <see cref="CreateDxgiSurfaceRenderTarget" /> method), you can pass an  <see cref="IDXGISurface" /> surface to the <b>CreateSharedBitmap</b> method to share video memory with Direct3D and manipulate Direct3D content as an <see cref="ID2D1Bitmap" />. As described in  the <a href="https://docs.microsoft.com//windows/win32/Direct2D/resources-and-resource-domains">Resources Overview</a>, the render target and the <see cref="IDXGISurface" /> must be using the same Direct3D device.</para>
      <para>Note also that the <see cref="IDXGISurface" /> must use one of the supported pixel formats and alpha modes described in <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</para>
      <para>For more information about interoperability with Direct3D, see the <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-and-direct3d-interoperation-overview">Direct2D and Direct3D Interoperability Overview</a>.</para>
      <h3>Sharing an IWICBitmapLock</h3>
      <para>An <see cref="IWICBitmapLock" /> stores the content of a WIC bitmap and shields it from simultaneous accesses. By passing an <b>IWICBitmapLock</b>  to the <b>CreateSharedBitmap</b> method, you can create an <see cref="ID2D1Bitmap" /> that points to the bitmap data already stored in the  <b>IWICBitmapLock</b>.</para>
      <para>To use an <see cref="IWICBitmapLock" /> with the <b>CreateSharedBitmap</b> method, the render target must use software rendering. To force a render target to use software rendering, set to <see cref="D2D1_RENDER_TARGET_TYPE_SOFTWARE" />  the <b>type</b> field of the  <see cref="D2D1_RENDER_TARGET_PROPERTIES" /> structure that you use to create the render target. To check whether an existing render target uses software rendering, use the <see cref="IsSupported" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-and-direct3d-interoperation-overview">Direct2D and Direct3D Interoperability Overview</seealso>
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="IDXGISurface" />
    <seealso cref="IWICBitmapLock" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/resources-and-resource-domains">Resources Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</seealso>
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>
      <para>Creates a new <see cref="ID2D1SolidColorBrush" /> that can be used to paint areas with a solid color.</para>
    </summary>
    <param name="color">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
      <para>The red, green, blue, and alpha values of the brush's color.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" />*</b></para>
      <para>The base opacity of the brush.</para>
    </param>
    <param name="solidColorBrush">
      <para>Type: [out] <b><see cref="ID2D1SolidColorBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/getting-started-with-direct2d">Direct2D QuickStart</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>
      <para>Creates a new <see cref="ID2D1SolidColorBrush" /> that has the specified color and opacity.</para>
    </summary>
    <param name="color">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-color-f">D2D1_COLOR_F</a> &amp;</b></para>
      <para>The red, green, blue, and alpha values of the brush's color.</para>
    </param>
    <param name="brushProperties">
      <para>Type: [in] <b>const <see cref="D2D1_BRUSH_PROPERTIES" /> &amp;</b></para>
      <para>The base opacity of the brush.</para>
    </param>
    <param name="solidColorBrush">
      <para>Type: [out] <b><see cref="ID2D1SolidColorBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/getting-started-with-direct2d">Direct2D QuickStart</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>
      <para>Creates a new <see cref="ID2D1SolidColorBrush" /> that has the specified color and a base opacity of 1.0f.</para>
    </summary>
    <param name="color">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-color-f">D2D1_COLOR_F</a> &amp;</b></para>
      <para>The red, green, blue, and alpha values of the brush's color.</para>
    </param>
    <param name="solidColorBrush">
      <para>Type: [out] <b><see cref="ID2D1SolidColorBrush" />**</b></para>
      <para>When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-brushes-overview">Brushes Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/getting-started-with-direct2d">Direct2D QuickStart</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>
      <para>Draws the specified bitmap after scaling it to the size of the specified rectangle.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap to render.</para>
    </param>
    <param name="destinationRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; <b>NULL</b> to draw the selected portion of the bitmap at the origin of the render target.  If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state.</para>
    </param>
    <param name="opacity">
      <para>Type: <b>FLOAT</b></para>
      <para>A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  The default value is 1.0f.</para>
    </param>
    <param name="interpolationMode">
      <para>Type: <b><see cref="D2D1_BITMAP_INTERPOLATION_MODE" /></b></para>
      <para>The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />.</para>
    </param>
    <param name="sourceRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; <b>NULL</b> to draw the entire bitmap.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-drawbitmap">DrawBitmap</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-a-bitmap">How to Draw a Bitmap</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-load-a-direct2d-bitmap-from-a-file">How to Load a Bitmap from a File</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-load-a-bitmap-from-a-resource">How to Load a Bitmap from a Resource</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>
      <para>Draws the specified bitmap after scaling it to the size of the specified rectangle.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap to render.</para>
    </param>
    <param name="destinationRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</para>
    </param>
    <param name="opacity">
      <para>Type: <b>FLOAT</b></para>
      <para>A value between 0.0f and 1.0f, inclusive, that specifies the opacity value to be applied to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.  Default is 1.0f.</para>
    </param>
    <param name="interpolationMode">
      <para>Type: <b><see cref="D2D1_BITMAP_INTERPOLATION_MODE" /></b></para>
      <para>The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />.</para>
    </param>
    <param name="sourceRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw; <b>NULL</b> to draw the entire bitmap.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-drawbitmap">DrawBitmap</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>
      <para>Draws the specified bitmap after scaling it to the size of the specified rectangle.</para>
    </summary>
    <param name="bitmap">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The bitmap to render.</para>
    </param>
    <param name="destinationRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</para>
    </param>
    <param name="opacity">
      <para>Type: <b>FLOAT</b></para>
      <para>A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</para>
    </param>
    <param name="interpolationMode">
      <para>Type: <b><see cref="D2D1_BITMAP_INTERPOLATION_MODE" /></b></para>
      <para>The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</para>
    </param>
    <param name="sourceRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-drawbitmap">DrawBitmap</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawEllipse">
    <summary>
      <para>Draws the outline of the specified ellipse using the specified stroke style.</para>
    </summary>
    <param name="ellipse">
      <para>Type: [in] <b>const <see cref="D2D1_ELLIPSE" />*</b></para>
      <para>The position and radius of the ellipse to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the ellipse's outline.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to apply to the ellipse's outline, or <b>NULL</b> to paint a solid stroke.</para>
    </param>
    <remarks>
      <para>The <see cref="DrawEllipse" /> method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawEllipse</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawEllipse">
    <summary>
      <para>Draws the outline of the specified ellipse using the specified stroke style.</para>
    </summary>
    <param name="ellipse">
      <para>Type: [in] <b>const <see cref="D2D1_ELLIPSE" /> &amp;</b></para>
      <para>The position and radius of the ellipse to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the ellipse's outline.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to apply to the ellipse's outline, or <b>NULL</b> to paint a solid stroke.</para>
    </param>
    <remarks>
      <para>The <see cref="DrawEllipse" /> method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawEllipse</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawGeometry">
    <summary>
      <para>Draws the outline of the specified geometry using the specified stroke style.</para>
    </summary>
    <param name="geometry">
      <para>Type: <b><see cref="ID2D1Geometry" />*</b></para>
      <para>The geometry to draw.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the geometry's stroke.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to apply to the geometry's outline, or <b>NULL</b> to paint a solid stroke.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGeometry</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/geometries">Geometries</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-geometries-overview">Geometries Overview</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawGlyphRun">
    <summary>
      <para>Draws the specified glyphs.</para>
    </summary>
    <param name="baselineOrigin">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
      <para>The origin, in device-independent pixels, of the glyphs' baseline.</para>
    </param>
    <param name="glyphRun">
      <para>Type: <b>const <see cref="DWRITE_GLYPH_RUN" />*</b></para>
      <para>The glyphs to render.</para>
    </param>
    <param name="foregroundBrush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the specified glyphs.</para>
    </param>
    <param name="measuringMode">
      <para>Type: <b><see cref="DWRITE_MEASURING_MODE" /></b></para>
      <para>A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawGlyphRun</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawLine">
    <summary>
      <para>Draws a line between the specified points using the specified stroke style.</para>
    </summary>
    <param name="point0">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
      <para>The start point of the line, in device-independent pixels.</para>
    </param>
    <param name="point1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
      <para>The end point of the line, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the line's stroke.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to paint, or <b>NULL</b> to paint a solid line.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawLine</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawRectangle">
    <summary>
      <para>Draws the outline of a rectangle that has the specified dimensions and stroke style.</para>
    </summary>
    <param name="rect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The dimensions of the rectangle to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rectangle's stroke.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to paint, or <b>NULL</b> to paint a solid stroke.</para>
    </param>
    <remarks>
      <para>When this method fails, it does not return an error code. To determine whether a drawing method (such as <see cref="DrawRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-quickstart">Creating a Simple Direct2D Application</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawRectangle">
    <summary>
      <para>Draws the outline of a rectangle that has the specified dimensions and stroke style.</para>
    </summary>
    <param name="rect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> &amp;</b></para>
      <para>The dimensions of the rectangle to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rectangle's stroke.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of stroke to paint, or <b>NULL</b> to paint a solid stroke.</para>
    </param>
    <remarks>
      <para>When this method fails, it does not return an error code. To determine whether a drawing method (such as <see cref="DrawRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-quickstart">Creating a Simple Direct2D Application</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawRoundedRectangle">
    <summary>
      <para>Draws the outline of the specified rounded rectangle using the specified stroke style.</para>
    </summary>
    <param name="roundedRect">
      <para>Type: [in] <b>const <see cref="D2D1_ROUNDED_RECT" />*</b></para>
      <para>The dimensions of the rounded rectangle to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rounded rectangle's outline.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of the rounded rectangle's stroke, or <b>NULL</b> to paint a solid stroke. The default value is <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="DrawRoundedRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="D2D1.RoundedRect" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawRoundedRectangle">
    <summary>
      <para>Draws the outline of the specified rounded rectangle using the specified stroke style.</para>
    </summary>
    <param name="roundedRect">
      <para>Type: [in] <b>const <see cref="D2D1_ROUNDED_RECT" /> &amp;</b></para>
      <para>The dimensions of the rounded rectangle to draw, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rounded rectangle's outline.</para>
    </param>
    <param name="strokeWidth">
      <para>Type: [in] <b>FLOAT</b></para>
      <para>The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</para>
    </param>
    <param name="strokeStyle">
      <para>Type: [in, optional] <b><see cref="ID2D1StrokeStyle" />*</b></para>
      <para>The style of the rounded rectangle's stroke, or <b>NULL</b> to paint a solid stroke. The default value is <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="DrawRoundedRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="D2D1.RoundedRect" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.DrawText">
    <summary>
      <para>Draws the specified text using the format information provided by an <see cref="IDWriteTextFormat" /> object.</para>
    </summary>
    <param name="string">
      <para>Type: <b>WCHAR*</b></para>
      <para>A pointer to an array of Unicode characters to draw.</para>
    </param>
    <param name="stringLength">
      <para>Type: <b>UINT</b></para>
      <para>The number of characters in <i>string</i>.</para>
    </param>
    <param name="textFormat">
      <para>Type: <b><see cref="IDWriteTextFormat" />*</b></para>
      <para>An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</para>
    </param>
    <param name="layoutRect">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The size and position of the area in which the text is drawn.</para>
    </param>
    <param name="defaultFillBrush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the text.</para>
    </param>
    <param name="options">
      <para>Type: <b><see cref="D2D1_DRAW_TEXT_OPTIONS" /></b></para>
      <para>A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
    </param>
    <param name="measuringMode">
      <para>Type: <b><see cref="DWRITE_MEASURING_MODE" /></b></para>
      <para>A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</para>
    </param>
    <remarks>
      <para>To create an <see cref="IDWriteTextFormat" /> object, create an <see cref="IDWriteFactory" /> and call its <see cref="CreateTextFormat" /> method.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-drawtext">DrawText</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="DWRITE_MEASURING_MODE" />
    <seealso cref="DrawTextLayout" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to--draw-text">How to: Draw Text</seealso>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/DirectWrite/text-formatting-and-layout">Text Formatting and Layout</seealso>
  </member>
  <member name="ID2D1RenderTarget.DrawText">
    <summary>
      <para>Draws the specified text using the format information provided by an <see cref="IDWriteTextFormat" /> object.</para>
    </summary>
    <param name="string">
      <para>Type: <b>WCHAR*</b></para>
      <para>A pointer to an array of Unicode characters to draw.</para>
    </param>
    <param name="stringLength">
      <para>Type: <b>UINT</b></para>
      <para>The number of characters in <i>string</i>.</para>
    </param>
    <param name="textFormat">
      <para>Type: <b><see cref="IDWriteTextFormat" />*</b></para>
      <para>An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</para>
    </param>
    <param name="layoutRect">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The size and position of the area in which the text is drawn.</para>
    </param>
    <param name="defaultFillBrush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the text.</para>
    </param>
    <param name="options">
      <para>Type: <b><see cref="D2D1_DRAW_TEXT_OPTIONS" /></b></para>
      <para>A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
    </param>
    <param name="measuringMode">
      <para>Type: <b><see cref="DWRITE_MEASURING_MODE" /></b></para>
      <para>A value that indicates how glyph metrics are used to measure text when it is formatted.  The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</para>
    </param>
    <remarks>
      <para>To create an <see cref="IDWriteTextFormat" /> object, create an <see cref="IDWriteFactory" /> and call its <see cref="CreateTextFormat" /> method.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-drawtext">DrawText</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="DWRITE_MEASURING_MODE" />
    <seealso cref="DrawTextLayout" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to--draw-text">How to: Draw Text</seealso>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/DirectWrite/text-formatting-and-layout">Text Formatting and Layout</seealso>
  </member>
  <member name="ID2D1RenderTarget.DrawTextLayout">
    <summary>
      <para>Draws the formatted text described by the specified <see cref="IDWriteTextLayout" /> object.</para>
    </summary>
    <param name="origin">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-point-2f">D2D1_POINT_2F</a></b></para>
      <para>The point, described in device-independent pixels, at which the upper-left corner of the text described by <i>textLayout</i> is drawn.</para>
    </param>
    <param name="textLayout">
      <para>Type: <b><see cref="IDWriteTextLayout" />*</b></para>
      <para>The formatted text to draw. Any drawing effects that do not inherit from <see cref="ID2D1Resource" /> are ignored. If there are drawing effects that inherit from <b>ID2D1Resource</b> that are not brushes, this method fails and the render target is put in an error state.</para>
    </param>
    <param name="defaultFillBrush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint any text in <i>textLayout</i> that does not already have a brush associated with it as a drawing effect (specified by the <see cref="IDWriteTextLayout.SetDrawingEffect" /> method).</para>
    </param>
    <param name="options">
      <para>Type: <b><see cref="D2D1_DRAW_TEXT_OPTIONS" /></b></para>
      <para>A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</para>
    </param>
    <remarks>
      <para>When drawing the same text repeatedly, using the <b>DrawTextLayout</b> method is more efficient than using the <see cref="DrawText" /> method because the text doesn't need to be formatted and the layout processed with each call.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>DrawTextLayout</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/DirectWrite/text-formatting-and-layout">Text Formatting and Layout</seealso>
  </member>
  <member name="ID2D1RenderTarget.EndDraw">
    <summary>
      <para>Ends drawing operations  on the render target and indicates the current error state and associated tags.</para>
    </summary>
    <param name="tag1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
    </param>
    <param name="tag2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred.</para>
    </returns>
    <remarks>
      <para>Drawing operations can only be issued between a <see cref="BeginDraw" /> and <b>EndDraw</b> call.</para>
      <para>
        <see cref="BeginDraw" /> and <b>EndDraw</b> are use to indicate that a render target is in use by the Direct2D system. Different implementations of <see cref="ID2D1RenderTarget" /> might behave differently when <b>BeginDraw</b> is called. An <see cref="ID2D1BitmapRenderTarget" /> may be locked between <b>BeginDraw</b>/<b>EndDraw</b> calls, a DXGI surface render target might be acquired on <b>BeginDraw</b> and released on <b>EndDraw</b>, while an <see cref="ID2D1HwndRenderTarget" /> may begin batching at <b>BeginDraw</b> and may present on <b>EndDraw</b>, for example.</para>
      <para>The <see cref="BeginDraw" /> method must be called before rendering operations can be called, though state-setting and state-retrieval operations can be performed even outside of <b>BeginDraw</b>/<b>EndDraw</b>.</para>
      <para>After <see cref="BeginDraw" /> is called, a render target will normally build up a batch of rendering commands, but defer processing of these commands until either an internal buffer is full, the <see cref="Flush" /> method is called, or until <b>EndDraw</b> is called. The <b>EndDraw</b> method causes any batched drawing operations to complete, and then returns an <b>HRESULT</b> indicating the success of the operations and, optionally, the tag state of the render target at the time the error occurred. The <b>EndDraw</b> method always succeeds: it should not be called twice even if a previous <b>EndDraw</b> resulted in a failing <b>HRESULT</b>.</para>
      <para>If <b>EndDraw</b> is called without a matched call to <see cref="BeginDraw" />, it returns an error indicating that <b>BeginDraw</b> must be called before <b>EndDraw</b>.</para>
      <para>Calling <b>BeginDraw</b> twice on a render target puts the target into an error state where nothing further is drawn, and returns an appropriate <b>HRESULT</b> and error information when <b>EndDraw</b> is called.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillEllipse">
    <summary>
      <para>Paints the interior of the specified ellipse.</para>
    </summary>
    <param name="ellipse">
      <para>Type: [in] <b>const <see cref="D2D1_ELLIPSE" />*</b></para>
      <para>The position and radius, in device-independent pixels, of the ellipse to paint.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the interior of the ellipse.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillEllipse" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillEllipse">
    <summary>
      <para>Paints the interior of the specified ellipse.</para>
    </summary>
    <param name="ellipse">
      <para>Type: [in] <b>const <see cref="D2D1_ELLIPSE" /> &amp;</b></para>
      <para>The position and radius, in device-independent pixels, of the ellipse to paint.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the interior of the ellipse.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillEllipse" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillGeometry">
    <summary>
      <para>Paints the interior of the specified geometry.</para>
    </summary>
    <param name="geometry">
      <para>Type: <b><see cref="ID2D1Geometry" />*</b></para>
      <para>The geometry to paint.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the geometry's interior.</para>
    </param>
    <param name="opacityBrush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The opacity mask to apply to the geometry, or <b>NULL</b> for no opacity mask. If an opacity mask (the <i>opacityBrush</i> parameter) is specified, <i>brush</i> must be an <see cref="ID2D1BitmapBrush" /> that has   its x- and y-extend modes set to <see cref="D2D1_EXTEND_MODE_CLAMP" />. For more information, see the Remarks section.</para>
    </param>
    <remarks>
      <para>If the <i>opacityBrush</i> parameter is not <b>NULL</b>, the alpha value of each pixel of the mapped <i>opacityBrush</i> is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored.</para>
      <para>The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by <i>brush</i>.</para>
      <para>When this method fails, it does not return an error code. To determine whether a drawing operation (such as <b>FillGeometry</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> method.</para>
    </remarks>
    <seealso cref="D2D1_FILL_MODE" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/geometries">Geometries</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-geometries-overview">Geometries Overview</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillMesh">
    <summary>
      <para>Paints the interior of the specified mesh.</para>
    </summary>
    <param name="mesh">
      <para>Type: <b><see cref="ID2D1Mesh" />*</b></para>
      <para>The mesh to paint.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the mesh.</para>
    </param>
    <remarks>
      <para>The current antialias mode of the render target must be <see cref="D2D1_ANTIALIAS_MODE_ALIASED" /> when <b>FillMesh</b> is called. To change the render target's antialias mode, use the <see cref="SetAntialiasMode" /> method.</para>
      <para>
        <b>FillMesh</b> does not expect a particular winding order for the triangles in the <see cref="ID2D1Mesh" />; both clockwise and counter-clockwise will work.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>FillMesh</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="D2D1_ANTIALIAS_MODE_ALIASED" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetAntialiasMode" />
  </member>
  <member name="ID2D1RenderTarget.FillOpacityMask">
    <summary>
      <para>Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</para>
    </summary>
    <param name="opacityMask">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by <i>sourceRectangle</i> is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by <i>destinationRectangle</i>.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the region of the render target specified by <i>destinationRectangle</i>.</para>
    </param>
    <param name="content">
      <para>Type: <b><see cref="D2D1_OPACITY_MASK_CONTENT" /></b></para>
      <para>The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</para>
      <para>
        <b>Note</b>  Starting with Windows 8, the <see cref="D2D1_OPACITY_MASK_CONTENT" /> is not required. See the <see cref="ID2D1DeviceContext.FillOpacityMask" /> method, which has no <b>D2D1_OPACITY_MASK_CONTENT</b> parameter.</para>
    </param>
    <param name="destinationRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The region of the render target to paint, in device-independent pixels, or <b>NULL</b>. If <b>NULL</b> is specified, the brush paints a rectangle the same size as <i>sourceRectangle</i>, but positioned on the origin. If <i>sourceRectangle</i> isn't specified, the brush paints a rectangle the same size as the <i>opacityMask</i> bitmap and positioned on the origin.</para>
    </param>
    <param name="sourceRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The region of the bitmap to use as the opacity mask, in device-independent pixels, or <b>NULL</b>. If <b>NULL</b> is specified, the entire bitmap is used.</para>
    </param>
    <remarks>
      <para>For this method to work properly, the render target must be using the <see cref="D2D1_ANTIALIAS_MODE_ALIASED" /> antialiasing mode. You can set the antialiasing mode by calling the <see cref="ID2D1RenderTarget.SetAntialiasMode" /> method.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-fillopacitymask">FillOpacityMask</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillOpacityMask">
    <summary>
      <para>Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</para>
    </summary>
    <param name="opacityMask">
      <para>Type: <b><see cref="ID2D1Bitmap" />*</b></para>
      <para>The opacity mask to apply to the brush. The alpha value of each pixel in the  region specified by <i>sourceRectangle</i> is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by <i>destinationRectangle</i>.</para>
    </param>
    <param name="brush">
      <para>Type: <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the region of the render target specified by <i>destinationRectangle</i>.</para>
    </param>
    <param name="content">
      <para>Type: <b><see cref="D2D1_OPACITY_MASK_CONTENT" /></b></para>
      <para>The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</para>
      <para>
        <b>Note</b>  Starting with Windows 8, the <see cref="D2D1_OPACITY_MASK_CONTENT" /> is not required. See the <see cref="ID2D1DeviceContext.FillOpacityMask" /> method, which has no <b>D2D1_OPACITY_MASK_CONTENT</b> parameter.</para>
    </param>
    <param name="destinationRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The region of the render target to paint, in device-independent pixels.</para>
    </param>
    <param name="sourceRectangle">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a></b></para>
      <para>The region of the bitmap to use as the opacity mask, in device-independent pixels.</para>
    </param>
    <remarks>
      <para>For this method to work properly, the render target must be using the <see cref="D2D1_ANTIALIAS_MODE_ALIASED" /> antialiasing mode. You can set the antialiasing mode by calling the <see cref="ID2D1RenderTarget.SetAntialiasMode" /> method.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <a href="https://docs.microsoft.com//windows/win32/Direct2D/id2d1rendertarget-fillopacitymask">FillOpacityMask</a>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillRectangle">
    <summary>
      <para>Paints the interior of the specified rectangle.</para>
    </summary>
    <param name="rect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The dimension of the rectangle to paint, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rectangle's interior.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-quickstart">Creating a Simple Direct2D Application</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillRectangle">
    <summary>
      <para>Paints the interior of the specified rectangle.</para>
    </summary>
    <param name="rect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> &amp;</b></para>
      <para>The dimension of the rectangle to paint, in device-independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the rectangle's interior.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-quickstart">Creating a Simple Direct2D Application</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillRoundedRectangle">
    <summary>
      <para>Paints the interior of the specified rounded rectangle.</para>
    </summary>
    <param name="roundedRect">
      <para>Type: [in] <b>const <see cref="D2D1_ROUNDED_RECT" />*</b></para>
      <para>The dimensions of the rounded rectangle to paint, in device independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the interior of the rounded rectangle.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillRoundedRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="D2D1.RoundedRect" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.FillRoundedRectangle">
    <summary>
      <para>Paints the interior of the specified rounded rectangle.</para>
    </summary>
    <param name="roundedRect">
      <para>Type: [in] <b>const <see cref="D2D1_ROUNDED_RECT" /> &amp;</b></para>
      <para>The dimensions of the rounded rectangle to paint, in device independent pixels.</para>
    </param>
    <param name="brush">
      <para>Type: [in] <b><see cref="ID2D1Brush" />*</b></para>
      <para>The brush used to paint the interior of the rounded rectangle.</para>
    </param>
    <remarks>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="FillRoundedRectangle" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="D2D1.RoundedRect" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-draw-an-ellipse">How to Draw and Fill a Basic Shape</seealso>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.Flush">
    <summary>
      <para>Executes all pending drawing commands.</para>
    </summary>
    <param name="tag1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
    </param>
    <param name="tag2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0).</para>
    </returns>
    <remarks>
      <para>This command does not flush the Direct3D device context that is associated with the render target.</para>
      <para>Calling this method resets the error state of the render target.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetAntialiasMode">
    <summary>
      <para>Retrieves the current antialiasing mode for nontext drawing operations.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D2D1_ANTIALIAS_MODE" /></b></para>
      <para>The current antialiasing mode for nontext drawing operations.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetAntialiasMode" />
  </member>
  <member name="ID2D1RenderTarget.GetDpi">
    <summary>
      <para>Return the render target's dots per inch (DPI).</para>
    </summary>
    <param name="dpiX">
      <para>Type: <b>FLOAT*</b></para>
      <para>When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized.</para>
    </param>
    <param name="dpiY">
      <para>Type: <b>FLOAT*</b></para>
      <para>When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized.</para>
    </param>
    <remarks>
      <para>This method indicates the mapping from pixel space to device-independent space  for the render target.</para>
      <para>For <see cref="ID2D1HwndRenderTarget" />, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetMaximumBitmapSize">
    <summary>
      <para>Gets the maximum size, in device-dependent units (pixels), of  any one bitmap dimension supported by the render target.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT32</b></para>
      <para>The maximum size, in pixels, of  any one bitmap dimension supported by the render target.</para>
    </returns>
    <remarks>
      <para>This method returns the maximum texture size of the Direct3D device.</para>
      <para>
        <b>Note</b>  The software renderer and WARP devices return the value of 16 megapixels (16<i>1024</i>1024).  You can create a <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-portal">Direct2D</a> texture that is this size, but not a Direct3D texture that is this size.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetPixelFormat">
    <summary>
      <para>Retrieves the pixel format and alpha mode of the render target.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D2D1_PIXEL_FORMAT" /></b></para>
      <para>The pixel format and alpha mode of the render target.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetPixelSize">
    <summary>
      <para>Returns the size of the render target in device pixels.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a></b></para>
      <para>The size of the render target in device pixels.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetSize">
    <summary>
      <para>Returns the size of the render target in device-independent pixels.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-f">D2D1_SIZE_F</a></b></para>
      <para>The current size of the render target in device-independent pixels.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetTags">
    <summary>
      <para>Gets the label for subsequent drawing operations.</para>
    </summary>
    <param name="tag1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
    </param>
    <param name="tag2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a>*</b></para>
      <para>When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</para>
    </param>
    <remarks>
      <para>If the same address is passed for both parameters, both parameters receive the value of the second tag.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.GetTextAntialiasMode">
    <summary>
      <para>Gets the current antialiasing mode for text and glyph drawing operations.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D2D1_TEXT_ANTIALIAS_MODE" /></b></para>
      <para>The current antialiasing mode for text and glyph drawing operations.</para>
    </returns>
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetTextAntialiasMode" />
  </member>
  <member name="ID2D1RenderTarget.GetTextRenderingParams">
    <summary>
      <para>Retrieves the render target's current text rendering options.</para>
    </summary>
    <param name="textRenderingParams">
      <para>Type: <b><see cref="IDWriteRenderingParams" />**</b></para>
      <para>When this method returns, <i>textRenderingParams</i> contains the address  of a pointer to the render target's current text rendering options.</para>
    </param>
    <remarks>
      <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <see cref="SetTextAntialiasMode" />), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetTextAntialiasMode" />
    <seealso cref="SetTextRenderingParams" />
  </member>
  <member name="ID2D1RenderTarget.GetTransform">
    <summary>
      <para>Gets the current transform of the render target.</para>
    </summary>
    <param name="transform">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
      <para>When this returns, contains the current transform of the render target. This parameter is passed uninitialized.</para>
    </param>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.IsSupported">
    <summary>
      <para>Indicates whether the render target supports the specified properties.</para>
    </summary>
    <param name="renderTargetProperties">
      <para>Type: <b>const <see cref="D2D1_RENDER_TARGET_PROPERTIES" />*</b></para>
      <para>The render target properties to test.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>
        <b>TRUE</b> if the specified render target properties are supported by this render target; otherwise, <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>This method does not evaluate the DPI settings specified by the <i>renderTargetProperties</i> parameter.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.IsSupported">
    <summary>
      <para>Indicates whether the render target supports the specified properties.</para>
    </summary>
    <param name="renderTargetProperties">
      <para>Type: <b>const <see cref="D2D1_RENDER_TARGET_PROPERTIES" />*</b></para>
      <para>The render target properties to test.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>
        <b>TRUE</b> if the specified render target properties are supported by this render target; otherwise, <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>This method does not evaluate the DPI settings specified by the <i>renderTargetProperties</i> parameter.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.PopAxisAlignedClip">
    <summary>
      <para>Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</para>
    </summary>
    <remarks>
      <para>A <see cref="PushAxisAlignedClip" />/<b>PopAxisAlignedClip</b> pair can occur around or within a <see cref="PushLayer" />/<see cref="PopLayer" /> pair, but may not overlap. For example, a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopLayer</b>, <b>PopAxisAlignedClip</b>  sequence is valid, but a <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> sequence is not.</para>
      <para>
        <b>PopAxisAlignedClip</b> must be called once for every call to <see cref="PushAxisAlignedClip" />.</para>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-clip-with-axis-aligned-rects">How to Clip with an Axis-Aligned Clip Rectangle</a>.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopAxisAlignedClip</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.PopLayer">
    <summary>
      <para>Stops redirecting drawing operations to the layer that is specified by the last <see cref="PushLayer" /> call.</para>
    </summary>
    <remarks>
      <para>A <b>PopLayer</b>  must match a previous <see cref="PushLayer" /> call.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <b>PopLayer</b>) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
    <seealso cref="PushLayer" />
  </member>
  <member name="ID2D1RenderTarget.PushAxisAlignedClip">
    <summary>
      <para>Specifies a rectangle to which all subsequent drawing operations are clipped.</para>
    </summary>
    <param name="clipRect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>The size and position of the clipping area, in device-independent pixels.</para>
    </param>
    <param name="antialiasMode">
      <para>Type: [in] <b><see cref="D2D1_ANTIALIAS_MODE" /></b></para>
      <para>The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the <see cref="PopAxisAlignedClip" /> method is called, and does not apply to each primitive within the layer.</para>
    </param>
    <remarks>
      <para>The <i>clipRect</i> is transformed by the current world transform set on the render target. After the transform is applied to the <i>clipRect</i> that is passed in, the axis-aligned bounding box for the <i>clipRect</i> is computed. For efficiency, the contents are clipped to this axis-aligned bounding box and not to the original <i>clipRect</i> that is passed in.</para>
      <para>The following diagrams show how a rotation transform is applied to the render target, the resulting <i>clipRect</i>, and a calculated axis-aligned bounding box.</para>
      <list type="number">
        <item>
          <description>
            <para>Assume the rectangle in the following illustration is a render target that is aligned to the screen pixels.</para>
            <para>
              <img alt="Illustration of a rectangle (render target)" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step1_rendertarget.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>Apply a rotation transform to the render target. In the following illustration, the black rectangle represents the original render target and the red dashed rectangle represents the transformed render target.</para>
            <para>
              <img alt="Illustration of a rotated rectangle (transformed render target)" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step2_transformed.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>After calling <b>PushAxisAlignedClip</b>, the rotation transform is applied to the <i>clipRect</i>. In the following illustration, the blue rectangle represents the transformed <i>clipRect</i>.</para>
            <para>
              <img alt="Illustration of a small blue rectangle (transformed clipRect) inside a rotated rectangle" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step3_clipRecttransformed.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>The axis-aligned bounding box is calculated. The green dashed rectangle represents the bounding box in the following illustration. All contents are clipped to this axis-aligned bounding box.</para>
            <para>
              <img alt="Illustration of a green bounding box around a small blue rectangle inside a rotated rectangle" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step4_boundingbox.png" />
            </para>
          </description>
        </item>
      </list>
      <b>Note</b>  If rendering operations fail or if <see cref="PopAxisAlignedClip" /> is not called, clip rects may cause some artifacts on the render target. <b>PopAxisAlignedClip</b> can be considered a drawing operation that is designed to fix the borders of a clipping region. Without this call, the borders of a clipped area may be not antialiased or otherwise corrected.
<para>The <b>PushAxisAlignedClip</b> and <see cref="PopAxisAlignedClip" /> must match. Otherwise, the error state is set. For the render target to continue receiving new commands, you can call <see cref="Flush" /> to clear the error.</para><para>A <b>PushAxisAlignedClip</b> and <see cref="PopAxisAlignedClip" /> pair can occur around or within a PushLayer and PopLayer, but cannot overlap. For example, the sequence of <b>PushAxisAlignedClip</b>, <see cref="PushLayer" />, <see cref="PopLayer" />, <b>PopAxisAlignedClip</b> is valid, but the sequence of <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> is invalid.</para><para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="PushAxisAlignedClip" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para></remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.PushAxisAlignedClip">
    <summary>
      <para>Specifies a rectangle to which all subsequent drawing operations are clipped.</para>
    </summary>
    <param name="clipRect">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> &amp;</b></para>
      <para>The size and position of the clipping area, in device-independent pixels.</para>
    </param>
    <param name="antialiasMode">
      <para>Type: [in] <b><see cref="D2D1_ANTIALIAS_MODE" /></b></para>
      <para>The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the <see cref="PopAxisAlignedClip" /> method is called, and does not apply to each primitive within the layer.</para>
    </param>
    <remarks>
      <para>The <i>clipRect</i> is transformed by the current world transform set on the render target. After the transform is applied to the <i>clipRect</i> that is passed in, the axis-aligned bounding box for the <i>clipRect</i> is computed. For efficiency, the contents are clipped to this axis-aligned bounding box and not to the original <i>clipRect</i> that is passed in.</para>
      <para>The following diagrams show how a rotation transform is applied to the render target, the resulting <i>clipRect</i>, and a calculated axis-aligned bounding box.</para>
      <list type="number">
        <item>
          <description>
            <para>Assume the rectangle in the following illustration is a render target that is aligned to the screen pixels.</para>
            <para>
              <img alt="Illustration of a rectangle (render target)" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step1_rendertarget.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>Apply a rotation transform to the render target. In the following illustration, the black rectangle represents the original render target and the red dashed rectangle represents the transformed render target.</para>
            <para>
              <img alt="Illustration of a rotated rectangle (transformed render target)" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step2_transformed.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>After calling <b>PushAxisAlignedClip</b>, the rotation transform is applied to the <i>clipRect</i>. In the following illustration, the blue rectangle represents the transformed <i>clipRect</i>.</para>
            <para>
              <img alt="Illustration of a small blue rectangle (transformed clipRect) inside a rotated rectangle" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step3_clipRecttransformed.png" />
            </para>
          </description>
        </item>
        <item>
          <description>
            <para>The axis-aligned bounding box is calculated. The green dashed rectangle represents the bounding box in the following illustration. All contents are clipped to this axis-aligned bounding box.</para>
            <para>
              <img alt="Illustration of a green bounding box around a small blue rectangle inside a rotated rectangle" src="https://docs.microsoft.com/windows/win32/api/d2d1mages/pushaxisalignedclip_step4_boundingbox.png" />
            </para>
          </description>
        </item>
      </list>
      <b>Note</b>  If rendering operations fail or if <see cref="PopAxisAlignedClip" /> is not called, clip rects may cause some artifacts on the render target. <b>PopAxisAlignedClip</b> can be considered a drawing operation that is designed to fix the borders of a clipping region. Without this call, the borders of a clipped area may be not antialiased or otherwise corrected.
<para>The <b>PushAxisAlignedClip</b> and <see cref="PopAxisAlignedClip" /> must match. Otherwise, the error state is set. For the render target to continue receiving new commands, you can call <see cref="Flush" /> to clear the error.</para><para>A <b>PushAxisAlignedClip</b> and <see cref="PopAxisAlignedClip" /> pair can occur around or within a PushLayer and PopLayer, but cannot overlap. For example, the sequence of <b>PushAxisAlignedClip</b>, <see cref="PushLayer" />, <see cref="PopLayer" />, <b>PopAxisAlignedClip</b> is valid, but the sequence of <b>PushAxisAlignedClip</b>, <b>PushLayer</b>, <b>PopAxisAlignedClip</b>, <b>PopLayer</b> is invalid.</para><para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="PushAxisAlignedClip" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para></remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.PushLayer">
    <summary>
      <para>Adds the specified layer to the render target so that it receives all subsequent drawing operations until <see cref="PopLayer" /> is called.</para>
    </summary>
    <param name="layerParameters">
      <para>Type: <b>const <see cref="D2D1_LAYER_PARAMETERS" />*</b></para>
      <para>The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</para>
    </param>
    <param name="layer">
      <para>Type: <b><see cref="ID2D1Layer" />*</b></para>
      <para>The layer that receives subsequent drawing operations.</para>
      <para>
        <b>Note</b>  Starting with Windows 8, this parameter is optional. If a layer is not specified, Direct2D manages the layer resource automatically.</para>
    </param>
    <remarks>
      <para>The <see cref="PushLayer" /> method allows a caller to begin redirecting rendering to a layer. All rendering operations are valid in a layer. The location of the layer is affected by the world transform set on the render target.</para>
      <para>Each <see cref="PushLayer" /> must have a matching <see cref="PopLayer" /> call. If there are more <b>PopLayer</b> calls than <b>PushLayer</b> calls, the render target is placed into an error state. If <see cref="Flush" /> is called before all outstanding layers are popped, the render target is placed into an error state, and an error is returned. The error state can be cleared by a call to <see cref="EndDraw" />.</para>
      <para>A particular <see cref="ID2D1Layer" /> resource can be active only at one time. In other words, you cannot call a <see cref="PushLayer" /> method, and then  immediately follow with another <b>PushLayer</b> method with the same layer resource. Instead, you must call the second <b>PushLayer</b> method with different layer resources.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="PushLayer" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
    <seealso cref="PopLayer" />
  </member>
  <member name="ID2D1RenderTarget.PushLayer">
    <summary>
      <para>Adds the specified layer to the render target so that it receives all subsequent drawing operations until <see cref="PopLayer" /> is called.</para>
    </summary>
    <param name="layerParameters">
      <para>Type: <b>const <see cref="D2D1_LAYER_PARAMETERS" /></b></para>
      <para>The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</para>
    </param>
    <param name="layer">
      <para>Type: <b><see cref="ID2D1Layer" />*</b></para>
      <para>The layer that receives subsequent drawing operations.</para>
      <para>
        <b>Note</b>  Starting with Windows 8, this parameter is optional. If a layer is not specified, Direct2D manages the layer resource automatically.</para>
    </param>
    <remarks>
      <para>The <b>PushLayer</b> method allows a caller to begin redirecting rendering to a layer. All rendering operations are valid in a layer. The location of the layer is affected by the world transform set on the render target.</para>
      <para>Each <see cref="PushLayer" /> must have a matching <see cref="PopLayer" /> call. If there are more <b>PopLayer</b> calls than <b>PushLayer</b> calls, the render target is placed into an error state. If <see cref="Flush" /> is called before all outstanding layers are popped, the render target is placed into an error state, and an error is returned. The error state can be cleared by a call to <see cref="EndDraw" />.</para>
      <para>A particular <see cref="ID2D1Layer" /> resource can be active only at one time. In other words, you cannot call a <b>PushLayer</b>  method, and then immediately follow  with another <b>PushLayer</b> method with the same layer resource. Instead, you must call the second <b>PushLayer</b> method with different layer resources.</para>
      <para>This method doesn't return an error code if it fails. To determine whether a drawing operation (such as <see cref="PushLayer" />) failed, check the result returned by the <see cref="ID2D1RenderTarget.EndDraw" /> or <see cref="ID2D1RenderTarget.Flush" /> methods.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-layers-overview">Layers Overview</seealso>
    <seealso cref="PopLayer" />
  </member>
  <member name="ID2D1RenderTarget.RestoreDrawingState">
    <summary>
      <para>Sets the render target's drawing state to that of the specified <see cref="ID2D1DrawingStateBlock" />.</para>
    </summary>
    <param name="drawingStateBlock">
      <para>Type: <b><see cref="ID2D1DrawingStateBlock" />*</b></para>
      <para>The new drawing state of the render target.</para>
    </param>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.SaveDrawingState">
    <summary>
      <para>Saves the current drawing state to the specified <see cref="ID2D1DrawingStateBlock" />.</para>
    </summary>
    <param name="drawingStateBlock">
      <para>Type: <b><see cref="ID2D1DrawingStateBlock" />*</b></para>
      <para>When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</para>
    </param>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.SetAntialiasMode">
    <summary>
      <para>Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</para>
    </summary>
    <param name="antialiasMode">
      <para>Type: <b><see cref="D2D1_ANTIALIAS_MODE" /></b></para>
      <para>The antialiasing mode for future drawing operations.</para>
    </param>
    <remarks>
      <para>To specify the antialiasing mode for text and glyph operations, use the <see cref="SetTextAntialiasMode" /> method.</para>
    </remarks>
    <seealso cref="GetAntialiasMode" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetTextAntialiasMode" />
  </member>
  <member name="ID2D1RenderTarget.SetDpi">
    <summary>
      <para>Sets the dots per inch (DPI) of the render target.</para>
    </summary>
    <param name="dpiX">
      <para>Type: <b>FLOAT</b></para>
      <para>A value greater than or equal to zero that specifies the horizontal DPI of the render target.</para>
    </param>
    <param name="dpiY">
      <para>Type: <b>FLOAT</b></para>
      <para>A value greater than or equal to zero that specifies the vertical DPI of the render target.</para>
    </param>
    <remarks>
      <para>This method specifies the mapping from pixel space to device-independent space  for the render target.  If both <i>dpiX</i> and <i>dpiY</i> are 0, the factory-read system DPI is chosen. If one parameter is zero and the other unspecified, the DPI is not changed.</para>
      <para>For <see cref="ID2D1HwndRenderTarget" />, the DPI defaults to the most recently factory-read system DPI. The default value for all other render targets is 96 DPI.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.SetTags">
    <summary>
      <para>Specifies a label for subsequent drawing operations.</para>
    </summary>
    <param name="tag1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
      <para>A label to apply to subsequent drawing operations.</para>
    </param>
    <param name="tag2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-tag">D2D1_TAG</a></b></para>
      <para>A label to apply to subsequent drawing operations.</para>
    </param>
    <remarks>
      <para>The labels specified by this method are printed by debug error messages. If no tag is set, the default value for each tag is 0.</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.SetTextAntialiasMode">
    <summary>
      <para>Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</para>
    </summary>
    <param name="textAntialiasMode">
      <para>Type: <b><see cref="D2D1_TEXT_ANTIALIAS_MODE" /></b></para>
      <para>The antialiasing mode to use for subsequent text and glyph drawing operations.</para>
    </param>
    <seealso cref="GetTextAntialiasMode" />
    <seealso cref="ID2D1RenderTarget" />
  </member>
  <member name="ID2D1RenderTarget.SetTextRenderingParams">
    <summary>
      <para>Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</para>
    </summary>
    <param name="textRenderingParams">
      <para>Type: <b><see cref="IDWriteRenderingParams" />*</b></para>
      <para>The text rendering options to be applied to all subsequent text and glyph drawing operations; <b>NULL</b> to clear current text rendering options.</para>
    </param>
    <remarks>
      <para>If the settings specified by  <i>textRenderingParams</i> are incompatible with the render target's text antialiasing mode (specified by <see cref="SetTextAntialiasMode" />), subsequent text and glyph drawing operations will fail and put the render target into an error state.</para>
    </remarks>
    <seealso cref="GetTextRenderingParams" />
    <seealso cref="ID2D1RenderTarget" />
    <seealso cref="SetTextAntialiasMode" />
  </member>
  <member name="ID2D1RenderTarget.SetTransform">
    <summary>
      <para>Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</para>
    </summary>
    <param name="transform">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
      <para>The transform to apply to the render target.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-apply-multiple-transforms">How to Apply Multiple Transforms to an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-rotate">How to Rotate an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-scale">How to Scale an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-skew">How to Skew an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-translate">How to Translate an Object</seealso>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-transforms-overview">Transforms Overview</seealso>
  </member>
  <member name="ID2D1RenderTarget.SetTransform">
    <summary>
      <para>Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</para>
    </summary>
    <param name="transform">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a></b></para>
      <para>The transform to apply to the render target.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-apply-multiple-transforms">How to Apply Multiple Transforms to an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-rotate">How to Rotate an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-scale">How to Scale an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-skew">How to Skew an Object</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/how-to-translate">How to Translate an Object</seealso>
    <seealso cref="ID2D1RenderTarget" />
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-transforms-overview">Transforms Overview</seealso>
  </member>
  <member name="ID2D1RenderTarget">
    <summary>
      <para>Represents an object that can receive drawing commands. Interfaces that inherit from <b>ID2D1RenderTarget</b> render the drawing commands they receive in different ways.</para>
    </summary>
    <remarks>
      <para>Your application should create render targets once and hold onto them for the life of the application or until the render target's  <see cref="EndDraw" /> method returns the <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-error-codes">D2DERR_RECREATE_TARGET</a>  error. When you receive this error, you need to recreate the render target (and any resources it created).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/the-direct2d-api">Direct2D API Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/win32/Direct2D/getting-started-with-direct2d-nav">Getting Started</seealso>
    <seealso cref="ID2D1Resource" />
  </member>
</doc>