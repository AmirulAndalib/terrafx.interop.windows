<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1RenderTarget.BeginDraw">
    <summary>Initiates drawing on this render target.</summary>
  </member>
  <member name="ID2D1RenderTarget.Clear">
    <summary>Clears the drawing area to the specified color.</summary>
    <param name="clearColor">The color to which the drawing area is cleared, or <b>NULL</b> for transparent black.</param>
  </member>
  <member name="ID2D1RenderTarget.Clear">
    <summary>Clears the drawing area to the specified color.</summary>
    <param name="clearColor">The color to which the drawing area is cleared.</param>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmap">
    <summary>Creates an uninitialized Direct2D bitmap.</summary>
    <param name="size">The dimension of the bitmap to create in pixels.</param>
    <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
    <param name="bitmap">When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</summary>
    <param name="size">The dimensions of the bitmap to create, in pixels.</param>
    <param name="srcData">A pointer to the memory location of the image data, or <b>NULL</b> to create an uninitialized bitmap.</param>
    <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding. If <i>srcData</i> is <b>NULL</b>, this value is ignored. (Note that pitch is also sometimes called <i>stride</i>.)</param>
    <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
    <param name="bitmap">The bitmap contents of the new brush.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmap">
    <summary>Creates a Direct2D bitmap from a pointer to in-memory source data.</summary>
    <param name="size">The dimensions of the bitmap to create in pixels.</param>
    <param name="srcData">A pointer to the memory location of the image data, or <b>NULL</b> to create an uninitialized bitmap.</param>
    <param name="pitch">The byte count of each scanline, which is equal to (the image width in pixels × the number of bytes per pixel) + memory padding. If <i>srcData</i> is <b>NULL</b>, this value is ignored. (Note that pitch is also sometimes called <i>stride</i>.)</param>
    <param name="bitmapProperties">The pixel format and dots per inch (DPI) of the bitmap to create.</param>
    <param name="bitmap">When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</summary>
    <param name="bitmap">The bitmap contents of the new brush.</param>
    <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush defaults to the <see cref="D2D1_EXTEND_MODE_CLAMP" /> horizontal and vertical extend modes and the <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" /> interpolation mode.</param>
    <param name="brushProperties">A structure that contains the opacity and transform of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush sets the opacity member to 1.0F and the transform member to the identity matrix.</param>
    <param name="bitmapBrush">When this method returns, this output parameter contains a pointer to a pointer to the new brush. Pass this parameter uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap.</summary>
    <param name="bitmap">The bitmap contents of the new brush.</param>
    <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush defaults to the <see cref="D2D1_EXTEND_MODE_CLAMP" /> horizontal and vertical extend modes and the <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" /> interpolation mode.</param>
    <param name="brushProperties">A structure that contains the opacity and transform of the new brush, or <b>NULL</b>. If you set this parameter to <b>NULL</b>, the brush sets the opacity member to 1.0F and the transform member to the identity matrix.</param>
    <param name="bitmapBrush">When this method returns, this output parameter contains a pointer to a pointer to the new brush. Pass this parameter uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap. The brush uses the default values for its opacity and transform.</summary>
    <param name="bitmap">The bitmap contents of the new brush.</param>
    <param name="bitmapBrushProperties">The extend modes and interpolation mode of the new brush.</param>
    <param name="bitmapBrush">When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapBrush">
    <summary>Creates an <see cref="ID2D1BitmapBrush" /> from the specified bitmap. The brush uses the default values for its extend mode, interpolation mode, opacity, and transform.</summary>
    <param name="bitmap">The bitmap contents of the new brush.</param>
    <param name="bitmapBrush">When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</summary>
    <param name="wicBitmapSource">The WIC bitmap to copy.</param>
    <param name="bitmapProperties">The pixel format and DPI of the bitmap to create. The pixel format must match the pixel format of <i>wicBitmapSource</i>, or the method will fail. To prevent a mismatch, you can pass <b>NULL</b> or pass the value obtained from calling the <see cref="D2D1.PixelFormat" /> helper function without specifying any parameter values. If both <i>dpiX</i> and <i>dpiY</i> are 0.0f, the default DPI, 96, is used. DPI information embedded in <i>wicBitmapSource</i> is ignored.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</summary>
    <param name="wicBitmapSource">The WIC bitmap to copy.</param>
    <param name="bitmapProperties">The pixel format and DPI of the bitmap to create. The pixel format must match the pixel format of <i>wicBitmapSource</i>, or the method will fail. To prevent a mismatch, you can pass <b>NULL</b> or pass the value obtained from calling the <see cref="D2D1.PixelFormat" /> helper function without specifying any parameter values. If both <i>dpiX</i> and <i>dpiY</i> are 0.0f, the default DPI, 96, is used. DPI information embedded in <i>wicBitmapSource</i> is ignored.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateBitmapFromWicBitmap">
    <summary>Creates an <see cref="ID2D1Bitmap" /> by copying the specified Microsoft Windows Imaging Component (WIC) bitmap.</summary>
    <param name="wicBitmapSource">The WIC bitmap to copy.</param>
    <param name="bitmap">When this method returns, contains a pointer to a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</summary>
    <param name="desiredSize">The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</param>
    <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
    <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</summary>
    <param name="desiredSize">The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</param>
    <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
    <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</summary>
    <param name="desiredSize">The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</param>
    <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
    <param name="desiredFormat">The desired pixel format and alpha mode of the new render target. If the pixel format is set to DXGI_FORMAT_UNKNOWN, the new render target uses the same pixel format as the original render target. If the alpha mode is <see cref="D2D1_ALPHA_MODE_UNKNOWN" />, the alpha mode of the new render target defaults to <b>D2D1_ALPHA_MODE_PREMULTIPLIED</b>. For information about supported pixel formats, see <a href="https://docs.microsoft.com//windows/win32/Direct2D/supported-pixel-formats-and-alpha-modes">Supported Pixel Formats and Alpha Modes</a>.</param>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</summary>
    <param name="desiredSize">The desired size of the new render target (in device-independent pixels), if it should be different from the original render target. For more info, see the Remarks section.</param>
    <param name="desiredPixelSize">The desired size of the new render target in pixels if it should be different from the original render target. For more information, see the Remarks section.</param>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target.</summary>
    <param name="desiredSize">The desired size of the new render target in device-independent pixels. The pixel size is computed from the desired size using the parent target DPI. If the <i>desiredSize</i> maps to a integer-pixel size, the DPI of the compatible render target is the same as the DPI of the parent target. If <i>desiredSize</i> maps to a fractional-pixel size, the pixel size is rounded up to the nearest integer and the DPI for the compatible render target is slightly higher than the DPI of the parent render target. In all cases, the coordinate (<i>desiredSize</i>.width, <i>desiredSize</i>.height) maps to the lower-right corner of the compatible render target.</param>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateCompatibleRenderTarget">
    <summary>Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target and has the same size, DPI, and pixel format (but not alpha mode) as the current render target.</summary>
    <param name="bitmapRenderTarget">When this method returns, contains a pointer to a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateGradientStopCollection">
    <summary>Creates an <see cref="ID2D1GradientStopCollection" /> from the specified array of <see cref="D2D1_GRADIENT_STOP" /> structures.</summary>
    <param name="gradientStops">A pointer to an array of <see cref="D2D1_GRADIENT_STOP" /> structures.</param>
    <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the <i>gradientStops</i> array.</param>
    <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
    <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
    <param name="gradientStopCollection">When this method returns, contains a pointer to a pointer to the new gradient stop collection.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateGradientStopCollection">
    <summary>Creates an <see cref="ID2D1GradientStopCollection" /> from the specified gradient stops that uses the <see cref="D2D1_GAMMA_2_2" /> color interpolation gamma and the clamp extend mode.</summary>
    <param name="gradientStops">A pointer to an array of <see cref="D2D1_GRADIENT_STOP" /> structures.</param>
    <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the <i>gradientStops</i> array.</param>
    <param name="gradientStopCollection">When this method returns, contains a pointer to a pointer to the new gradient stop collection.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>Creates a layer resource that can be used with this render target and its compatible render targets.</summary>
    <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when <see cref="PushLayer" /> is called.</param>
    <param name="layer">When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>Creates a layer resource that can be used with this render target and its compatible render targets. The new layer has the specified initial size.</summary>
    <param name="size">If (0, 0) is specified, no backing store is created behind the layer resource. The layer resource is allocated to the minimum size when <see cref="PushLayer" /> is called.</param>
    <param name="layer">When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLayer">
    <summary>Creates a layer resource that can be used with this render target and its compatible render targets.</summary>
    <param name="layer">When the method returns, contains a pointer to a pointer to the new layer. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>Creates an <see cref="ID2D1LinearGradientBrush" /> object for painting areas with a linear gradient.</summary>
    <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
    <param name="brushProperties">The transform and base opacity of the new brush.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
    <param name="linearGradientBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>Creates an <see cref="ID2D1LinearGradientBrush" /> that contains the specified gradient stops and has the specified transform and base opacity.</summary>
    <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
    <param name="brushProperties">The transform and base opacity of the new brush.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
    <param name="linearGradientBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateLinearGradientBrush">
    <summary>Creates an <see cref="ID2D1LinearGradientBrush" /> that contains the specified gradient stops, has no transform, and has a base opacity of 1.0.</summary>
    <param name="linearGradientBrushProperties">The start and end points of the gradient.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient line.</param>
    <param name="linearGradientBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateMesh">
    <summary>Create a mesh that uses triangles to describe a shape.</summary>
    <param name="mesh">When this method returns, contains a pointer to a pointer to the new mesh.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>Creates an <see cref="ID2D1RadialGradientBrush" /> object that can be used to paint areas with a radial gradient.</summary>
    <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
    <param name="brushProperties">The transform and base opacity of the new brush.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
    <param name="radialGradientBrush">When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>Creates an <see cref="ID2D1RadialGradientBrush" /> that contains the specified gradient stops and has the specified transform and base opacity.</summary>
    <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
    <param name="brushProperties">The transform and base opacity of the new brush.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
    <param name="radialGradientBrush">When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateRadialGradientBrush">
    <summary>Creates an <see cref="ID2D1RadialGradientBrush" /> that contains the specified gradient stops, has no transform, and has a base opacity of 1.0.</summary>
    <param name="radialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
    <param name="gradientStopCollection">A collection of <see cref="D2D1_GRADIENT_STOP" /> structures that describe the colors in the brush's gradient and their locations along the gradient.</param>
    <param name="radialGradientBrush">When this method returns, contains a pointer to a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateSharedBitmap">
    <summary>Creates an <see cref="ID2D1Bitmap" /> whose data is shared with another resource.</summary>
    <param name="riid">The interface ID of the object supplying the source data.</param>
    <param name="data">An <see cref="ID2D1Bitmap" />, <see cref="IDXGISurface" />, or an <see cref="IWICBitmapLock" /> that contains the data to share with the new <b>ID2D1Bitmap</b>. For more information, see the Remarks section.</param>
    <param name="bitmapProperties">The pixel format and DPI of the bitmap to create . The <see cref="DXGI_FORMAT" /> portion of the pixel format must match the <see cref="DXGI_FORMAT" /> of <i>data</i> or the method will fail, but the alpha modes don't have to match. To prevent a mismatch, you can pass <b>NULL</b> or the value obtained from the <see cref="D2D1.PixelFormat" /> helper function. The DPI settings do not have to match those of <i>data</i>. If both <i>dpiX</i> and <i>dpiY</i> are 0.0f, the DPI of the render target is used.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to the new bitmap. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>Creates a new <see cref="ID2D1SolidColorBrush" /> that can be used to paint areas with a solid color.</summary>
    <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
    <param name="brushProperties">The base opacity of the brush.</param>
    <param name="solidColorBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>Creates a new <see cref="ID2D1SolidColorBrush" /> that has the specified color and opacity.</summary>
    <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
    <param name="brushProperties">The base opacity of the brush.</param>
    <param name="solidColorBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.CreateSolidColorBrush">
    <summary>Creates a new <see cref="ID2D1SolidColorBrush" /> that has the specified color and a base opacity of 1.0f.</summary>
    <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
    <param name="solidColorBrush">When this method returns, contains the address of a pointer to the new brush. This parameter is passed uninitialized.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</returns>
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>Draws the specified bitmap after scaling it to the size of the specified rectangle.</summary>
    <param name="bitmap">The bitmap to render.</param>
    <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn; <b>NULL</b> to draw the selected portion of the bitmap at the origin of the render target. If the rectangle is specified but not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
    <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents. The default value is 1.0f.</param>
    <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />.</param>
    <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to be drawn; <b>NULL</b> to draw the entire bitmap.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>Draws the specified bitmap after scaling it to the size of the specified rectangle.</summary>
    <param name="bitmap">The bitmap to render.</param>
    <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
    <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies the opacity value to be applied to the bitmap; this value is multiplied against the alpha values of the bitmap's contents. Default is 1.0f.</param>
    <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation. The default value is <see cref="D2D1_BITMAP_INTERPOLATION_MODE_LINEAR" />.</param>
    <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw; <b>NULL</b> to draw the entire bitmap.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawBitmap">
    <summary>Draws the specified bitmap after scaling it to the size of the specified rectangle.</summary>
    <param name="bitmap">The bitmap to render.</param>
    <param name="destinationRectangle">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
    <param name="opacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</param>
    <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</param>
    <param name="sourceRectangle">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawEllipse">
    <summary>Draws the outline of the specified ellipse using the specified stroke style.</summary>
    <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the ellipse's outline.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or <b>NULL</b> to paint a solid stroke.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawEllipse">
    <summary>Draws the outline of the specified ellipse using the specified stroke style.</summary>
    <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the ellipse's outline.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or <b>NULL</b> to paint a solid stroke.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawGeometry">
    <summary>Draws the outline of the specified geometry using the specified stroke style.</summary>
    <param name="geometry">The geometry to draw.</param>
    <param name="brush">The brush used to paint the geometry's stroke.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or <b>NULL</b> to paint a solid stroke.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawGlyphRun">
    <summary>Draws the specified glyphs.</summary>
    <param name="baselineOrigin">The origin, in device-independent pixels, of the glyphs' baseline.</param>
    <param name="glyphRun">The glyphs to render.</param>
    <param name="foregroundBrush">The brush used to paint the specified glyphs.</param>
    <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawLine">
    <summary>Draws a line between the specified points using the specified stroke style.</summary>
    <param name="point0">The start point of the line, in device-independent pixels.</param>
    <param name="point1">The end point of the line, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the line's stroke.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to paint, or <b>NULL</b> to paint a solid line.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawRectangle">
    <summary>Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
    <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rectangle's stroke.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to paint, or <b>NULL</b> to paint a solid stroke.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawRectangle">
    <summary>Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
    <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rectangle's stroke.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of stroke to paint, or <b>NULL</b> to paint a solid stroke.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawRoundedRectangle">
    <summary>Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
    <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rounded rectangle's outline.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of the rounded rectangle's stroke, or <b>NULL</b> to paint a solid stroke. The default value is <b>NULL</b>.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawRoundedRectangle">
    <summary>Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
    <param name="roundedRect">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rounded rectangle's outline.</param>
    <param name="strokeWidth">The width of the stroke, in device-independent pixels. The value must be greater than or equal to 0.0f. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
    <param name="strokeStyle">The style of the rounded rectangle's stroke, or <b>NULL</b> to paint a solid stroke. The default value is <b>NULL</b>.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawText">
    <summary>Draws the specified text using the format information provided by an <see cref="IDWriteTextFormat" /> object.</summary>
    <param name="string">A pointer to an array of Unicode characters to draw.</param>
    <param name="stringLength">The number of characters in <i>string</i>.</param>
    <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
    <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
    <param name="defaultFillBrush">The brush used to paint the text.</param>
    <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
    <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawText">
    <summary>Draws the specified text using the format information provided by an <see cref="IDWriteTextFormat" /> object.</summary>
    <param name="string">A pointer to an array of Unicode characters to draw.</param>
    <param name="stringLength">The number of characters in <i>string</i>.</param>
    <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
    <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
    <param name="defaultFillBrush">The brush used to paint the text.</param>
    <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
    <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is <see cref="DWRITE_MEASURING_MODE_NATURAL" />.</param>
  </member>
  <member name="ID2D1RenderTarget.DrawTextLayout">
    <summary>Draws the formatted text described by the specified <see cref="IDWriteTextLayout" /> object.</summary>
    <param name="origin">The point, described in device-independent pixels, at which the upper-left corner of the text described by <i>textLayout</i> is drawn.</param>
    <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from <see cref="ID2D1Resource" /> are ignored. If there are drawing effects that inherit from <b>ID2D1Resource</b> that are not brushes, this method fails and the render target is put in an error state.</param>
    <param name="defaultFillBrush">The brush used to paint any text in <i>textLayout</i> that does not already have a brush associated with it as a drawing effect (specified by the <see cref="IDWriteTextLayout.SetDrawingEffect" /> method).</param>
    <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is <see cref="D2D1_DRAW_TEXT_OPTIONS_NONE" />, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
  </member>
  <member name="ID2D1RenderTarget.EndDraw">
    <summary>Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
    <param name="tag1">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
    <param name="tag2">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred.</returns>
  </member>
  <member name="ID2D1RenderTarget.FillEllipse">
    <summary>Paints the interior of the specified ellipse.</summary>
    <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
    <param name="brush">The brush used to paint the interior of the ellipse.</param>
  </member>
  <member name="ID2D1RenderTarget.FillEllipse">
    <summary>Paints the interior of the specified ellipse.</summary>
    <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
    <param name="brush">The brush used to paint the interior of the ellipse.</param>
  </member>
  <member name="ID2D1RenderTarget.FillGeometry">
    <summary>Paints the interior of the specified geometry.</summary>
    <param name="geometry">The geometry to paint.</param>
    <param name="brush">The brush used to paint the geometry's interior.</param>
    <param name="opacityBrush">The opacity mask to apply to the geometry, or <b>NULL</b> for no opacity mask. If an opacity mask (the <i>opacityBrush</i> parameter) is specified, <i>brush</i> must be an <see cref="ID2D1BitmapBrush" /> that has its x- and y-extend modes set to <see cref="D2D1_EXTEND_MODE_CLAMP" />. For more information, see the Remarks section.</param>
  </member>
  <member name="ID2D1RenderTarget.FillMesh">
    <summary>Paints the interior of the specified mesh.</summary>
    <param name="mesh">The mesh to paint.</param>
    <param name="brush">The brush used to paint the mesh.</param>
  </member>
  <member name="ID2D1RenderTarget.FillOpacityMask">
    <summary>Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
    <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the region specified by <i>sourceRectangle</i> is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by <i>destinationRectangle</i>.</param>
    <param name="brush">The brush used to paint the region of the render target specified by <i>destinationRectangle</i>.</param>
    <param name="content">
      <para>The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</para>
      <div>
        <b>Note</b>  Starting with Windows 8, the <see cref="D2D1_OPACITY_MASK_CONTENT" /> is not required. See the <see cref="ID2D1DeviceContext.FillOpacityMask" /> method, which has no <b>D2D1_OPACITY_MASK_CONTENT</b> parameter.</div>
    </param>
    <param name="destinationRectangle">The region of the render target to paint, in device-independent pixels, or <b>NULL</b>. If <b>NULL</b> is specified, the brush paints a rectangle the same size as <i>sourceRectangle</i>, but positioned on the origin. If <i>sourceRectangle</i> isn't specified, the brush paints a rectangle the same size as the <i>opacityMask</i> bitmap and positioned on the origin.</param>
    <param name="sourceRectangle">The region of the bitmap to use as the opacity mask, in device-independent pixels, or <b>NULL</b>. If <b>NULL</b> is specified, the entire bitmap is used.</param>
  </member>
  <member name="ID2D1RenderTarget.FillOpacityMask">
    <summary>Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
    <param name="opacityMask">The opacity mask to apply to the brush. The alpha value of each pixel in the region specified by <i>sourceRectangle</i> is multiplied with the alpha value of the brush after the brush has been mapped to the area defined by <i>destinationRectangle</i>.</param>
    <param name="brush">The brush used to paint the region of the render target specified by <i>destinationRectangle</i>.</param>
    <param name="content">
      <para>The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</para>
      <div>
        <b>Note</b>  Starting with Windows 8, the <see cref="D2D1_OPACITY_MASK_CONTENT" /> is not required. See the <see cref="ID2D1DeviceContext.FillOpacityMask" /> method, which has no <b>D2D1_OPACITY_MASK_CONTENT</b> parameter.</div>
    </param>
    <param name="destinationRectangle">The region of the render target to paint, in device-independent pixels.</param>
    <param name="sourceRectangle">The region of the bitmap to use as the opacity mask, in device-independent pixels.</param>
  </member>
  <member name="ID2D1RenderTarget.FillRectangle">
    <summary>Paints the interior of the specified rectangle.</summary>
    <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rectangle's interior.</param>
  </member>
  <member name="ID2D1RenderTarget.FillRectangle">
    <summary>Paints the interior of the specified rectangle.</summary>
    <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
    <param name="brush">The brush used to paint the rectangle's interior.</param>
  </member>
  <member name="ID2D1RenderTarget.FillRoundedRectangle">
    <summary>Paints the interior of the specified rounded rectangle.</summary>
    <param name="roundedRect">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
    <param name="brush">The brush used to paint the interior of the rounded rectangle.</param>
  </member>
  <member name="ID2D1RenderTarget.FillRoundedRectangle">
    <summary>Paints the interior of the specified rounded rectangle.</summary>
    <param name="roundedRect">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
    <param name="brush">The brush used to paint the interior of the rounded rectangle.</param>
  </member>
  <member name="ID2D1RenderTarget.Flush">
    <summary>Executes all pending drawing commands.</summary>
    <param name="tag1">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
    <param name="tag2">When this method returns, contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code and sets <i>tag1</i> and <i>tag2</i> to the tags that were active when the error occurred. If no error occurred, this method sets the error tag state to be (0,0).</returns>
  </member>
  <member name="ID2D1RenderTarget.GetAntialiasMode">
    <summary>Retrieves the current antialiasing mode for nontext drawing operations.</summary>
    <returns>The current antialiasing mode for nontext drawing operations.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetDpi">
    <summary>Return the render target's dots per inch (DPI).</summary>
    <param name="dpiX">When this method returns, contains the horizontal DPI of the render target. This parameter is passed uninitialized.</param>
    <param name="dpiY">When this method returns, contains the vertical DPI of the render target. This parameter is passed uninitialized.</param>
  </member>
  <member name="ID2D1RenderTarget.GetMaximumBitmapSize">
    <summary>Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target.</summary>
    <returns>The maximum size, in pixels, of any one bitmap dimension supported by the render target.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetPixelFormat">
    <summary>Retrieves the pixel format and alpha mode of the render target.</summary>
    <returns>The pixel format and alpha mode of the render target.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetPixelSize">
    <summary>Returns the size of the render target in device pixels.</summary>
    <returns>The size of the render target in device pixels.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetSize">
    <summary>Returns the size of the render target in device-independent pixels.</summary>
    <returns>The current size of the render target in device-independent pixels.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetTags">
    <summary>Gets the label for subsequent drawing operations.</summary>
    <param name="tag1">When this method returns, contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</param>
    <param name="tag2">When this method returns, contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If <b>NULL</b> is specified, no value is retrieved for this parameter.</param>
  </member>
  <member name="ID2D1RenderTarget.GetTextAntialiasMode">
    <summary>Gets the current antialiasing mode for text and glyph drawing operations.</summary>
    <returns>The current antialiasing mode for text and glyph drawing operations.</returns>
  </member>
  <member name="ID2D1RenderTarget.GetTextRenderingParams">
    <summary>Retrieves the render target's current text rendering options.</summary>
    <param name="textRenderingParams">When this method returns, <i>textRenderingParams</i> contains the address of a pointer to the render target's current text rendering options.</param>
  </member>
  <member name="ID2D1RenderTarget.GetTransform">
    <summary>Gets the current transform of the render target.</summary>
    <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized.</param>
  </member>
  <member name="ID2D1RenderTarget.IsSupported">
    <summary>Indicates whether the render target supports the specified properties.</summary>
    <param name="renderTargetProperties">The render target properties to test.</param>
    <returns>
      <b>TRUE</b> if the specified render target properties are supported by this render target; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="ID2D1RenderTarget.IsSupported">
    <summary>Indicates whether the render target supports the specified properties.</summary>
    <param name="renderTargetProperties">The render target properties to test.</param>
    <returns>
      <b>TRUE</b> if the specified render target properties are supported by this render target; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="ID2D1RenderTarget.PopAxisAlignedClip">
    <summary>Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
  </member>
  <member name="ID2D1RenderTarget.PopLayer">
    <summary>Stops redirecting drawing operations to the layer that is specified by the last <see cref="PushLayer" /> call.</summary>
  </member>
  <member name="ID2D1RenderTarget.PushAxisAlignedClip">
    <summary>Specifies a rectangle to which all subsequent drawing operations are clipped.</summary>
    <param name="clipRect">The size and position of the clipping area, in device-independent pixels.</param>
    <param name="antialiasMode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the <see cref="PopAxisAlignedClip" /> method is called, and does not apply to each primitive within the layer.</param>
  </member>
  <member name="ID2D1RenderTarget.PushAxisAlignedClip">
    <summary>Specifies a rectangle to which all subsequent drawing operations are clipped.</summary>
    <param name="clipRect">The size and position of the clipping area, in device-independent pixels.</param>
    <param name="antialiasMode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the <see cref="PopAxisAlignedClip" /> method is called, and does not apply to each primitive within the layer.</param>
  </member>
  <member name="ID2D1RenderTarget.PushLayer">
    <summary>Adds the specified layer to the render target so that it receives all subsequent drawing operations until <see cref="PopLayer" /> is called.</summary>
    <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
    <param name="layer">
      <para>The layer that receives subsequent drawing operations.</para>
      <div>
        <b>Note</b>  Starting with Windows 8, this parameter is optional. If a layer is not specified, Direct2D manages the layer resource automatically.</div>
    </param>
  </member>
  <member name="ID2D1RenderTarget.PushLayer">
    <summary>Adds the specified layer to the render target so that it receives all subsequent drawing operations until <see cref="PopLayer" /> is called.</summary>
    <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
    <param name="layer">
      <para>The layer that receives subsequent drawing operations.</para>
      <div>
        <b>Note</b>  Starting with Windows 8, this parameter is optional. If a layer is not specified, Direct2D manages the layer resource automatically.</div>
    </param>
  </member>
  <member name="ID2D1RenderTarget.RestoreDrawingState">
    <summary>Sets the render target's drawing state to that of the specified <see cref="ID2D1DrawingStateBlock" />.</summary>
    <param name="drawingStateBlock">The new drawing state of the render target.</param>
  </member>
  <member name="ID2D1RenderTarget.SaveDrawingState">
    <summary>Saves the current drawing state to the specified <see cref="ID2D1DrawingStateBlock" />.</summary>
    <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</param>
  </member>
  <member name="ID2D1RenderTarget.SetAntialiasMode">
    <summary>Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
    <param name="antialiasMode">The antialiasing mode for future drawing operations.</param>
  </member>
  <member name="ID2D1RenderTarget.SetDpi">
    <summary>Sets the dots per inch (DPI) of the render target.</summary>
    <param name="dpiX">A value greater than or equal to zero that specifies the horizontal DPI of the render target.</param>
    <param name="dpiY">A value greater than or equal to zero that specifies the vertical DPI of the render target.</param>
  </member>
  <member name="ID2D1RenderTarget.SetTags">
    <summary>Specifies a label for subsequent drawing operations.</summary>
    <param name="tag1">A label to apply to subsequent drawing operations.</param>
    <param name="tag2">A label to apply to subsequent drawing operations.</param>
  </member>
  <member name="ID2D1RenderTarget.SetTextAntialiasMode">
    <summary>Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
    <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations.</param>
  </member>
  <member name="ID2D1RenderTarget.SetTextRenderingParams">
    <summary>Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
    <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; <b>NULL</b> to clear current text rendering options.</param>
  </member>
  <member name="ID2D1RenderTarget.SetTransform">
    <summary>Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
    <param name="transform">The transform to apply to the render target.</param>
  </member>
  <member name="ID2D1RenderTarget.SetTransform">
    <summary>Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
    <param name="transform">The transform to apply to the render target.</param>
  </member>
  <member name="ID2D1RenderTarget">
    <summary>Represents an object that can receive drawing commands. Interfaces that inherit from <b>ID2D1RenderTarget</b> render the drawing commands they receive in different ways.</summary>
  </member>
</doc>