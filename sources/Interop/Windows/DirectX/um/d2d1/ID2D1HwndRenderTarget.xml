<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1HwndRenderTarget.CheckWindowState">
    <summary>
      <para>Indicates whether the HWND associated with this render target is occluded.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D2D1_WINDOW_STATE" /></b></para>
      <para>A value that indicates whether the HWND associated with this render target is occluded.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If the window was occluded the last time  that <see cref="EndDraw" /> was called, the next time that the render target calls <b>CheckWindowState</b>, it will return <see cref="D2D1_WINDOW_STATE_OCCLUDED" /> regardless of the current window state. If you want to use <b>CheckWindowState</b> to determine the current window state, you should call <b>CheckWindowState</b> after every <b>EndDraw</b> call and ignore its return value. This call will ensure that your next call to <b>CheckWindowState</b> state will return the actual window state.</para>
    </remarks>
    <seealso cref="ID2D1HwndRenderTarget" />
  </member>
  <member name="ID2D1HwndRenderTarget.GetHwnd">
    <summary>
      <para>Returns the HWND associated with this render target.</para>
    </summary>
    <returns>
      <para>Type: <b>HWND</b></para>
      <para>The HWND associated with this render target.</para>
    </returns>
    <seealso cref="ID2D1HwndRenderTarget" />
  </member>
  <member name="ID2D1HwndRenderTarget.Resize">
    <summary>
      <para>Changes the size of the render target to the specified pixel size.</para>
    </summary>
    <param name="pixelSize">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a>*</b></para>
      <para>The new size of the render target in device pixels.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>After this method is called, the contents of the render target's back-buffer are not defined, even if the <see cref="D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS" /> option was specified when the render target was created.</para>
    </remarks>
    <seealso cref="ID2D1HwndRenderTarget" />
  </member>
  <member name="ID2D1HwndRenderTarget.Resize">
    <summary>
      <para>Changes the size of the render target to the specified pixel size.</para>
    </summary>
    <param name="pixelSize">
      <para>Type: [in] <b>const <a href="https://docs.microsoft.com//windows/win32/Direct2D/d2d1-size-u">D2D1_SIZE_U</a> &amp;</b></para>
      <para>The new size of the render target in device pixels.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a> error code.</para>
    </returns>
    <remarks>
      <para>After this method is called, the contents of the render target's back-buffer are not defined, even if the <see cref="D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS" /> option was specified when the render target was created.</para>
    </remarks>
    <seealso cref="ID2D1HwndRenderTarget" />
  </member>
  <member name="ID2D1HwndRenderTarget">
    <summary>
      <para>Renders drawing instructions to a window.</para>
    </summary>
    <remarks>
      <para>As is the case with other render targets, you must call <see cref="BeginDraw" />  before issuing drawing commands. After you've finished drawing, call <see cref="EndDraw" /> to indicate that drawing is finished and to release access to the buffer backing the render target.</para>
      <para>For <b>ID2D1HwndRenderTarget</b>, the only side effect of <b>BeginDraw</b> is changing the state of the render target to allow drawing commands to be issued.</para>
      <para>
        <b>EndDraw</b> flushes any batched drawing commands. If no errors have occurred, then it also presents the buffer, causing it to appear on the associated window. Finally, <b>EndDraw</b> returns the HRESULT of the first error that occurred in drawing or presenting, as well as the tag state at the time the error occurred.</para>
      <para>
        <b>ID2D1HwndRenderTarget</b> objects are double buffered, so drawing commands issued do not appear immediately, but rather are performed on an offscreen surface. When <see cref="EndDraw" /> is called, if there have been no rendering errors, the offscreen buffer is presented. If there have been rendering errors in the batch flushed by <b>EndDraw</b>, then the buffer is not presented, and the application must call <see cref="BeginDraw" /> and re-draw the frame. <see cref="Flush" /> can be used to check for errors before calling <b>EndDraw</b> if an application wants the frame to be presented regardless of errors.</para>
      <para>A hardware render target's back-buffer is the size specified by <see cref="GetPixelSize" />. If <see cref="EndDraw" /> presents the buffer, this bitmap is stretched to cover the surface where it is presented: the entire client area of the window. This stretch is performed using bilinear filtering if the render target is rendering in hardware and using nearest-neighbor filtering if the rendering target is using software. (Typically, an application will call Resize to ensure the pixel size of the render target and the pixel size of the destination match, and no scaling is necessary, though this is not a requirement.)</para>
      <para>In the case where a window straddles adapters, Direct2D ensures that the portion of the off-screen render target is copied from the adapter where rendering is occurring to the adapter that needs to display the contents.</para>
      <para>If the adapter a render target is on has been removed or the driver upgraded while the application is running, this is returned as an error in the <see cref="EndDraw" /> call. In this case, the application should create a new render target and resources as necessary.</para>
      <h3>Creating ID2D1HwndRenderTarget Objects</h3>
      <para>To create an <b>ID2D1HwndRenderTarget</b>, use the <see cref="ID2D1Factory.CreateHwndRenderTarget" /> method.</para>
      <para>Your application should create render targets once and hold onto them for the life of the application or until the render target's  <see cref="EndDraw" /> method returns the <a href="https://docs.microsoft.com//windows/win32/Direct2D/direct2d-error-codes">D2DERR_RECREATE_TARGET</a>  error. When you receive this error, you need to recreate the render target (and any resources it created).</para>
    </remarks>
    <seealso cref="ID2D1RenderTarget" />
  </member>
</doc>