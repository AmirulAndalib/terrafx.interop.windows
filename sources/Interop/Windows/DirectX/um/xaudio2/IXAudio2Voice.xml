<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IXAudio2Voice.DestroyVoice">
    <summary>
      <para>Destroys the voice. If necessary, stops the voice and removes it from the XAudio2 graph.</para>
    </summary>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>If any other voice is currently sending audio to this voice, the method fails.</para>
      <para>
        <b>DestroyVoice</b> waits for the audio processing thread to be idle, so it can take a little while (typically no more than a couple of milliseconds). This is necessary to guarantee that the voice will no longer make any callbacks or read any audio data, so the application can safely free up these resources as soon as the call returns.</para>
      <para>To avoid title thread interruptions from a blocking <b>DestroyVoice</b> call, the application can destroy voices on a separate non-critical thread, or the application can use voice pooling strategies to reuse voices rather than destroying them. Note that voices can only be reused with audio that has the same data format and the same number of channels the voice was created with. A voice can play audio data with different sample rates than that of the voice by calling <see cref="IXAudio2SourceVoice.SetFrequencyRatio" /> with an appropriate ratio parameter.</para>
      <para>It is invalid to call <b>DestroyVoice</b> from within a callback (that is, <see cref="IXAudio2EngineCallback" /> or <see cref="IXAudio2VoiceCallback" />).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9);
Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.DisableEffect">
    <summary>
      <para>Disables the effect at a given position in the effect chain of the voice.</para>
    </summary>
    <param name="EffectIndex">
      <para>Zero-based index of an effect in the effect chain of the voice.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, an error code. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of valid error codes.</para>
    </returns>
    <remarks>
      <para>The effects in a given XAudio2 voice's effect chain must consume and produce audio at that voice's processing sample rate. The only aspect of the audio format they can change is the channel count. For example a reverb effect can convert mono data to 5.1. The client can use the <see cref="XAUDIO2_EFFECT_DESCRIPTOR" /> structure's <b>OutputChannels</b> field to specify the number of channels it wants each effect to produce. Each effect in an effect chain must produce a number of channels that the next effect can consume. Any calls to <see cref="IXAudio2Voice.EnableEffect" /> or <b>IXAudio2Voice.DisableEffect</b> that would make the effect chain stop fulfilling these requirements will fail.</para>
      <para>Disabling an effect immediately removes it from the processing graph. Any pending audio in the effect—such as a reverb tail—is not played. Be careful disabling an effect while the voice that hosts it is running. This can result in an audible artifact if the effect significantly changes the audio's pitch or volume.</para>
      <para>
        <b>DisableEffect</b> takes effect immediately when called from an XAudio2 callback with an <i>OperationSet</i> of <b>XAUDIO2_COMMIT_NOW</b>.</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.EnableEffect">
    <summary>
      <para>Enables the effect at a given position in the effect chain of the voice.</para>
    </summary>
    <param name="EffectIndex">
      <para>Zero-based index of an effect in the effect chain of the voice.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, an error code. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
    </returns>
    <remarks>
      <para>Be careful when you enable an effect while the voice that hosts it is running. Such an action can result in a problem if the effect significantly changes the audio's pitch or volume.</para>
      <para>The effects in a given XAudio2 voice's effect chain must consume and produce audio at that voice's processing sample rate. The only aspect of the audio format they can change is the channel count. For example a reverb effect can convert mono data to 5.1. The client can use the <see cref="XAUDIO2_EFFECT_DESCRIPTOR" /> structure's <b>OutputChannels</b> field to specify the number of channels it wants each effect to produce. Each effect in an effect chain must produce a number of channels that the next effect can consume. Any calls to <b>IXAudio2Voice.EnableEffect</b> or <see cref="IXAudio2Voice.DisableEffect" /> that would make the effect chain stop fulfilling these requirements will fail.</para>
      <para>
        <b>EnableEffect</b> takes effect immediately when you call it from an XAudio2 callback with an <i>OperationSet</i> of <b>XAUDIO2_COMMIT_NOW</b>.</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.GetChannelVolumes">
    <summary>
      <para>Returns the volume levels for the voice, per channel.</para>
    </summary>
    <param name="Channels">
      <para>Confirms the channel count of the voice.</para>
    </param>
    <param name="pVolumes">
      <para>Returns the current volume level of each channel in the voice. The array must have at least <i>Channels</i> elements. See Remarks for more information on volume levels.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>These settings are applied after the effect chain is applied. This method is valid only for source and submix voices, because mastering voices do not specify volume per channel.</para>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -2²⁴ to 2²⁴, with a maximum gain of 144.5 dB. A volume of 1 means there is no attenuation or gain, 0 means silence, and negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>
        <b>Note</b>  <b>GetChannelVolumes</b> always returns the volume levels most recently set by <see cref="IXAudio2Voice.SetChannelVolumes" />. However, those values may not actually be in effect yet: they only take effect the next time the audio engine runs after the <b>IXAudio2Voice.SetChannelVolumes</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetChannelVolumes</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.GetEffectParameters">
    <summary>
      <para>Returns the current effect-specific parameters of a given effect in the voice's effect chain.</para>
    </summary>
    <param name="EffectIndex">
      <para>Zero-based index of an effect within the voice's effect chain.</para>
    </param>
    <param name="pParameters">
      <para>Returns the current values of the effect-specific parameters.</para>
    </param>
    <param name="ParametersByteSize">
      <para>Size, in bytes, of the pParameters array.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
      <para>Fails with E_NOTIMPL if the effect does not support a generic parameter control interface.</para>
    </returns>
    <remarks>
      <para>
        <b>GetEffectParameters</b> always returns the effect's actual current parameters. However, these may not match the parameters set by the most recent call to <see cref="IXAudio2Voice.SetEffectParameters" />: the actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetEffectParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetEffectParameters</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAPOParameters.GetParameters" />
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.GetEffectState">
    <summary>
      <para>Returns the running state of the effect at a specified position in the effect chain of the voice.</para>
    </summary>
    <param name="EffectIndex">
      <para>Zero-based index of an effect in the effect chain of the voice.</para>
    </param>
    <param name="pEnabled">
      <para>Returns TRUE If the effect is enabled. If the effect is disabled, returns FALSE.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>
        <b>GetEffectState</b> always returns the effect's actual current state. However, this may not be the state set by the most recent <see cref="IXAudio2Voice.EnableEffect" /> or <see cref="IXAudio2Voice.DisableEffect" /> call: the actual state is only changed the next time the audio engine runs after the <b>IXAudio2Voice.EnableEffect</b> or <b>IXAudio2Voice.DisableEffect</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if EnableEffect/DisableEffect was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.GetFilterParameters">
    <summary>
      <para>Gets the voice's filter parameters.</para>
    </summary>
    <param name="pParameters">
      <para>Pointer to an <see cref="XAUDIO2_FILTER_PARAMETERS" /> structure containing the filter information.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>
        <b>GetFilterParameters</b> will fail if the voice was not created with the XAUDIO2_VOICE_USEFILTER flag.</para>
      <para>
        <b>GetFilterParameters</b> always returns this voice's actual current filter parameters. However, these may not match the parameters set by the most recent <see cref="IXAudio2Voice.SetFilterParameters" /> call: the actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetFilterParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetFilterParameters</b> was called with a deferred operation ID).</para>
      <para>
        <b>Note</b>  <b>GetFilterParameters</b> is usable only on source and submix voices and has no effect on mastering voices.</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.GetOutputFilterParameters">
    <summary>
      <para>Returns the filter parameters from one of this voice's sends.</para>
    </summary>
    <param name="pDestinationVoice">
      <para>
        <see cref="IXAudio2Voice" /> pointer to the destination voice of the send whose filter parameters will be read.</para>
    </param>
    <param name="pParameters">
      <para>Pointer to an <see cref="XAUDIO2_FILTER_PARAMETERS" /> structure containing the filter information.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>
        <b>GetOutputFilterParameters</b> will fail if the send was not created with the XAUDIO2_SEND_USEFILTER flag. This method is usable only on sends belonging to source and submix voices and has no effect on mastering voices’ sends.</para>
      <para>
        <b>Note</b>  <b>IXAudio2Voice.GetOutputFilterParameters</b> always returns this send’s actual current filter parameters. However, these may not match the parameters set by the most recent <see cref="IXAudio2Voice.SetOutputFilterParameters" /> call: the actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetOutputFilterParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetOutputFilterParameters</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.GetOutputMatrix">
    <summary>
      <para>Gets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.</para>
    </summary>
    <param name="pDestinationVoice">
      <para>Pointer specifying the destination <see cref="IXAudio2Voice" /> to retrieve the output matrix for.</para>
      <para>
        <b>Note</b>  If the voice sends to a single target voice then specifying NULL will cause <b>GetOutputMatrix</b> to operate on that target voice.</para>
    </param>
    <param name="SourceChannels">
      <para>Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain.</para>
    </param>
    <param name="DestinationChannels">
      <para>Confirms the input channel count of the destination voice.</para>
    </param>
    <param name="pLevelMatrix">
      <para>Array of [<i>SourceChannels</i> * <i>DestinationChannels</i>] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is returned in the form <i>pLevelMatrix</i>[<i>DestinationChannels</i> × S + D]. See Remarks for more information on volume levels.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>This method applies only to source and submix voices, because mastering voices write directly to the device with no matrix mixing.</para>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -2²⁴ to 2²⁴, with a maximum gain of 144.5 dB. A volume level of 1 means there is no attenuation or gain and 0 means silence. Negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>See <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/content/ksmedia/ns-ksmedia-waveformatextensible">WAVEFORMATEXTENSIBLE</a> for information on standard channel ordering.</para>
      <para>
        <b>Note</b>  <b>GetOutputMatrix</b> always returns the levels most recently set by <see cref="IXAudio2Voice.SetOutputMatrix" />. However, they may not actually be in effect yet: they only take effect the next time the audio engine runs after the <b>IXAudio2Voice.SetOutputMatrix</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetOutputMatrix</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.GetVoiceDetails">
    <summary>
      <para>Returns information about the creation flags, input channels, and sample rate of a voice.</para>
    </summary>
    <param name="pVoiceDetails">
      <para>
        <see cref="XAUDIO2_VOICE_DETAILS" /> structure containing information about the voice.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.GetVolume">
    <summary>
      <para>Gets the current overall volume level of the voice.</para>
    </summary>
    <param name="pVolume">
      <para>Returns the current overall volume level of the voice. See Remarks for more information on volume levels.</para>
    </param>
    <returns>
      <para>This method does not return a value.</para>
    </returns>
    <remarks>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -224 to 224, with a maximum gain of 144.5 dB. A volume level of 1 means there is no attenuation or gain and 0 means silence. Negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>
        <b>Note</b>  <b>GetVolume</b> always returns the volume most recently set by <see cref="IXAudio2Voice.SetVolume" />. However, it may not actually be in effect yet: it only takes effect the next time the audio engine runs after the <b>IXAudio2Voice.SetVolume</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetVolume</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetChannelVolumes">
    <summary>
      <para>Sets the volume levels for the voice, per channel.</para>
    </summary>
    <param name="Channels">
      <para>Number of channels in the voice.</para>
    </param>
    <param name="pVolumes">
      <para>Array containing the new volumes of each channel in the voice. The array must have <i>Channels</i> elements. See Remarks for more information on volume levels.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of XAudio2 specific error codes.</para>
    </returns>
    <remarks>
      <para>
        <b>SetChannelVolumes</b> controls a voice's per-channel output levels and is applied just after the voice's final SRC and before its sends.</para>
      <para>This method is valid only for source and submix voices, because mastering voices do not specify volume per channel.</para>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -XAUDIO2_MAX_VOLUME_LEVEL and XAUDIO2_MAX_VOLUME_LEVEL (-2²⁴ to 2²⁴), with a maximum gain of 144.5 dB. A volume of 1 means there is no attenuation or gain and 0 means silence. Negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetChannelVolumes" /> always returns the volume levels most recently set by <b>IXAudio2Voice.SetChannelVolumes</b>. However, those values may not actually be in effect yet: they only take effect the next time the audio engine runs after the <b>IXAudio2Voice.SetChannelVolumes</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetChannelVolumes</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--change-voice-volume">How to: Change Voice Volume</seealso>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetEffectChain">
    <summary>
      <para>Replaces the effect chain of the voice.</para>
    </summary>
    <param name="pEffectChain">
      <para>Pointer to an <see cref="XAUDIO2_EFFECT_CHAIN" /> structure that describes the new effect chain to use. If NULL is passed, the current effect chain is removed.</para>
      <para>
        <b>Note</b>  If <i>pEffectChain</i> is non-NULL, the <see cref="XAUDIO2_EFFECT_CHAIN" /> structure that it points to must specify at least one effect.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, an error code.</para>
      <para>See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of XAudio2 specific error codes.</para>
    </returns>
    <remarks>
      <para>The number of output channels allowed for a voice's effect chain is locked at creation of the voice. If you create the voice with an effect chain, any new effect chain passed to <b>SetEffectChain</b> must have the same number of input and output channels as the original effect chain. If you create the voice without an effect chain, the number of output channels allowed for the effect chain will default to the number of input channels for the voice. If any part of effect chain creation fails, none of it is applied.</para>
      <para>After you attach an effect to an XAudio2 voice, XAudio2 takes control of the effect, and the client should not make any further calls to it. The simplest way to ensure this is to release all pointers to the effect.</para>
      <para>It is invalid to call <b>SetEffectChain</b> from within a callback (that is, <see cref="IXAudio2EngineCallback" /> or <see cref="IXAudio2VoiceCallback" />). If you call <b>SetEffectChain</b> within a callback, it returns XAUDIO2_E_INVALID_CALL.</para>
      <para>The <see cref="XAUDIO2_EFFECT_CHAIN" /> that is passed in as the pEffectChain argument and any <see cref="XAUDIO2_EFFECT_DESCRIPTOR" /> information contained within it are no longer needed after <b>SetEffectChain</b> successfully completes, and may be deleted immediately after <b>SetEffectChain</b> is called.</para>
      <h3>Platform Requirements</h3>
      <para>Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--create-an-effect-chain">How to: Create an Effect Chain</seealso>
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.SetEffectParameters">
    <summary>
      <para>Sets parameters for a given effect in the voice's effect chain.</para>
    </summary>
    <param name="EffectIndex">
      <para>Zero-based index of an effect within the voice's effect chain.</para>
    </param>
    <param name="pParameters">
      <para>Returns the current values of the effect-specific parameters.</para>
    </param>
    <param name="ParametersByteSize">
      <para>Size of the <b>pParameters</b> array in bytes.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful; otherwise, an error code. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
      <para>Fails with E_NOTIMPL if the effect does not support a generic parameter control interface.</para>
    </returns>
    <remarks>
      <para>The specific effect being used determines the valid size and format of the <i>pParameters</i> buffer. The call will fail if <i>pParameters</i> is invalid or if <i>ParametersByteSize</i> is not exactly the size that the effect expects. The client must take care to direct the <b>SetEffectParameters</b> call to the right effect. If this call is directed to a different effect that happens to accept the same parameter block size, the parameters will be interpreted differently. This may lead to unexpected results.</para>
      <para>The memory pointed to by <i>pParameters</i> must <i>not</i> be freed immediately, because XAudio2 will need to refer to it later when the parameters actually are applied to the effect. This happens during the next audio processing pass if the <i>OperationSet</i> argument is <b>XAUDIO2_COMMIT_NOW</b>. Otherwise, the parameters are applied to the effect later, during the first processing pass after the <see cref="IXAudio2.CommitChanges" /> function is called with the same <i>OperationSet</i> argument.</para>
      <para>
        <b>SetEffectParameters</b> takes effect immediately when called from an XAudio2 callback with an <i>OperationSet</i> of <b>XAUDIO2_COMMIT_NOW</b>.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetEffectParameters" /> always returns the effect's actual current parameters. However, these may not match the parameters set by the most recent call to <b>IXAudio2Voice.SetEffectParameters</b>. The actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetEffectParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetEffectParameters</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--create-an-effect-chain">How to: Create an Effect Chain</seealso>
    <seealso cref="IXAPOParameters.SetParameters" />
    <seealso cref="IXAudio2Voice" />
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/xapo-overview">XAPO Overview</seealso>
  </member>
  <member name="IXAudio2Voice.SetFilterParameters">
    <summary>
      <para>Sets the voice's filter parameters.</para>
    </summary>
    <param name="pParameters">
      <para>Pointer to an <see cref="XAUDIO2_FILTER_PARAMETERS" /> structure containing the filter information.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
    </returns>
    <remarks>
      <para>
        <b>SetFilterParameters</b> will fail if the voice was not created with the XAUDIO2_VOICE_USEFILTER flag.</para>
      <para>This method is usable only on source and submix voices and has no effect on mastering voices.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetFilterParameters" /> always returns this voice's actual current filter parameters. However, these may not match the parameters set by the most recent <b>IXAudio2Voice.SetFilterParameters</b> call: the actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetFilterParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetFilterParameters</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetOutputFilterParameters">
    <summary>
      <para>Sets the filter parameters on one of this voice's sends.</para>
    </summary>
    <param name="pDestinationVoice">
      <para>
        <see cref="IXAudio2Voice" /> pointer to the destination voice of the send whose filter parameters will be set.</para>
    </param>
    <param name="pParameters">
      <para>Pointer to an <see cref="XAUDIO2_FILTER_PARAMETERS" /> structure containing the filter information.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
    </returns>
    <remarks>
      <para>
        <b>SetOutputFilterParameters</b> will fail if the send was not created with the XAUDIO2_SEND_USEFILTER flag. This method is usable only on sends belonging to source and submix voices and has no effect on a mastering voice's sends.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetOutputFilterParameters" /> always returns this send’s actual current filter parameters. However, these may not match the parameters set by the most recent <b>IXAudio2Voice.SetOutputFilterParameters</b> call: the actual parameters are only changed the next time the audio engine runs after the <b>IXAudio2Voice.SetOutputFilterParameters</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetOutputFilterParameters</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetOutputMatrix">
    <summary>
      <para>Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.</para>
    </summary>
    <param name="pDestinationVoice">
      <para>Pointer to a destination <see cref="IXAudio2Voice" /> for which to set volume levels.</para>
      <para>
        <b>Note</b>  If the voice sends to a single target voice then specifying NULL will cause <b>SetOutputMatrix</b> to operate on that target voice.</para>
    </param>
    <param name="SourceChannels">
      <para>Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain.</para>
    </param>
    <param name="DestinationChannels">
      <para>Confirms the input channel count of the destination voice.</para>
    </param>
    <param name="pLevelMatrix">
      <para>Array of [<i>SourceChannels</i> × <i>DestinationChannels</i>] volume levels sent to the destination voice. The level sent from source channel <i>S</i> to destination channel <i>D</i> is specified in the form <i>pLevelMatrix</i>[<i>SourceChannels</i> × <i>D</i> + <i>S</i>].</para>
      <para>For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels—but is absent from the center and low-frequency channels—the matrix might have the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Output</description>
          <description>Left Input [Array Index]</description>
          <description>Right Input [Array Index]</description>
        </listheader>
        <item>
          <description>Left</description>
          <description>1.0 [0]</description>
          <description>0.0 [1]</description>
        </item>
        <item>
          <description>Right</description>
          <description>0.0 [2]</description>
          <description>1.0 [3]</description>
        </item>
        <item>
          <description>Front Center</description>
          <description>0.0 [4]</description>
          <description>0.0 [5]</description>
        </item>
        <item>
          <description>LFE</description>
          <description>0.0 [6]</description>
          <description>0.0 [7]</description>
        </item>
        <item>
          <description>Rear Left</description>
          <description>0.8 [8]</description>
          <description>0.0 [9]</description>
        </item>
        <item>
          <description>Rear Right</description>
          <description>0.0 [10]</description>
          <description>0.8 [11]</description>
        </item>
      </list>
      <para>
        <b>Note</b>  The left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels.</para>
      <para>See Remarks for more information on volume levels.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
    </returns>
    <remarks>
      <para>This method is valid only for source and submix voices, because mastering voices write directly to the device with no matrix mixing.</para>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -XAUDIO2_MAX_VOLUME_LEVEL and XAUDIO2_MAX_VOLUME_LEVEL (-2²⁴ to 2²⁴), with a maximum gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence. Negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/xaudio2/x3daudio-overview">X3DAudio</a> function <see cref="X3DAudioCalculate" /> can produce an output matrix for use with <b>SetOutputMatrix</b> based on a sound's position and a listener's position.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetOutputMatrix" /> always returns the levels most recently set by <b>IXAudio2Voice.SetOutputMatrix</b>. However, they may not actually be in effect yet: they only take effect the next time the audio engine runs after the <b>IXAudio2Voice.SetOutputMatrix</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetOutputMatrix</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--change-voice-volume">How to: Change Voice Volume</seealso>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetOutputVoices">
    <summary>
      <para>Designates a new set of submix or mastering voices to receive the output of the voice.</para>
    </summary>
    <param name="pSendList">
      <para>Array of <see cref="XAUDIO2_VOICE_SENDS" /> structure pointers to destination voices. If <i>pSendList</i> is NULL, the voice will send its output to the current mastering voice. To set the voice to not send its output anywhere set the <b>OutputCount</b> member of <b>XAUDIO2_VOICE_SENDS</b> to 0. All of the voices in a send list must have the same input sample rate, see <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-sample-rate-conversions">XAudio2 Sample Rate Conversions</a> for additional information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of XAudio2 specific error codes.</para>
    </returns>
    <remarks>
      <para>This method is only valid for source and submix voices. Mastering voices can not send audio to another voice.</para>
      <para>After calling <b>SetOutputVoices</b> a voice's current send levels will be replaced by a default send matrix. The <see cref="IXAudio2Voice.SetOutputMatrix" /> method must be called to set a custom matrix for the new sendlist.</para>
      <para>It is invalid to call <b>SetOutputVoices</b> from within a callback (that is, <see cref="IXAudio2EngineCallback" /> or <see cref="IXAudio2VoiceCallback" />). If <b>SetOutputVoices</b> is called within a callback, it returns XAUDIO2_E_INVALID_CALL.</para>
      <para>
        <b>Note</b>  Calling <b>SetOutputVoices</b> invalidates any send matrices previously set with <see cref="IXAudio2Voice.SetOutputMatrix" />.</para>
      <h3>Platform Requirements</h3>
      <para>Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso cref="IXAudio2Voice" />
  </member>
  <member name="IXAudio2Voice.SetVolume">
    <summary>
      <para>Sets the overall volume level for the voice.</para>
    </summary>
    <param name="Volume">
      <para>Overall volume level to use. See Remarks for more information on volume levels.</para>
    </param>
    <param name="X2DEFAULT">
      <para>TBD</para>
    </param>
    <param name="OperationSet">
      <para>Identifies this call as part of a deferred batch. See the <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-operation-sets">XAudio2 Operation Sets</a> overview for more information.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, an error code otherwise. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-error-codes">XAudio2 Error Codes</a> for descriptions of error codes.</para>
    </returns>
    <remarks>
      <para>
        <b>SetVolume</b> controls a voice's master input volume level. The master volume level is applied at different times depending on the type of voice. For submix and mastering voices the volume level is applied just before the voice's built in filter and effect chain is applied. For source voices the master volume level is applied after the voice's filter and effect chain is applied.</para>
      <para>Volume levels are expressed as floating-point amplitude multipliers between -XAUDIO2_MAX_VOLUME_LEVEL and XAUDIO2_MAX_VOLUME_LEVEL (-2²⁴ to 2²⁴), with a maximum gain of 144.5 dB. A volume level of 1.0 means there is no attenuation or gain and 0 means silence. Negative levels can be used to invert the audio's phase. See <a href="https://docs.microsoft.com//windows/desktop/xaudio2/xaudio2-volume-and-pitch-control">XAudio2 Volume and Pitch Control</a> for additional information on volume control.</para>
      <para>
        <b>Note</b>  <see cref="IXAudio2Voice.GetVolume" /> always returns the volume most recently set by <b>IXAudio2Voice.SetVolume</b>. However, it may not actually be in effect yet: it only takes effect the next time the audio engine runs after the <b>IXAudio2Voice.SetVolume</b> call (or after the corresponding <see cref="IXAudio2.CommitChanges" /> call, if <b>IXAudio2Voice.SetVolume</b> was called with a deferred operation ID).</para>
      <h3>Platform Requirements</h3>
      <para>Windows 10 (XAudio2.9); Windows 8, Windows Phone 8 (XAudio 2.8); DirectX SDK (XAudio 2.7)</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--change-voice-volume">How to: Change Voice Volume</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/xaudio2/how-to--use-submix-voices">How to: Use Submix Voices</seealso>
    <seealso cref="IXAudio2Voice" />
  </member>
</doc>