<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12CommandAllocator.Reset">
    <summary>
      <para>Indicates to re-use the memory that is associated with the command allocator.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns <b>E_FAIL</b> if there is an actively recording command list referencing the command allocator.  The debug layer will also issue an error in this case.
See <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a> for other possible return values.</para>
    </returns>
    <remarks>
      <para>Apps call <b>Reset</b> to re-use the memory that is associated with a command allocator.  From this call to <b>Reset</b>, the runtime and driver determine that the graphics processing unit (GPU) is no longer executing any command lists that have recorded commands with the command allocator.</para>
      <para>Unlike <see cref="ID3D12GraphicsCommandList.Reset" />, it is not recommended that you call <b>Reset</b>  on the command allocator while a command list is still being executed.</para>
      <para>The debug layer will issue a warning if it can't prove that there are no pending GPU references to command lists that have recorded commands in the allocator.</para>
      <para>The debug layer will issue an error if <b>Reset</b> is called concurrently by multiple threads (on the same allocator object).</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12HelloTriangle</a> sample uses <b>ID3D12CommandAllocator.Reset</b> as follows:</para>
      <code>D3D12_VIEWPORT m_viewport;
D3D12_RECT m_scissorRect;
ComPtr&lt;IDXGISwapChain3&gt; m_swapChain;
ComPtr&lt;ID3D12Device&gt; m_device;
ComPtr&lt;ID3D12Resource&gt; m_renderTargets[FrameCount];
ComPtr&lt;ID3D12CommandAllocator&gt; m_commandAllocator;
ComPtr&lt;ID3D12CommandQueue&gt; m_commandQueue;
ComPtr&lt;ID3D12RootSignature&gt; m_rootSignature;
ComPtr&lt;ID3D12DescriptorHeap&gt; m_rtvHeap;
ComPtr&lt;ID3D12PipelineState&gt; m_pipelineState;
ComPtr&lt;ID3D12GraphicsCommandList&gt; m_commandList;
UINT m_rtvDescriptorSize;

</code>
      <code>// Command list allocators can only be reset when the associated
// command lists have finished execution on the GPU; apps should use
// fences to determine GPU execution progress.
ThrowIfFailed(m_commandAllocator-&gt;Reset());

// However, when ExecuteCommandList() is called on a particular command
// list, that command list can then be reset at any time and must be before
// re-recording.
ThrowIfFailed(m_commandList-&gt;Reset(m_commandAllocator.Get(), m_pipelineState.Get()));

// Set necessary state.
m_commandList-&gt;SetGraphicsRootSignature(m_rootSignature.Get());
m_commandList-&gt;RSSetViewports(1, &amp;amp;amp;amp;amp;amp;m_viewport);
m_commandList-&gt;RSSetScissorRects(1, &amp;amp;amp;amp;amp;amp;m_scissorRect);

// Indicate that the back buffer will be used as a render target.
m_commandList-&gt;ResourceBarrier(1, &amp;amp;amp;amp;amp;amp;CD3DX12_RESOURCE_BARRIER.Transition(m_renderTargets[m_frameIndex].Get(), D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET));

CD3DX12_CPU_DESCRIPTOR_HANDLE rtvHandle(m_rtvHeap-&gt;GetCPUDescriptorHandleForHeapStart(), m_frameIndex, m_rtvDescriptorSize);
m_commandList-&gt;OMSetRenderTargets(1, &amp;amp;amp;amp;amp;amp;rtvHandle, FALSE, nullptr);

// Record commands.
const float clearColor[] = { 0.0f, 0.2f, 0.4f, 1.0f };
m_commandList-&gt;ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr);
m_commandList-&gt;IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
m_commandList-&gt;IASetVertexBuffers(0, 1, &amp;amp;amp;amp;amp;amp;m_vertexBufferView);
m_commandList-&gt;DrawInstanced(3, 1, 0, 0);

// Indicate that the back buffer will now be used to present.
m_commandList-&gt;ResourceBarrier(1, &amp;amp;amp;amp;amp;amp;CD3DX12_RESOURCE_BARRIER.Transition(m_renderTargets[m_frameIndex].Get(), D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT));

ThrowIfFailed(m_commandList-&gt;Close());

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso cref="ID3D12CommandAllocator" />
  </member>
  <member name="ID3D12CommandAllocator">
    <summary>
      <para>Represents the allocations of storage for graphics processing unit (GPU) commands.</para>
    </summary>
    <remarks>
      <para>Use <see cref="ID3D12Device.CreateCommandAllocator" /> to create a command allocator object.</para>
      <para>The command allocator object corresponds to the underlying allocations in which GPU commands are stored.  The command allocator object applies to both direct command lists and bundles.  You must use a command allocator object in a DirectX 12 app.</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12nBodyGravity</a> sample uses <b>ID3D12CommandAllocator</b> as follows:</para>
      <para>Header file declarations.</para>
      <code>D3D12_VIEWPORT m_viewport;
D3D12_RECT m_scissorRect;
ComPtr&lt;IDXGISwapChain3&gt; m_swapChain;
ComPtr&lt;ID3D12Device&gt; m_device;
ComPtr&lt;ID3D12Resource&gt; m_renderTargets[FrameCount];
ComPtr&lt;ID3D12CommandAllocator&gt; m_commandAllocator;
ComPtr&lt;ID3D12CommandQueue&gt; m_commandQueue;
ComPtr&lt;ID3D12RootSignature&gt; m_rootSignature;
ComPtr&lt;ID3D12DescriptorHeap&gt; m_rtvHeap;
ComPtr&lt;ID3D12PipelineState&gt; m_pipelineState;
ComPtr&lt;ID3D12GraphicsCommandList&gt; m_commandList;
UINT m_rtvDescriptorSize;

</code>
      <para>Asynchronous compute thread.</para>
      <code>DWORD D3D12nBodyGravity.AsyncComputeThreadProc(int threadIndex)
{
    ID3D12CommandQueue* pCommandQueue = m_computeCommandQueue[threadIndex].Get();
    ID3D12CommandAllocator* pCommandAllocator = m_computeAllocator[threadIndex].Get();
    ID3D12GraphicsCommandList* pCommandList = m_computeCommandList[threadIndex].Get();
    ID3D12Fence* pFence = m_threadFences[threadIndex].Get();

    while (0 == InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_terminating))
    {
        // Run the particle simulation.
        Simulate(threadIndex);

        // Close and execute the command list.
        ThrowIfFailed(pCommandList-&gt;Close());
        ID3D12CommandList* ppCommandLists[] = { pCommandList };

        pCommandQueue-&gt;ExecuteCommandLists(1, ppCommandLists);

        // Wait for the compute shader to complete the simulation.
        UINT64 threadFenceValue = InterlockedIncrement(&amp;amp;amp;amp;amp;amp;m_threadFenceValues[threadIndex]);
        ThrowIfFailed(pCommandQueue-&gt;Signal(pFence, threadFenceValue));
        ThrowIfFailed(pFence-&gt;SetEventOnCompletion(threadFenceValue, m_threadFenceEvents[threadIndex]));
        WaitForSingleObject(m_threadFenceEvents[threadIndex], INFINITE);

        // Wait for the render thread to be done with the SRV so that
        // the next frame in the simulation can run.
        UINT64 renderContextFenceValue = InterlockedGetValue(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex]);
        if (m_renderContextFence-&gt;GetCompletedValue() &lt; renderContextFenceValue)
        {
            ThrowIfFailed(pCommandQueue-&gt;Wait(m_renderContextFence.Get(), renderContextFenceValue));
            InterlockedExchange(&amp;amp;amp;amp;amp;amp;m_renderContextFenceValues[threadIndex], 0);
        }

        // Swap the indices to the SRV and UAV.
        m_srvIndex[threadIndex] = 1 - m_srvIndex[threadIndex];

        // Prepare for the next frame.
        ThrowIfFailed(pCommandAllocator-&gt;Reset());
        ThrowIfFailed(pCommandList-&gt;Reset(pCommandAllocator, m_computeState.Get()));
    }

    return 0;
}

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12Pageable" />
  </member>
</doc>