<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12GraphicsCommandList4.BeginRenderPass">
    <summary>
      <para>Marks the beginning of a render pass by binding a set of output resources for the duration of the render pass. These bindings are to one or more render target views (RTVs), and/or to a depth stencil view (DSV).</para>
    </summary>
    <param name="NumRenderTargets">
      <para>A <b>UINT</b>. The number of render targets being bound.</para>
    </param>
    <param name="pRenderTargets">
      <para>A pointer to a constant <see cref="D3D12_RENDER_PASS_RENDER_TARGET_DESC" />, which describes bindings (fixed for the duration of the render pass) to one or more render target views (RTVs), as well as their beginning and ending access characteristics.</para>
    </param>
    <param name="pDepthStencil">
      <para>A pointer to a constant <see cref="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC" />, which describes a binding (fixed for the duration of the render pass) to a depth stencil view (DSV), as well as its beginning and ending access characteristics.</para>
    </param>
    <param name="Flags">
      <para>A <see cref="D3D12_RENDER_PASS_FLAGS" />. The nature/requirements of the render pass; for example, whether it is a suspending or a resuming render pass, or whether it wants to write to unordered access view(s).</para>
    </param>
    <seealso cref="EndRenderPass" />
    <seealso cref="ID3D12GraphicsCommandList4" />
    <seealso href="https://docs.microsoft.com//windows/win32/direct3d12/rendering">Rendering</seealso>
  </member>
  <member name="ID3D12GraphicsCommandList4.BuildRaytracingAccelerationStructure">
    <summary>
      <para>Performs a raytracing acceleration structure build on the GPU and optionally outputs post-build information immediately after the build.</para>
    </summary>
    <param name="pDesc">
      <para>Description of the acceleration structure to build.</para>
    </param>
    <param name="NumPostbuildInfoDescs">
      <para>Size of the <i>pPostbuildInfoDescs</i> array.  Set to 0 if no post-build info is needed.</para>
    </param>
    <param name="pPostbuildInfoDescs">
      <para>Optional array of descriptions for post-build info to generate describing properties of the acceleration structure that was built.</para>
    </param>
    <remarks>
      <para>This method can be called on graphics or compute command lists but not from bundles.</para>
      <para>Post-build information can also be obtained separately from an already built acceleration structure by calling <see cref="EmitRaytracingAccelerationStructurePostbuildInfo" />.  The advantage of generating post-build info along with a build is that a barrier isn’t needed in between the build completing and requesting post-build information, enabling scenarios where the app needs the post-build info right away.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.CopyRaytracingAccelerationStructure">
    <summary>
      <para>Copies a source acceleration structure to destination memory while applying the specified transformation.</para>
    </summary>
    <param name="DestAccelerationStructureData">
      <para>The destination memory. The required size can be discovered by calling <see cref="EmitRaytracingAccelerationStructurePostbuildInfo" /> beforehand, if necessary for the specified <i>Mode</i>.</para>
      <para>The destination start address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com//windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>, regardless of the specified <i>Mode</i>.</para>
      <para>The destination memory range cannot overlap source. Otherwise, results are undefined.</para>
      <para>The resource state that the memory pointed to must be in depends on the <i>Mode</i> parameter. For more information, see <see cref="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE" />.</para>
    </param>
    <param name="SourceAccelerationStructureData">
      <para>The address of the acceleration structure or other type of data to copy/transform based on the specified <i>Mode</i>.  The data remains unchanged and usable.  The operation only copies the data  pointed to by <i>SourceAccelerationStructureData</i> and not any other data, such as acceleration structures, that the source data may point to.  For example, in the case of a top-level acceleration structure, any bottom-level acceleration structures that it points to are not copied in the operation.</para>
      <para>The source memory must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com//windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>, regardless of the specified <i>Mode</i>.</para>
      <para>The resource state that the memory pointed to must be in depends on the <i>Mode</i> parameter. For more information, see <see cref="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE" />.</para>
    </param>
    <param name="Mode">
      <para>The type of copy operation to perform. For more information, see <see cref="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE" />.</para>
    </param>
    <remarks>
      <para>Since raytracing acceleration structures may contain internal pointers and have a device dependent opaque layout, copying them around or otherwise manipulating them requires a dedicated API so that drivers can handle the requested operation.</para>
      <para>This method can be called from graphics or compute command lists but not from bundles.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.DispatchRays">
    <summary>
      <para>Launch the threads of a ray generation shader.</para>
    </summary>
    <param name="pDesc">
      <para>A description of the ray dispatch</para>
    </param>
    <remarks>
      <para>This method can be called from graphics or compute command lists and bundles.</para>
      <para>A raytracing pipeline state must be set on the command list. Otherwise, the behavior of this call is undefined.</para>
      <para>There are 3 dimensions passed in to set the grid size:  width/height/depth.  These dimensions are constrained such that width * height * depth &lt;= 2^30. Exceeding this produces undefined behavior.
If any grid dimension is 0, no threads are launched.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.EmitRaytracingAccelerationStructurePostbuildInfo">
    <summary>
      <para>Emits post-build properties for a set of acceleration structures.  This enables applications to know the output resource requirements for performing acceleration structure operations via <see cref="ID3D12GraphicsCommandList4.CopyRaytracingAccelerationStructure" />.</para>
    </summary>
    <param name="pDesc">
      <para>Description of pos-tbuild information to generate.</para>
    </param>
    <param name="NumSourceAccelerationStructures">
      <para>Number of pointers to acceleration structure GPU virtual addresses pointed to by <i>pSourceAccelerationStructureData</i>.  This number also affects the destination (output), which will be a contiguous array of <b>NumSourceAccelerationStructures</b> output structures, where the type of the structures depends on <i>InfoType</i> field of the supplied in the <i>pDesc</i> description.</para>
    </param>
    <param name="pSourceAccelerationStructureData">
      <para>Pointer to array of GPU virtual addresses of size <i>NumSourceAccelerationStructures</i>.</para>
      <para>The address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com//windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>.</para>
      <para>The memory pointed to must be in state <see cref="D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE" />.</para>
    </param>
    <remarks>
      <para>This method can be called from graphics or compute command lists but not from bundles.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.EndRenderPass">
    <summary>
      <para>Marks the ending of a render pass.</para>
    </summary>
    <seealso cref="BeginRenderPass" />
    <seealso cref="ID3D12GraphicsCommandList4" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/rendering">Rendering</seealso>
  </member>
  <member name="ID3D12GraphicsCommandList4.ExecuteMetaCommand">
    <summary>
      <para>Records the execution (or invocation) of the specified meta command into a graphics command list.</para>
      <para>Call <see cref="ID3D12GraphicsCommandList4.InitializeMetaCommand" /> before executing a meta command. During invocation, you can specify overrides for values of any of the runtime parameters. You can execute multiple meta commands on the same graphics command list. And you can execute the same meta command multiple times on the same command list.</para>
      <para>With a PIX capture taken with the use of meta commands, you can play that back on the same hardware configuration. But, by design, it's not portable to other GPUs.</para>
    </summary>
    <param name="pMetaCommand">
      <para>A pointer to an <b>ID3D12MetaCommand</b> representing the meta command to initialize.</para>
    </param>
    <param name="pExecutionParametersData">
      <para>An optional pointer to a constant structure containing the values of the parameters for executing the meta command.</para>
    </param>
    <param name="ExecutionParametersDataSizeInBytes">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pExecutionParametersData</i>, if set, otherwise 0.</para>
    </param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Your application is responsible for setting up the resources supplied to a meta command in the state required according to the meta command specification. The meta command definition specification defines the expected resource state for each parameter.
Your application is responsible for inserting unordered access view (UAV) barriers for input resources before the meta command's algorithm can consume them. You're also responsible for inserting the UAV barrier for the output resources when you intend to read them back.</para>
      <para>During an algorithm invocation, the driver may insert as many UAV barriers to output resources as are needed to synchronize the output resource usage in the algorithm implementation. From your application's point of view, you should assume that all out and in/out resources are written to by the meta command, including scratch memory.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.InitializeMetaCommand">
    <summary>
      <para>Initializes the specified meta command.</para>
      <para>You must initialize a meta command at least once prior (on the GPU's timeline) to executing it. Initializing gives the  implementation the chance to perform any work necessary to accelerate the invocation of the meta command. You must supply the sufficient resource parameters, including the persistent cache resource.</para>
    </summary>
    <param name="pMetaCommand">
      <para>A pointer to an <see cref="ID3D12MetaCommand" /> representing the meta command to initialize.</para>
    </param>
    <param name="pInitializationParametersData">
      <para>An optional pointer to a constant structure containing the values of the parameters for initializing the meta command.</para>
    </param>
    <param name="InitializationParametersDataSizeInBytes">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pInitializationParametersData</i>, if set, otherwise 0.</para>
    </param>
    <returns>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4.SetPipelineState1">
    <summary>
      <para>Sets a state object on the command list.</para>
    </summary>
    <param name="pStateObject">
      <para>The state object to set on the command list. In the current release, this can only be of type <see cref="D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE" />.</para>
    </param>
    <remarks>
      <para>This method can be called from graphics or compute command lists and bundles.</para>
      <para>This method is an alternative to <see cref="ID3D12GraphicsCommandList.SetPipelineState" />, which is only defined for graphics and compute shaders.  There is only one pipeline state active on a command list at a time, so either call sets the current pipeline state.  The distinction between the calls is that each sets particular types of pipeline state only.  In the current release, <b>SetPipelineState1</b> is only used for setting raytracing pipeline state.</para>
    </remarks>
    <seealso cref="ID3D12GraphicsCommandList4" />
  </member>
  <member name="ID3D12GraphicsCommandList4">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering, extending the interface to support ray tracing and render passes.</para>
    </summary>
    <seealso cref="ID3D12GraphicsCommandList3" />
  </member>
</doc>