<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12Device1.CreatePipelineLibrary">
    <summary>
      <para>Creates a cached pipeline library. For pipeline state objects (PSOs) that are expected to share data together, grouping them into a library before serializing them means that there's less overhead due to metadata, as well as the opportunity to avoid redundant or duplicated data being written to disk.</para>
      <para>You can query for <b>ID3D12PipelineLibrary</b> support with <b><see cref="ID3D12Device.CheckFeatureSupport" /></b>, with <b><see cref="D3D12_FEATURE_SHADER_CACHE" /></b> and <b><see cref="D3D12_FEATURE_DATA_SHADER_CACHE" /></b>. If the <i>Flags</i> member of <b><see cref="D3D12_FEATURE_DATA_SHADER_CACHE" /></b> contains the flag <b><see cref="D3D12_SHADER_CACHE_SUPPORT_LIBRARY" /></b>, the <b>ID3D12PipelineLibrary</b> interface is supported. If not, then <b>DXGI_ERROR_NOT_SUPPORTED</b> will always be returned when this function is called.</para>
    </summary>
    <param name="pLibraryBlob">
      <para>Type: [in] <b>const void*</b></para>
      <para>If the input library blob is empty, then the initial content of the library is empty. If the input library blob is not empty, then it is validated for integrity, parsed, and the pointer is stored. The pointer provided as input to this method must remain valid for the lifetime of the object returned. For efficiency reasons, the data is not copied.</para>
    </param>
    <param name="BlobLength">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">SIZE_T</a></b></para>
      <para>Specifies the length of <i>pLibraryBlob</i> in bytes.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>Specifies a unique REFIID for the <see cref="ID3D12PipelineLibrary" /> object. Typically set this and the following parameter with the macro <code>IID_PPV_ARGS(&amp;Library)</code>, where <b>Library</b> is the name of the object.</para>
    </param>
    <param name="ppPipelineLibrary">
      <para>Type: [out] <b>void**</b></para>
      <para>Returns a pointer to the created library.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>, including <b>E_INVALIDARG</b> if the blob is corrupted or unrecognized, <b>D3D12_ERROR_DRIVER_VERSION_MISMATCH</b> if the provided data came from an old driver or runtime, and <b>D3D12_ERROR_ADAPTER_NOT_FOUND</b> if the data came from different hardware.</para>
      <para>If you pass <code>nullptr</code> for <i>pPipelineLibrary</i> then the runtime still performs the validation of the blob but avoid creating the actual library and returns S_FALSE if the library would have been created.</para>
      <para>Also, the feature requires an updated driver, and attempting to use it on old drivers will return DXGI_ERROR_UNSUPPORTED.</para>
    </returns>
    <remarks>
      <para>A pipeline library enables the following operations.</para>
      <list type="bullet">
        <item>
          <description>Adding pipeline state objects (PSOs) to an existing library object (refer to <see cref="StorePipeline" />).</description>
        </item>
        <item>
          <description>Serializing a PSO library into a contiguous block of memory for disk storage (refer to <see cref="Serialize" />).</description>
        </item>
        <item>
          <description>De-serializing a PSO library from persistent storage (this is handled by <b>CreatePipelineLibrary</b>).</description>
        </item>
        <item>
          <description>Retrieving individual PSOs from the library (refer to <see cref="LoadComputePipeline" /> and <see cref="LoadGraphicsPipeline" />).</description>
        </item>
      </list>
      <para>At no point in the lifecycle of a pipeline library is there duplication between PSOs with identical sub-components.</para>
      <para>A recommended solution for managing the lifetime of the provided pointer while only having to ref-count the returned interface is to leverage <see cref="ID3D12Object.SetPrivateDataInterface" />, and use an object which implements <b>IUnknown</b>, and frees the memory when the ref-count reaches 0.</para>
      <h3>Thread Safety</h3>
      <para>The pipeline library is thread-safe to use, and will internally synchronize as necessary, with one exception: multiple threads loading the same PSO (via <see cref="LoadComputePipeline" />,
<see cref="LoadGraphicsPipeline" />, or <see cref="LoadPipeline" />) should synchronize themselves, as this act may modify the state of that pipeline within the library in a non-thread-safe manner.</para>
    </remarks>
    <seealso cref="ID3D12Device1" />
    <seealso href="https://github.com/microsoft/directx-graphics-samples/tree/master/samples/desktop/d3d12pipelinestatecache">Direct3D 12 pipeline state cache sample</seealso>
  </member>
  <member name="ID3D12Device1.SetEventOnMultipleFenceCompletion">
    <summary>
      <para>Specifies an event that should be fired when one or more of a collection of fences reach specific values.</para>
    </summary>
    <param name="ppFences">
      <para>Type: <b>ID3D12Fence*</b></para>
      <para>An array of length <i>NumFences</i> that specifies the <see cref="ID3D12Fence" /> objects.</para>
    </param>
    <param name="pFenceValues">
      <para>Type: <b>const UINT64*</b></para>
      <para>An array of length <i>NumFences</i> that specifies the fence values required for the event is to be signaled.</para>
    </param>
    <param name="NumFences">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the number of fences to be included.</para>
    </param>
    <param name="Flags">
      <para>Type: <b><see cref="D3D12_MULTIPLE_FENCE_WAIT_FLAGS" /></b></para>
      <para>Specifies one  of the <see cref="D3D12_MULTIPLE_FENCE_WAIT_FLAGS" /> that determines how to proceed.</para>
    </param>
    <param name="hEvent">
      <para>Type: <b>HANDLE</b></para>
      <para>A handle to the event object.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns an HRESULT success or error code.</para>
    </returns>
    <remarks>
      <para>To specify a single fence refer to the <see cref="SetEventOnCompletion" /> method.</para>
      <para>If <i>hEvent</i> is a null handle, then this API will not return until the specified fence value(s) have been reached.</para>
    </remarks>
    <seealso cref="ID3D12Device1" />
  </member>
  <member name="ID3D12Device1.SetResidencyPriority">
    <summary>
      <para>This method sets residency priorities of a specified list of objects.</para>
    </summary>
    <param name="NumObjects">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the number of objects in the <i>ppObjects</i> and <i>pPriorities</i> arrays.</para>
    </param>
    <param name="ppObjects">
      <para>Type: <b>ID3D12Pageable*</b></para>
      <para>Specifies an array, of length <i>NumObjects</i>, containing references to <see cref="ID3D12Pageable" /> objects.</para>
    </param>
    <param name="pPriorities">
      <para>Type: <b>const <see cref="D3D12_RESIDENCY_PRIORITY" />*</b></para>
      <para>Specifies an array, of length <i>NumObjects</i>, of <see cref="D3D12_RESIDENCY_PRIORITY" /> values for the list of objects.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns an HRESULT success or error code.</para>
    </returns>
    <remarks>
      <para>For more information, refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/residency">Residency</a>.</para>
    </remarks>
    <seealso cref="ID3D12Device1" />
  </member>
  <member name="ID3D12Device1">
    <summary>
      <para>Represents a virtual adapter, and expands on the range of methods provided by <see cref="ID3D12Device" />.
<b>Note</b>  This interface was introduced in Windows 10 Anniversary Update. Applications targetting Windows 10 Anniversary Update should use this interface instead of earlier or later versions. Applications targetting an earlier or later version of Windows 10 should use the appropriate version of the <b>ID3D12Device</b> interface.</para>
    </summary>
    <remarks>
      <para>Use <see cref="D3D12CreateDevice" /> to create a device.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12Device" />
    <seealso cref="ID3D12Device2" />
  </member>
</doc>