<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12SDKConfiguration.SetSDKVersion">
    <summary>
      <para>Configures the SDK version to use.</para>
    </summary>
    <param name="SDKVersion">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">UINT</a></b></para>
      <para>The SDK version to set.</para>
    </param>
    <param name="SDKPath">
      <para>Type: _In_z_ <b><a href="https://docs.microsoft.com//windows/win32/winprog/windows-data-types">LPCSTR</a></b></para>
      <para>A NULL-terminated string that provides the relative path to <code>d3d12core.dll</code> at the specified <i>SDKVersion</i>. The path is relative to the process exe of the caller. If <code>d3d12core.dll</code> isn't found, or isn't of the specified <i>SDKVersion</i>, then Direct3D 12 device creation fails.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, then it returns <b>S_OK</b>. Otherwise, it returns one of the <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a>.</para>
    </returns>
    <remarks>
      <para>This method can be used only in Windows Developer Mode.</para>
      <para>To set the SDK version using this API, you must call it before you create the Direct3D 12 device. Calling this API <i>after</i> creating the Direct3D 12 device will cause the Direct3D 12 runtime to remove the device.</para>
      <para>If the <code>d3d12core.dll</code> installed with the OS is newer than the SDK version specified, then the OS version is used instead.</para>
      <para>You can retrieve the version of a particular <code>D3D12Core.dll</code> from the exported symbol <see cref="D3D12SDKVersion" />, which is a variable of type <b>UINT</b>, just like the variables exported from applications to enable use of the Agility SDK.</para>
    </remarks>
  </member>
  <member name="ID3D12SDKConfiguration">
    <summary>
      <para>Provides SDK configuration methods. A pointer to this interface can be retrieved by calling the <see cref="D3D12GetInterface" /> free function with the <b>CLSID_D3D12SDKConfiguration</b> CLSID.</para>
    </summary>
    <remarks>
      <para>Tools that play back API capture such as PIX, and test harnesses such as the HLK, require modification to support the redist. Such tools can choose to ship with the latest redist. Direct3D's API compatibility through updates should mean that an API capture tool can capture on an older version of the Direct3D 12 SDK, and play it back on the newer version. However, some scenarios require more flexibility in selecting the SDK version.</para>
    </remarks>
  </member>
</doc>