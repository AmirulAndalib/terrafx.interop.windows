<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12Resource.GetDesc">
    <summary>
      <para>Gets the resource description.</para>
    </summary>
    <returns>
      <para>Type: <b><see cref="D3D12_RESOURCE_DESC" /></b></para>
      <para>A Direct3D 12 resource description structure.</para>
    </returns>
    <seealso cref="ID3D12Resource" />
  </member>
  <member name="ID3D12Resource.GetGPUVirtualAddress">
    <summary>
      <para>This method returns the GPU virtual address of a buffer resource.</para>
    </summary>
    <returns>
      <para>Type: <b>D3D12_GPU_VIRTUAL_ADDRESS</b></para>
      <para>This method returns the GPU virtual address.
D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd synonym of UINT64.</para>
    </returns>
    <remarks>
      <para>This method is only useful for buffer resources, it will return zero for all texture resources.</para>
      <para>For more information on the use of GPU virtual addresses, refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/indirect-drawing">Indirect Drawing</a>.</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D1211on12</a> sample uses <b>ID3D12Resource.GetGPUVirtualAddress</b> as follows:</para>
      <code>// Initialize the vertex buffer view.
m_vertexBufferView.BufferLocation = m_vertexBuffer-&gt;GetGPUVirtualAddress();
m_vertexBufferView.StrideInBytes = sizeof(Vertex);
m_vertexBufferView.SizeInBytes = vertexBufferSize;

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
  </member>
  <member name="ID3D12Resource.GetHeapProperties">
    <summary>
      <para>Retrieves the properties of the resource heap, for placed and committed resources.</para>
    </summary>
    <param name="pHeapProperties">
      <para>Type: <b><see cref="D3D12_HEAP_PROPERTIES" />*</b></para>
      <para>Pointer to a <see cref="D3D12_HEAP_PROPERTIES" /> structure, that on successful completion of the method will contain the resource heap properties.</para>
    </param>
    <param name="pHeapFlags">
      <para>Type: <b><see cref="D3D12_HEAP_FLAGS" />*</b></para>
      <para>Specifies a <see cref="D3D12_HEAP_FLAGS" /> variable, that on successful completion of the method will contain any miscellaneous heap flags.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.
If the resource was created as reserved, E_INVALIDARG is returned.</para>
    </returns>
    <remarks>
      <para>This method only works on placed and committed resources, not on reserved resources.
If the resource was created as reserved, E_INVALIDARG is returned.
The pages could be mapped to none, one, or more heaps.</para>
      <para>For more information, refer to <a href="https://docs.microsoft.com//windows/desktop/direct3d12/memory-management">Memory Management in Direct3D 12</a>.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
  </member>
  <member name="ID3D12Resource.Map">
    <summary>
      <para>Gets a CPU pointer to the specified subresource in the resource, but may not disclose the pointer value to applications. <b>Map</b> also invalidates the CPU cache, when necessary, so that CPU reads to this address reflect any modifications made by the GPU.</para>
    </summary>
    <param name="Subresource">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the index number of the subresource.</para>
    </param>
    <param name="pReadRange">
      <para>Type: <b>const <see cref="D3D12_RANGE" />*</b></para>
      <para>A pointer to a <see cref="D3D12_RANGE" /> structure that describes the range of memory to access.</para>
      <para>This indicates the region the CPU might read, and the coordinates are subresource-relative. A null pointer indicates the entire subresource might be read by the CPU. It is valid to specify the CPU won't read any data by passing a range where <b>End</b> is less than or equal to <b>Begin</b>.</para>
    </param>
    <param name="ppData">
      <para>Type: <b><b>void</b>**</b></para>
      <para>A pointer to a memory block that receives a pointer to the resource data.</para>
      <para>A null pointer is valid and is useful to cache a CPU virtual address range for methods like <see cref="WriteToSubresource" />. When <i>ppData</i> is not NULL, the pointer returned is never offset by any values in <i>pReadRange</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>
        <b>Map</b> and <see cref="Unmap" /> can be called by multiple threads safely. Nested <b>Map</b> calls are supported and are ref-counted. The first call to <b>Map</b> allocates a CPU virtual address range for the resource. The last call to <b>Unmap</b> deallocates the CPU virtual address range. The CPU virtual address is commonly returned to the application; but manipulating the contents of textures with unknown layouts precludes disclosing the CPU virtual address. See <see cref="WriteToSubresource" /> for more details. Applications cannot rely on the address being consistent, unless <b>Map</b> is persistently nested.</para>
      <para>Pointers returned by <b>Map</b> are not guaranteed to have all the capabilities of normal pointers, but most applications won't notice a difference in normal usage. For example, pointers with WRITE_COMBINE behavior have weaker CPU memory ordering guarantees than WRITE_BACK behavior. Memory accessible by both CPU and GPU are not guaranteed to share the same atomic memory guarantees that the CPU has, due to PCIe limitations. Use fences for synchronization.</para>
      <para>There are two usage model categories for <b>Map</b>, simple and advanced. The simple usage models maximize tool performance, so applications are recommended to stick with the simple models until the advanced models are proven to be required by the app.</para>
      <h3>Simple Usage Models</h3>
      <para>Applications should stick to the heap type abstractions of UPLOAD, DEFAULT, and READBACK, in order to support all adapter architectures reasonably well.</para>
      <para>Applications should avoid CPU reads from pointers to resources on UPLOAD heaps, even accidently. CPU reads will work, but are prohibitively slow on many common GPU architectures, so consider the following:</para>
      <list type="bullet">
        <item>
          <description>
            <para>Don't make the CPU read from resources associated with heaps that are D3D12_HEAP_TYPE_UPLOAD or have D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The memory region to which <b>pData</b> points can be allocated with <a href="https://docs.microsoft.com//windows/desktop/Memory/memory-protection-constants">PAGE_WRITECOMBINE</a>, and your app must honor all restrictions that are associated with such memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>Even the following C++ code can read from memory and trigger the performance penalty because the code can expand to the following x86 assembly code.</para>
            <para>C++ code:</para>
            <code>*((int*)MappedResource.pData) = 0;
</code>
            <para>x86 assembly code:</para>
            <code>AND DWORD PTR [EAX],0
</code>
          </description>
        </item>
        <item>
          <description>
            <para>Use the appropriate optimization settings and language constructs to help avoid this performance penalty. For example, you can avoid the xor optimization by using a <b>volatile</b> pointer or by optimizing for code speed instead of code size.</para>
          </description>
        </item>
      </list>
      <para>Applications are encouraged to leave resources unmapped while the CPU will not modify them, and use tight, accurate ranges at all times. This enables the fastest modes for tools, like <a href="https://docs.microsoft.com//visualstudio/debugger/visual-studio-graphics-diagnostics?view=vs-2015">Graphics Debugging</a> and the debug layer. Such tools need to track all CPU modifications to memory that the GPU could read.</para>
      <h3>Advanced Usage Models</h3>
      <para>Resources on CPU-accessible heaps can be persistently mapped, meaning <b>Map</b> can be called once, immediately after resource creation. <see cref="Unmap" /> never needs to be called, but the address returned from <b>Map</b> must no longer be used after the last reference to the resource is released. When using persistent map, the application must ensure the CPU finishes writing data into memory before the GPU executes a command list that reads or writes the memory. In common scenarios, the application merely must write to memory before calling <see cref="ExecuteCommandLists" />; but using a fence to delay command list execution works as well.</para>
      <para>All CPU-accessible memory types support persistent mapping usage, where the resource is mapped but then never unmapped, provided the application does not access the pointer after the resource has been disposed.</para>
      <h4>Examples</h4>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/direct3d12/working-samples">D3D12Bundles</a> sample uses <b>ID3D12Resource.Map</b> as follows:</para>
      <para>Copy triangle data to the vertex buffer.</para>
      <code>// Copy the triangle data to the vertex buffer.
UINT8* pVertexDataBegin;
CD3DX12_RANGE readRange(0, 0);        // We do not intend to read from this resource on the CPU.
ThrowIfFailed(m_vertexBuffer-&gt;Map(0, &amp;amp;amp;amp;amp;amp;readRange, reinterpret_cast&lt;void**&gt;(&amp;amp;amp;amp;amp;amp;pVertexDataBegin)));
memcpy(pVertexDataBegin, triangleVertices, sizeof(triangleVertices));
m_vertexBuffer-&gt;Unmap(0, nullptr);

</code>
      <para>Create an upload heap for the constant buffers.</para>
      <code>// Create an upload heap for the constant buffers.
ThrowIfFailed(pDevice-&gt;CreateCommittedResource(
    &amp;amp;amp;amp;amp;amp;CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),
    D3D12_HEAP_FLAG_NONE,
    &amp;amp;amp;amp;amp;amp;CD3DX12_RESOURCE_DESC.Buffer(sizeof(ConstantBuffer) * m_cityRowCount * m_cityColumnCount),
    D3D12_RESOURCE_STATE_GENERIC_READ,
    nullptr,
    IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;m_cbvUploadHeap)));

// Map the constant buffers. Note that unlike D3D11, the resource
// does not need to be unmapped for use by the GPU. In this sample,
// the resource stays 'permanently' mapped to avoid overhead with
// mapping/unmapping each frame.
CD3DX12_RANGE readRange(0, 0);        // We do not intend to read from this resource on the CPU.
ThrowIfFailed(m_cbvUploadHeap-&gt;Map(0, &amp;amp;amp;amp;amp;amp;readRange, reinterpret_cast&lt;void**&gt;(&amp;amp;amp;amp;amp;amp;m_pConstantBuffers)));

</code>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/notes-on-example-code">Example Code in the D3D12 Reference</a>.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/subresources">Subresources</seealso>
    <seealso cref="Unmap" />
  </member>
  <member name="ID3D12Resource.ReadFromSubresource">
    <summary>
      <para>Uses the CPU to copy data from a subresource, enabling the CPU to read the contents of most textures with undefined layouts.</para>
    </summary>
    <param name="pDstData">
      <para>Type: <b>void*</b></para>
      <para>A pointer to the destination data in memory.</para>
    </param>
    <param name="DstRowPitch">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The distance from one row of destination data to the next row.</para>
    </param>
    <param name="DstDepthPitch">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The distance from one depth slice of destination data to the next.</para>
    </param>
    <param name="SrcSubresource">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the index of the subresource to read from.</para>
    </param>
    <param name="pSrcBox">
      <para>Type: <b>const <see cref="D3D12_BOX" />*</b></para>
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data from.
If NULL, the data is read from the destination subresource with no offset.
The dimensions of the destination must fit the destination (see
<see cref="D3D12_BOX" />).</para>
      <para>An empty box results in a no-op.
A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value.
When the box is empty, this method doesn't perform any operation.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>See the Remarks section for <see cref="WriteToSubresource" />.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/subresources">Subresources</seealso>
  </member>
  <member name="ID3D12Resource.Unmap">
    <summary>
      <para>Invalidates the CPU pointer to the specified subresource in the resource.</para>
    </summary>
    <param name="Subresource">
      <para>Type: <b>UINT</b></para>
      <para>Specifies the index of the subresource.</para>
    </param>
    <param name="pWrittenRange">
      <para>Type: <b>const <see cref="D3D12_RANGE" />*</b></para>
      <para>A pointer to a <see cref="D3D12_RANGE" /> structure that describes the range of memory to unmap.</para>
      <para>This indicates the region the CPU might have modified, and the coordinates are subresource-relative. A null pointer indicates the entire subresource might have been modified by the CPU. It is valid to specify the CPU didn't write any data by passing a range where <b>End</b> is less than or equal to <b>Begin</b>.</para>
      <para>This parameter is only used by tooling, and not for correctness of the actual unmap operation.</para>
    </param>
    <remarks>
      <para>Refer to the extensive Remarks and Examples for the <see cref="Map" /> method.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
    <seealso cref="Map" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/subresources">Subresources</seealso>
  </member>
  <member name="ID3D12Resource.WriteToSubresource">
    <summary>
      <para>Uses the CPU to copy data into a subresource, enabling the CPU to modify the contents of most textures with undefined layouts.</para>
    </summary>
    <param name="DstSubresource">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the index of the subresource.</para>
    </param>
    <param name="pDstBox">
      <para>Type: <b>const <see cref="D3D12_BOX" />*</b></para>
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data into.
If NULL, the data is written to the destination subresource with no offset.
The dimensions of the source must fit the destination (see
<see cref="D3D12_BOX" />).</para>
      <para>An empty box results in a no-op.
A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value,
or the front value is greater than or equal to the back value.
When the box is empty, this method doesn't perform any operation.</para>
    </param>
    <param name="pSrcData">
      <para>Type: <b>const void*</b></para>
      <para>A pointer to the source data in memory.</para>
    </param>
    <param name="SrcRowPitch">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The distance from one row of source data to the next row.</para>
    </param>
    <param name="SrcDepthPitch">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The distance from one depth slice of source data to the next.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</para>
    </returns>
    <remarks>
      <para>The resource should first be mapped using
<see cref="Map" />. Textures must be in the <see cref="D3D12_RESOURCE_STATE_COMMON" /> state for CPU access through <b>WriteToSubresource</b> and <see cref="ReadFromSubresource" /> to be legal; but buffers do not.</para>
      <para>For efficiency, ensure the bounds and alignment of the extents within the box are ( 64 / [bytes per pixel] ) pixels horizontally.
Vertical bounds and alignment should be 2 rows, except when 1-byte-per-pixel formats are used, in which case 4 rows are recommended.
Single depth slices per call are handled efficiently.
It is recommended but not necessary to provide pointers and strides which are 128-byte aligned.</para>
      <para>When writing to sub mipmap levels, it is recommended to use larger width and heights than described above.
This is because small mipmap levels may actually be stored within a larger block of memory, with an opaque amount of offsetting which can interfere with alignment to cache lines.</para>
      <para>
        <b>WriteToSubresource</b> and <see cref="ReadFromSubresource" /> enable near zero-copy optimizations for UMA adapters, but can prohibitively impair the efficiency of discrete/ NUMA adapters as the texture data cannot reside in local video memory. Typical applications should stick to discrete-friendly upload techniques, unless they recognize the adapter architecture is UMA. For more details on uploading, refer to <see cref="CopyTextureRegion" />, and for more details on UMA, refer to <see cref="D3D12_FEATURE_DATA_ARCHITECTURE" />.</para>
      <para>On UMA systems, this routine can be used to minimize the cost of memory copying through the loop optimization known as <a href="https://en.wikipedia.org/wiki/loop_tiling">loop tiling</a>. By breaking up the upload into chucks that comfortably fit in the CPU cache, the effective bandwidth between the CPU and main memory more closely achieves theoretical maximums.</para>
    </remarks>
    <seealso cref="ID3D12Resource" />
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/subresources">Subresources</seealso>
  </member>
  <member name="ID3D12Resource">
    <summary>
      <para>Encapsulates a generalized ability of the CPU and GPU to read and write to physical memory, or heaps. It contains abstractions for organizing and manipulating simple arrays of data as well as multidimensional data optimized for shader sampling.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-interfaces">Core Interfaces</seealso>
    <seealso cref="ID3D12Pageable" />
  </member>
</doc>