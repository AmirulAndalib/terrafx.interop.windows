<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12Device4.CreateCommandList1">
    <summary>
      <para>Creates a command list in the closed state. Also see <see cref="ID3D12Device.CreateCommandList" />.</para>
    </summary>
    <param name="nodeMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set a bit to identify the node (the device's physical adapter) for which to create the command list. Each bit in the mask corresponds to a single node. Only one bit must be set. Also see <a href="https://docs.microsoft.com//windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</para>
    </param>
    <param name="type">
      <para>Type: <b><see cref="D3D12_COMMAND_LIST_TYPE" /></b></para>
      <para>Specifies the type of command list to create.</para>
    </param>
    <param name="flags">
      <para>Type: <b><see cref="D3D12_COMMAND_LIST_FLAGS" /></b></para>
      <para>Specifies creation flags.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (<b>GUID</b>) of the command list interface to return in <i>ppCommandList</i>.</para>
    </param>
    <param name="ppCommandList">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives a pointer to the <see cref="ID3D12CommandList" /> or <see cref="ID3D12GraphicsCommandList" /> interface for the command list.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_OUTOFMEMORY|There is insufficient memory to create the command list.|</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a> for other possible return values.</para>
    </returns>
    <seealso cref="ID3D12Device.CreateCommandList" />
  </member>
  <member name="ID3D12Device4.CreateCommittedResource1">
    <summary>
      <para>Creates both a resource and an implicit heap (optionally for a protected session), such that the heap is big enough to contain the entire resource, and the resource is mapped to the heap. Also see <see cref="ID3D12Device.CreateCommittedResource" /> for a code example.</para>
    </summary>
    <param name="pHeapProperties">
      <para>Type: <b>const <see cref="D3D12_HEAP_PROPERTIES" />*</b></para>
      <para>A pointer to a <b>D3D12_HEAP_PROPERTIES</b> structure that provides properties for the resource's heap.</para>
    </param>
    <param name="HeapFlags">
      <para>Type: <b><see cref="D3D12_HEAP_FLAGS" /></b></para>
      <para>Heap options, as a bitwise-OR'd combination of <b>D3D12_HEAP_FLAGS</b> enumeration constants.</para>
    </param>
    <param name="pDesc">
      <para>Type: <b>const <see cref="D3D12_RESOURCE_DESC" />*</b></para>
      <para>A pointer to a <b>D3D12_RESOURCE_DESC</b> structure that describes the resource.</para>
    </param>
    <param name="InitialResourceState">
      <para>Type: <b><see cref="D3D12_RESOURCE_STATES" /></b></para>
      <para>The initial state of the resource, as a bitwise-OR'd combination of <b>D3D12_RESOURCE_STATES</b> enumeration constants.</para>
      <para>When you create a resource together with a <see cref="D3D12_HEAP_TYPE_UPLOAD" /> heap, you must set <i>InitialResourceState</i> to <see cref="D3D12_RESOURCE_STATE_GENERIC_READ" />.</para>
      <para>When you create a resource together with a <see cref="D3D12_HEAP_TYPE_READBACK" /> heap, you must set <i>InitialResourceState</i> to <see cref="D3D12_RESOURCE_STATE_COPY_DEST" />.</para>
    </param>
    <param name="pOptimizedClearValue">
      <para>Type: <b>const <see cref="D3D12_CLEAR_VALUE" />*</b></para>
      <para>Specifies a <b>D3D12_CLEAR_VALUE</b> structure that describes the default value for a clear color.</para>
      <para>
        <i>pOptimizedClearValue</i> specifies a value for which clear operations are most optimal. When the created resource is a texture with either the <see cref="D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET" /> or <b>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</b> flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.</para>
      <para>When you use <see cref="D3D12_RESOURCE_DIMENSION_BUFFER" />, you must set <i>pOptimizedClearValue</i> to <code>nullptr</code>.</para>
    </param>
    <param name="pProtectedSession">
      <para>Type: <b><see cref="ID3D12ProtectedResourceSession" />*</b></para>
      <para>An optional pointer to an object that represents a session for content protection. If provided, this session indicates that the resource should be protected. You can obtain an <b>ID3D12ProtectedResourceSession</b> by calling <see cref="ID3D12Device4.CreateProtectedResourceSession" />.</para>
    </param>
    <param name="riidResource">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (<b>GUID</b>) of the resource interface to return in <i>ppvResource</i>.</para>
      <para>While <i>riidResource</i> is most commonly the <b>GUID</b> of <see cref="ID3D12Resource" />, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</para>
    </param>
    <param name="ppvResource">
      <para>Type: <b>void**</b></para>
      <para>An optional pointer to a memory block that receives the requested interface pointer to the created resource object.</para>
      <para>
        <i>ppvResource</i> can be <code>nullptr</code>, to enable capability testing. When <i>ppvResource</i> is <code>nullptr</code>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_OUTOFMEMORY|There is insufficient memory to create the resource.|</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a> for other possible return values.</para>
    </returns>
    <remarks>
      <para>This method creates both a resource and a heap, such that the heap is big enough to contain the entire resource, and the resource is mapped to the heap. The created heap is known as an implicit heap, because the heap object can't be obtained by the application. Before releasing the final reference on the resource, your application must ensure that the GPU will no longer read nor write to this resource.</para>
      <para>The implicit heap is made resident for GPU access before the method returns control to your application. Also see <a href="https://docs.microsoft.com//windows/win32/direct3d12/residency">Residency</a>.</para>
      <para>The resource GPU VA mapping can't be changed. See <see cref="ID3D12CommandQueue.UpdateTileMappings" /> and <a href="https://docs.microsoft.com//windows/win32/direct3d12/volume-tiled-resources">Volume tiled resources</a>.</para>
      <para>This method may be called by multiple threads concurrently.</para>
    </remarks>
  </member>
  <member name="ID3D12Device4.CreateHeap1">
    <summary>
      <para>Creates a heap (optionally for a protected session) that can be used with placed resources and reserved resources. Also see <see cref="ID3D12Device.CreateHeap" />.</para>
    </summary>
    <param name="pDesc">
      <para>Type: <b>const <see cref="D3D12_HEAP_DESC" />*</b></para>
      <para>A pointer to a constant <b>D3D12_HEAP_DESC</b> structure that describes the heap.</para>
    </param>
    <param name="pProtectedSession">
      <para>Type: <b><see cref="ID3D12ProtectedResourceSession" />*</b></para>
      <para>An optional pointer to an object that represents a session for content protection. If provided, this session indicates that the heap should be protected. You can obtain an <b>ID3D12ProtectedResourceSession</b> by calling <see cref="ID3D12Device4.CreateProtectedResourceSession" />.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (<b>GUID</b>) of the heap interface to return in <i>ppvHeap</i>.</para>
      <para>While <i>riidResource</i> is most commonly the <b>GUID</b> of <see cref="ID3D12Heap" />, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</para>
    </param>
    <param name="ppvHeap">
      <para>Type: <b>void**</b></para>
      <para>An optional pointer to a memory block that receives the requested interface pointer to the created heap object.</para>
      <para>
        <i>ppvHeap</i> can be <code>nullptr</code>, to enable capability testing. When <i>ppvHeap</i> is <code>nullptr</code>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_OUTOFMEMORY|There is insufficient memory to create the heap.|</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a> for other possible return values.</para>
    </returns>
    <remarks>
      <para>
        <b>CreateHeap1</b> creates a heap that can be used with placed resources and reserved resources.</para>
      <para>Before releasing the final reference on the heap, your application must ensure that the GPU will no longer read or write to this heap.</para>
      <para>A placed resource object holds a reference on the heap it is created on; but a reserved resource doesn't hold a reference for each mapping made to a heap.</para>
    </remarks>
  </member>
  <member name="ID3D12Device4.CreateProtectedResourceSession">
    <summary>
      <para>Creates an object that represents a session for content protection. You can then provide that session when you're creating resource or heap objects, to indicate that they should be protected.</para>
      <blockquote>
        <para>[!NOTE]
Memory contents can't be transferred from a protected resource to an unprotected resource.</para>
      </blockquote>
    </summary>
    <param name="pDesc">
      <para>Type: <b>const <see cref="D3D12_PROTECTED_RESOURCE_SESSION_DESC" />*</b></para>
      <para>A pointer to a constant <b>D3D12_PROTECTED_RESOURCE_SESSION_DESC</b> structure, describing the session to create.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (<b>GUID</b>) of the <see cref="ID3D12ProtectedResourceSession" /> interface.</para>
    </param>
    <param name="ppSession">
      <para>Type: <b>void**</b></para>
      <para>A pointer to a memory block that receives an <see cref="ID3D12ProtectedResourceSession" /> interface pointer to the created session object.</para>
    </param>
  </member>
  <member name="ID3D12Device4.CreateReservedResource1">
    <summary>
      <para>Creates a resource (optionally for a protected session) that is reserved, and not yet mapped to any pages in a heap. Also see <see cref="ID3D12Device.CreateReservedResource" />.</para>
      <blockquote>
        <para>[!NOTE]
Only tiles from heaps created with the same protected resource session can be mapped into a protected reserved resource.</para>
      </blockquote>
    </summary>
    <param name="pDesc">
      <para>Type: <b>const <see cref="D3D12_RESOURCE_DESC" />*</b></para>
      <para>A pointer to a <b>D3D12_RESOURCE_DESC</b> structure that describes the resource.</para>
    </param>
    <param name="InitialState">
      <para>Type: <b><see cref="D3D12_RESOURCE_STATES" /></b></para>
      <para>The initial state of the resource, as a bitwise-OR'd combination of <b>D3D12_RESOURCE_STATES</b> enumeration constants.</para>
    </param>
    <param name="pOptimizedClearValue">
      <para>Type: <b>const <see cref="D3D12_CLEAR_VALUE" />*</b></para>
      <para>Specifies a <b>D3D12_CLEAR_VALUE</b> structure that describes the default value for a clear color.</para>
      <para>
        <i>pOptimizedClearValue</i> specifies a value for which clear operations are most optimal. When the created resource is a texture with either the <see cref="D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET" /> or <b>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</b> flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.</para>
      <para>When you use <see cref="D3D12_RESOURCE_DIMENSION_BUFFER" />, you must set <i>pOptimizedClearValue</i> to <code>nullptr</code>.</para>
    </param>
    <param name="pProtectedSession">
      <para>Type: <b><see cref="ID3D12ProtectedResourceSession" />*</b></para>
      <para>An optional pointer to an object that represents a session for content protection. If provided, this session indicates that the resource should be protected. You can obtain an <b>ID3D12ProtectedResourceSession</b> by calling <see cref="ID3D12Device4.CreateProtectedResourceSession" />.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the globally unique identifier (<b>GUID</b>) of the resource interface to return in <i>ppvResource</i>. See <b>Remarks</b>.</para>
      <para>While <i>riidResource</i> is most commonly the <b>GUID</b> of <see cref="ID3D12Resource" />, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</para>
    </param>
    <param name="ppvResource">
      <para>Type: <b>void**</b></para>
      <para>An optional pointer to a memory block that receives the requested interface pointer to the created resource object.</para>
      <para>
        <i>ppvResource</i> can be <code>nullptr</code>, to enable capability testing. When <i>ppvResource</i> is <code>nullptr</code>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/win32/com/com-error-codes-10">error code</a>.</para>
      <para>|Return value|Description|
|-|-|
|E_OUTOFMEMORY|There is insufficient memory to create the resource.|</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 return codes</a> for other possible return values.</para>
    </returns>
    <remarks>
      <para>
        <b>CreateReservedResource</b> is equivalent to <see cref="D3D11_RESOURCE_MISC_TILED" /> in Direct3D 11. It creates a resource with virtual memory only, no backing store.</para>
      <para>You need to map the resource to physical memory (that is, to a heap) using <see cref="CopyTileMappings" /> and <see cref="UpdateTileMappings" />.</para>
      <para>These resource types can only be created when the adapter supports tiled resource tier 1 or greater. The tiled resource tier defines the behavior of accessing a resource that is not mapped to a heap.</para>
    </remarks>
    <seealso cref="CreateCommittedResource1" />
    <seealso cref="CreatePlacedResource" />
    <seealso cref="ID3D12Device4" />
  </member>
  <member name="ID3D12Device4.GetResourceAllocationInfo1">
    <summary>
      <para>Gets rich info about the size and alignment of memory required for a collection of resources on this adapter. Also see <see cref="ID3D12Device.GetResourceAllocationInfo" />.</para>
      <para>In addition to the <see cref="D3D12_RESOURCE_ALLOCATION_INFO" /> returned from the method, this version also returns an array of <see cref="D3D12_RESOURCE_ALLOCATION_INFO1" /> structures, which provide additional details for each resource description passed as input. See the <i>pResourceAllocationInfo1</i> parameter.</para>
    </summary>
    <param name="visibleMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set bits to identify the nodes (the device's physical adapters). Each bit in the mask corresponds to a single node. Also see <a href="https://docs.microsoft.com//windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</para>
    </param>
    <param name="numResourceDescs">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of resource descriptors in the <i>pResourceDescs</i> array. This is also the size (the number of elements in) <i>pResourceAllocationInfo1</i>.</para>
    </param>
    <param name="pResourceDescs">
      <para>Type: <b>const <see cref="D3D12_RESOURCE_DESC" />*</b></para>
      <para>An array of <b>D3D12_RESOURCE_DESC</b> structures that described the resources to get info about.</para>
    </param>
    <param name="pResourceAllocationInfo1">
      <para>Type: <b><see cref="D3D12_RESOURCE_ALLOCATION_INFO1" />*</b></para>
      <para>An array of <see cref="D3D12_RESOURCE_ALLOCATION_INFO1" /> structures, containing additional details for each resource description passed as input. This makes it simpler for your application to allocate a heap for multiple resources, and without manually computing offsets for where each resource should be placed.</para>
    </param>
    <returns>
      <para>Type: <b><see cref="D3D12_RESOURCE_ALLOCATION_INFO" /></b></para>
      <para>A <see cref="D3D12_RESOURCE_ALLOCATION_INFO" /> structure that provides info about video memory allocated for the specified array of resources.</para>
    </returns>
    <remarks>
      <para>When you're using <see cref="CreatePlacedResource" />, your application must use <b>GetResourceAllocationInfo</b> in order to understand the size and alignment characteristics of texture resources. The results of this method vary depending on the particular adapter, and must be treated as unique to this adapter and driver version.</para>
      <para>Your application can't use the output of <b>GetResourceAllocationInfo</b> to understand packed mip properties of textures. To understand packed mip properties of textures, your application must use <see cref="GetResourceTiling" />.</para>
      <para>Texture resource sizes significantly differ from the information returned by <b>GetResourceTiling</b>, because some adapter architectures allocate extra memory for textures to reduce the effective bandwidth during common rendering scenarios. This even includes textures that have constraints on their texture layouts, or have standardized texture layouts. That extra memory can't be sparsely mapped nor remapped by an application using <see cref="CreateReservedResource" /> and <see cref="UpdateTileMappings" />, so it isn't reported by <b>GetResourceTiling</b>.</para>
      <para>Your application can forgo using <b>GetResourceAllocationInfo</b> for buffer resources (<see cref="D3D12_RESOURCE_DIMENSION_BUFFER" />). Buffers have the same size on all adapters, which is merely the smallest multiple of 64KB that's greater or equal to <see cref="D3D12_RESOURCE_DESC.Width" />.</para>
      <para>When multiple resource descriptions are passed in, the C++ algorithm for calculating a structure size and alignment are used. For example, a three-element array with two tiny 64KB-aligned resources and a tiny 4MB-aligned resource, reports differing sizes based on the order of the array. If the 4MB aligned resource is in the middle, then the resulting <b>Size</b> is 12MB. Otherwise, the resulting <b>Size</b> is 8MB. The <b>Alignment</b> returned would always be 4MB, because it's the superset of all alignments in the resource array.</para>
    </remarks>
    <seealso cref="ID3D12Device4" />
  </member>
  <member name="ID3D12Device4">
    <summary>
      <para>Represents a virtual adapter.</para>
      <para>This interface extends <see cref="ID3D12Device3" />.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/win32/direct3d12/direct3d-12-interfaces">Core interfaces</seealso>
  </member>
</doc>