<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D12_INPUT_ELEMENT_DESC">
    <summary>
      <para>Describes a single element for the input-assembler stage of the graphics pipeline.</para>
    </summary>
    <remarks>
      <para>This structure is a member of the <see cref="D3D12_INPUT_LAYOUT_DESC" /> structure. A pipeline state object contains a input-layout structure that defines one element being read from an input slot.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d12/direct3d-12-structures">Core Structures</seealso>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.SemanticName">
    <summary>
      <para>The HLSL semantic associated with this element in a shader input-signature.</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.SemanticIndex">
    <summary>
      <para>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a
case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic
name <b>matrix</b>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.Format">
    <summary>
      <para>A <see cref="DXGI_FORMAT" />-typed value that specifies the format of the element data.</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.InputSlot">
    <summary>
      <para>An integer value that identifies the input-assembler. For more info, see <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">Input Slots</a>. Valid values are between 0 and 15.</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.AlignedByteOffset">
    <summary>
      <para>Optional. Offset, in bytes, to this element from the start of the vertex. Use D3D12_APPEND_ALIGNED_ELEMENT (0xffffffff) for convenience to define the current element directly
after the previous one, including any packing if necessary.</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.InputSlotClass">
    <summary>
      <para>A value that identifies the input data class for a single input slot.</para>
    </summary>
  </member>
  <member name="D3D12_INPUT_ELEMENT_DESC.InstanceDataStepRate">
    <summary>
      <para>The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an
element that contains per-vertex data (the slot class is set to the D3D12_INPUT_PER_VERTEX_DATA member of <see cref="D3D12_INPUT_CLASSIFICATION" />).</para>
    </summary>
  </member>
</doc>