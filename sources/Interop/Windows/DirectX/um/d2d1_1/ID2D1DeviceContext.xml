<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1DeviceContext.CreateBitmap">
    <summary>Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the <see cref="DrawBitmap" /> and <see cref="ID2D1BitmapBrush" /> APIs. In addition, color context information can be passed to the bitmap.</summary>
    <param name="size">The pixel size of the bitmap to be created.</param>
    <param name="sourceData">The initial data that will be loaded into the bitmap.</param>
    <param name="pitch">The pitch of the source data, if specified.</param>
    <param name="bitmapProperties">The properties of the bitmap to be created.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to a new bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
        <listheader>
          <description>D3DERR_OUTOFVIDEOMEMORY</description>
          <description>Direct3D does not have enough display memory to perform the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmap">
    <summary>Creates a bitmap that can be used as a target surface, for reading back to the CPU, or as a source for the <see cref="DrawBitmap" /> and <see cref="ID2D1BitmapBrush" /> APIs. In addition, color context information can be passed to the bitmap.</summary>
    <param name="size">The pixel size of the bitmap to be created.</param>
    <param name="sourceData">The initial data that will be loaded into the bitmap.</param>
    <param name="pitch">The pitch of the source data, if specified.</param>
    <param name="bitmapProperties">The properties of the bitmap to be created.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to a new bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
        <listheader>
          <description>D3DERR_OUTOFVIDEOMEMORY</description>
          <description>Direct3D does not have enough display memory to perform the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapBrush">
    <summary>Creates a bitmap brush, the input image is a Direct2D bitmap object.</summary>
    <param name="bitmap">The bitmap to use as the brush.</param>
    <param name="bitmapBrushProperties">A bitmap brush properties structure.</param>
    <param name="brushProperties">A brush properties structure.</param>
    <param name="bitmapBrush">The address of the newly created bitmap brush object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapBrush">
    <summary>Creates a bitmap brush, the input image is a Direct2D bitmap object.</summary>
    <param name="bitmap">The bitmap to use as the brush.</param>
    <param name="bitmapBrushProperties">A bitmap brush properties structure.</param>
    <param name="brushProperties">A brush properties structure.</param>
    <param name="bitmapBrush">The address of the newly created bitmap brush object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapBrush">
    <summary>Creates a bitmap brush, the input image is a Direct2D bitmap object.</summary>
    <param name="bitmap">The bitmap to use as the brush.</param>
    <param name="bitmapBrushProperties">A bitmap brush properties structure.</param>
    <param name="bitmapBrush">The address of the newly created bitmap brush object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapBrush">
    <summary>Creates a bitmap brush, the input image is a Direct2D bitmap object.</summary>
    <param name="bitmap">The bitmap to use as the brush.</param>
    <param name="bitmapBrush">The address of the newly created bitmap brush object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapFromDxgiSurface">
    <summary>Creates a bitmap from a DXGI surface that can be set as a target surface or have additional color context information specified.</summary>
    <param name="surface">
      <para>The DXGI surface from which the bitmap can be created.</para>
      <div>
        <b>Note</b>  The DXGI surface must have been created from the same Direct3D device that the Direct2D device context is associated with.</div>
    </param>
    <param name="bitmapProperties">The bitmap properties specified in addition to the surface.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to a new bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
        <listheader>
          <description>D3DERR_OUTOFVIDEOMEMORY</description>
          <description>Direct3D does not have enough display memory to perform the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapFromDxgiSurface">
    <summary>Creates a bitmap from a DXGI surface that can be set as a target surface or have additional color context information specified.</summary>
    <param name="surface">
      <para>The DXGI surface from which the bitmap can be created.</para>
      <div>
        <b>Note</b>  The DXGI surface must have been created from the same Direct3D device that the Direct2D device context is associated with.</div>
    </param>
    <param name="bitmapProperties">The bitmap properties specified in addition to the surface.</param>
    <param name="bitmap">When this method returns, contains the address of a pointer to a new bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
        <listheader>
          <description>D3DERR_OUTOFVIDEOMEMORY</description>
          <description>Direct3D does not have enough display memory to perform the operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapFromWicBitmap">
    <summary>Creates a Direct2D bitmap by copying a WIC bitmap.</summary>
    <param name="wicBitmapSource">The WIC bitmap source to copy from.</param>
    <param name="bitmapProperties">A bitmap properties structure that specifies bitmap creation options.</param>
    <param name="bitmap">The address of the newly created bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateBitmapFromWicBitmap">
    <summary>Creates a Direct2D bitmap by copying a WIC bitmap.</summary>
    <param name="wicBitmapSource">The WIC bitmap source to copy from.</param>
    <param name="bitmapProperties">A bitmap properties structure that specifies bitmap creation options.</param>
    <param name="bitmap">The address of the newly created bitmap object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateColorContext">
    <summary>Creates a color context.</summary>
    <param name="space">The space of color context to create.</param>
    <param name="profile">A buffer containing the ICC profile bytes used to initialize the color context when <i>space</i> is <see cref="D2D1_COLOR_SPACE_CUSTOM" />. For other types, the parameter is ignored and should be set to <b>NULL</b>.</param>
    <param name="profileSize">The size in bytes of <i>Profile</i>.</param>
    <param name="colorContext">When this method returns, contains the address of a pointer to a new color context object.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateColorContextFromFilename">
    <summary>Creates a color context by loading it from the specified filename. The profile bytes are the contents of the file specified by <i>Filename</i>.</summary>
    <param name="filename">The path to the file containing the profile bytes to initialize the color context with.</param>
    <param name="colorContext">When this method returns, contains the address of a pointer to a new color context.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateColorContextFromWicColorContext">
    <summary>Creates a color context from an <see cref="IWICColorContext" />. The <see cref="D2D1ColorContext" /> space of the resulting context varies, see Remarks for more info.</summary>
    <param name="wicColorContext">The <see cref="IWICColorContext" /> used to initialize the color context.</param>
    <param name="colorContext">When this method returns, contains the address of a pointer to a new color context.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateCommandList">
    <summary>Creates a <see cref="ID2D1CommandList" /> object.</summary>
    <param name="commandList">When this method returns, contains the address of a pointer to a command list.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateEffect">
    <summary>Creates an effect for the specified class ID.</summary>
    <param name="effectId">The class ID of the effect to create. See <a href="https://docs.microsoft.com//windows/desktop/Direct2D/built-in-effects">Built-in Effects</a> for a list of effect IDs.</param>
    <param name="effect">When this method returns, contains the address of a pointer to a new effect.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
        <listheader>
          <description>D3DERR_OUTOFVIDEOMEMORY</description>
          <description>Direct3D does not have enough display memory to perform the operation.</description>
        </listheader>
        <listheader>
          <description>D2DERR_EFFECT_IS_NOT_REGISTERED</description>
          <description>The specified effect is not registered by the system.</description>
        </listheader>
        <listheader>
          <description>E_NOTFOUND</description>
          <description>Other possible HRESULT for an effect not being registered (like D2DERR_EFFECT_IS_NOT_REGISTERED).</description>
        </listheader>
        <listheader>
          <description>D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES</description>
          <description>The effect requires capabilities not supported by the D2D device.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateGradientStopCollection">
    <summary>Creates a gradient stop collection, enabling the gradient to contain color channels with values outside of [0,1] and also enabling rendering to a high-color render target with interpolation in sRGB space.</summary>
    <param name="straightAlphaGradientStops">An array of color values and offsets.</param>
    <param name="straightAlphaGradientStopsCount">The number of elements in the <i>gradientStops</i> array.</param>
    <param name="preInterpolationSpace">Specifies both the input color space and the space in which the color interpolation occurs.</param>
    <param name="postInterpolationSpace">The color space that colors will be converted to after interpolation occurs.</param>
    <param name="bufferPrecision">
      <para>The precision of the texture used to hold interpolated values.</para>
      <div>
        <b>Note</b>  This method will fail if the underlying Direct3D device does not support the requested buffer precision. Use <see cref="ID2D1DeviceContext.IsBufferPrecisionSupported" /> to determine what is supported.</div>
    </param>
    <param name="extendMode">Defines how colors outside of the range defined by the stop collection are determined.</param>
    <param name="colorInterpolationMode">Defines how colors are interpolated. D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED is the default, see Remarks for more info.</param>
    <param name="gradientStopCollection1">The new gradient stop collection.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateImageBrush">
    <summary>Creates an image brush. The input image can be any type of image, including a bitmap, effect, or a command list.</summary>
    <param name="image">The image to be used as a source for the image brush.</param>
    <param name="imageBrushProperties">The properties specific to an image brush.</param>
    <param name="brushProperties">Properties common to all brushes.</param>
    <param name="imageBrush">When this method returns, contains the address of a pointer to the input rectangles.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateImageBrush">
    <summary>Creates an image brush. The input image can be any type of image, including a bitmap, effect, or a command list.</summary>
    <param name="image">The image to be used as a source for the image brush.</param>
    <param name="imageBrushProperties">The properties specific to an image brush.</param>
    <param name="brushProperties">Properties common to all brushes.</param>
    <param name="imageBrush">When this method returns, contains the address of a pointer to the input rectangles.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.CreateImageBrush">
    <summary>Creates an image brush. The input image can be any type of image, including a bitmap, effect, or a command list.</summary>
    <param name="image">The image to be used as a source for the image brush.</param>
    <param name="imageBrushProperties">The properties specific to an image brush.</param>
    <param name="imageBrush">When this method returns, contains the address of a pointer to the input rectangles.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid value was passed to the method.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.DrawBitmap">
    <summary>Draws a bitmap to the render target.</summary>
    <param name="bitmap">The bitmap to draw.</param>
    <param name="destinationRectangle">The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</param>
    <param name="opacity">The opacity of the bitmap.</param>
    <param name="interpolationMode">The interpolation mode to use.</param>
    <param name="sourceRectangle">An optional source rectangle.</param>
    <param name="perspectiveTransform">An optional perspective transform.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawBitmap">
    <summary>Draws a bitmap to the render target.</summary>
    <param name="bitmap">The bitmap to draw.</param>
    <param name="destinationRectangle">The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</param>
    <param name="opacity">The opacity of the bitmap.</param>
    <param name="interpolationMode">The interpolation mode to use.</param>
    <param name="sourceRectangle">An optional source rectangle.</param>
    <param name="perspectiveTransform">An optional perspective transform.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawBitmap">
    <summary>Draws a bitmap to the render target.</summary>
    <param name="bitmap">The bitmap to draw.</param>
    <param name="destinationRectangle">The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</param>
    <param name="opacity">The opacity of the bitmap.</param>
    <param name="interpolationMode">The interpolation mode to use.</param>
    <param name="sourceRectangle">An optional source rectangle.</param>
    <param name="perspectiveTransform">An optional perspective transform.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawBitmap">
    <summary>Draws a bitmap to the render target.</summary>
    <param name="bitmap">The bitmap to draw.</param>
    <param name="destinationRectangle">The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</param>
    <param name="opacity">The opacity of the bitmap.</param>
    <param name="interpolationMode">The interpolation mode to use.</param>
    <param name="sourceRectangle">An optional source rectangle.</param>
    <param name="perspectiveTransform">An optional perspective transform.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawGdiMetafile">
    <summary>Draw a metafile to the device context.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="targetOffset">The offset from the upper left corner of the render target.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawGdiMetafile">
    <summary>Draw a metafile to the device context.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="targetOffset">The offset from the upper left corner of the render target.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawGlyphRun">
    <summary>Draws a series of glyphs to the device context.</summary>
    <param name="baselineOrigin">Origin of first glyph in the series.</param>
    <param name="glyphRun">The glyphs to render.</param>
    <param name="glyphRunDescription">Supplementary glyph series information.</param>
    <param name="foregroundBrush">The brush that defines the text color.</param>
    <param name="measuringMode">The measuring mode of the glyph series, used to determine the advances and offsets. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="effect">The effect to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="imageRectangle">The corresponding rectangle in the image space will be mapped to the given origins when processing the image. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="effect">The effect to be drawn to the device context.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="effect">The image to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="imageRectangle">The corresponding rectangle in the image space will be mapped to the given origins when processing the image. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="effect">The effect to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="image">The image to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="imageRectangle">The corresponding rectangle in the image space will be mapped to the given origins when processing the image. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="image">The image to be drawn to the device context.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="image">The image to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="imageRectangle">The corresponding rectangle in the image space will be mapped to the given origins when processing the image. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.DrawImage">
    <summary>Draws an image to the device context.</summary>
    <param name="image">The image to be drawn to the device context.</param>
    <param name="targetOffset">The offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin. This default value is <i>NULL</i>.</param>
    <param name="interpolationMode">The interpolation mode that will be used to scale the image if necessary.</param>
    <param name="compositeMode">The composite mode that will be applied to the limits of the currently selected clip. The default value is <b>D2D1_COMPOSITE_MODE_SOURCE_OVER</b></param>
  </member>
  <member name="ID2D1DeviceContext.FillOpacityMask">
    <summary>Fill using the alpha channel of the supplied opacity mask bitmap. The brush opacity will be modulated by the mask. The render target antialiasing mode must be set to aliased.</summary>
    <param name="opacityMask">The bitmap that acts as the opacity mask</param>
    <param name="brush">The brush to use for filling the primitive.</param>
    <param name="destinationRectangle">The destination rectangle to output to in the render target</param>
    <param name="sourceRectangle">The source rectangle from the opacity mask bitmap.</param>
  </member>
  <member name="ID2D1DeviceContext.FillOpacityMask">
    <summary>Fill using the alpha channel of the supplied opacity mask bitmap. The brush opacity will be modulated by the mask. The render target antialiasing mode must be set to aliased.</summary>
    <param name="opacityMask">The bitmap that acts as the opacity mask</param>
    <param name="brush">The brush to use for filling the primitive.</param>
    <param name="destinationRectangle">The destination rectangle to output to in the render target</param>
    <param name="sourceRectangle">The source rectangle from the opacity mask bitmap.</param>
  </member>
  <member name="ID2D1DeviceContext.FillOpacityMask">
    <summary>Fill using the alpha channel of the supplied opacity mask bitmap. The brush opacity will be modulated by the mask. The render target antialiasing mode must be set to aliased.</summary>
    <param name="opacityMask">The bitmap that acts as the opacity mask</param>
    <param name="brush">The brush to use for filling the primitive.</param>
    <param name="destinationRectangle">The destination rectangle to output to in the render target</param>
    <param name="sourceRectangle">The source rectangle from the opacity mask bitmap.</param>
  </member>
  <member name="ID2D1DeviceContext.GetDevice">
    <summary>Gets the device associated with a device context.</summary>
    <param name="device">When this method returns, contains the address of a pointer to a Direct2D device associated with this device context.</param>
  </member>
  <member name="ID2D1DeviceContext.GetEffectInvalidRectangleCount">
    <summary>Gets the number of invalid output rectangles that have accumulated on the effect.</summary>
    <param name="effect">The effect to count the invalid rectangles on.</param>
    <param name="rectangleCount">The returned rectangle count.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.GetEffectInvalidRectangles">
    <summary>Gets the invalid rectangles that have accumulated since the last time the effect was drawn and <see cref="EndDraw" /> was then called on the device context.</summary>
    <param name="effect">The effect to get the invalid rectangles from.</param>
    <param name="rectangles">An array of <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a> structures. You must allocate this to the correct size. You can get the count of the invalid rectangles using the <see cref="GetEffectInvalidRectangleCount" /> method.</param>
    <param name="rectanglesCount">The number of rectangles to get.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.GetEffectRequiredInputRectangles">
    <summary>Returns the input rectangles that are required to be supplied by the caller to produce the given output rectangle.</summary>
    <param name="renderEffect">The image whose output is being rendered.</param>
    <param name="renderImageRectangle">The portion of the output image whose inputs are being inspected.</param>
    <param name="inputDescriptions">A list of the inputs whose rectangles are being queried.</param>
    <param name="requiredInputRects">The input rectangles returned to the caller.</param>
    <param name="inputCount">The number of inputs.</param>
    <returns>A failure code, this will typically only be because an effect in the chain returned some error.</returns>
  </member>
  <member name="ID2D1DeviceContext.GetGlyphRunWorldBounds">
    <summary>
      <code>Gets the world-space bounds in DIPs of the glyph run using the device context DPI.</code>
    </summary>
    <param name="baselineOrigin">The origin of the baseline for the glyph run.</param>
    <param name="glyphRun">The glyph run to render.</param>
    <param name="measuringMode">The DirectWrite measuring mode that indicates how glyph metrics are used to measure text when it is formatted.</param>
    <param name="bounds">The bounds of the glyph run in DIPs and in world space.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.GetImageLocalBounds">
    <summary>Gets the bounds of an image without the world transform of the context applied.</summary>
    <param name="image">The image whose bounds will be calculated.</param>
    <param name="localBounds">When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs) and in local space.</param>
    <returns>This method does not return a value.</returns>
  </member>
  <member name="ID2D1DeviceContext.GetImageWorldBounds">
    <summary>Gets the bounds of an image with the world transform of the context applied.</summary>
    <param name="image">The image whose bounds will be calculated.</param>
    <param name="worldBounds">When this method returns, contains a pointer to the bounds of the image in device independent pixels (DIPs).</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.GetPrimitiveBlend">
    <summary>Returns the currently set primitive blend used by the device context.</summary>
    <returns>The current primitive blend. The default value is <b>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</b>.</returns>
  </member>
  <member name="ID2D1DeviceContext.GetRenderingControls">
    <summary>Gets the rendering controls that have been applied to the context.</summary>
    <param name="renderingControls">When this method returns, contains a pointer to the rendering controls for this context.</param>
  </member>
  <member name="ID2D1DeviceContext.GetTarget">
    <summary>Gets the target currently associated with the device context.</summary>
    <param name="image">When this method returns, contains the address of a pointer to the target currently associated with the device context.</param>
  </member>
  <member name="ID2D1DeviceContext.GetUnitMode">
    <summary>Gets the mode that is being used to interpret values by the device context.</summary>
    <returns>The unit mode.</returns>
  </member>
  <member name="ID2D1DeviceContext.InvalidateEffectInputRectangle">
    <summary>
      <para>This indicates that a portion of an effect's input is invalid. This method can be called many times.</para>
      <para>You can use this method to propagate invalid rectangles through an effect graph. You can query Direct2D using the <see cref="GetEffectInvalidRectangles" /> method.</para>
      <div>
        <b>Note</b>  Direct2D does not automatically use these invalid rectangles to reduce the region of an effect that is rendered.</div>You can also use this method to invalidate caches that have accumulated while rendering effects that have the <b>D2D1_PROPERTY_CACHED</b> property set to true.</summary>
    <param name="effect">The effect to invalidate.</param>
    <param name="input">The input index.</param>
    <param name="inputRectangle">The rect to invalidate.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>An invalid parameter was passed to the returning function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1DeviceContext.IsBufferPrecisionSupported">
    <summary>Indicates whether the buffer precision is supported by the underlying Direct3D <see cref="device." /></summary>
    <param name="bufferPrecision">The buffer precision to check.</param>
    <returns>Returns TRUE if the buffer precision is supported. Returns FALSE if the buffer precision is not supported.</returns>
  </member>
  <member name="ID2D1DeviceContext.IsDxgiFormatSupported">
    <summary>Indicates whether the format is supported by the device context. The formats supported are usually determined by the underlying hardware.</summary>
    <param name="format">The DXGI format to check.</param>
    <returns>Returns TRUE if the format is supported. Returns FALSE if the format is not supported.</returns>
  </member>
  <member name="ID2D1DeviceContext.PushLayer">
    <summary>Push a layer onto the clip and layer stack of the device context.</summary>
    <param name="layerParameters">The parameters that defines the layer.</param>
    <param name="layer">
      <para>The layer resource to push on the device context that receives subsequent drawing operations.</para>
      <div>
        <b>Note</b>  If a layer is not specified, Direct2D manages the layer resource automatically.</div>
    </param>
  </member>
  <member name="ID2D1DeviceContext.PushLayer">
    <summary>Push a layer onto the clip and layer stack of the device context.</summary>
    <param name="layerParameters">The parameters that defines the layer.</param>
    <param name="layer">
      <para>The layer resource to push on the device context that receives subsequent drawing operations.</para>
      <div>
        <b>Note</b>  If a layer is not specified, Direct2D manages the layer resource automatically.</div>
    </param>
  </member>
  <member name="ID2D1DeviceContext.SetPrimitiveBlend">
    <summary>Changes the primitive blend mode that is used for all rendering operations in the device context.</summary>
    <param name="primitiveBlend">The primitive blend to use.</param>
  </member>
  <member name="ID2D1DeviceContext.SetRenderingControls">
    <summary>Sets the rendering controls for the given device context.</summary>
    <param name="renderingControls">The rendering controls to be applied.</param>
  </member>
  <member name="ID2D1DeviceContext.SetRenderingControls">
    <summary>Sets the rendering controls for the given device context.</summary>
    <param name="renderingControls">The rendering controls to be applied.</param>
  </member>
  <member name="ID2D1DeviceContext.SetTarget">
    <summary>The bitmap or command list to which the <a href="https://docs.microsoft.com//windows/desktop/Direct2D/direct2d-portal">Direct2D</a> device context will now render.</summary>
    <param name="image">The surface or command list to which the Direct2D device context will render.</param>
  </member>
  <member name="ID2D1DeviceContext.SetUnitMode">
    <summary>Sets what units will be used to interpret values passed into the device context.</summary>
    <param name="unitMode">An enumeration defining how passed-in units will be interpreted by the device context.</param>
  </member>
  <member name="ID2D1DeviceContext">
    <summary>
      <para>Represents a set of state and command buffers that are used to render to a target.</para>
      <para>The device context can render to a target bitmap or a command list.</para>
    </summary>
  </member>
</doc>