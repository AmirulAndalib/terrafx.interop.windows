<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1CommandSink.BeginDraw">
    <summary>Notifies the implementation of the command sink that drawing is about to commence.</summary>
    <returns>This method always returns <b>S_OK</b>.</returns>
  </member>
  <member name="ID2D1CommandSink.Clear">
    <summary>Clears the drawing area to the specified color.</summary>
    <param name="color">The color to which the command sink should be cleared.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawBitmap">
    <summary>Draws a bitmap to the render target.</summary>
    <param name="bitmap">The bitmap to draw.</param>
    <param name="destinationRectangle">The destination rectangle. The default is the size of the bitmap and the location is the upper left corner of the render target.</param>
    <param name="opacity">The opacity of the bitmap.</param>
    <param name="interpolationMode">The interpolation mode to use.</param>
    <param name="sourceRectangle">An optional source rectangle.</param>
    <param name="perspectiveTransform">An optional perspective transform.</param>
    <returns>This method does not return a value.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawGdiMetafile">
    <summary>Draw a metafile to the device context.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="targetOffset">The offset from the upper left corner of the render target.</param>
    <returns>This method does not return a value.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawGeometry">
    <summary>Indicates the geometry to be drawn to the command sink.</summary>
    <param name="geometry">The geometry to be stroked.</param>
    <param name="brush">The brush that will be used to fill the stroked geometry.</param>
    <param name="strokeWidth">The width of the stroke.</param>
    <param name="strokeStyle">The style of the stroke.</param>
    <returns>An HRESULT.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawGlyphRun">
    <summary>Indicates the glyphs to be drawn.</summary>
    <param name="baselineOrigin">The upper left corner of the baseline.</param>
    <param name="glyphRun">The glyphs to render.</param>
    <param name="glyphRunDescription">Additional non-rendering information about the glyphs.</param>
    <param name="foregroundBrush">The brush used to fill the glyphs.</param>
    <param name="measuringMode">The measuring mode to apply to the glyphs.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawImage">
    <summary>Draws the provided image to the command sink.</summary>
    <param name="image">The image to be drawn to the command sink.</param>
    <param name="targetOffset">This defines the offset in the destination space that the image will be rendered to. The entire logical extent of the image will be rendered to the corresponding destination. If not specified, the destination origin will be (0, 0). The top-left corner of the image will be mapped to the target offset. This will not necessarily be the origin.</param>
    <param name="imageRectangle">The corresponding rectangle in the image space will be mapped to the provided origins when processing the image.</param>
    <param name="interpolationMode">The interpolation mode to use to scale the image if necessary.</param>
    <param name="compositeMode">If specified, the composite mode that will be applied to the limits of the currently selected clip.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawLine">
    <summary>Draws a line drawn between two points.</summary>
    <param name="point0">The start point of the line.</param>
    <param name="point1">The end point of the line.</param>
    <param name="brush">The brush used to fill the line.</param>
    <param name="strokeWidth">The width of the stroke to fill the line.</param>
    <param name="strokeStyle">The style of the stroke. If not specified, the stroke is solid.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.DrawRectangle">
    <summary>Draws a rectangle.</summary>
    <param name="rect">The rectangle to be drawn to the command sink.</param>
    <param name="brush">The brush used to stroke the geometry.</param>
    <param name="strokeWidth">The width of the stroke.</param>
    <param name="strokeStyle">The style of the stroke.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.EndDraw">
    <summary>Indicates when <see cref="ID2D1CommandSink" /> processing has completed.</summary>
    <returns>If the method/function succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.FillGeometry">
    <summary>Indicates to the command sink a geometry to be filled.</summary>
    <param name="geometry">The geometry that should be filled.</param>
    <param name="brush">The primary brush used to fill the geometry.</param>
    <param name="opacityBrush">A brush whose alpha channel is used to modify the opacity of the primary fill brush.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.FillMesh">
    <summary>Indicates a mesh to be filled by the command sink.</summary>
    <param name="mesh">The mesh object to be filled.</param>
    <param name="brush">The brush with which to fill the mesh.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.FillOpacityMask">
    <summary>Fills an opacity mask on the command sink.</summary>
    <param name="opacityMask">The bitmap whose alpha channel will be sampled to define the opacity mask.</param>
    <param name="brush">The brush with which to fill the mask.</param>
    <param name="destinationRectangle">The destination rectangle in which to fill the mask. If not specified, this is the origin.</param>
    <param name="sourceRectangle">The source rectangle within the opacity mask. If not specified, this is the entire mask.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.FillRectangle">
    <summary>Indicates to the command sink a rectangle to be filled.</summary>
    <param name="rect">The rectangle to fill.</param>
    <param name="brush">The brush with which to fill the rectangle.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.PopAxisAlignedClip">
    <summary>Removes an axis-aligned clip from the layer and clip stack.</summary>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.PopLayer">
    <summary>Removes a layer from the layer and clip stack.</summary>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.PushAxisAlignedClip">
    <summary>Pushes a clipping rectangle onto the clip and layer stack.</summary>
    <param name="clipRect">The rectangle that defines the clip.</param>
    <param name="antialiasMode">The antialias mode for the clip.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.PushLayer">
    <summary>Pushes a layer onto the clip and layer stack.</summary>
    <param name="layerParameters1">The parameters that define the layer.</param>
    <param name="layer">The layer resource that receives subsequent drawing operations.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetAntialiasMode">
    <summary>Sets the antialiasing mode that will be used to render any subsequent geometry.</summary>
    <param name="antialiasMode">The antialiasing mode selected for the command list.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetPrimitiveBlend">
    <summary>Sets a new primitive blend mode.</summary>
    <param name="primitiveBlend">The primitive blend that will apply to subsequent primitives.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetTags">
    <summary>Sets the tags that correspond to the tags in the command sink.</summary>
    <param name="tag1">The first tag to associate with the primitive.</param>
    <param name="tag2">The second tag to associate with the primitive.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetTextAntialiasMode">
    <summary>Indicates the new default antialiasing mode for text.</summary>
    <param name="textAntialiasMode">The antialiasing mode for the text.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetTextRenderingParams">
    <summary>Indicates more detailed text rendering parameters.</summary>
    <param name="textRenderingParams">The parameters to use for text rendering.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetTransform">
    <summary>Sets a new transform.</summary>
    <param name="transform">The transform to be set.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink.SetUnitMode">
    <summary>The unit mode changes the meaning of subsequent units from device-independent pixels (DIPs) to pixels or the other way. The command sink does not record a DPI, this is implied by the playback context or other playback interface such as <see cref="ID2D1PrintControl" />.</summary>
    <param name="unitMode">The enumeration that specifies how units are to be interpreted.</param>
    <returns>If the method succeeds, it returns <b>S_OK</b>. If it fails, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1CommandSink">
    <summary>
      <para>The command sink is implemented by you for an application when you want to receive a playback of the commands recorded in a command list. A typical usage will be for transforming the command list into another format such as XPS when some degree of conversion between the <a href="https://docs.microsoft.com//windows/desktop/Direct2D/direct2d-portal">Direct2D</a> primitives and the target format is required.</para>
      <para>The command sink interface doesn't have any resource creation methods on it. The resources are still logically bound to the <a href="https://docs.microsoft.com//windows/desktop/Direct2D/direct2d-portal">Direct2D</a> device on which the command list was created and will be passed in to the command sink implementation.</para>
    </summary>
  </member>
</doc>