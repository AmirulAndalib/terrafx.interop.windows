<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1PathGeometry1.ComputePointAndSegmentAtLength">
    <summary>Computes the point that exists at a given distance along the path geometry along with the index of the segment the point is on and the directional vector at that point.</summary>
    <param name="length">The distance to walk along the path.</param>
    <param name="startSegment">The index of the segment at which to begin walking. Note: This index is global to the entire path, not just a particular figure.</param>
    <param name="worldTransform">The transform to apply to the path prior to walking.</param>
    <param name="pointDescription">When this method returns, contains a description of the point that can be found at the given location.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>One of the inputs was in an invalid range.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1PathGeometry1.ComputePointAndSegmentAtLength">
    <summary>Computes the point that exists at a given distance along the path geometry along with the index of the segment the point is on and the directional vector at that point.</summary>
    <param name="length">The distance to walk along the path.</param>
    <param name="startSegment">The index of the segment at which to begin walking. Note: This index is global to the entire path, not just a particular figure.</param>
    <param name="worldTransform">The transform to apply to the path prior to walking.</param>
    <param name="flatteningTolerance">The flattening tolerance to use when walking along an arc or Bezier segment. The flattening tolerance is the maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Smaller values produce more accurate results but cause slower execution.</param>
    <param name="pointDescription">When this method returns, contains a description of the point that can be found at the given location.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>One of the inputs was in an invalid range.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1PathGeometry1.ComputePointAndSegmentAtLength">
    <summary>Computes the point that exists at a given distance along the path geometry along with the index of the segment the point is on and the directional vector at that point.</summary>
    <param name="length">The distance to walk along the path.</param>
    <param name="startSegment">The index of the segment at which to begin walking. Note: This index is global to the entire path, not just a particular figure.</param>
    <param name="worldTransform">The transform to apply to the path prior to walking.</param>
    <param name="pointDescription">When this method returns, contains a description of the point that can be found at the given location.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>One of the inputs was in an invalid range.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1PathGeometry1.ComputePointAndSegmentAtLength">
    <summary>Computes the point that exists at a given distance along the path geometry along with the index of the segment the point is on and the directional vector at that point.</summary>
    <param name="length">The distance to walk along the path.</param>
    <param name="startSegment">The index of the segment at which to begin walking. Note: This index is global to the entire path, not just a particular figure.</param>
    <param name="worldTransform">The transform to apply to the path prior to walking.</param>
    <param name="flatteningTolerance">The flattening tolerance to use when walking along an arc or Bezier segment. The flattening tolerance is the maximum error allowed when constructing a polygonal approximation of the geometry. No point in the polygonal representation will diverge from the original geometry by more than the flattening tolerance. Smaller values produce more accurate results but cause slower execution.</param>
    <param name="pointDescription">When this method returns, contains a description of the point that can be found at the given location.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>HRESULT</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>No error occurred.</description>
        </listheader>
        <listheader>
          <description>E_OUTOFMEMORY</description>
          <description>Direct2D could not allocate sufficient memory to complete the call.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>One of the inputs was in an invalid range.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ID2D1PathGeometry1">
    <summary>The <b>ID2D1PathGeometry1</b> interface adds functionality to <see cref="ID2D1PathGeometry" />. In particular, it provides the path geometry-specific <see cref="ComputePointAndSegmentAtLength" /> method.</summary>
  </member>
</doc>