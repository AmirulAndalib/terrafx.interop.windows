<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC">
    <summary>
      <para>Describes a shader signature.</para>
    </summary>
    <remarks>
      <para>A shader can take n inputs and can produce m outputs. The order of the input (or output) parameters, their associated types, and any attached semantics make up the shader signature. Each shader has an input and an output signature.</para>
      <para>When compiling a shader or an effect, some API calls validate shader signatures (such as <see cref="D3D10CompileShader" /> and <see cref="D3D10CompileEffectFromMemory" />). That is, they compare the output signature of one shader (like a vertex shader) with the input signature of another shader (like a pixel shader). This ensures that a shader outputs data that is compatible with a downstream shader that is consuming that data. Compatible means that a shader signature is a exact-match subset of the preceding shader stage. Exact match means parameter types and semantics must exactly match. Subset means that a parameter that is not required by a downstream stage, does not need to include that parameter in its shader signature.</para>
      <para>Get a shader-signature from a shader or an effect by calling APIs such as <see cref="ID3D10ShaderReflection.GetInputParameterDesc" /> or <see cref="ID3D10EffectShaderVariable.GetInputSignatureElementDesc" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d10/d3d10-graphics-reference-d3d10-shader-structures">Shader Structures</seealso>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.SemanticName">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>A per-parameter string that identifies how the data will be used. See <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">Semantics (DirectX HLSL)</a>.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.SemanticIndex">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Semantic index that modifies the semantic. Used to differentiate different parameters that use the same semantic.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.Register">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The register that will contain this variable's data.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.SystemValueType">
    <summary>
      <para>Type: <b><see cref="D3D10_NAME" /></b></para>
      <para>A predefined string that determines the functionality of certain pipeline stages. See <see cref="D3D10_NAME" />.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.ComponentType">
    <summary>
      <para>Type: <b><see cref="D3D10_REGISTER_COMPONENT_TYPE" /></b></para>
      <para>The per-component-data type that is stored in a register. See <see cref="D3D10_REGISTER_COMPONENT_TYPE" />. Each register can store up to four-components of data.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.Mask">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>Mask which indicates which components of a register are used.</para>
    </summary>
  </member>
  <member name="D3D10_SIGNATURE_PARAMETER_DESC.ReadWriteMask">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>Mask which indicates whether a given component is never written (if the signature is an output signature) or always read (if the signature is an input signature). The mask is a combination of <see cref="D3D10_REGISTER_COMPONENT_TYPE" /> values.</para>
    </summary>
  </member>
</doc>