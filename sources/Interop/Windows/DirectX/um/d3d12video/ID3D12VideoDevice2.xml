<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12VideoDevice2.CreateVideoDecoder1">
    <summary>
      <para>Creates a video decoder instance that contains the resolution-independent driver resources and state, with support for protected resources.</para>
    </summary>
    <param name="pDesc">
      <para>A pointer to a <see cref="D3D12_VIDEO_DECODER_DESC" /> structure describing the decode profile and bitstream encryption for the decoder.</para>
    </param>
    <param name="pProtectedResourceSession">
      <para>A <see cref="ID3D12ProtectedResourceSession" /> for managing access to protected resources.</para>
    </param>
    <param name="riid">
      <para>The globally unique identifier (GUID) for the decode video state interface.</para>
    </param>
    <param name="ppVideoDecoder">
      <para>A pointer to a memory block that receives a pointer to the <see cref="ID3D12VideoDecoder1" /> interface.</para>
    </param>
    <returns>
      <para>This method returns HRESULT.</para>
    </returns>
    <remarks>
      <para>Decoding a new stream requires instantiating a new decoder object.</para>
    </remarks>
  </member>
  <member name="ID3D12VideoDevice2.CreateVideoDecoderHeap1">
    <summary>
      <para>Allocates a video decoder heap that contains the resolution-dependent driver resources and state, with support for protected resources.</para>
    </summary>
    <param name="pVideoDecoderHeapDesc">
      <para>A pointer to a <see cref="D3D12_VIDEO_DECODER_HEAP_DESC" /> describing the decoding configuration.</para>
    </param>
    <param name="pProtectedResourceSession">
      <para>A <see cref="ID3D12ProtectedResourceSession" /> for managing access to protected resources.</para>
    </param>
    <param name="riid">
      <para>The globally unique identifier (GUID) for the decode video state interface.</para>
    </param>
    <param name="ppVideoDecoderHeap">
      <para>A pointer to a memory block that receives a pointer to the <see cref="ID3D12VideoDecoderHeap1" /> interface.</para>
    </param>
    <returns>
      <para>This method returns an HRESULT.</para>
    </returns>
  </member>
  <member name="ID3D12VideoDevice2.CreateVideoExtensionCommand">
    <summary>
      <para>Creates a video extension command.</para>
    </summary>
    <param name="pDesc">
      <para>The <see cref="D3D12_VIDEO_EXTENSION_COMMAND_DESC" /> describing the command to be created.</para>
    </param>
    <param name="pCreationParameters">
      <para>A pointer to the creation parameters structure, which is defined by the command.  The parameters structure must match the parameters enumerated by a call to <see cref="ID3D12VideoDevice.CheckFeatureSupport" /> with the feature value of <see cref="D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS" /> and a parameter stage value of <see cref="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION" />.</para>
    </param>
    <param name="CreationParametersDataSizeInBytes">
      <para>The size of the <i>pCreationParameters</i> parameter structure, in bytes.</para>
    </param>
    <param name="pProtectedResourceSession">
      <para>A <see cref="ID3D12ProtectedResourceSession" /> for managing access to protected resources.</para>
    </param>
    <param name="riid">
      <para>The globally unique identifier (GUID) for the <see cref="ID3D12VideoExtensionCommand" /> interface.</para>
    </param>
    <param name="ppVideoExtensionCommand">
      <para>A  pointer to a memory block that receives a pointer to the <see cref="ID3D12VideoExtensionCommand" /> interface.</para>
    </param>
    <returns>
      <para>This method returns an HRESULT.</para>
    </returns>
  </member>
  <member name="ID3D12VideoDevice2.CreateVideoProcessor1">
    <summary>
      <para>Creates a video processor instance with support for protected resources.</para>
    </summary>
    <param name="NodeMask">
      <para>The node mask specifying the physical adapter on which the video processor will be used. For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node, i.e. the device's physical adapter, to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</para>
    </param>
    <param name="pOutputStreamDesc">
      <para>A pointer to a D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC(ns-d3d12video-d3d12_video_process_output_stream_desc) structure describing the output stream.</para>
    </param>
    <param name="NumInputStreamDescs">
      <para>The number of input streams provided in the <i>pInputStreamDescs</i> parameter.</para>
    </param>
    <param name="pInputStreamDescs">
      <para>A pointer to a list of D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC(ns-d3d12video-d3d12_video_process_input_stream_desc) structures the input streams. The number of structures provided should match the value specified in the <i>NumInputStreamDescs</i> parameter.</para>
    </param>
    <param name="pProtectedResourceSession">
      <para>A <see cref="ID3D12ProtectedResourceSession" /> for managing access to protected resources.</para>
    </param>
    <param name="riid">
      <para>The globally unique identifier (GUID) for the video processor interface.</para>
    </param>
    <param name="ppVideoProcessor">
      <para>A pointer to a memory block that receives a pointer to the <see cref="ID3D12VideoProcessor1" /> interface</para>
    </param>
    <returns>
      <para>This method returns HRESULT.</para>
    </returns>
    <remarks>
      <para>To change the parameters set during creation, you must recreate the video processor object.</para>
    </remarks>
  </member>
  <member name="ID3D12VideoDevice2.ExecuteExtensionCommand">
    <summary>
      <para>Executes a video extension command.</para>
    </summary>
    <param name="pExtensionCommand">
      <para>Pointer to an <see cref="ID3D12VideoExtensionCommand" /> representing the video extension command to execute.  The caller is responsible for maintaining object lifetime until command execution is complete.</para>
    </param>
    <param name="pExecutionParameters">
      <para>A pointer to the execution input parameters structure, which is defined by the command.  The parameters structure must match the parameters enumerated by a call to <see cref="ID3D12VideoDevice.CheckFeatureSupport" /> with the feature value of <see cref="D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS" /> and a parameter stage value of <see cref="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION" />.</para>
    </param>
    <param name="ExecutionParametersSizeInBytes">
      <para>The size of the <i>pExecutionParameters</i> parameter structure, in bytes.</para>
    </param>
    <param name="pOutputData">
      <para>A pointer to the execution output parameters structure, which is defined by the command.</para>
    </param>
    <param name="OutputDataSizeInBytes">
      <para>Receives the size of the <i>pExecutionParameters</i> parameter structure, in bytes.</para>
    </param>
    <returns>
      <para>This method returns HRESULT.</para>
    </returns>
    <remarks>
      <para>Video extension commands executed through this method must complete before this method returns. For efficiency, extension implementations should schedule work in command lists instead of using this method, whenever possible. Each video command list type provides an <b>ExecuteExtensionCommand</b> for scheduled work. These include:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="ID3D12VideoDecodeComandlist2.ExecuteExtensionCommand" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D12VideoEncodeComandlist1.ExecuteExtensionCommand" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ID3D12VideoProcessComandlist2.ExecuteExtensionCommand" />
          </description>
        </item>
      </list>
    </remarks>
    <seealso cref="ID3D12VideoDecodeComandlist2.ExecuteExtensionCommand" />
    <seealso cref="ID3D12VideoEncodeComandlist1.ExecuteExtensionCommand" />
    <seealso cref="ID3D12VideoProcessComandlist2.ExecuteExtensionCommand" />
  </member>
  <member name="ID3D12VideoDevice2">
    <summary>
      <para>Provides video decoding and processing capabilities of a Microsoft Direct3D 12 device including the ability to query video capabilities and instantiating video decoders and processors. This interface adds support for protected resources and video extension commands.</para>
    </summary>
    <seealso cref="ID3D12VideoDevice" />
    <seealso cref="ID3D12VideoDevice2" />
  </member>
</doc>