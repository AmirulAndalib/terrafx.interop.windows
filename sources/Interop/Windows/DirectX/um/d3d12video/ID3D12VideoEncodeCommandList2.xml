<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12VideoEncodeCommandList2.EncodeFrame">
    <summary>
      <para>Encodes a bitstream.</para>
    </summary>
    <param name="pEncoder">
      <para>A <see cref="ID3D12VideoEncoder" /> representing the video encoder to be used for the encode operation.</para>
    </param>
    <param name="pHeap">
      <para>A <see cref="ID3D12VideoEncoderHeap" /> representing the video encoder heap to be used for this operation.</para>
      <para>The encoder heap object allocation must not be released before any in-flight GPU commands that references it finish execution.</para>
      <para>Note that the reconfigurations in recorded commands input arguments done within allowed bounds (e.g. different target resolutions in allowed lists of resolutions) can co-exist in-flight with the same encoder heap instance, providing the target resolution is supported by the given encoder heap.</para>
      <para>In the current release, we only support one execution flow at a time using the same encoder or encoder heap instances. All commands against these objects must be recorded and submitted in a serialized order, i.e. from a single CPU thread or synchronizing multiple threads in such way that the commands are recorded in a serialized order.</para>
      <para>The video encoder and video encoder heap may be used to record commands from multiple command lists, but may only be associated with one command list at a time. The application is responsible for synchronizing single accesses to the video encoder and video encoder heap at a time. The application must also record video encoding commands against the video encoder and video encoder heaps in the order that they are executed on the GPU.</para>
    </param>
    <param name="pInputArguments">
      <para>A <see cref="D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS" /> representing input arguments for the encode operation.</para>
    </param>
    <param name="pOutputArguments">
      <para>A <see cref="D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS" /> representing output arguments for the encode operation.</para>
    </param>
  </member>
  <member name="ID3D12VideoEncodeCommandList2.ResolveEncoderOutputMetadata">
    <summary>
      <para>Resolves the output metadata from a call to <see cref="ID3D12VideoEncodeCommandList2.EncodeFrame" /> to a readable format.</para>
    </summary>
    <param name="pInputArguments">
      <para>A pointer to a <see cref="D3D12_VIDEO_ENCODER_OUTPUT_METADATA" /> representing the opaque output metadata results from <b>EncodeFrame</b>.</para>
    </param>
    <param name="pOutputArguments">
      <para>A pointer to a <see cref="D3D12_VIDEO_ENCODER_OUTPUT_METADATA" /> output parameter that receivesthe resolved, readable metadata.</para>
    </param>
    <remarks>
      <para>The caller can interpret the contents of <i>pOutputArguments</i> as a memory blob that contains a <see cref="D3D12_VIDEO_ENCODER_OUTPUT_METADATA" /> structure and the metadata array contents. The array contents of the dynamic size metadata based on the subregion number are positioned in memory contiguously right after the struct allocation and the pointers in the struct point to the start addresses of the array contents.</para>
    </remarks>
  </member>
  <member name="ID3D12VideoEncodeCommandList2">
    <summary>
      <para>Encapsulates a list of graphics commands for video encoding. This interface inherits from <see cref="ID3D12VideoEncodeCommandList1" /> and adds methods for encoding video and resolving encode operation metadata.</para>
    </summary>
  </member>
</doc>