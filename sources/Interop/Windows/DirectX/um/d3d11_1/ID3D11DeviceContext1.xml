<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11DeviceContext1.ClearView">
    <summary>Sets all the elements in a resource view to one value.</summary>
    <param name="pView">A pointer to the <see cref="ID3D11View" /> interface that represents the resource view to clear.</param>
    <param name="Color">A 4-component array that represents the color to use to clear the resource view.</param>
    <param name="pRect">An array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearView</b> clears the entire surface.</param>
    <param name="NumRects">Number of rectangles in the array that the <i>pRect</i> parameter specifies.</param>
  </member>
  <member name="ID3D11DeviceContext1.CopySubresourceRegion1">
    <summary>Copies a region from a source resource to a destination resource.</summary>
    <param name="pDstResource">A pointer to the destination resource.</param>
    <param name="DstSubresource">Destination subresource index.</param>
    <param name="DstX">The x-coordinate of the upper-left corner of the destination region.</param>
    <param name="DstY">The y-coordinate of the upper-left corner of the destination region. For a 1D subresource, this must be zero.</param>
    <param name="DstZ">The z-coordinate of the upper-left corner of the destination region. For a 1D or 2D subresource, this must be zero.</param>
    <param name="pSrcResource">A pointer to the source resource.</param>
    <param name="SrcSubresource">Source subresource index.</param>
    <param name="pSrcBox">
      <para>A pointer to a 3D box that defines the region of the source subresource that <b>CopySubresourceRegion1</b> can copy. If <b>NULL</b>, <b>CopySubresourceRegion1</b> copies the entire source subresource. The box must fit within the source resource.</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion1</b> doesn't perform a copy operation.</para>
    </param>
    <param name="CopyFlags">A <see cref="D3D11_COPY_FLAGS" />-typed value that specifies how to perform the copy operation. If you specify zero for no copy option, <b>CopySubresourceRegion1</b> behaves like <see cref="ID3D11DeviceContext.CopySubresourceRegion" />. For existing display drivers that can't process these flags, the runtime doesn't use them.</param>
  </member>
  <member name="ID3D11DeviceContext1.CSGetConstantBuffers1">
    <summary>Gets the constant buffers that the compute-shader stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.CSSetConstantBuffers1">
    <summary>Sets the constant buffers that the compute-shader stage uses.</summary>
    <param name="StartSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1.DiscardResource">
    <summary>Discards a resource from the device context.</summary>
    <param name="pResource">A pointer to the <see cref="ID3D11Resource" /> interface for the resource to discard. The resource must have been created with usage <see cref="D3D11_USAGE_DEFAULT" /> or <see cref="D3D11_USAGE_DYNAMIC" />, otherwise the runtime drops the call to <b>DiscardResource</b>; if the debug layer is enabled, the runtime returns an error message.</param>
  </member>
  <member name="ID3D11DeviceContext1.DiscardView">
    <summary>Discards a resource view from the device context.</summary>
    <param name="pResourceView">A pointer to the <see cref="ID3D11View" /> interface for the resource view to discard. The resource that underlies the view must have been created with usage <see cref="D3D11_USAGE_DEFAULT" /> or <see cref="D3D11_USAGE_DYNAMIC" />, otherwise the runtime drops the call to <b>DiscardView</b>; if the debug layer is enabled, the runtime returns an error message.</param>
  </member>
  <member name="ID3D11DeviceContext1.DiscardView1">
    <summary>Discards the specified elements in a resource view from the device context.</summary>
    <param name="pResourceView">A pointer to the <see cref="ID3D11View" /> interface for the resource view to discard. The resource that underlies the view must have been created with usage <see cref="D3D11_USAGE_DEFAULT" /> or <see cref="D3D11_USAGE_DYNAMIC" />, otherwise the runtime drops the call to <b>DiscardView1</b>; if the debug layer is enabled, the runtime returns an error message.</param>
    <param name="pRects">An array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a> structures for the rectangles in the resource view to discard. If <b>NULL</b>, <b>DiscardView1</b> discards the entire view and behaves the same as <see cref="DiscardView" />.</param>
    <param name="NumRects">Number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
  </member>
  <member name="ID3D11DeviceContext1.DSGetConstantBuffers1">
    <summary>Gets the constant buffers that the domain-shader stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.DSSetConstantBuffers1">
    <summary>Sets the constant buffers that the domain-shader stage uses.</summary>
    <param name="StartSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1.GSGetConstantBuffers1">
    <summary>Gets the constant buffers that the geometry shader pipeline stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.GSSetConstantBuffers1">
    <summary>Sets the constant buffers that the geometry shader pipeline stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1.HSGetConstantBuffers1">
    <summary>Gets the constant buffers that the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a> uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.HSSetConstantBuffers1">
    <summary>Sets the constant buffers that the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a> of the pipeline uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1.PSGetConstantBuffers1">
    <summary>Gets the constant buffers that the pixel shader pipeline stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.PSSetConstantBuffers1">
    <summary>Sets the constant buffers that the pixel shader pipeline stage uses, and enables the shader to access other parts of the buffer.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1.SwapDeviceContextState">
    <summary>Activates the given context state object and changes the current device behavior to Direct3D 11, Direct3D 10.1, or Direct3D 10.</summary>
    <param name="pState">A pointer to the <see cref="ID3DDeviceContextState" /> interface for the context state object that was previously created through the <see cref="ID3D11Device1.CreateDeviceContextState" /> method. If <b>SwapDeviceContextState</b> is called with <i>pState</i> set to <b>NULL</b>, the call has no effect.</param>
    <param name="ppPreviousState">A pointer to a variable that receives a pointer to the <see cref="ID3DDeviceContextState" /> interface for the previously-activated context state object.</param>
  </member>
  <member name="ID3D11DeviceContext1.UpdateSubresource1">
    <summary>The CPU copies data from memory to a subresource created in non-mappable memory.</summary>
    <param name="pDstResource">A pointer to the destination resource.</param>
    <param name="DstSubresource">A zero-based index that identifies the destination subresource. See <see cref="D3D11CalcSubresource" /> for more details.</param>
    <param name="pDstBox">
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, <b>UpdateSubresource1</b> writes the data to the destination subresource with no offset. The dimensions of the source must fit the destination.</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource1</b> doesn't perform an update operation.</para>
    </param>
    <param name="pSrcData">A pointer to the source data in memory.</param>
    <param name="SrcRowPitch">The size of one row of the source data.</param>
    <param name="SrcDepthPitch">The size of one depth slice of source data.</param>
    <param name="CopyFlags">A <see cref="D3D11_COPY_FLAGS" />-typed value that specifies how to perform the update operation. If you specify zero for no update option, <b>UpdateSubresource1</b> behaves like <see cref="ID3D11DeviceContext.UpdateSubresource" />. For existing display drivers that can't process these flags, the runtime doesn't use them.</param>
  </member>
  <member name="ID3D11DeviceContext1.VSGetConstantBuffers1">
    <summary>Gets the constant buffers that the vertex shader pipeline stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
    <param name="pFirstConstant">A pointer to an array that receives the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 2 indicates that the start of the associated constant buffer is 32 bytes into the constant buffer. The runtime sets <i>pFirstConstant</i> to <b>NULL</b> if the buffers do not have offsets.</param>
    <param name="pNumConstants">A pointer to an array that receives the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. The runtime sets <i>pNumConstants</i> to <b>NULL</b> if it doesn't specify the numbers of constants in each buffer.</param>
  </member>
  <member name="ID3D11DeviceContext1.VSSetConstantBuffers1">
    <summary>Sets the constant buffers that the vertex shader pipeline stage uses.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers being given to the device.</param>
    <param name="pFirstConstant">An array that holds the offsets into the buffers that <i>ppConstantBuffers</i> specifies. Each offset specifies where, from the shader's point of view, each constant buffer starts. Each offset is measured in shader constants, which are 16 bytes (4*32-bit components). Therefore, an offset of 16 indicates that the start of the associated constant buffer is 256 bytes into the constant buffer. Each offset must be a multiple of 16 constants.</param>
    <param name="pNumConstants">An array that holds the numbers of constants in the buffers that <i>ppConstantBuffers</i> specifies. Each number specifies the number of constants that are contained in the constant buffer that the shader uses. Each number of constants starts from its respective offset that is specified in the <i>pFirstConstant</i> array. Each number of constants must be a multiple of 16 constants, in the range [0..4096].</param>
  </member>
  <member name="ID3D11DeviceContext1">
    <summary>The device context interface represents a device context; it is used to render commands. <b>ID3D11DeviceContext1</b> adds new methods to those in <see cref="ID3D11DeviceContext" />.</summary>
  </member>
</doc>