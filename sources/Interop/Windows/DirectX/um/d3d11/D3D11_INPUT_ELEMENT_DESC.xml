<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D11_INPUT_ELEMENT_DESC">
    <summary>
      <para>A description of a single element for the input-assembler stage.</para>
    </summary>
    <remarks>
      <para>An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout
object by calling <see cref="ID3D11Device.CreateInputLayout" />. For an example, see the "Create the Input-Layout Object" subtopic under the  <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">Getting Started with the Input-Assembler Stage</a> topic.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-structures">Core Structures</seealso>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.SemanticName">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>The HLSL semantic associated with this element in a shader input-signature.</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.SemanticIndex">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a
case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic
name</para>
      <code>matrix
</code>
      <para>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.Format">
    <summary>
      <para>Type: <b><see cref="DXGI_FORMAT" /></b></para>
      <para>The data type of the element data. See <see cref="DXGI_FORMAT" />.</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.InputSlot">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>An integer value that identifies the input-assembler (see input slot). Valid values are between 0 and 15, defined in D3D11.h.</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.AlignedByteOffset">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Optional. Offset (in bytes) from the start of the vertex. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly
after the previous one, including any packing if necessary.</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.InputSlotClass">
    <summary>
      <para>Type: <b><see cref="D3D11_INPUT_CLASSIFICATION" /></b></para>
      <para>Identifies the input data class for a single input slot (see <see cref="D3D11_INPUT_CLASSIFICATION" />).</para>
    </summary>
  </member>
  <member name="D3D11_INPUT_ELEMENT_DESC.InstanceDataStepRate">
    <summary>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an
element that contains per-vertex data (the slot class is set to D3D11_INPUT_PER_VERTEX_DATA).</para>
    </summary>
  </member>
</doc>