<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="D3D11_QUERY">
    <summary>
      <para>Query types.</para>
    </summary>
    <remarks>
      <para>Create a query with <see cref="ID3D11Device.CreateQuery" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-enums">Core Enumerations</seealso>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_EVENT">
    <summary>
      <para>Determines whether or not the GPU is finished processing commands. When the GPU is finished processing commands <see cref="ID3D11DeviceContext.GetData" /> will return S_OK, and pData will point to a BOOL with a value of <b>TRUE</b>. When using this type of query, <see cref="ID3D11DeviceContext.Begin" /> is disabled.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_OCCLUSION">
    <summary>
      <para>Get the number of samples that passed the depth and stencil tests in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a UINT64. If a depth or stencil test is disabled, then each of those tests will be counted as a pass.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_TIMESTAMP">
    <summary>
      <para>Get a timestamp value where <see cref="ID3D11DeviceContext.GetData" /> returns a UINT64. This kind of query is only useful if two timestamp queries are done in the middle of a D3D11_QUERY_TIMESTAMP_DISJOINT query. The difference of two timestamps can be used to determine how many ticks have elapsed, and the D3D11_QUERY_TIMESTAMP_DISJOINT query will determine if that difference is a reliable value and also has a value that shows how to convert the number of ticks into seconds. See <see cref="D3D11_QUERY_DATA_TIMESTAMP_DISJOINT" />. When using this type of query, <see cref="ID3D11DeviceContext.Begin" /> is disabled.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_TIMESTAMP_DISJOINT">
    <summary>
      <para>Determines whether or not a D3D11_QUERY_TIMESTAMP is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_TIMESTAMP_DISJOINT" />. This type of query should only be invoked once per frame or less.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_PIPELINE_STATISTICS">
    <summary>
      <para>Get pipeline statistics, such as the number of pixel shader invocations in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_PIPELINE_STATISTICS" />.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_OCCLUSION_PREDICATE">
    <summary>
      <para>Similar to D3D11_QUERY_OCCLUSION, except <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL indicating whether or not any samples passed the depth and stencil tests - <b>TRUE</b> meaning at least one passed, <b>FALSE</b> meaning none passed.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_STATISTICS">
    <summary>
      <para>Get streaming output statistics, such as the number of primitives streamed out in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_SO_STATISTICS" /> structure.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE">
    <summary>
      <para>Determines whether or not any of the streaming output buffers overflowed in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM0">
    <summary>
      <para>Get streaming output statistics for stream 0, such as the number of primitives streamed out in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_SO_STATISTICS" /> structure.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0">
    <summary>
      <para>Determines whether or not the stream 0 output buffers overflowed in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM1">
    <summary>
      <para>Get streaming output statistics for stream 1, such as the number of primitives streamed out in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_SO_STATISTICS" /> structure.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1">
    <summary>
      <para>Determines whether or not the stream 1 output buffers overflowed in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM2">
    <summary>
      <para>Get streaming output statistics for stream 2, such as the number of primitives streamed out in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_SO_STATISTICS" /> structure.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2">
    <summary>
      <para>Determines whether or not the stream 2 output buffers overflowed in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_STATISTICS_STREAM3">
    <summary>
      <para>Get streaming output statistics for stream 3, such as the number of primitives streamed out in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> will return a <see cref="D3D11_QUERY_DATA_SO_STATISTICS" /> structure.</para>
    </summary>
  </member>
  <member name="D3D11_QUERY.D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3">
    <summary>
      <para>Determines whether or not the stream 3 output buffers overflowed in between <see cref="ID3D11DeviceContext.Begin" /> and <see cref="ID3D11DeviceContext.End" />. <see cref="ID3D11DeviceContext.GetData" /> returns a BOOL - <b>TRUE</b> meaning there was an overflow, <b>FALSE</b> meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.</para>
    </summary>
  </member>
</doc>