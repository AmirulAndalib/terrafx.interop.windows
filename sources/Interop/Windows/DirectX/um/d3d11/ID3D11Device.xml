<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11Device.CheckCounter">
    <summary>Get the type, name, units of measure, and a description of an existing counter.</summary>
    <param name="pDesc">Pointer to a counter description (see <see cref="D3D11_COUNTER_DESC" />). Specifies which counter information is to be retrieved about.</param>
    <param name="pType">Pointer to the data type of a counter (see <see cref="D3D11_COUNTER_TYPE" />). Specifies the data type of the counter being retrieved.</param>
    <param name="pActiveCounters">Pointer to the number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</param>
    <param name="szName">String to be filled with a brief name for the counter. May be <b>NULL</b> if the application is not interested in the name of the counter.</param>
    <param name="pNameLength">Length of the string returned to szName. Can be <b>NULL</b>.</param>
    <param name="szUnits">Name of the units a counter measures, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</param>
    <param name="pUnitsLength">Length of the string returned to szUnits. Can be <b>NULL</b>.</param>
    <param name="szDescription">A description of the counter, provided the memory the pointer points to has enough room to hold the string. Can be <b>NULL</b>. The returned string will always be in English.</param>
    <param name="pDescriptionLength">Length of the string returned to szDescription. Can be <b>NULL</b>.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CheckCounterInfo">
    <summary>Get a counter's information.</summary>
    <param name="pCounterInfo">Pointer to counter information (see <see cref="D3D11_COUNTER_INFO" />).</param>
  </member>
  <member name="ID3D11Device.CheckFeatureSupport">
    <summary>Gets information about the features that are supported by the current graphics driver.</summary>
    <param name="Feature">A member of the <see cref="D3D11_FEATURE" /> enumerated type that describes which feature to query for support.</param>
    <param name="pFeatureSupportData">Upon completion of the method, the passed structure is filled with data that describes the feature support.</param>
    <param name="FeatureSupportDataSize">The size of the structure passed to the <i>pFeatureSupportData</i> parameter.</param>
    <returns>Returns S_OK if successful; otherwise, returns E_INVALIDARG if an unsupported data type is passed to the <i>pFeatureSupportData</i> parameter or a size mismatch is detected for the <i>FeatureSupportDataSize</i> parameter.</returns>
  </member>
  <member name="ID3D11Device.CheckFormatSupport">
    <summary>Get the support of a given format on the installed video device.</summary>
    <param name="Format">A <see cref="DXGI_FORMAT" /> enumeration that describes a format for which to check for support.</param>
    <param name="pFormatSupport">A bitfield of <see cref="D3D11_FORMAT_SUPPORT" /> enumeration values describing how the specified format is supported on the installed device. The values are ORed together.</param>
    <returns>Returns S_OK if successful; otherwise, returns E_INVALIDARG if the <i>Format</i> parameter is <b>NULL</b>, or returns E_FAIL if the described format does not exist.</returns>
  </member>
  <member name="ID3D11Device.CheckMultisampleQualityLevels">
    <summary>Get the number of quality levels available during multisampling.</summary>
    <param name="Format">The texture format. See <see cref="DXGI_FORMAT" />.</param>
    <param name="SampleCount">The number of samples during multisampling.</param>
    <param name="pNumQualityLevels">Number of quality levels supported by the adapter. See <b>Remarks</b>.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/win32/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateBlendState">
    <summary>Create a blend-state object that encapsulates blend state for the output-merger stage.</summary>
    <param name="pBlendStateDesc">Pointer to a blend-state description (see <see cref="D3D11_BLEND_DESC" />).</param>
    <param name="ppBlendState">Address of a pointer to the blend-state object created (see <see cref="ID3D11BlendState" />).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the blend-state object. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device.CreateBuffer">
    <summary>Creates a buffer (vertex buffer, index buffer, or shader-constant buffer).</summary>
    <param name="pDesc">A pointer to a <see cref="D3D11_BUFFER_DESC" /> structure that describes the buffer.</param>
    <param name="pInitialData">
      <para>A pointer to a <see cref="D3D11_SUBRESOURCE_DATA" /> structure that describes the initialization data; use <b>NULL</b> to allocate space only (with the exception that it cannot be <b>NULL</b> if the usage flag is <b>D3D11_USAGE_IMMUTABLE</b>).</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the buffer is undefined. In this case, you need to write the buffer content some other way before the resource is read.</para>
    </param>
    <param name="ppBuffer">Address of a pointer to the <see cref="ID3D11Buffer" /> interface for the buffer object created. Set this parameter to <b>NULL</b> to validate the other input parameters (<b>S_FALSE</b> indicates a pass).</param>
    <returns>This method returns <b>E_OUTOFMEMORY</b> if there is insufficient memory to create the buffer. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device.CreateClassLinkage">
    <summary>Creates class linkage libraries to enable dynamic shader linkage.</summary>
    <param name="ppLinkage">A pointer to a class-linkage interface pointer (see <see cref="ID3D11ClassLinkage" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateComputeShader">
    <summary>Create a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-compute-shader">compute shader</a>.</summary>
    <param name="pShaderBytecode">A pointer to a compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled shader in <i>pShaderBytecode</i>.</param>
    <param name="pClassLinkage">A pointer to a <see cref="ID3D11ClassLinkage" />, which represents class linkage interface; the value can be <b>NULL</b>.</param>
    <param name="ppComputeShader">Address of a pointer to an <see cref="ID3D11ComputeShader" /> interface. If this is <b>NULL</b>, all other parameters will be validated; if validation passes, CreateComputeShader returns S_FALSE instead of S_OK.</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader.<br />See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device.CreateCounter">
    <summary>Create a counter object for measuring GPU performance.</summary>
    <param name="pCounterDesc">Pointer to a counter description (see <see cref="D3D11_COUNTER_DESC" />).</param>
    <param name="ppCounter">Address of a pointer to a counter (see <see cref="ID3D11Counter" />).</param>
    <returns>
      <para>If this function succeeds, it will return S_OK. If it fails, possible return values are: S_FALSE, E_OUTOFMEMORY, DXGI_ERROR_UNSUPPORTED, DXGI_ERROR_NONEXCLUSIVE, or E_INVALIDARG.</para>
      <para>DXGI_ERROR_UNSUPPORTED is returned whenever the application requests to create a well-known counter, but the current device does not support it.</para>
      <para>DXGI_ERROR_NONEXCLUSIVE indicates that another device object is currently using the counters, so they cannot be used by this device at the moment.</para>
      <para>E_INVALIDARG is returned whenever an out-of-range well-known or device-dependent counter is requested, or when the simulataneously active counters have been exhausted.</para>
    </returns>
  </member>
  <member name="ID3D11Device.CreateDeferredContext">
    <summary>Creates a deferred context, which can record command lists.</summary>
    <param name="ContextFlags">Reserved for future use. Pass 0.</param>
    <param name="ppDeferredContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext" /> interface pointer is initialized.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns <b>DXGI_ERROR_DEVICE_REMOVED</b> if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device.</description>
        </item>
        <item>
          <description>Returns <b>DXGI_ERROR_INVALID_CALL</b> if the <b>CreateDeferredContext</b> method cannot be called from the current context. For example, if the device was created with the <see cref="D3D11_CREATE_DEVICE_SINGLETHREADED" /> value, <b>CreateDeferredContext</b> returns <b>DXGI_ERROR_INVALID_CALL</b>.</description>
        </item>
        <item>
          <description>Returns <b>E_INVALIDARG</b> if the <i>ContextFlags</i> parameter is invalid.</description>
        </item>
        <item>
          <description>Returns <b>E_OUTOFMEMORY</b> if the application has exhausted available memory.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11Device.CreateDepthStencilState">
    <summary>Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.</summary>
    <param name="pDepthStencilDesc">Pointer to a depth-stencil state description (see <see cref="D3D11_DEPTH_STENCIL_DESC" />).</param>
    <param name="ppDepthStencilState">Address of a pointer to the depth-stencil state object created (see <see cref="ID3D11DepthStencilState" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateDepthStencilView">
    <summary>Create a depth-stencil view for accessing resource data.</summary>
    <param name="pResource">Pointer to the resource that will serve as the depth-stencil surface. This resource must have been created with the <see cref="D3D11_BIND_DEPTH_STENCIL" /> flag.</param>
    <param name="pDesc">Pointer to a depth-stencil-view description (see <see cref="D3D11_DEPTH_STENCIL_VIEW_DESC" />). Set this parameter to <b>NULL</b> to create a view that accesses mipmap level 0 of the entire resource (using the format the resource was created with).</param>
    <param name="ppDepthStencilView">Address of a pointer to an <see cref="ID3D11DepthStencilView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateDomainShader">
    <summary>Create a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">domain shader</a>.</summary>
    <param name="pShaderBytecode">A pointer to a compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled shader.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppDomainShader">Address of a pointer to a <see cref="ID3D11DomainShader" /> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateGeometryShader">
    <summary>Create a geometry shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled geometry shader.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppGeometryShader">Address of a pointer to a <see cref="ID3D11GeometryShader" /> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateGeometryShaderWithStreamOutput">
    <summary>Creates a geometry shader that can write to streaming output buffers.</summary>
    <param name="pShaderBytecode">
      <para>A pointer to the compiled geometry shader for a standard geometry shader plus stream output. For info on how to get this pointer, see <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/dx-graphics-hlsl-using-shaders-10">Getting a Pointer to a Compiled Shader</a>.</para>
      <para>To create the stream output without using a geometry shader, pass a pointer to the output signature for the prior stage. To obtain this output signature, call the <a href="https://docs.microsoft.com//windows/desktop/direct3dhlsl/d3dgetoutputsignatureblob">D3DGetOutputSignatureBlob</a> compiler function. You can also pass a pointer to the compiled shader for the prior stage (for example, the <a href="https://docs.microsoft.com//previous-versions/bb205146(v=vs.85)">vertex-shader stage</a> or <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">domain-shader stage</a>). This compiled shader provides the output signature for the data.</para>
    </param>
    <param name="BytecodeLength">Size of the compiled geometry shader.</param>
    <param name="pSODeclaration">Pointer to a <see cref="D3D11_SO_DECLARATION_ENTRY" /> array. Cannot be <b>NULL</b> if NumEntries &gt; 0.</param>
    <param name="NumEntries">The number of entries in the stream output declaration ( ranges from 0 to D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT ).</param>
    <param name="pBufferStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
    <param name="NumStrides">The number of strides (or buffers) in <i>pBufferStrides</i> (ranges from 0 to D3D11_SO_BUFFER_SLOT_COUNT).</param>
    <param name="RasterizedStream">The index number of the stream to be sent to the rasterizer stage (ranges from 0 to D3D11_SO_STREAM_COUNT - 1). Set to D3D11_SO_NO_RASTERIZED_STREAM if no stream is to be rasterized.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppGeometryShader">Address of a pointer to an <see cref="ID3D11GeometryShader" /> interface, representing the geometry shader that was created. Set this to <b>NULL</b> to validate the other parameters; if validation passes, the method will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateHullShader">
    <summary>Create a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull shader</a>.</summary>
    <param name="pShaderBytecode">A pointer to a compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled shader.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppHullShader">Address of a pointer to a <see cref="ID3D11HullShader" /> interface.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateInputLayout">
    <summary>Create an input-layout object to describe the input-buffer data for the input-assembler stage.</summary>
    <param name="pInputElementDescs">An array of the input-assembler stage input data types; each type is described by an element description (see <see cref="D3D11_INPUT_ELEMENT_DESC" />).</param>
    <param name="NumElements">The number of input-data types in the array of input-elements.</param>
    <param name="pShaderBytecodeWithInputSignature">A pointer to the compiled shader. The compiled shader code contains a input signature which is validated against the array of elements. See remarks.</param>
    <param name="BytecodeLength">Size of the compiled shader.</param>
    <param name="ppInputLayout">A pointer to the input-layout object created (see <see cref="ID3D11InputLayout" />). To validate the other input parameters, set this pointer to be <b>NULL</b> and verify that the method returns S_FALSE.</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device.CreatePixelShader">
    <summary>Create a pixel shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled pixel shader.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppPixelShader">Address of a pointer to a <see cref="ID3D11PixelShader" /> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return S_FALSE instead of S_OK.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreatePredicate">
    <summary>Creates a predicate.</summary>
    <param name="pPredicateDesc">Pointer to a query description where the type of query must be a D3D11_QUERY_SO_OVERFLOW_PREDICATE or D3D11_QUERY_OCCLUSION_PREDICATE (see <see cref="D3D11_QUERY_DESC" />).</param>
    <param name="ppPredicate">Address of a pointer to a predicate (see <see cref="ID3D11Predicate" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateQuery">
    <summary>This interface encapsulates methods for querying information from the GPU.</summary>
    <param name="pQueryDesc">Pointer to a query description (see <see cref="D3D11_QUERY_DESC" />).</param>
    <param name="ppQuery">Address of a pointer to the query object created (see <see cref="ID3D11Query" />).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the query object.<br />See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device.CreateRasterizerState">
    <summary>Create a rasterizer state object that tells the rasterizer stage how to behave.</summary>
    <param name="pRasterizerDesc">Pointer to a rasterizer state description (see <see cref="D3D11_RASTERIZER_DESC" />).</param>
    <param name="ppRasterizerState">Address of a pointer to the rasterizer state object created (see <see cref="ID3D11RasterizerState" />).</param>
    <returns>This method returns E_OUTOFMEMORY if there is insufficient memory to create the compute shader. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for other possible return values.</returns>
  </member>
  <member name="ID3D11Device.CreateRenderTargetView">
    <summary>Creates a render-target view for accessing resource data.</summary>
    <param name="pResource">Pointer to a <see cref="ID3D11Resource" /> that represents a render target. This resource must have been created with the <see cref="D3D11_BIND_RENDER_TARGET" /> flag.</param>
    <param name="pDesc">Pointer to a <see cref="D3D11_RENDER_TARGET_VIEW_DESC" /> that represents a render-target view description. Set this parameter to <b>NULL</b> to create a view that accesses all of the subresources in mipmap level 0.</param>
    <param name="ppRTView">Address of a pointer to an <see cref="ID3D11RenderTargetView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateSamplerState">
    <summary>Create a sampler-state object that encapsulates sampling information for a texture.</summary>
    <param name="pSamplerDesc">Pointer to a sampler state description (see <see cref="D3D11_SAMPLER_DESC" />).</param>
    <param name="ppSamplerState">Address of a pointer to the sampler state object created (see <see cref="ID3D11SamplerState" />).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateShaderResourceView">
    <summary>Create a shader-resource view for accessing data in a resource.</summary>
    <param name="pResource">Pointer to the resource that will serve as input to a shader. This resource must have been created with the <see cref="D3D11_BIND_SHADER_RESOURCE" /> flag.</param>
    <param name="pDesc">Pointer to a shader-resource view description (see <see cref="D3D11_SHADER_RESOURCE_VIEW_DESC" />). Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</param>
    <param name="ppSRView">Address of a pointer to an <see cref="ID3D11ShaderResourceView" />. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return <b>S_FALSE</b> if the other input parameters pass validation).</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateTexture1D">
    <summary>Creates an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">1D textures</a>.</summary>
    <param name="pDesc">A pointer to a <see cref="D3D11_TEXTURE1D_DESC" /> structure that describes a 1D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">
      <para>A pointer to an array of <see cref="D3D11_SUBRESOURCE_DATA" /> structures that describe subresources for the 1D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <see cref="D3D11_USAGE" />). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
      <para>You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <see cref="D3D11_TEXTURE1D_DESC" /> structure to which <i>pDesc</i> points by using the following calculation:</para>
      <para>MipLevels * ArraySize</para>
      <para>For more information about this array size, see Remarks.</para>
    </param>
    <param name="ppTexture1D">A pointer to a buffer that receives a pointer to a <see cref="ID3D11Texture1D" /> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device.CreateTexture2D">
    <summary>Create an array of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">2D textures</a>.</summary>
    <param name="pDesc">A pointer to a <see cref="D3D11_TEXTURE2D_DESC" /> structure that describes a 2D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">
      <para>A pointer to an array of <see cref="D3D11_SUBRESOURCE_DATA" /> structures that describe subresources for the 2D texture resource. Applications can't specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <see cref="D3D11_USAGE" />). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
      <para>You can determine the size of this array from values in the <b>MipLevels</b> and <b>ArraySize</b> members of the <see cref="D3D11_TEXTURE2D_DESC" /> structure to which <i>pDesc</i> points by using the following calculation:</para>
      <para>MipLevels * ArraySize</para>
      <para>For more information about this array size, see Remarks.</para>
    </param>
    <param name="ppTexture2D">A pointer to a buffer that receives a pointer to a <see cref="ID3D11Texture2D" /> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device.CreateTexture3D">
    <summary>Create a single <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-resources-textures-intro">3D texture</a>.</summary>
    <param name="pDesc">A pointer to a <see cref="D3D11_TEXTURE3D_DESC" /> structure that describes a 3D texture resource. To create a typeless resource that can be interpreted at runtime into different, compatible formats, specify a typeless format in the texture description. To generate mipmap levels automatically, set the number of mipmap levels to 0.</param>
    <param name="pInitialData">
      <para>A pointer to an array of <see cref="D3D11_SUBRESOURCE_DATA" /> structures that describe subresources for the 3D texture resource. Applications cannot specify <b>NULL</b> for <i>pInitialData</i> when creating IMMUTABLE resources (see <see cref="D3D11_USAGE" />). If the resource is multisampled, <i>pInitialData</i> must be <b>NULL</b> because multisampled resources cannot be initialized with data when they are created.</para>
      <para>If you don't pass anything to <i>pInitialData</i>, the initial content of the memory for the resource is undefined. In this case, you need to write the resource content some other way before the resource is read.</para>
      <para>You can determine the size of this array from the value in the <b>MipLevels</b> member of the <see cref="D3D11_TEXTURE3D_DESC" /> structure to which <i>pDesc</i> points. Arrays of 3D volume textures are not supported.</para>
      <para>For more information about this array size, see Remarks.</para>
    </param>
    <param name="ppTexture3D">A pointer to a buffer that receives a pointer to a <see cref="ID3D11Texture3D" /> interface for the created texture. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>If the method succeeds, the return code is S_OK. See <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a> for failing error codes.</returns>
  </member>
  <member name="ID3D11Device.CreateUnorderedAccessView">
    <summary>Creates a view for accessing an <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">unordered access</a> resource.</summary>
    <param name="pResource">Pointer to an <see cref="ID3D11Resource" /> that represents a resources that will serve as an input to a shader.</param>
    <param name="pDesc">Pointer to an <see cref="D3D11_UNORDERED_ACCESS_VIEW_DESC" /> that represents a shader-resource view description. Set this parameter to <b>NULL</b> to create a view that accesses the entire resource (using the format the resource was created with).</param>
    <param name="ppUAView">Address of a pointer to an <see cref="ID3D11UnorderedAccessView" /> that represents an unordered-access view. Set this parameter to <b>NULL</b> to validate the other input parameters (the method will return S_FALSE if the other input parameters pass validation).</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.CreateVertexShader">
    <summary>Create a vertex-shader object from a compiled shader.</summary>
    <param name="pShaderBytecode">A pointer to the compiled shader.</param>
    <param name="BytecodeLength">Size of the compiled vertex shader.</param>
    <param name="pClassLinkage">A pointer to a class linkage interface (see <see cref="ID3D11ClassLinkage" />); the value can be <b>NULL</b>.</param>
    <param name="ppVertexShader">Address of a pointer to a <see cref="ID3D11VertexShader" /> interface. If this is <b>NULL</b>, all other parameters will be validated, and if all parameters pass validation this API will return <b>S_FALSE</b> instead of <b>S_OK</b>.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.GetCreationFlags">
    <summary>Get the flags used during the call to create the device with <see cref="D3D11CreateDevice" />.</summary>
    <returns>A bitfield containing the flags used to create the device. See <see cref="D3D11_CREATE_DEVICE_FLAG" />.</returns>
  </member>
  <member name="ID3D11Device.GetDeviceRemovedReason">
    <summary>Get the reason why the device was removed.</summary>
    <returns>
      <para>Possible return values include:</para>
      <list type="bullet">
        <item>
          <description>DXGI_ERROR_DEVICE_HUNG</description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_REMOVED</description>
        </item>
        <item>
          <description>DXGI_ERROR_DEVICE_RESET</description>
        </item>
        <item>
          <description>DXGI_ERROR_DRIVER_INTERNAL_ERROR</description>
        </item>
        <item>
          <description>DXGI_ERROR_INVALID_CALL</description>
        </item>
        <item>
          <description>S_OK</description>
        </item>
      </list>For more detail on these return codes, see <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR</a>.</returns>
  </member>
  <member name="ID3D11Device.GetExceptionMode">
    <summary>Get the exception-mode flags.</summary>
    <returns>A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <see cref="D3D11_RAISE_FLAG" />. A default value of 0 means there are no flags.</returns>
  </member>
  <member name="ID3D11Device.GetFeatureLevel">
    <summary>Gets the feature level of the hardware device.</summary>
    <returns>A member of the <see cref="D3D_FEATURE_LEVEL" /> enumerated type that describes the feature level of the hardware device.</returns>
  </member>
  <member name="ID3D11Device.GetImmediateContext">
    <summary>Gets an immediate context, which can play back command lists.</summary>
    <param name="ppImmediateContext">Upon completion of the method, the passed pointer to an <see cref="ID3D11DeviceContext" /> interface pointer is initialized.</param>
  </member>
  <member name="ID3D11Device.GetPrivateData">
    <summary>Get application-defined data from a device.</summary>
    <param name="guid">Guid associated with the data.</param>
    <param name="pDataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer that <i>pData</i> points to, and on output contains the size, in bytes, of the amount of data that <b>GetPrivateData</b> retrieved.</param>
    <param name="pData">A pointer to a buffer that <b>GetPrivateData</b> fills with data from the device if <i>pDataSize</i> points to a value that specifies a buffer large enough to hold the data.</param>
    <returns>This method returns one of the codes described in the topic <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.OpenSharedResource">
    <summary>Give a device access to a shared resource created on a different device.</summary>
    <param name="hResource">A resource handle. See remarks.</param>
    <param name="ReturnedInterface">The globally unique identifier (GUID) for the resource interface. See remarks.</param>
    <param name="ppResource">Address of a pointer to the resource we are gaining access to.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.SetExceptionMode">
    <summary>Get the exception-mode flags.</summary>
    <param name="RaiseFlags">A value that contains one or more exception flags; each flag specifies a condition which will cause an exception to be raised. The flags are listed in <see cref="D3D11_RAISE_FLAG" />. A default value of 0 means there are no flags.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.SetPrivateData">
    <summary>Set data to a device and associate that data with a guid.</summary>
    <param name="guid">Guid associated with the data.</param>
    <param name="DataSize">Size of the data.</param>
    <param name="pData">Pointer to the data to be stored with this device. If pData is <b>NULL</b>, DataSize must also be 0, and any data previously associated with the guid will be destroyed.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device.SetPrivateDataInterface">
    <summary>Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.</summary>
    <param name="guid">Guid associated with the interface.</param>
    <param name="pData">Pointer to an IUnknown-derived interface to be associated with the device child.</param>
    <returns>This method returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</returns>
  </member>
  <member name="ID3D11Device">
    <summary>
      <para>The device interface represents a virtual adapter; it is used to create resources.</para>
      <div>
        <b>Note</b>  The latest version of this interface is <see cref="ID3D11Device5" /> introduced in the Windows 10 Creators Update. Applications targetting Windows 10 Creators Update should use the <b>ID3D11Device5</b> interface instead of <b>ID3D11Device</b>.</div>
    </summary>
  </member>
</doc>