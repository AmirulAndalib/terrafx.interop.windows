<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="DirectX.D3D11CalcSubresource">
    <summary>
      <para>Calculates a subresource index for a texture.</para>
    </summary>
    <param name="MipSlice">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A zero-based index for the mipmap level to address; 0 indicates the first, most detailed mipmap level.</para>
    </param>
    <param name="ArraySlice">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The zero-based index for the array level to address; always use 0 for volume (3D) textures.</para>
    </param>
    <param name="MipLevels">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Number of mipmap levels in the resource.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index which equals MipSlice + (ArraySlice * MipLevels).</para>
    </returns>
    <remarks>
      <para>A buffer is an unstructured resource and is therefore defined as containing a single subresource. APIs that take buffers do not need a subresource index.
A texture on the other hand is highly structured. Each texture object may contain one or more subresources depending on the size of the array and the
number of mipmap levels.</para>
      <para>For volume (3D) textures, all slices for a given mipmap level are a single subresource index.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-functions">Core Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-resource-functions">Resource Functions</seealso>
  </member>
  <member name="DirectX.D3D11CreateDevice">
    <summary>
      <para>Creates a device that represents the display adapter.</para>
    </summary>
    <param name="pAdapter">
      <para>Type: <b><see cref="IDXGIAdapter" />*</b></para>
      <para>A pointer to the video adapter to use when creating a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <see cref="IDXGIFactory1.EnumAdapters" />.</para>
      <para>
        <b>Note</b>  Do not mix the use of DXGI 1.0 (<see cref="IDXGIFactory" />) and DXGI 1.1 (<see cref="IDXGIFactory1" />) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application.</para>
    </param>
    <param name="DriverType">
      <para>Type: <b><see cref="D3D_DRIVER_TYPE" /></b></para>
      <para>The <see cref="D3D_DRIVER_TYPE" />, which represents the driver type to create.</para>
    </param>
    <param name="Software">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HMODULE</a></b></para>
      <para>A handle to a DLL that implements a software rasterizer.
If <i>DriverType</i> is <i>D3D_DRIVER_TYPE_SOFTWARE</i>,
<i>Software</i> must not be <b>NULL</b>. Get the handle by
calling <see cref="LoadLibrary" />,
<see cref="LoadLibraryEx" /> ,
or <see cref="GetModuleHandle" />.</para>
    </param>
    <param name="Flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The runtime <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable (see <see cref="D3D11_CREATE_DEVICE_FLAG" />);
values can be bitwise OR'd together.</para>
    </param>
    <param name="pFeatureLevels">
      <para>Type: <b>const <see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>A pointer to an array of <see cref="D3D_FEATURE_LEVEL" />s, which determine the order of feature levels to attempt to create.
If <i>pFeatureLevels</i> is set to <b>NULL</b>,
this function uses the following array of feature levels:</para>
      <code>{
    D3D_FEATURE_LEVEL_11_0,
    D3D_FEATURE_LEVEL_10_1,
    D3D_FEATURE_LEVEL_10_0,
    D3D_FEATURE_LEVEL_9_3,
    D3D_FEATURE_LEVEL_9_2,
    D3D_FEATURE_LEVEL_9_1,
};
</code>
      <para>
        <b>Note</b>  If the Direct3D 11.1 runtime is present on the computer and <i>pFeatureLevels</i> is set to <b>NULL</b>, this function won't create a <see cref="D3D_FEATURE_LEVEL_11_1" /> device. To create a <b>D3D_FEATURE_LEVEL_11_1</b> device, you must explicitly provide a <b>D3D_FEATURE_LEVEL</b> array that includes <b>D3D_FEATURE_LEVEL_11_1</b>. If you provide a <b>D3D_FEATURE_LEVEL</b> array that contains <b>D3D_FEATURE_LEVEL_11_1</b> on a computer that doesn't have the Direct3D 11.1 runtime installed, this function immediately fails with E_INVALIDARG.</para>
    </param>
    <param name="FeatureLevels">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of elements in <i>pFeatureLevels</i>.</para>
    </param>
    <param name="SDKVersion">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The SDK version; use <i>D3D11_SDK_VERSION</i>.</para>
    </param>
    <param name="ppDevice">
      <para>Type: <b><see cref="ID3D11Device" />**</b></para>
      <para>Returns the address of a pointer to an <see cref="ID3D11Device" /> object that represents the device created. If this parameter is <b>NULL</b>, no ID3D11Device will be returned.</para>
    </param>
    <param name="pFeatureLevel">
      <para>Type: <b><see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>If successful, returns the first <see cref="D3D_FEATURE_LEVEL" /> from the <i>pFeatureLevels</i> array which succeeded. Supply <b>NULL</b> as an input if you don't need to determine which feature level is supported.</para>
    </param>
    <param name="ppImmediateContext">
      <para>Type: <b><see cref="ID3D11DeviceContext" />**</b></para>
      <para>Returns the address of a pointer to an <see cref="ID3D11DeviceContext" /> object that represents the device context. If this parameter is <b>NULL</b>, no ID3D11DeviceContext will be returned.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method can return one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
      <para>This method returns E_INVALIDARG if you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value.</para>
      <para>This method returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a> if you specify <see cref="D3D11_CREATE_DEVICE_DEBUG" /> in <i>Flags</i> and the incorrect version of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
    </returns>
    <remarks>
      <para>This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to
Windows Vista (KB971644).</para>
      <para>To create a Direct3D 11.1 device (<see cref="ID3D11Device1" />), which is available on Windows 8, Windows Server 2012, and Windows 7 and Windows Server 2008 R2 with the <a href="https://docs.microsoft.com//windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a> installed, you first create a <see cref="ID3D11Device" /> with this function, and then call the <see cref="QueryInterface" /> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device1</b> interface.</para>
      <para>To create a Direct3D 11.2 device (<see cref="ID3D11Device2" />), which is available on Windows 8.1 and Windows Server 2012 R2, you first create a <see cref="ID3D11Device" /> with this function, and then call the <see cref="QueryInterface" /> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device2</b> interface.</para>
      <para>Set <i>ppDevice</i> and <i>ppImmediateContext</i> to <b>NULL</b> to determine which feature level is supported by looking
at <i>pFeatureLevel</i> without creating a device.</para>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-initialize">How To: Create a Device and Immediate Context</a>; to create a device and a swap chain at the same time,
use <see cref="D3D11CreateDeviceAndSwapChain" />.</para>
      <para>If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value, you must also set the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value, <b>D3D11CreateDevice</b> returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a> of E_INVALIDARG.</para>
      <list type="table">
        <listheader>
          <description>
            <para>Differences between Direct3D 10 and Direct3D 11:</para>
            <para>In Direct3D 10, the presence of <i>pAdapter</i> dictated which adapter to use and the <i>DriverType</i> could
mismatch what the adapter was.</para>
            <para>In Direct3D 11, if you are trying to create a hardware or a software device, set <i>pAdapter</i> != <b>NULL</b> which constrains
the other inputs to be:</para>
            <list type="bullet">
              <item>
                <description>
                  <i>DriverType</i> must be D3D_DRIVER_TYPE_UNKNOWN
</description>
              </item>
              <item>
                <description>
                  <i>Software</i> must be <b>NULL</b>.
</description>
              </item>
            </list>
            <para>On the other hand, if <i>pAdapter</i> == <b>NULL</b>, the <i>DriverType</i> cannot be set to D3D_DRIVER_TYPE_UNKNOWN; it can be set to either:</para>
            <list type="bullet">
              <item>
                <description>If <i>DriverType</i> == D3D_DRIVER_TYPE_SOFTWARE,  <i>Software</i> cannot be <b>NULL</b>.
</description>
              </item>
              <item>
                <description>If <i>DriverType</i> == D3D_DRIVER_TYPE_HARDWARE, the adapter used will be the default adapter, which is the first adapter that is enumerated by <see cref="IDXGIFactory1.EnumAdapters" /></description>
              </item>
            </list>
          </description>
        </listheader>
      </list>
      <para>The function signature PFN_D3D11_CREATE_DEVICE is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <para>
        <b>Windows Phone 8:
</b> This API is supported.</para>
      <para>
        <b>Windows Phone 8.1:
</b> This API is supported.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-functions">Core Functions</seealso>
  </member>
  <member name="DirectX.D3D11CreateDeviceAndSwapChain">
    <summary>
      <para>Creates a device that represents the display adapter and a swap chain used for rendering.</para>
    </summary>
    <param name="pAdapter">
      <para>Type: <b><see cref="IDXGIAdapter" />*</b></para>
      <para>A pointer to the video adapter to use when creating a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>. Pass <b>NULL</b> to use the default adapter, which is the first adapter enumerated
by <see cref="IDXGIFactory1.EnumAdapters" />.</para>
      <para>
        <b>Note</b>  Do not mix the use of DXGI 1.0 (<see cref="IDXGIFactory" />) and DXGI 1.1 (<see cref="IDXGIFactory1" />) in an application. Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application.</para>
    </param>
    <param name="DriverType">
      <para>Type: <b><see cref="D3D_DRIVER_TYPE" /></b></para>
      <para>The <see cref="D3D_DRIVER_TYPE" />, which represents the driver type to create.</para>
    </param>
    <param name="Software">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HMODULE</a></b></para>
      <para>A handle to a DLL that implements a software rasterizer.
If <i>DriverType</i> is <i>D3D_DRIVER_TYPE_SOFTWARE</i>, <i>Software</i> must not be <b>NULL</b>. Get the handle by
calling <see cref="LoadLibrary" />,
<see cref="LoadLibraryEx" /> ,
or <see cref="GetModuleHandle" />. The value should be non-<b>NULL</b> when <see cref="D3D_DRIVER_TYPE" /> is <b>D3D_DRIVER_TYPE_SOFTWARE</b> and <b>NULL</b> otherwise.</para>
    </param>
    <param name="Flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The runtime <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">layers</a> to enable (see <see cref="D3D11_CREATE_DEVICE_FLAG" />);
values can be bitwise OR'd together.</para>
    </param>
    <param name="pFeatureLevels">
      <para>Type: <b>const <see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>A pointer to an array of <see cref="D3D_FEATURE_LEVEL" />s, which determine the order of feature levels to attempt to create.
If <i>pFeatureLevels</i> is set to <b>NULL</b>,
this function uses the following array of feature levels:</para>
      <code>
{
    D3D_FEATURE_LEVEL_11_0,
    D3D_FEATURE_LEVEL_10_1,
    D3D_FEATURE_LEVEL_10_0,
    D3D_FEATURE_LEVEL_9_3,
    D3D_FEATURE_LEVEL_9_2,
    D3D_FEATURE_LEVEL_9_1,
};

</code>
      <para>
        <b>Note</b>  If the Direct3D 11.1 runtime is present on the computer and <i>pFeatureLevels</i> is set to <b>NULL</b>, this function won't create a <see cref="D3D_FEATURE_LEVEL_11_1" /> device. To create a <b>D3D_FEATURE_LEVEL_11_1</b> device, you must explicitly provide a <b>D3D_FEATURE_LEVEL</b> array that includes <b>D3D_FEATURE_LEVEL_11_1</b>. If you provide a <b>D3D_FEATURE_LEVEL</b> array that contains <b>D3D_FEATURE_LEVEL_11_1</b> on a computer that doesn't have the Direct3D 11.1 runtime installed, this function immediately fails with E_INVALIDARG.</para>
    </param>
    <param name="FeatureLevels">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of elements in <i>pFeatureLevels</i>.</para>
    </param>
    <param name="SDKVersion">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The SDK version; use <i>D3D11_SDK_VERSION</i>.</para>
    </param>
    <param name="pSwapChainDesc">
      <para>Type: <b>const <see cref="DXGI_SWAP_CHAIN_DESC" />*</b></para>
      <para>A pointer to a swap chain description (see <see cref="DXGI_SWAP_CHAIN_DESC" />) that contains initialization parameters for the swap chain.</para>
    </param>
    <param name="ppSwapChain">
      <para>Type: <b><see cref="IDXGISwapChain" />**</b></para>
      <para>Returns the address of a pointer to the <see cref="IDXGISwapChain" /> object that represents the swap chain used for rendering.</para>
    </param>
    <param name="ppDevice">
      <para>Type: <b><see cref="ID3D11Device" />**</b></para>
      <para>Returns the address of a pointer to an <see cref="ID3D11Device" /> object that represents the device created. If this parameter is  <b>NULL</b>, no ID3D11Device will be returned'.</para>
    </param>
    <param name="pFeatureLevel">
      <para>Type: <b><see cref="D3D_FEATURE_LEVEL" />*</b></para>
      <para>Returns a pointer to a <see cref="D3D_FEATURE_LEVEL" />, which represents the first element in an array of feature levels supported
by the device. Supply <b>NULL</b> as an input if you don't need to determine which feature level is supported.</para>
    </param>
    <param name="ppImmediateContext">
      <para>Type: <b><see cref="ID3D11DeviceContext" />**</b></para>
      <para>Returns the address of a pointer to an <see cref="ID3D11DeviceContext" /> object that represents the device context. If this parameter is <b>NULL</b>, no ID3D11DeviceContext will be returned.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>This method can return one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>.</para>
      <para>This method returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a> if you call it in a Session 0 process.</para>
      <para>This method returns E_INVALIDARG if you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value.</para>
      <para>This method returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_SDK_COMPONENT_MISSING</a> if you specify <see cref="D3D11_CREATE_DEVICE_DEBUG" /> in <i>Flags</i> and the incorrect version of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug layer</a> is installed on your computer. Install the latest Windows SDK to get the correct version.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  If you call this method in a Session 0 process, it returns <a href="https://docs.microsoft.com//windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</a>.</para>
      <para>This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to
Windows Vista (KB971644).</para>
      <para>To create a Direct3D 11.1 device (<see cref="ID3D11Device1" />), which is available on Windows 8, Windows Server 2012, and Windows 7 and Windows Server 2008 R2 with the <a href="https://docs.microsoft.com//windows/desktop/direct3darticles/platform-update-for-windows-7">Platform Update for Windows 7</a> installed, you first create a <see cref="ID3D11Device" /> with this function, and then call the <see cref="QueryInterface" /> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device1</b> interface.</para>
      <para>To create a Direct3D 11.2 device (<see cref="ID3D11Device2" />), which is available on Windows 8.1 and Windows Server 2012 R2, you first create a <see cref="ID3D11Device" /> with this function, and then call the <see cref="QueryInterface" /> method on the <b>ID3D11Device</b> object to obtain the <b>ID3D11Device2</b> interface.</para>
      <para>Also, see the remarks section in <see cref="D3D11CreateDevice" /> for details about input parameter dependencies. To create a device without
creating a swap chain, use the <see cref="D3D11CreateDevice" /> function.</para>
      <para>If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value, you must also set the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the <i>pAdapter</i> parameter to a non-<b>NULL</b> value and the <i>DriverType</i> parameter to the D3D_DRIVER_TYPE_HARDWARE value, <b>D3D11CreateDeviceAndSwapChain</b> returns an <a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a> of E_INVALIDARG.</para>
      <para>The function signature PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN is provided as a typedef, so that you can use dynamic linking techniques (<see cref="GetProcAddress" />) instead of statically linking.</para>
      <h3>Usage notes</h3>
      <b>Note</b>  The <b>D3D11CreateDeviceAndSwapChain</b> function does not exist for Windows Store apps. Instead, Windows Store apps use the  <see cref="D3D11CreateDevice" /> function and then use the <see cref="IDXGIFactory2.CreateSwapChainForCoreWindow" /> method.
<para><b>Note</b>  This function has not been updated to support recent additional features of swap chain creation. For the most up-to-date swap chain creation methods, refer to the methods of <see cref="IDXGIFactory2" /> (including <see cref="CreateSwapChainForHwnd" />, <see cref="CreateSwapChainForCoreWindow" /> and <see cref="CreateSwapChainForComposition" />).</para><para><b>Windows Phone 8:
</b> This API is supported.</para></remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-d3d11-core-functions">Core Functions</seealso>
  </member>
</doc>