<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11VideoContext.ConfigureAuthenticatedChannel">
    <summary>Sends a configuration command to an authenticated channel.</summary>
    <param name="pChannel">A pointer to the <see cref="ID3D11AuthenticatedChannel" /> interface.</param>
    <param name="InputSize">The size of the <i>pInput</i> array, in bytes.</param>
    <param name="pInput">A pointer to a byte array that contains input data for the command. This buffer always starts with a <see cref="D3D11_AUTHENTICATED_CONFIGURE_INPUT" /> structure. The <b>ConfigureType</b> member of the structure specifies the command and defines the meaning of the rest of the buffer.</param>
    <param name="pOutput">A pointer to a <see cref="D3D11_AUTHENTICATED_CONFIGURE_OUTPUT" /> structure that receives the response to the command.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.DecoderBeginFrame">
    <summary>Starts a decoding operation to decode a video frame.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoder" />.</param>
    <param name="pView">A pointer to the <see cref="ID3D11VideoDecoderOutputView" /> interface. This interface describes the resource that will receive the decoded frame. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoderOutputView" />.</param>
    <param name="ContentKeySize">The size of the content key that is specified in <i>pContentKey</i>. If <i>pContentKey</i> is NULL, set <i>ContentKeySize</i> to zero.</param>
    <param name="pContentKey">An optional pointer to a content key that was used to encrypt the frame data. If no content key was used, set this parameter to <b>NULL</b>. If the caller provides a content key, the caller must use the session key to encrypt the content key.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code. <b>D3DERR_WASSTILLDRAWING</b> or <b>E_PENDING</b> is returned if the hardware is busy, in which case the decoder should try to make the call again.</returns>
  </member>
  <member name="ID3D11VideoContext.DecoderEndFrame">
    <summary>Signals the end of a decoding operation.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoder" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.DecoderExtension">
    <summary>Performs an extended function for decoding. This method enables extensions to the basic decoder functionality.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoder" />.</param>
    <param name="pExtensionData">A pointer to a <see cref="D3D11_VIDEO_DECODER_EXTENSION" /> structure that contains data for the function.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.DecryptionBlt">
    <summary>Writes encrypted data to a protected surface.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface.</param>
    <param name="pSrcSurface">A pointer to the surface that contains the source data.</param>
    <param name="pDstSurface">A pointer to the protected surface where the encrypted data is written.</param>
    <param name="pEncryptedBlockInfo">
      <para>A pointer to a <see cref="D3D11_ENCRYPTED_BLOCK_INFO" /> structure, or <b>NULL</b>.</para>
      <para>If the driver supports partially encrypted buffers, <i>pEncryptedBlockInfo</i> indicates which portions of the buffer are encrypted. If the entire surface is encrypted, set this parameter to <b>NULL</b>.</para>
      <para>To check whether the driver supports partially encrypted buffers, call <see cref="ID3D11VideoDevice.GetContentProtectionCaps" /> and check for the <b>D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION</b> capabilities flag. If the driver does not support partially encrypted buffers, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ContentKeySize">The size of the encrypted content key, in bytes.</param>
    <param name="pContentKey">
      <para>A pointer to a buffer that contains a content encryption key, or <b>NULL</b>. To query whether the driver supports the use of content keys, call <see cref="ID3D11VideoDevice.GetContentProtectionCaps" /> and check for the <b>D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY</b> capabilities flag.</para>
      <para>If the driver supports content keys, use the content key to encrypt the surface. Encrypt the content key using the session key, and place the resulting cipher text in <i>pContentKey</i>. If the driver does not support content keys, use the session key to encrypt the surface and set <i>pContentKey</i> to <b>NULL</b>.</para>
    </param>
    <param name="IVSize">The size of the <i>pIV</i> buffer, in bytes.</param>
    <param name="pIV">
      <para>A pointer to a buffer that contains the initialization vector (IV).</para>
      <para>For 128-bit AES-CTR encryption, <i>pIV</i> points to a <see cref="D3D11_AES_CTR_IV" /> structure. The caller allocates the structure and generates the IV. When you generate the first IV, initialize the structure to a random number. For each subsequent IV, simply increment the <b>IV</b> member of the structure, ensuring that the value always increases. This procedure enables the driver to validate that the same IV is never used more than once with the same key pair.</para>
      <para>For other encryption types, a different structure might be used, or the encryption might not use an IV.</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.EncryptionBlt">
    <summary>Reads encrypted data from a protected surface.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface of the cryptographic session.</param>
    <param name="pSrcSurface">A pointer to the <see cref="ID3D11Texture2D" /> interface of the protected surface.</param>
    <param name="pDstSurface">A pointer to the <see cref="ID3D11Texture2D" /> interface of the surface that receives the encrypted data.</param>
    <param name="IVSize">The size of the <i>pIV</i> buffer, in bytes.</param>
    <param name="pIV">
      <para>A pointer to a buffer that receives the initialization vector (IV). The caller allocates this buffer, but the driver generates the IV.</para>
      <para>For 128-bit AES-CTR encryption, <i>pIV</i> points to a <see cref="D3D11_AES_CTR_IV" /> structure. When the driver generates the first IV, it initializes the structure to a random number. For each subsequent IV, the driver simply increments the <b>IV</b> member of the structure, ensuring that the value always increases. The application can validate that the same IV is never used more than once with the same key pair.</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.FinishSessionKeyRefresh">
    <summary>Switches to a new session key.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.GetDecoderBuffer">
    <summary>Gets a pointer to a decoder buffer.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoder" />.</param>
    <param name="Type">The type of buffer to retrieve, specified as a member of the <see cref="D3D11_VIDEO_DECODER_BUFFER_TYPE" /> enumeration.</param>
    <param name="pBufferSize">Receives the size of the buffer, in bytes.</param>
    <param name="ppBuffer">Receives a pointer to the start of the memory buffer.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.GetEncryptionBltKey">
    <summary>Gets the cryptographic key to decrypt the data returned by the <see cref="ID3D11VideoContext.EncryptionBlt" /> method.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface.</param>
    <param name="KeySize">The size of the <i>pReadbackKey</i> array, in bytes. The size should match the size of the session key.</param>
    <param name="pReadbackKey">A pointer to a byte array that receives the key. The key is encrypted using the session key.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.NegotiateAuthenticatedChannelKeyExchange">
    <summary>Establishes a session key for an authenticated channel.</summary>
    <param name="pChannel">A pointer to the <see cref="ID3D11AuthenticatedChannel" /> interface. This method will fail if the channel type is <see cref="D3D11_AUTHENTICATED_CHANNEL_D3D11" />, because the Direct3D11 channel does not support authentication.</param>
    <param name="DataSize">The size of the data in the <i>pData</i> array, in bytes.</param>
    <param name="pData">A pointer to a byte array that contains the encrypted session key. The buffer must contain 256 bytes of data, encrypted using RSA Encryption Scheme - Optimal Asymmetric Encryption Padding (RSAES-OAEP).</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.NegotiateCryptoSessionKeyExchange">
    <summary>Establishes the session key for a cryptographic session.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface of the cryptographic session.</param>
    <param name="DataSize">The size of the <i>pData</i> byte array, in bytes.</param>
    <param name="pData">A pointer to a byte array that contains the encrypted session key.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.QueryAuthenticatedChannel">
    <summary>Sends a query to an authenticated channel.</summary>
    <param name="pChannel">A pointer to the <see cref="ID3D11AuthenticatedChannel" /> interface.</param>
    <param name="InputSize">The size of the <i>pInput</i> array, in bytes.</param>
    <param name="pInput">A pointer to a byte array that contains input data for the query. This array always starts with a <see cref="D3D11_AUTHENTICATED_QUERY_INPUT" /> structure. The <b>QueryType</b> member of the structure specifies the query and defines the meaning of the rest of the array.</param>
    <param name="OutputSize">The size of the <i>pOutput</i> array, in bytes.</param>
    <param name="pOutput">A pointer to a byte array that receives the result of the query. This array always starts with a <see cref="D3D11_AUTHENTICATED_QUERY_OUTPUT" /> structure. The meaning of the rest of the array depends on the query.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.ReleaseDecoderBuffer">
    <summary>Releases a buffer that was obtained by calling the <see cref="ID3D11VideoContext.GetDecoderBuffer" /> method.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoDecoder" />.</param>
    <param name="Type">The type of buffer to release. Specify the same value that was used in the <i>Type</i> parameter of the <see cref="GetDecoderBuffer" /> method.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.StartSessionKeyRefresh">
    <summary>Gets a random number that can be used to refresh the session key.</summary>
    <param name="pCryptoSession">A pointer to the <see cref="ID3D11CryptoSession" /> interface.</param>
    <param name="RandomNumberSize">The size of the <i>pRandomNumber</i> array, in bytes. The size should match the size of the session key.</param>
    <param name="pRandomNumber">A pointer to a byte array that receives a random number.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.SubmitDecoderBuffers">
    <summary>Submits one or more buffers for decoding.</summary>
    <param name="pDecoder">A pointer to the <see cref="ID3D11VideoDecoder" /> interface. To get this pointer, call the <see cref="ID3D11VideoDevice.CreateVideoDecoder" /> method.</param>
    <param name="NumBuffers">The number of buffers submitted for decoding.</param>
    <param name="pBufferDesc">A pointer to an array of <see cref="D3D11_VIDEO_DECODER_BUFFER_DESC" /> structures. The <i>NumBuffers</i> parameter specifies the number of elements in the array. Each element in the array describes a compressed buffer for decoding.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorBlt">
    <summary>Performs a video processing operation on one or more input samples, and writes the result to a Direct3D surface.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call the <see cref="ID3D11VideoDevice.CreateVideoProcessor" /> method.</param>
    <param name="pView">A pointer to the <see cref="ID3D11VideoProcessorOutputView" /> interface for the output surface. The output of the video processing operation will be written to this surface.</param>
    <param name="OutputFrame">The frame number of the output video frame, indexed from zero.</param>
    <param name="StreamCount">The number of input streams to process.</param>
    <param name="pStreams">A pointer to an array of <see cref="D3D11_VIDEO_PROCESSOR_STREAM" /> structures that contain information about the input streams. The caller allocates the array and fills in each structure. The number of elements in the array is given in the <i>StreamCount</i> parameter.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputAlphaFillMode">
    <summary>Gets the current alpha fill mode for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pAlphaFillMode">Receives the alpha fill mode, as a <see cref="D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE" /> value.</param>
    <param name="pStreamIndex">If the alpha fill mode is <b>D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM</b>, this parameter receives the zero-based index of an input stream. The input stream provides the alpha values for the alpha fill.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputBackgroundColor">
    <summary>Gets the current background color for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pYCbCr">Receives the value <b>TRUE</b> if the background color is a YCbCr color, or <b>FALSE</b> if the background color is an RGB color.</param>
    <param name="pColor">A pointer to a <see cref="D3D11_VIDEO_COLOR" /> structure. The method fills in the structure with the background color.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputColorSpace">
    <summary>Gets the current output color space for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pColorSpace">A pointer to a <see cref="D3D11_VIDEO_PROCESSOR_COLOR_SPACE" /> structure. The method fills in the structure with the output color space.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputConstriction">
    <summary>Gets the current level of downsampling that is performed by the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if downsampling was explicitly enabled using the <see cref="ID3D11VideoContext.VideoProcessorSetOutputConstriction" /> method. Receives the value <b>FALSE</b> if the downsampling was disabled or was never set.</param>
    <param name="pSize">If <i>Enabled</i> receives the value <b>TRUE</b>, this parameter receives the downsampling size. Otherwise, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputExtension">
    <summary>Gets private state data from the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pExtensionGuid">A pointer to a GUID that identifies the state. The meaning of this GUID is defined by the graphics driver.</param>
    <param name="DataSize">The size of the <i>pData</i> buffer, in bytes.</param>
    <param name="pData">A pointer to a buffer that receives the private state data.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputStereoMode">
    <summary>Queries whether the video processor produces stereo video frames.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if stereo output is enabled, or <b>FALSE</b> otherwise.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetOutputTargetRect">
    <summary>Gets the current target rectangle for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="Enabled">Receives the value <b>TRUE</b> if the target rectangle was explicitly set using the <see cref="ID3D11VideoContext.VideoProcessorSetOutputTargetRect" /> method. Receives the value FALSE if the target rectangle was disabled or was never set.</param>
    <param name="pRect">If <i>Enabled</i> receives the value <b>TRUE</b>, this parameter receives the target rectangle. Otherwise, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamAlpha">
    <summary>Gets the planar alpha for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if planar alpha is enabled, or <b>FALSE</b> otherwise.</param>
    <param name="pAlpha">Receives the planar alpha value. The value can range from 0.0 (transparent) to 1.0 (opaque).</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamAutoProcessingMode">
    <summary>Queries whether automatic processing features of the video processor are enabled.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if automatic processing features are enabled, or <b>FALSE</b> otherwise.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamColorSpace">
    <summary>Gets the color space for an input stream of the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pColorSpace">Receives a <see cref="D3D11_VIDEO_PROCESSOR_COLOR_SPACE" /> value that specifies the color space.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamDestRect">
    <summary>Gets the destination rectangle for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if the destination rectangle is enabled, or <b>FALSE</b> otherwise.</param>
    <param name="pRect">A pointer to a <see cref="RECT" /> structure that receives the destination rectangle.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamExtension">
    <summary>Gets a driver-specific state for a video processing stream.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pExtensionGuid">A pointer to a GUID that identifies the state. The meaning of this GUID is defined by the graphics driver.</param>
    <param name="DataSize">The size of the <i>pData</i> buffer, in bytes.</param>
    <param name="pData">A pointer to a buffer that receives the private state data.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamFilter">
    <summary>Gets the image filter settings for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Filter">The filter to query, specified as a <see cref="D3D11_VIDEO_PROCESSOR_FILTER" /> value.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if the image filter is enabled, or <b>FALSE</b> otherwise.</param>
    <param name="pLevel">Receives the filter level.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamFrameFormat">
    <summary>Gets the format of an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pFrameFormat">Receives a <see cref="D3D11_VIDEO_FRAME_FORMAT" /> value that specifies whether the stream contains interlaced or progressive frames.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamLumaKey">
    <summary>Gets the luma key for an input stream of the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if luma keying is enabled, or <b>FALSE</b> otherwise.</param>
    <param name="pLower">Receives the lower bound for the luma key. The valid range is [0…1].</param>
    <param name="pUpper">Receives the upper bound for the luma key. The valid range is [0…1].</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamOutputRate">
    <summary>Gets the rate at which the video processor produces output frames for an input stream.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pOutputRate">Receives a <see cref="D3D11_VIDEO_PROCESSOR_OUTPUT_RATE" /> value that specifies the output rate.</param>
    <param name="pRepeatFrame">
      <para>Receives a Boolean value that specifies how the driver performs frame-rate conversion, if required.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Repeat frames.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Interpolate frames.</description>
        </listheader>
      </list>
    </param>
    <param name="pCustomRate">A pointer to a <see cref="DXGI_RATIONAL" /> structure. If the output rate is <b>D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM</b>, the method fills in this structure with the exact output rate. Otherwise, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamPalette">
    <summary>Gets the color-palette entries for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Count">The number of entries in the <i>pEntries</i> array.</param>
    <param name="pEntries">A pointer to a <b>UINT</b> array allocated by the caller. The method fills the array with the palette entries. For RGB streams, the palette entries use the <b>DXGI_FORMAT_B8G8R8A8</b> representation. For YCbCr streams, the palette entries use the <b>DXGI_FORMAT_AYUV</b> representation.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamPixelAspectRatio">
    <summary>Gets the pixel aspect ratio for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if the pixel aspect ratio is specified. Otherwise, receives the value <b>FALSE</b>.</param>
    <param name="pSourceAspectRatio">A pointer to a <see cref="DXGI_RATIONAL" /> structure. If *<i>pEnabled</i> is <b>TRUE</b>, this parameter receives the pixel aspect ratio of the source rectangle.</param>
    <param name="pDestinationAspectRatio">A pointer to a <see cref="DXGI_RATIONAL" /> structure. If *<i>pEnabled</i> is <b>TRUE</b>, this parameter receives the pixel aspect ratio of the destination rectangle.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamRotation">
    <summary>Gets the stream rotation for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnable">Specifies if the stream is rotated.</param>
    <param name="pRotation">Specifies the rotation of the stream in a clockwise orientation.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamSourceRect">
    <summary>Gets the source rectangle for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnabled">Receives the value <b>TRUE</b> if the source rectangle is enabled, or <b>FALSE</b> otherwise.</param>
    <param name="pRect">A pointer to a <see cref="RECT" /> structure that receives the source rectangle.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorGetStreamStereoFormat">
    <summary>Gets the stereo 3D format for an input stream on the video processor</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pEnable">Receives the value <b>TRUE</b> if stereo 3D is enabled for this stream, or <b>FALSE</b> otherwise. If the value is <b>FALSE</b>, ignore the remaining parameters.</param>
    <param name="pFormat">Receives a <see cref="D3D11_VIDEO_PROCESSOR_STEREO_FORMAT" /> value that specifies the layout of the two stereo views in memory.</param>
    <param name="pLeftViewFrame0">
      <para>Receives a Boolean value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Frame 0 contains the left view.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Frame 0 contains the right view.</description>
        </listheader>
      </list>
    </param>
    <param name="pBaseViewFrame0">
      <para>Receives a Boolean value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Frame 0 contains the base view.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Frame 1 contains the base view.</description>
        </listheader>
      </list>
    </param>
    <param name="pFlipMode">Receives a <see cref="D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE" /> value. This value specifies whether one of the views is flipped.</param>
    <param name="MonoOffset">Receives the pixel offset used for <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET</b> format. This parameter is ignored for other stereo formats.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputAlphaFillMode">
    <summary>Sets the alpha fill mode for data that the video processor writes to the render target.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="AlphaFillMode">The alpha fill mode, specified as a <see cref="D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE" /> value.</param>
    <param name="StreamIndex">The zero-based index of an input stream. This parameter is used if <i>AlphaFillMode</i> is <b>D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM</b>. Otherwise, the parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputBackgroundColor">
    <summary>Sets the background color for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="YCbCr">If <b>TRUE</b>, the color is specified as a YCbCr value. Otherwise, the color is specified as an RGB value.</param>
    <param name="pColor">A pointer to a <see cref="D3D11_VIDEO_COLOR" /> structure that specifies the background color.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputColorSpace">
    <summary>Sets the output color space for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pColorSpace">A pointer to a <see cref="D3D11_VIDEO_PROCESSOR_COLOR_SPACE" /> structure that specifies the color space.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputConstriction">
    <summary>Sets the amount of downsampling to perform on the output.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="Enable">If <b>TRUE</b>, downsampling is enabled. Otherwise, downsampling is disabled and the <b>Size</b> member is ignored.</param>
    <param name="Size">The sampling size.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputExtension">
    <summary>Sets a driver-specific video processing state.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="pExtensionGuid">A pointer to a GUID that identifies the operation. The meaning of this GUID is defined by the graphics driver.</param>
    <param name="DataSize">The size of the <i>pData</i> buffer, in bytes.</param>
    <param name="pData">A pointer to a buffer that contains private state data. The method passes this buffer directly to the driver without validation. It is the responsibility of the driver to validate the data.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputStereoMode">
    <summary>Specifies whether the video processor produces stereo video frames.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="Enable">If <b>TRUE</b>, stereo output is enabled. Otherwise, the video processor produces mono video frames.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetOutputTargetRect">
    <summary>Sets the target rectangle for the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="Enable">Specifies whether to apply the target rectangle.</param>
    <param name="pRect">A pointer to a <see cref="RECT" /> structure that specifies the target rectangle. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamAlpha">
    <summary>Sets the planar alpha for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether alpha blending is enabled.</param>
    <param name="Alpha">The planar alpha value. The value can range from 0.0 (transparent) to 1.0 (opaque). If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamAutoProcessingMode">
    <summary>Enables or disables automatic processing features on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">If <b>TRUE</b>, automatic processing features are enabled. If <b>FALSE</b>, the driver disables any extra video processing that it might be performing.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamColorSpace">
    <summary>Sets the color space for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pColorSpace">A pointer to a <see cref="D3D11_VIDEO_PROCESSOR_COLOR_SPACE" /> structure that specifies the color space.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamDestRect">
    <summary>Sets the destination rectangle for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether to apply the destination rectangle.</param>
    <param name="pRect">A pointer to a <see cref="RECT" /> structure that specifies the destination rectangle. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamExtension">
    <summary>Sets a driver-specific state on a video processing stream.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="pExtensionGuid">A pointer to a GUID that identifies the operation. The meaning of this GUID is defined by the graphics driver.</param>
    <param name="DataSize">The size of the <i>pData</i> buffer, in bytes.</param>
    <param name="pData">A pointer to a buffer that contains private state data. The method passes this buffer directly to the driver without validation. It is the responsibility of the driver to validate the data.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamFilter">
    <summary>Enables or disables an image filter for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Filter">
      <para>The filter, specified as a <see cref="D3D11_VIDEO_PROCESSOR_FILTER" /> value.</para>
      <para>To query which filters the driver supports, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" />.</para>
    </param>
    <param name="Enable">Specifies whether to enable the filter.</param>
    <param name="Level">
      <para>The filter level. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</para>
      <para>To find the valid range of levels for a specified filter, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorFilterRange" />.</para>
    </param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamFrameFormat">
    <summary>Specifies whether an input stream on the video processor contains interlaced or progressive frames.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="FrameFormat">A <see cref="D3D11_VIDEO_FRAME_FORMAT" /> value that specifies the interlacing.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamLumaKey">
    <summary>Sets the luma key for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether luma keying is enabled.</param>
    <param name="Lower">The lower bound for the luma key. The valid range is [0…1]. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
    <param name="Upper">The upper bound for the luma key. The valid range is [0…1]. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamOutputRate">
    <summary>Sets the rate at which the video processor produces output frames for an input stream.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="OutputRate">The output rate, specified as a <see cref="D3D11_VIDEO_PROCESSOR_OUTPUT_RATE" /> value.</param>
    <param name="RepeatFrame">
      <para>Specifies how the driver performs frame-rate conversion, if required.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Repeat frames.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Interpolate frames.</description>
        </listheader>
      </list>
    </param>
    <param name="pCustomRate">A pointer to a <see cref="DXGI_RATIONAL" /> structure. If <i>OutputRate</i> is <b>D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM</b>, this parameter specifies the exact output rate. Otherwise, this parameter is ignored and can be <b>NULL</b>.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamPalette">
    <summary>Sets the color-palette entries for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Count">The number of elements in the <i>pEntries</i> array.</param>
    <param name="pEntries">A pointer to an array of palette entries. For RGB streams, the palette entries use the <b>DXGI_FORMAT_B8G8R8A8</b> representation. For YCbCr streams, the palette entries use the <b>DXGI_FORMAT_AYUV</b> representation. The caller allocates the array.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamPixelAspectRatio">
    <summary>Sets the pixel aspect ratio for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether the <i>pSourceAspectRatio</i> and <i>pDestinationAspectRatio</i> parameters contain valid values. Otherwise, the pixel aspect ratios are unspecified.</param>
    <param name="pSourceAspectRatio">A pointer to a <see cref="DXGI_RATIONAL" /> structure that contains the pixel aspect ratio of the source rectangle. If <i>Enable</i> is <b>FALSE</b>, this parameter can be <b>NULL</b>.</param>
    <param name="pDestinationAspectRatio">A pointer to a <see cref="DXGI_RATIONAL" /> structure that contains the pixel aspect ratio of the destination rectangle. If <i>Enable</i> is <b>FALSE</b>, this parameter can be <b>NULL</b>.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamRotation">
    <summary>Sets the stream rotation for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies if the stream is to be rotated in a clockwise orientation.</param>
    <param name="Rotation">Specifies the rotation of the stream.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamSourceRect">
    <summary>Sets the source rectangle for an input stream on the video processor.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether to apply the source rectangle.</param>
    <param name="pRect">A pointer to a <see cref="RECT" /> structure that specifies the source rectangle. If <i>Enable</i> is <b>FALSE</b>, this parameter is ignored.</param>
  </member>
  <member name="ID3D11VideoContext.VideoProcessorSetStreamStereoFormat">
    <summary>Enables or disables stereo 3D video for an input stream on the video processor. In addition, this method specifies the layout of the video frames in memory.</summary>
    <param name="pVideoProcessor">A pointer to the <see cref="ID3D11VideoProcessor" /> interface. To get this pointer, call <see cref="ID3D11VideoDevice.CreateVideoProcessor" />.</param>
    <param name="StreamIndex">The zero-based index of the input stream. To get the maximum number of streams, call <see cref="ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps" /> and check the <b>MaxStreamStates</b> structure member.</param>
    <param name="Enable">Specifies whether stereo 3D is enabled for this stream. If the value is <b>FALSE</b>, the remaining parameters of this method are ignored.</param>
    <param name="Format">Specifies the layout of the two stereo views in memory, as a <see cref="D3D11_VIDEO_PROCESSOR_STEREO_FORMAT" /> value.</param>
    <param name="LeftViewFrame0">
      <para>If <b>TRUE</b>, frame 0 contains the left view. Otherwise, frame 0 contains the right view.</para>
      <para>This parameter is ignored for the following stereo formats:</para>
      <list type="bullet">
        <item>
          <description>
            <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO</b>
          </description>
        </item>
        <item>
          <description>
            <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET</b>
          </description>
        </item>
      </list>
    </param>
    <param name="BaseViewFrame0">
      <para>If <b>TRUE</b>, frame 0 contains the base view. Otherwise, frame 1 contains the base view.</para>
      <para>This parameter is ignored for the following stereo formats:</para>
      <list type="bullet">
        <item>
          <description>
            <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO</b>
          </description>
        </item>
        <item>
          <description>
            <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET</b>
          </description>
        </item>
        <item>
          <description>When <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE</b> is used and the application wants to convert the stereo data to mono, it can either:<list type="bullet"><item><description>Specify the base view as a mono input.</description></item><item><description>Specify both resources and allow the driver to do the conversion from the base view. In this case, <see cref="D3D11_VIDEO_PROCESSOR_STREAM.hInputSurface" /> is considered frame 0 and <b>D3D11_VIDEO_PROCESSOR_STREAM.hInputSurfaceRight</b> is considered frame 1.</description></item></list></description>
        </item>
      </list>
    </param>
    <param name="FlipMode">A flag from the <see cref="D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE" /> enumeration, specifying whether one of the views is flipped.</param>
    <param name="MonoOffset">
      <para>For <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET</b> format, this parameter specifies how to generate the left and right views:</para>
      <list type="bullet">
        <item>
          <description>If <i>MonoOffset</i> is positive, the right view is shifted to the right by that many pixels, and the left view is shifted to the left by the same amount.</description>
        </item>
        <item>
          <description>If <i>MonoOffset</i> is negative, the right view is shifted to the left by that many pixels, and the left view is shifted to right by the same amount.</description>
        </item>
      </list>If <i>Format</i> is not <b>D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET</b>, this parameter must be zero.</param>
  </member>
  <member name="ID3D11VideoContext">
    <summary>Provides the video functionality of a Microsoft Direct3D 11 device.</summary>
  </member>
</doc>