<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D11DeviceContext.Begin">
    <summary>Mark the beginning of a series of commands.</summary>
    <param name="pAsync">A pointer to an <see cref="ID3D11Asynchronous" /> interface.</param>
  </member>
  <member name="ID3D11DeviceContext.ClearDepthStencilView">
    <summary>Clears the depth-stencil resource.</summary>
    <param name="pDepthStencilView">Pointer to the depth stencil to be cleared.</param>
    <param name="ClearFlags">Identify the type of data to clear (see <see cref="D3D11_CLEAR_FLAG" />).</param>
    <param name="Depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1.</param>
    <param name="Stencil">Clear the stencil buffer with this value.</param>
  </member>
  <member name="ID3D11DeviceContext.ClearRenderTargetView">
    <summary>Set all the elements in a render target to one value.</summary>
    <param name="pRenderTargetView">Pointer to the render target.</param>
    <param name="ColorRGBA">A 4-component array that represents the color to fill the render target with.</param>
  </member>
  <member name="ID3D11DeviceContext.ClearState">
    <summary>Restore all default settings.</summary>
  </member>
  <member name="ID3D11DeviceContext.ClearUnorderedAccessViewFloat">
    <summary>Clears an <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">unordered access</a> resource with a float value.</summary>
    <param name="pUnorderedAccessView">The <see cref="ID3D11UnorderedAccessView" /> to clear.</param>
    <param name="Values">Values to copy to corresponding channels, see remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.ClearUnorderedAccessViewUint">
    <summary>Clears an <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-cs-resources">unordered access</a> resource with bit-precise values.</summary>
    <param name="pUnorderedAccessView">The <see cref="ID3D11UnorderedAccessView" /> to clear.</param>
    <param name="Values">Values to copy to corresponding channels, see remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.CopyResource">
    <summary>Copy the entire contents of the source resource to the destination resource using the GPU.</summary>
    <param name="pDstResource">A pointer to the <see cref="ID3D11Resource" /> interface that represents the destination resource.</param>
    <param name="pSrcResource">A pointer to the <see cref="ID3D11Resource" /> interface that represents the source resource.</param>
  </member>
  <member name="ID3D11DeviceContext.CopyStructureCount">
    <summary>Copies data from a buffer holding variable length data.</summary>
    <param name="pDstBuffer">Pointer to <see cref="ID3D11Buffer" />. This can be any buffer resource that other copy commands, such as <see cref="ID3D11DeviceContext.CopyResource" /> or <see cref="ID3D11DeviceContext.CopySubresourceRegion" />, are able to write to.</param>
    <param name="DstAlignedByteOffset">Offset from the start of <i>pDstBuffer</i> to write 32-bit UINT structure (vertex) count from <i>pSrcView</i>.</param>
    <param name="pSrcView">Pointer to an <see cref="ID3D11UnorderedAccessView" /> of a Structured Buffer resource created with either<see cref="D3D11_BUFFER_UAV_FLAG_APPEND" /> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created. These types of resources have hidden counters tracking "how many" records have been written.</param>
  </member>
  <member name="ID3D11DeviceContext.CopySubresourceRegion">
    <summary>Copy a region from a source resource to a destination resource.</summary>
    <param name="pDstResource">A pointer to the destination resource (see <see cref="ID3D11Resource" />).</param>
    <param name="DstSubresource">Destination subresource index.</param>
    <param name="DstX">The x-coordinate of the upper left corner of the destination region.</param>
    <param name="DstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</param>
    <param name="DstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</param>
    <param name="pSrcResource">A pointer to the source resource (see <see cref="ID3D11Resource" />).</param>
    <param name="SrcSubresource">Source subresource index.</param>
    <param name="pSrcBox">
      <para>A pointer to a 3D box (see <see cref="D3D11_BOX" />) that defines the source subresource that can be copied. If <b>NULL</b>, the entire source subresource is copied. The box must fit within the source resource.</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>CopySubresourceRegion</b> doesn't perform a copy operation.</para>
    </param>
  </member>
  <member name="ID3D11DeviceContext.CSGetConstantBuffers">
    <summary>Get the constant buffers used by the compute-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.CSGetSamplers">
    <summary>Get an array of sampler state interfaces from the compute-shader stage.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />).</param>
  </member>
  <member name="ID3D11DeviceContext.CSGetShader">
    <summary>Get the compute shader currently set on the device.</summary>
    <param name="ppComputeShader">Address of a pointer to a Compute shader (see <see cref="ID3D11ComputeShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.CSGetShaderResources">
    <summary>Get the compute-shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.CSGetUnorderedAccessViews">
    <summary>Gets an array of views for an unordered resource.</summary>
    <param name="StartSlot">Index of the first element in the zero-based array to return (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1).</param>
    <param name="NumUAVs">Number of views to get (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - StartSlot).</param>
    <param name="ppUnorderedAccessViews">A pointer to an array of interface pointers (see <see cref="ID3D11UnorderedAccessView" />) to get.</param>
  </member>
  <member name="ID3D11DeviceContext.CSSetConstantBuffers">
    <summary>Sets the constant buffers used by the compute-shader stage.</summary>
    <param name="StartSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.CSSetSamplers">
    <summary>Set an array of sampler states to the compute-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.CSSetShader">
    <summary>Set a compute shader to the device.</summary>
    <param name="pComputeShader">Pointer to a compute shader (see <see cref="ID3D11ComputeShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.CSSetShaderResources">
    <summary>Bind an array of shader resources to the compute-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.CSSetUnorderedAccessViews">
    <summary>Sets an array of views for an unordered resource.</summary>
    <param name="StartSlot">Index of the first element in the zero-based array to begin setting (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - 1). D3D11_1_UAV_SLOT_COUNT is defined as 64.</param>
    <param name="NumUAVs">Number of views to set (ranges from 0 to D3D11_1_UAV_SLOT_COUNT - <i>StartSlot</i>).</param>
    <param name="ppUnorderedAccessViews">A pointer to an array of <see cref="ID3D11UnorderedAccessView" /> pointers to be set by the method.</param>
    <param name="pUAVInitialCounts">An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is only relevant for UAVs that were created with either<see cref="D3D11_BUFFER_UAV_FLAG_APPEND" /> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</param>
  </member>
  <member name="ID3D11DeviceContext.Dispatch">
    <summary>Execute a command list from a thread group.</summary>
    <param name="ThreadGroupCountX">The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
    <param name="ThreadGroupCountY">The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
    <param name="ThreadGroupCountZ">The number of groups dispatched in the z direction. <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535). In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</param>
  </member>
  <member name="ID3D11DeviceContext.DispatchIndirect">
    <summary>Execute a command list over one or more thread groups.</summary>
    <param name="pBufferForArgs">A pointer to an <see cref="ID3D11Buffer" />, which must be loaded with data that matches the argument list for <see cref="ID3D11DeviceContext.Dispatch" />.</param>
    <param name="AlignedByteOffsetForArgs">A byte-aligned offset between the start of the buffer and the arguments.</param>
  </member>
  <member name="ID3D11DeviceContext.Draw">
    <summary>Draw non-indexed, non-instanced primitives.</summary>
    <param name="VertexCount">Number of vertices to draw.</param>
    <param name="StartVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer.</param>
  </member>
  <member name="ID3D11DeviceContext.DrawAuto">
    <summary>Draw geometry of an unknown size.</summary>
  </member>
  <member name="ID3D11DeviceContext.DrawIndexed">
    <summary>Draw indexed, non-instanced primitives.</summary>
    <param name="IndexCount">Number of indices to draw.</param>
    <param name="StartIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
    <param name="BaseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
  </member>
  <member name="ID3D11DeviceContext.DrawIndexedInstanced">
    <summary>Draw indexed, instanced primitives.</summary>
    <param name="IndexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
    <param name="BaseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
    <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
  </member>
  <member name="ID3D11DeviceContext.DrawIndexedInstancedIndirect">
    <summary>Draw indexed, instanced, GPU-generated primitives.</summary>
    <param name="pBufferForArgs">A pointer to an <see cref="ID3D11Buffer" />, which is a buffer containing the GPU-generated primitives.</param>
    <param name="AlignedByteOffsetForArgs">A DWORD-aligned byte offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</param>
  </member>
  <member name="ID3D11DeviceContext.DrawInstanced">
    <summary>Draw non-indexed, instanced primitives.</summary>
    <param name="VertexCountPerInstance">Number of vertices to draw.</param>
    <param name="InstanceCount">Number of instances to draw.</param>
    <param name="StartVertexLocation">Index of the first vertex.</param>
    <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
  </member>
  <member name="ID3D11DeviceContext.DrawInstancedIndirect">
    <summary>Draw instanced, GPU-generated primitives.</summary>
    <param name="pBufferForArgs">A pointer to an <see cref="ID3D11Buffer" />, which is a buffer containing the GPU generated primitives.</param>
    <param name="AlignedByteOffsetForArgs">Offset in <i>pBufferForArgs</i> to the start of the GPU generated primitives.</param>
  </member>
  <member name="ID3D11DeviceContext.DSGetConstantBuffers">
    <summary>Get the constant buffers used by the domain-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.DSGetSamplers">
    <summary>Get an array of sampler state interfaces from the domain-shader stage.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />).</param>
  </member>
  <member name="ID3D11DeviceContext.DSGetShader">
    <summary>Get the domain shader currently set on the device.</summary>
    <param name="ppDomainShader">Address of a pointer to a domain shader (see <see cref="ID3D11DomainShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.DSGetShaderResources">
    <summary>Get the domain-shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.DSSetConstantBuffers">
    <summary>Sets the constant buffers used by the domain-shader stage.</summary>
    <param name="StartSlot">Index into the zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.DSSetSamplers">
    <summary>Set an array of sampler states to the domain-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.DSSetShader">
    <summary>Set a domain shader to the device.</summary>
    <param name="pDomainShader">Pointer to a domain shader (see <see cref="ID3D11DomainShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.DSSetShaderResources">
    <summary>Bind an array of shader resources to the domain-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.End">
    <summary>Mark the end of a series of commands.</summary>
    <param name="pAsync">A pointer to an <see cref="ID3D11Asynchronous" /> interface.</param>
  </member>
  <member name="ID3D11DeviceContext.ExecuteCommandList">
    <summary>Queues commands from a command list onto a device.</summary>
    <param name="pCommandList">A pointer to an <see cref="ID3D11CommandList" /> interface that encapsulates a command list.</param>
    <param name="RestoreContextState">A Boolean flag that determines whether the target context state is saved prior to and restored after the execution of a command list. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that no state shall be saved or restored, which causes the target context to return to its default state after the command list executes. Applications should typically use <b>FALSE</b> unless they will restore the state to be nearly equivalent to the state that the runtime would restore if <b>TRUE</b> were passed. When applications use <b>FALSE</b>, they can avoid unnecessary and inefficient state transitions.</param>
  </member>
  <member name="ID3D11DeviceContext.FinishCommandList">
    <summary>Create a command list and record graphics commands into it.</summary>
    <param name="RestoreDeferredContextState">
      <para>A Boolean flag that determines whether the runtime saves deferred context state before it executes <b>FinishCommandList</b> and restores it afterwards. Use <b>TRUE</b> to indicate that the runtime needs to save and restore the state. Use <b>FALSE</b> to indicate that the runtime will not save or restore any state. In this case, the deferred context will return to its default state after the call to <b>FinishCommandList</b> completes. For information about default state, see <see cref="ID3D11DeviceContext.ClearState" />. Typically, use <b>FALSE</b> unless you restore the state to be nearly equivalent to the state that the runtime would restore if you passed <b>TRUE</b>. When you use <b>FALSE</b>, you can avoid unnecessary and inefficient state transitions.</para>
      <div>
        <b>Note</b>  This parameter does not affect the command list that the current call to <b>FinishCommandList</b> returns. However, this parameter affects the command list of the next call to <b>FinishCommandList</b> on the same deferred context.</div>
    </param>
    <param name="ppCommandList">Upon completion of the method, the passed pointer to an <see cref="ID3D11CommandList" /> interface pointer is initialized with the recorded command list information. The resulting <b>ID3D11CommandList</b> object is immutable and can only be used with <see cref="ID3D11DeviceContext.ExecuteCommandList" />.</param>
    <returns>
      <para>Returns S_OK if successful; otherwise, returns one of the following:</para>
      <list type="bullet">
        <item>
          <description>Returns DXGI_ERROR_DEVICE_REMOVED if the video card has been physically removed from the system, or a driver upgrade for the video card has occurred. If this error occurs, you should destroy and recreate the device.</description>
        </item>
        <item>
          <description>Returns DXGI_ERROR_INVALID_CALL if <b>FinishCommandList</b> cannot be called from the current context. See remarks.</description>
        </item>
        <item>
          <description>Returns E_OUTOFMEMORY if the application has exhausted available memory.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ID3D11DeviceContext.Flush">
    <summary>Sends queued-up commands in the command buffer to the graphics processing unit (GPU).</summary>
  </member>
  <member name="ID3D11DeviceContext.GenerateMips">
    <summary>Generates mipmaps for the given shader resource.</summary>
    <param name="pShaderResourceView">A pointer to an <see cref="ID3D11ShaderResourceView" /> interface that represents the shader resource.</param>
  </member>
  <member name="ID3D11DeviceContext.GetContextFlags">
    <summary>Gets the initialization flags associated with the current deferred context.</summary>
  </member>
  <member name="ID3D11DeviceContext.GetData">
    <summary>Get data from the graphics processing unit (GPU) asynchronously.</summary>
    <param name="pAsync">A pointer to an <see cref="ID3D11Asynchronous" /> interface for the object about which <b>GetData</b> retrieves data.</param>
    <param name="pData">Address of memory that will receive the data. If <b>NULL</b>, <b>GetData</b> will be used only to check status. The type of data output depends on the type of asynchronous interface.</param>
    <param name="DataSize">Size of the data to retrieve or 0. Must be 0 when <i>pData</i> is <b>NULL</b>.</param>
    <param name="GetDataFlags">Optional flags. Can be 0 or any combination of the flags enumerated by <see cref="D3D11_ASYNC_GETDATA_FLAG" />.</param>
    <returns>This method returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-graphics-reference-returnvalues">Direct3D 11 Return Codes</a>. A return value of S_OK indicates that the data at <i>pData</i> is available for the calling application to access. A return value of S_FALSE indicates that the data is not yet available. If the data is not yet available, the application must call <b>GetData</b> until the data is available.</returns>
  </member>
  <member name="ID3D11DeviceContext.GetPredication">
    <summary>Get the rendering predicate state.</summary>
    <param name="ppPredicate">Address of a pointer to a predicate (see <see cref="ID3D11Predicate" />). Value stored here will be <b>NULL</b> upon device creation.</param>
    <param name="pPredicateValue">Address of a boolean to fill with the predicate comparison value. <b>FALSE</b> upon device creation.</param>
  </member>
  <member name="ID3D11DeviceContext.GetResourceMinLOD">
    <summary>Gets the minimum level-of-detail (LOD).</summary>
    <param name="pResource">A pointer to an <see cref="ID3D11Resource" /> which represents the resource.</param>
    <returns>Returns the minimum LOD.</returns>
  </member>
  <member name="ID3D11DeviceContext.GetType">
    <summary>Gets the type of <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device context</a>.</summary>
    <returns>A member of <see cref="D3D11_DEVICE_CONTEXT_TYPE" /> that indicates the type of device context.</returns>
  </member>
  <member name="ID3D11DeviceContext.GSGetConstantBuffers">
    <summary>Get the constant buffers used by the geometry shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.GSGetSamplers">
    <summary>Get an array of sampler state interfaces from the geometry shader pipeline stage.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />).</param>
  </member>
  <member name="ID3D11DeviceContext.GSGetShader">
    <summary>Get the geometry shader currently set on the device.</summary>
    <param name="ppGeometryShader">Address of a pointer to a geometry shader (see <see cref="ID3D11GeometryShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.GSGetShaderResources">
    <summary>Get the geometry shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.GSSetConstantBuffers">
    <summary>Sets the constant buffers used by the geometry shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.GSSetSamplers">
    <summary>Set an array of sampler states to the geometry shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.GSSetShader">
    <summary>Set a geometry shader to the device.</summary>
    <param name="pShader">Pointer to a geometry shader (see <see cref="ID3D11GeometryShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.GSSetShaderResources">
    <summary>Bind an array of shader resources to the geometry shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.HSGetConstantBuffers">
    <summary>Get the constant buffers used by the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.HSGetSamplers">
    <summary>Get an array of sampler state interfaces from the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a>.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />).</param>
  </member>
  <member name="ID3D11DeviceContext.HSGetShader">
    <summary>Get the hull shader currently set on the device.</summary>
    <param name="ppHullShader">Address of a pointer to a hull shader (see <see cref="ID3D11HullShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.HSGetShaderResources">
    <summary>Get the hull-shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.HSSetConstantBuffers">
    <summary>Set the constant buffers used by the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.HSSetSamplers">
    <summary>Set an array of sampler states to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a>.</summary>
    <param name="StartSlot">Index into the zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.HSSetShader">
    <summary>Set a hull shader to the device.</summary>
    <param name="pHullShader">Pointer to a hull shader (see <see cref="ID3D11HullShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.HSSetShaderResources">
    <summary>Bind an array of shader resources to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/direct3d-11-advanced-stages-tessellation">hull-shader stage</a>.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources(ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.IAGetIndexBuffer">
    <summary>Get a pointer to the index buffer that is bound to the input-assembler stage.</summary>
    <param name="pIndexBuffer">A pointer to an index buffer returned by the method (see <see cref="ID3D11Buffer" />).</param>
    <param name="Format">Specifies format of the data in the index buffer (see <see cref="DXGI_FORMAT" />). These formats provide the size and type of the data in the buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</param>
    <param name="Offset">Offset (in bytes) from the start of the index buffer, to the first index to use.</param>
  </member>
  <member name="ID3D11DeviceContext.IAGetInputLayout">
    <summary>Get a pointer to the input-layout object that is bound to the input-assembler stage.</summary>
    <param name="ppInputLayout">A pointer to the input-layout object (see <see cref="ID3D11InputLayout" />), which describes the input buffers that will be read by the IA stage.</param>
  </member>
  <member name="ID3D11DeviceContext.IAGetPrimitiveTopology">
    <summary>Get information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
    <param name="pTopology">A pointer to the type of primitive, and ordering of the primitive data (see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</param>
  </member>
  <member name="ID3D11DeviceContext.IAGetVertexBuffers">
    <summary>Get the vertex buffers bound to the input-assembler stage.</summary>
    <param name="StartSlot">The input slot of the first vertex buffer to get. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</param>
    <param name="NumBuffers">The number of vertex buffers to get starting at the offset. The number of buffers (plus the starting slot) cannot exceed the total number of IA-stage input slots.</param>
    <param name="ppVertexBuffers">A pointer to an array of vertex buffers returned by the method (see <see cref="ID3D11Buffer" />).</param>
    <param name="pStrides">Pointer to an array of stride values returned by the method; one stride value for each buffer in the vertex-buffer array. Each stride value is the size (in bytes) of the elements that are to be used from that vertex buffer.</param>
    <param name="pOffsets">Pointer to an array of offset values returned by the method; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</param>
  </member>
  <member name="ID3D11DeviceContext.IASetIndexBuffer">
    <summary>Bind an index buffer to the input-assembler stage.</summary>
    <param name="pIndexBuffer">A pointer to an <see cref="ID3D11Buffer" /> object, that contains indices. The index buffer must have been created with the <see cref="D3D11_BIND_INDEX_BUFFER" /> flag.</param>
    <param name="Format">A <see cref="DXGI_FORMAT" /> that specifies the format of the data in the index buffer. The only formats allowed for index buffer data are 16-bit (DXGI_FORMAT_R16_UINT) and 32-bit (DXGI_FORMAT_R32_UINT) integers.</param>
    <param name="Offset">Offset (in bytes) from the start of the index buffer to the first index to use.</param>
  </member>
  <member name="ID3D11DeviceContext.IASetInputLayout">
    <summary>Bind an input-layout object to the input-assembler stage.</summary>
    <param name="pInputLayout">A pointer to the input-layout object (see <see cref="ID3D11InputLayout" />), which describes the input buffers that will be read by the IA stage.</param>
  </member>
  <member name="ID3D11DeviceContext.IASetPrimitiveTopology">
    <summary>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</summary>
    <param name="Topology">The type of primitive and ordering of the primitive data (see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff476189(v=vs.85)">D3D11_PRIMITIVE_TOPOLOGY</a>).</param>
  </member>
  <member name="ID3D11DeviceContext.IASetVertexBuffers">
    <summary>Bind an array of vertex buffers to the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage">input-assembler stage</a>.</summary>
    <param name="StartSlot">The first input slot for binding. The first vertex buffer is explicitly bound to the start slot; this causes each additional vertex buffer in the array to be implicitly bound to each subsequent input slot. The maximum of 16 or 32 input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1) are available; the <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">maximum number of input slots depends on the feature level</a>.</param>
    <param name="NumBuffers">The number of vertex buffers in the array. The number of buffers (plus the starting slot) can't exceed the total number of IA-stage input slots (ranges from 0 to D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppVertexBuffers">A pointer to an array of vertex buffers (see <see cref="ID3D11Buffer" />). The vertex buffers must have been created with the <see cref="D3D11_BIND_VERTEX_BUFFER" /> flag.</param>
    <param name="pStrides">Pointer to an array of stride values; one stride value for each buffer in the vertex-buffer array. Each stride is the size (in bytes) of the elements that are to be used from that vertex buffer.</param>
    <param name="pOffsets">Pointer to an array of offset values; one offset value for each buffer in the vertex-buffer array. Each offset is the number of bytes between the first element of a vertex buffer and the first element that will be used.</param>
  </member>
  <member name="ID3D11DeviceContext.OMGetBlendState">
    <summary>Get the blend state of the output-merger stage.</summary>
    <param name="ppBlendState">Address of a pointer to a blend-state interface (see <see cref="ID3D11BlendState" />).</param>
    <param name="BlendFactor">Array of blend factors, one for each RGBA component.</param>
    <param name="pSampleMask">Pointer to a <see cref="sample mask" />.</param>
  </member>
  <member name="ID3D11DeviceContext.OMGetDepthStencilState">
    <summary>Gets the depth-stencil state of the output-merger stage.</summary>
    <param name="ppDepthStencilState">Address of a pointer to a depth-stencil state interface (see <see cref="ID3D11DepthStencilState" />) to be filled with information from the device.</param>
    <param name="pStencilRef">Pointer to the stencil reference value used in the depth-stencil test.</param>
  </member>
  <member name="ID3D11DeviceContext.OMGetRenderTargets">
    <summary>Get pointers to the resources bound to the output-merger stage.</summary>
    <param name="NumViews">Number of render targets to retrieve.</param>
    <param name="ppRenderTargetViews">Pointer to an array of <see cref="ID3D11RenderTargetView" />s which represent render target views. Specify <b>NULL</b> for this parameter when retrieval of a render target is not needed.</param>
    <param name="ppDepthStencilView">Pointer to a <see cref="ID3D11DepthStencilView" />, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not needed.</param>
  </member>
  <member name="ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews">
    <summary>Get pointers to the resources bound to the output-merger stage.</summary>
    <param name="NumRTVs">The number of render-target views to retrieve.</param>
    <param name="ppRenderTargetViews">Pointer to an array of <see cref="ID3D11RenderTargetView" />s, which represent render-target views. Specify <b>NULL</b> for this parameter when retrieval of render-target views is not required.</param>
    <param name="ppDepthStencilView">Pointer to a <see cref="ID3D11DepthStencilView" />, which represents a depth-stencil view. Specify <b>NULL</b> for this parameter when retrieval of the depth-stencil view is not required.</param>
    <param name="UAVStartSlot">Index into a zero-based array to begin retrieving unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1). For pixel shaders <i>UAVStartSlot</i> should be equal to the number of render-target views that are bound.</param>
    <param name="NumUAVs">Number of unordered-access views to return in <i>ppUnorderedAccessViews</i>. This number ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - <i>UAVStartSlot</i>.</param>
    <param name="ppUnorderedAccessViews">Pointer to an array of <see cref="ID3D11UnorderedAccessView" />s, which represent unordered-access views that are retrieved. Specify <b>NULL</b> for this parameter when retrieval of unordered-access views is not required.</param>
  </member>
  <member name="ID3D11DeviceContext.OMSetBlendState">
    <summary>Set the blend state of the output-merger stage.</summary>
    <param name="pBlendState">Pointer to a blend-state interface (see <see cref="ID3D11BlendState" />). Pass <b>NULL</b> for a default blend state. For more info about default blend state, see Remarks.</param>
    <param name="BlendFactor">Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both. If you created the blend-state object with <see cref="D3D11_BLEND_BLEND_FACTOR" /> or <see cref="D3D11_BLEND_INV_BLEND_FACTOR" />, the blending stage uses the non-NULL array of blend factors. If you didn't create the blend-state object with <b>D3D11_BLEND_BLEND_FACTOR</b> or <b>D3D11_BLEND_INV_BLEND_FACTOR</b>, the blending stage does not use the non-NULL array of blend factors; the runtime stores the blend factors, and you can later call <see cref="ID3D11DeviceContext.OMGetBlendState" /> to retrieve the blend factors. If you pass <b>NULL</b>, the runtime uses or stores a blend factor equal to { 1, 1, 1, 1 }.</param>
    <param name="SampleMask">32-bit sample coverage. The default value is 0xffffffff. See remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.OMSetDepthStencilState">
    <summary>Sets the depth-stencil state of the output-merger stage.</summary>
    <param name="pDepthStencilState">Pointer to a depth-stencil state interface (see <see cref="ID3D11DepthStencilState" />) to bind to the device. Set this to <b>NULL</b> to use the default state listed in <see cref="D3D11_DEPTH_STENCIL_DESC" />.</param>
    <param name="StencilRef">Reference value to perform against when doing a depth-stencil test. See remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.OMSetRenderTargets">
    <summary>Bind one or more render targets atomically and the depth-stencil buffer to the <a href="https://docs.microsoft.com//windows/win32/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a>.</summary>
    <param name="NumViews">Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter.</param>
    <param name="ppRenderTargetViews">Pointer to an array of <see cref="ID3D11RenderTargetView" /> that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumViews</i> is 0, no render targets are bound.</param>
    <param name="pDepthStencilView">Pointer to a <see cref="ID3D11DepthStencilView" /> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</param>
  </member>
  <member name="ID3D11DeviceContext.OMSetRenderTargetsAndUnorderedAccessViews">
    <summary>Binds resources to the output-merger stage.</summary>
    <param name="NumRTVs">Number of render targets to bind (ranges between 0 and <b>D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which <i>ppRenderTargetViews</i> points must equal the number in this parameter. If you set <i>NumRTVs</i> to D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL (0xffffffff), this method does not modify the currently bound render-target views (RTVs) and also does not modify depth-stencil view (DSV).</param>
    <param name="ppRenderTargetViews">Pointer to an array of <see cref="ID3D11RenderTargetView" />s that represent the render targets to bind to the device. If this parameter is <b>NULL</b> and <i>NumRTVs</i> is 0, no render targets are bound.</param>
    <param name="pDepthStencilView">Pointer to a <see cref="ID3D11DepthStencilView" /> that represents the depth-stencil view to bind to the device. If this parameter is <b>NULL</b>, the depth-stencil view is not bound.</param>
    <param name="UAVStartSlot">
      <para>Index into a zero-based array to begin setting unordered-access views (ranges from 0 to D3D11_PS_CS_UAV_REGISTER_COUNT - 1).</para>
      <para>For the Direct3D 11.1 runtime, which is available starting with Windows 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - 1. D3D11_1_UAV_SLOT_COUNT is defined as 64.</para>
      <para>For pixel shaders, <i>UAVStartSlot</i> should be equal to the number of render-target views being bound.</para>
    </param>
    <param name="NumUAVs">
      <para>Number of unordered-access views (UAVs) in <i>ppUnorderedAccessViews</i>. If you set <i>NumUAVs</i> to D3D11_KEEP_UNORDERED_ACCESS_VIEWS (0xffffffff), this method does not modify the currently bound unordered-access views.</para>
      <para>For the Direct3D 11.1 runtime, which is available starting with Windows 8, this value can range from 0 to D3D11_1_UAV_SLOT_COUNT - <i>UAVStartSlot</i>.</para>
    </param>
    <param name="ppUnorderedAccessViews">Pointer to an array of <see cref="ID3D11UnorderedAccessView" />s that represent the unordered-access views to bind to the device. If this parameter is <b>NULL</b> and <i>NumUAVs</i> is 0, no unordered-access views are bound.</param>
    <param name="pUAVInitialCounts">An array of append and consume buffer offsets. A value of -1 indicates to keep the current offset. Any other values set the hidden counter for that appendable and consumable UAV. <i>pUAVInitialCounts</i> is relevant only for UAVs that were created with either<see cref="D3D11_BUFFER_UAV_FLAG_APPEND" /> or <b>D3D11_BUFFER_UAV_FLAG_COUNTER</b> specified when the UAV was created; otherwise, the argument is ignored.</param>
  </member>
  <member name="ID3D11DeviceContext.PSGetConstantBuffers">
    <summary>Get the constant buffers used by the pixel shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.PSGetSamplers">
    <summary>Get an array of sampler states from the pixel shader pipeline stage.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Array of sampler-state interface pointers (see <see cref="ID3D11SamplerState" />) to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.PSGetShader">
    <summary>Get the pixel shader currently set on the device.</summary>
    <param name="ppPixelShader">Address of a pointer to a pixel shader (see <see cref="ID3D11PixelShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.PSGetShaderResources">
    <summary>Get the pixel shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.PSSetConstantBuffers">
    <summary>Sets the constant buffers used by the pixel shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.PSSetSamplers">
    <summary>Set an array of sampler states to the pixel shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.PSSetShader">
    <summary>Sets a pixel shader to the device.</summary>
    <param name="pPixelShader">Pointer to a pixel shader (see <see cref="ID3D11PixelShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.PSSetShaderResources">
    <summary>Bind an array of shader resources to the pixel shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.ResolveSubresource">
    <summary>Copy a multisampled resource into a non-multisampled resource.</summary>
    <param name="pDstResource">Destination resource. Must be a created with the <see cref="D3D11_USAGE_DEFAULT" /> flag and be single-sampled. See <see cref="ID3D11Resource" />.</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. Use <see cref="D3D11CalcSubresource" /> to calculate the index.</param>
    <param name="pSrcResource">Source resource. Must be multisampled.</param>
    <param name="SrcSubresource">The source subresource of the source resource.</param>
    <param name="Format">A <see cref="DXGI_FORMAT" /> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.RSGetScissorRects">
    <summary>Get the array of scissor rectangles bound to the rasterizer stage.</summary>
    <param name="pNumRects">The number of scissor rectangles (ranges between 0 and D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE) bound; set <i>pRects</i> to <b>NULL</b> to use <i>pNumRects</i> to see how many rectangles would be returned.</param>
    <param name="pRects">An array of scissor rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>). If NumRects is greater than the number of scissor rects currently bound, then unused members of the array will contain 0.</param>
  </member>
  <member name="ID3D11DeviceContext.RSGetState">
    <summary>Get the <see cref="rasterizer state" /> from the rasterizer stage of the pipeline.</summary>
    <param name="ppRasterizerState">Address of a pointer to a rasterizer-state interface (see <see cref="ID3D11RasterizerState" />) to fill with information from the device.</param>
  </member>
  <member name="ID3D11DeviceContext.RSGetViewports">
    <summary>Gets the array of viewports bound to the rasterizer stage.</summary>
    <param name="pNumViewports">
      <para>A pointer to a variable that, on input, specifies the number of viewports (ranges from 0 to <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b>) in the <i>pViewports</i> array; on output, the variable contains the actual number of viewports that are bound to the rasterizer stage. If <i>pViewports</i> is <b>NULL</b>, <b>RSGetViewports</b> fills the variable with the number of viewports currently bound.</para>
      <div>
        <b>Note</b>  In some versions of the Windows SDK, a <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-layers">debug device</a> will raise an exception if the input value in the variable to which <i>pNumViewports</i> points is greater than <b>D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE</b> even if <i>pViewports</i> is <b>NULL</b>. The regular runtime ignores the value in the variable to which <i>pNumViewports</i> points when <i>pViewports</i> is <b>NULL</b>. This behavior of a debug device might be corrected in a future release of the Windows SDK.</div>
    </param>
    <param name="pViewports">An array of <see cref="D3D11_VIEWPORT" /> structures for the viewports that are bound to the rasterizer stage. If the number of viewports (in the variable to which <i>pNumViewports</i> points) is greater than the actual number of viewports currently bound, unused elements of the array contain 0. For info about how the viewport size depends on the device <a href="https://docs.microsoft.com//windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a>, which has changed between Direct3D 11 and Direct3D 10, see <b>D3D11_VIEWPORT</b>.</param>
  </member>
  <member name="ID3D11DeviceContext.RSSetScissorRects">
    <summary>Bind an array of scissor rectangles to the rasterizer stage.</summary>
    <param name="NumRects">Number of scissor rectangles to bind.</param>
    <param name="pRects">An array of scissor rectangles (see <a href="https://docs.microsoft.com//windows/desktop/direct3d11/d3d11-rect">D3D11_RECT</a>).</param>
  </member>
  <member name="ID3D11DeviceContext.RSSetState">
    <summary>Set the <see cref="rasterizer state" /> for the rasterizer stage of the pipeline.</summary>
    <param name="pRasterizerState">Pointer to a rasterizer-state interface (see <see cref="ID3D11RasterizerState" />) to bind to the pipeline.</param>
  </member>
  <member name="ID3D11DeviceContext.RSSetViewports">
    <summary>Bind an array of viewports to the rasterizer stage of the pipeline.</summary>
    <param name="NumViewports">Number of viewports to bind.</param>
    <param name="pViewports">An array of <see cref="D3D11_VIEWPORT" /> structures to bind to the device. See the structure page for details about how the viewport size is dependent on the device feature level which has changed between Direct3D 11 and Direct3D 10.</param>
  </member>
  <member name="ID3D11DeviceContext.SetPredication">
    <summary>Set a rendering predicate.</summary>
    <param name="pPredicate">A pointer to the <see cref="ID3D11Predicate" /> interface that represents the rendering predicate. A <b>NULL</b> value indicates "no" predication; in this case, the value of <i>PredicateValue</i> is irrelevant but will be preserved for <see cref="ID3D11DeviceContext.GetPredication" />.</param>
    <param name="PredicateValue">If <b>TRUE</b>, rendering will be affected by when the predicate's conditions are met. If <b>FALSE</b>, rendering will be affected when the conditions are not met.</param>
  </member>
  <member name="ID3D11DeviceContext.SetResourceMinLOD">
    <summary>Sets the minimum level-of-detail (LOD) for a resource.</summary>
    <param name="pResource">A pointer to an <see cref="ID3D11Resource" /> that represents the resource.</param>
    <param name="MinLOD">The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource. For example, the maximum number of mipmap levels of a 1D texture is specified in the <b>MipLevels</b> member of the <see cref="D3D11_TEXTURE1D_DESC" /> structure.</param>
  </member>
  <member name="ID3D11DeviceContext.SOGetTargets">
    <summary>Get the target output buffers for the stream-output stage of the pipeline.</summary>
    <param name="NumBuffers">Number of buffers to get.</param>
    <param name="ppSOTargets">An array of output buffers (see <see cref="ID3D11Buffer" />) to be retrieved from the device.</param>
  </member>
  <member name="ID3D11DeviceContext.SOSetTargets">
    <summary>Set the target output buffers for the stream-output stage of the pipeline.</summary>
    <param name="NumBuffers">The number of buffer to bind to the device. A maximum of four output buffers can be set. If less than four are defined by the call, the remaining buffer slots are set to <b>NULL</b>. See Remarks.</param>
    <param name="ppSOTargets">The array of output buffers (see <see cref="ID3D11Buffer" />) to bind to the device. The buffers must have been created with the <see cref="D3D11_BIND_STREAM_OUTPUT" /> flag.</param>
    <param name="pOffsets">Array of offsets to the output buffers from <i>ppSOTargets</i>, one offset for each buffer. The offset values must be in bytes.</param>
  </member>
  <member name="ID3D11DeviceContext.Unmap">
    <summary>Invalidate the pointer to a resource and reenable the GPU's access to that resource.</summary>
    <param name="pResource">A pointer to a <see cref="ID3D11Resource" /> interface.</param>
    <param name="Subresource">A subresource to be unmapped.</param>
  </member>
  <member name="ID3D11DeviceContext.UpdateSubresource">
    <summary>
      <para>See the <a href="https://github.com/microsoft/windows-classic-samples/tree/master/samples/basichologram">Basic hologram sample</a>.</para>
      <para>The CPU copies data from memory to a subresource created in non-mappable memory.</para>
    </summary>
    <param name="pDstResource">A pointer to the destination resource (see <see cref="ID3D11Resource" />).</param>
    <param name="DstSubresource">A zero-based index, that identifies the destination subresource. See <see cref="D3D11CalcSubresource" /> for more details.</param>
    <param name="pDstBox">
      <para>A pointer to a box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures. If <b>NULL</b>, the data is written to the destination subresource with no offset. The dimensions of the source must fit the destination (see <see cref="D3D11_BOX" />).</para>
      <para>An empty box results in a no-op. A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value. When the box is empty, <b>UpdateSubresource</b> doesn't perform an update operation.</para>
    </param>
    <param name="pSrcData">A pointer to the source data in memory.</param>
    <param name="SrcRowPitch">The size of one row of the source data.</param>
    <param name="SrcDepthPitch">The size of one depth slice of source data.</param>
  </member>
  <member name="ID3D11DeviceContext.VSGetConstantBuffers">
    <summary>Get the constant buffers used by the vertex shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin retrieving constant buffers from (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1).</param>
    <param name="NumBuffers">Number of buffers to retrieve (ranges from 0 to D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot).</param>
    <param name="ppConstantBuffers">Array of constant buffer interface pointers (see <see cref="ID3D11Buffer" />) to be returned by the method.</param>
  </member>
  <member name="ID3D11DeviceContext.VSGetSamplers">
    <summary>Get an array of sampler states from the vertex shader pipeline stage.</summary>
    <param name="StartSlot">Index into a zero-based array to begin getting samplers from (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers to get from a device context. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Array of sampler-state interface pointers (see <see cref="ID3D11SamplerState" />) to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.VSGetShader">
    <summary>Get the vertex shader currently set on the device.</summary>
    <param name="ppVertexShader">Address of a pointer to a vertex shader (see <see cref="ID3D11VertexShader" />) to be returned by the method.</param>
    <param name="ppClassInstances">Pointer to an array of class instance interfaces (see <see cref="ID3D11ClassInstance" />).</param>
    <param name="pNumClassInstances">The number of class-instance elements in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.VSGetShaderResources">
    <summary>Get the vertex shader resources.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin getting shader resources from (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">The number of resources to get from the device. Up to a maximum of 128 slots are available for shader resources (ranges from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to be returned by the device.</param>
  </member>
  <member name="ID3D11DeviceContext.VSSetConstantBuffers">
    <summary>Sets the constant buffers used by the vertex shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting constant buffers to (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - 1).</param>
    <param name="NumBuffers">Number of buffers to set (ranges from 0 to <b>D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT</b> - <i>StartSlot</i>).</param>
    <param name="ppConstantBuffers">Array of constant buffers (see <see cref="ID3D11Buffer" />) being given to the device.</param>
  </member>
  <member name="ID3D11DeviceContext.VSSetSamplers">
    <summary>Set an array of sampler states to the vertex shader pipeline stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting samplers to (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1).</param>
    <param name="NumSamplers">Number of samplers in the array. Each pipeline stage has a total of 16 sampler slots available (ranges from 0 to D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot).</param>
    <param name="ppSamplers">Pointer to an array of sampler-state interfaces (see <see cref="ID3D11SamplerState" />). See Remarks.</param>
  </member>
  <member name="ID3D11DeviceContext.VSSetShader">
    <summary>Set a vertex shader to the device.</summary>
    <param name="pVertexShader">Pointer to a vertex shader (see <see cref="ID3D11VertexShader" />). Passing in <b>NULL</b> disables the shader for this pipeline stage.</param>
    <param name="ppClassInstances">A pointer to an array of class-instance interfaces (see <see cref="ID3D11ClassInstance" />). Each interface used by a shader must have a corresponding class instance or the shader will get disabled. Set ppClassInstances to <b>NULL</b> if the shader does not use any interfaces.</param>
    <param name="NumClassInstances">The number of class-instance interfaces in the array.</param>
  </member>
  <member name="ID3D11DeviceContext.VSSetShaderResources">
    <summary>Bind an array of shader resources to the vertex-shader stage.</summary>
    <param name="StartSlot">Index into the device's zero-based array to begin setting shader resources to (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1).</param>
    <param name="NumViews">Number of shader resources to set. Up to a maximum of 128 slots are available for shader resources (range is from 0 to D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot).</param>
    <param name="ppShaderResourceViews">Array of <see cref="shader resource view" /> interfaces to set to the device.</param>
  </member>
  <member name="ID3D11DeviceContext">
    <summary>
      <para>The <b>ID3D11DeviceContext</b> interface represents a device context which generates rendering commands.</para>
      <div>
        <b>Note</b>  The latest version of this interface is <see cref="ID3D11DeviceContext4" /> introduced in the Windows 10 Creators Update. Applications targetting Windows 10 Creators Update should use the <b>ID3D11DeviceContext4</b> interface instead of <b>ID3D11DeviceContext</b>.</div>
    </summary>
  </member>
</doc>