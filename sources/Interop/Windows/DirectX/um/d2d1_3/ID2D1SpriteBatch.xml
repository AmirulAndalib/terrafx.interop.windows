<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1SpriteBatch.AddSprites">
    <summary>
      <para>Adds the given sprites to the end of this sprite batch.</para>
    </summary>
    <param name="spriteCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of sprites to be added. This determines how many strides into each given array Direct2D will read.</para>
    </param>
    <param name="destinationRectangles">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>A pointer to an array containing the destination rectangles specifying where to draw the sprites on the destination device context.</para>
    </param>
    <param name="sourceRectangles">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
      <para>A pointer to an array containing the source rectangles specifying the regions of the source bitmap to draw as sprites.
Direct2D will use the entire source bitmap for sprites that are assigned a null value or the InfiniteRectU.
If this parameter is omitted entirely or set to a null value, then Direct2D will use the entire source bitmap for all the added sprites.</para>
    </param>
    <param name="colors">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
      <para>A pointer to an array containing the colors to apply to each sprite.
The output color is the result of component-wise multiplication of the source bitmap color and the provided color.
The output color is not clamped.</para>
      <para>Direct2D will not change the color of sprites that are assigned a null value. If this parameter is omitted entirely or set to a null value,
then Direct2D will not change the color of any of the added sprites.</para>
    </param>
    <param name="transforms">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
      <para>A pointer to an array containing the transforms to apply to each sprite’s destination rectangle.</para>
      <para>Direct2D will not transform the destination rectangle of any sprites that are assigned a null value.
If this parameter is omitted entirely or set to a null value,
then Direct2D will not transform the destination rectangle of any of the added sprites.</para>
    </param>
    <param name="destinationRectanglesStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each rectangle in the destinationRectangles array.
If you provide a stride of 0, then the same destination rectangle will be used for each added sprite.</para>
    </param>
    <param name="sourceRectanglesStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each rectangle in the sourceRectangles array (if that array is given).
If you provide a stride of 0, then the same source rectangle will be used for each added sprite.</para>
    </param>
    <param name="colorsStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each color in the colors array (if that array is given).
If you provide a stride of 0, then the same color will be used for each added sprite.</para>
    </param>
    <param name="transformsStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each transform in the transforms array (if that array is given).
If you provide a stride of 0, then the same transform will be used for each added sprite.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>In Direct2D, a sprite is defined by four properties: a destination rectangle, a source rectangle, a color, and a transform.
Destination rectangles are mandatory, but the remaining properties are optional.</para>
      <para>
        <b>Note</b>  Always omit or pass a null value for properties you do not wish to use. This allows Direct2D to avoid storing values for those properties and to skip their handling entirely,
which improves drawing speed. For example, suppose you have a batch of 500 sprites, and you do not wish to transform any of their destination rectangles.
Rather than passing an array of identity matrices, simply omit the transforms parameter. This allows Direct2D to avoid storing any transforms and will yield the fastest drawing performance.
On the other hand, if any sprite in the batch has any value set for a property, then internally
Direct2D must allocate space for that property array and assign every sprite a value for that property (even if it’s just the default value).</para>
    </remarks>
    <seealso cref="ID2D1SpriteBatch" />
  </member>
  <member name="ID2D1SpriteBatch.Clear">
    <summary>
      <para>Removes all sprites from this sprite batch.</para>
    </summary>
    <seealso cref="ID2D1SpriteBatch" />
  </member>
  <member name="ID2D1SpriteBatch.GetSpriteCount">
    <summary>
      <para>Retrieves the number of sprites in this sprite batch.</para>
    </summary>
    <returns>
      <para>Type: <b>UINT32</b></para>
      <para>Returns the number of sprites in this sprite batch</para>
    </returns>
    <seealso cref="ID2D1SpriteBatch" />
  </member>
  <member name="ID2D1SpriteBatch.GetSprites">
    <summary>
      <para>Retrieves the specified subset of sprites from this sprite batch. For the best performance, use nullptr for properties that you do not need to retrieve.</para>
    </summary>
    <param name="startIndex">
      <para>Type: <b>UINT32</b></para>
      <para>The index of the first sprite in this sprite batch to retrieve.</para>
    </param>
    <param name="spriteCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of sprites to retrieve.</para>
    </param>
    <param name="destinationRectangles">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>When this method returns, contains a pointer to an array containing the destination rectangles for the retrieved sprites.</para>
    </param>
    <param name="sourceRectangles">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
      <para>When this method returns, contains a pointer to an array containing the source rectangles for the retrieved sprites.</para>
      <para>The InfiniteRectU is returned for any sprites that were not assigned a source rectangle.</para>
    </param>
    <param name="colors">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
      <para>When this method returns, contains a pointer to an array containing the colors to be applied to the retrieved sprites.</para>
      <para>The color {1.0f, 1.0f, 1.0f, 1.0f} is returned for any sprites that were not assigned a color.</para>
    </param>
    <param name="transforms">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
      <para>When this method returns, contains a pointer to an array containing the transforms to be applied to the retrieved sprites.</para>
      <para>The identity matrix is returned for any sprites that were not assigned a transform.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="ID2D1SpriteBatch" />
  </member>
  <member name="ID2D1SpriteBatch.SetSprites">
    <summary>
      <para>Updates the properties of the specified sprites in this sprite batch.Providing a null value for any property will leave that property unmodified for that sprite.</para>
    </summary>
    <param name="startIndex">
      <para>Type: <b>UINT32</b></para>
      <para>The index of the first sprite in this sprite batch to update.</para>
    </param>
    <param name="spriteCount">
      <para>Type: <b>UINT32</b></para>
      <para>The number of sprites to update with new properties. This determines how many strides into each given array Direct2D will read.</para>
    </param>
    <param name="destinationRectangles">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-f">D2D1_RECT_F</a>*</b></para>
      <para>A pointer to an array containing the destination rectangles specifying where to draw the sprites on the destination device context.</para>
    </param>
    <param name="sourceRectangles">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-rect-u">D2D1_RECT_U</a>*</b></para>
      <para>A pointer to an array containing the source rectangles specifying the regions of the source bitmap to draw as sprites.</para>
      <para>Direct2D will use the entire source bitmap for sprites that are assigned a null value or the InfiniteRectU.
If this parameter is omitted entirely or set to a null value, then Direct2D will use the entire source bitmap for all the updated sprites.</para>
    </param>
    <param name="colors">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-color-f">D2D1_COLOR_F</a>*</b></para>
      <para>A pointer to an array containing the colors to apply to each sprite. The output color is the result of component-wise multiplication of the source bitmap color and the provided color.
The output color is not clamped.</para>
      <para>Direct2D will not change the color of sprites that are assigned a null value. If this parameter is omitted entirely or set to a null value,
then Direct2D will not change the color of any of the updated sprites.</para>
    </param>
    <param name="transforms">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/Direct2D/d2d1-matrix-3x2-f">D2D1_MATRIX_3X2_F</a>*</b></para>
      <para>A pointer to an array containing the transforms to apply to each sprite’s destination rectangle.</para>
      <para>Direct2D will not transform the destination rectangle of any sprites that are assigned a null value.
If this parameter is omitted entirely or set to a null value, then Direct2D will not transform the destination rectangle of any of the updated sprites.</para>
    </param>
    <param name="destinationRectanglesStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each rectangle in the destinationRectangles array.
If you provide a stride of 0, then the same destination rectangle will be used for each updated sprite.</para>
    </param>
    <param name="sourceRectanglesStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each rectangle in the sourceRectangles array (if that array is given).
If you provide a stride of 0, then the same source rectangle will be used for each updated sprite.</para>
    </param>
    <param name="colorsStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each color in the colors array (if that array is given).
If you provide a stride of 0, then the same color will be used for each updated sprite.</para>
    </param>
    <param name="transformsStride">
      <para>Type: <b>UINT32</b></para>
      <para>Specifies the distance, in bytes, between each transform in the transforms array (if that array is given).
If you provide a stride of 0, then the same transform will be used for each updated sprite.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/win32/com/structure-of-com-error-codes">HRESULT</a></b></para>
      <para>Returns S_OK on success. Returns E_INVALIDARG if an invalid value was passed to the method. In this case, no sprites are modified by this call to SetSprites.</para>
    </returns>
    <seealso cref="ID2D1SpriteBatch" />
  </member>
  <member name="ID2D1SpriteBatch">
    <summary>
      <para>Represents a single group of sprites with their associated drawing properties.</para>
    </summary>
    <remarks>
      <para>Create a new sprite batch using <see cref="ID2D1DeviceContext3.CreateSpriteBatch" />.
Use <see cref="ID2D1DeviceContext3.DrawSpriteBatch" /> to draw them.</para>
      <para>Sprites are a way for apps to draw a large number of images very efficiently.
They are commonly used to render characters and backgrounds in 2D games, or to render particle systems such as smoke and flames.
If your app has performance demands and needs to draw hundreds or thousands of images every frame, then consider taking advantage of sprite batches and the fine-grained control they offer,
instead of the general-purpose DrawImage method.</para>
    </remarks>
    <seealso cref="ID2D1Resource" />
  </member>
</doc>