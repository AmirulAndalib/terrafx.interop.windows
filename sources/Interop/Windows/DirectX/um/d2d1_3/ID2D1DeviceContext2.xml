<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID2D1DeviceContext2.CreateGradientMesh">
    <summary>Creates a new <see cref="ID2D1GradientMesh" /> instance using the given array of patches.</summary>
    <param name="patches">A pointer to the array containing the patches to be used in this mesh.</param>
    <param name="patchesCount">The number of patches in the patches argument to read.</param>
    <param name="gradientMesh">When this method returns, contains the address of a pointer to the new gradient mesh.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateImageSourceFromDxgi">
    <summary>Creates an image source from a set of DXGI surface(s). The YCbCr surface(s) are converted to RGBA automatically during subsequent drawing.</summary>
    <param name="surfaces">The DXGI surfaces to create the image source from.</param>
    <param name="surfaceCount">The number of surfaces provided; must be between one and three.</param>
    <param name="colorSpace">The color space of the input.</param>
    <param name="options">Options controlling color space conversions.</param>
    <param name="imageSource">Receives the new image source instance.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateImageSourceFromWic">
    <summary>Creates an image source object from a WIC bitmap source, while populating all pixel memory within the image source.<br />The image is loaded and stored while using a minimal amount of memory.</summary>
    <param name="wicBitmapSource">The WIC bitmap source to create the image source from.</param>
    <param name="loadingOptions">Options for creating the image source. Default options are used if NULL.</param>
    <param name="alphaMode">The alpha mode of the image; this is determined automatically from the source’s pixel format if D2D1_ALPHA_MODE_UNKNOWN is passed.</param>
    <param name="imageSource">Receives the new image source instance.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateImageSourceFromWic">
    <summary>Creates an image source object from a WIC bitmap source, while populating all pixel memory within the image source.<br />The image is loaded and stored while using a minimal amount of memory.</summary>
    <param name="wicBitmapSource">The WIC bitmap source to create the image source from.</param>
    <param name="loadingOptions">Options for creating the image source. Default options are used if NULL.</param>
    <param name="imageSource">Receives the new image source instance.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateImageSourceFromWic">
    <summary>Creates an image source object from a WIC bitmap source, while populating all pixel memory within the image source.<br />The image is loaded and stored while using a minimal amount of memory.</summary>
    <param name="wicBitmapSource">The WIC bitmap source to create the image source from.</param>
    <param name="imageSource">Receives the new image source instance.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateInk">
    <summary>Creates a new <see cref="ID2D1Ink" /> object that starts at the given point.</summary>
    <param name="startPoint">The starting point of the first segment of the first stroke in the new ink object.</param>
    <param name="ink">When this method returns, contains the address of a pointer to a new ink object.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateInk">
    <summary>Creates a new <see cref="ID2D1Ink" /> object that starts at the given point.</summary>
    <param name="startPoint">The starting point of the first segment of the first stroke in the new ink object.</param>
    <param name="ink">When this method returns, contains the address of a pointer to a new ink object.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateInkStyle">
    <summary>Creates a new <see cref="ID2D1InkStyle" /> object, for use with ink rendering methods such as <see cref="DrawInk" />.</summary>
    <param name="inkStyleProperties">The properties of the ink style to be created.</param>
    <param name="inkStyle">When this method returns, contains the address of a pointer to a new ink style object.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateInkStyle">
    <summary>Creates a new <see cref="ID2D1InkStyle" /> object, for use with ink rendering methods such as <see cref="DrawInk" />.</summary>
    <param name="inkStyleProperties">The properties of the ink style to be created.</param>
    <param name="inkStyle">When this method returns, contains the address of a pointer to a new ink style object.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateLookupTable3D">
    <summary>Creates a 3D lookup table for mapping a 3-channel input to a 3-channel output. The table data must be provided in 4-channel format.</summary>
    <param name="precision">Precision of the input lookup table data.</param>
    <param name="extents">Number of lookup table elements per dimension (X, Y, Z).</param>
    <param name="data">Buffer holding the lookup table data.</param>
    <param name="dataCount">Size of the lookup table data buffer.</param>
    <param name="strides">An array containing two values. The first value is the size in bytes from one row (X dimension) of LUT data to the next.<br />The second value is the size in bytes from one LUT data plane (X and Y dimensions) to the next.</param>
    <param name="lookupTable">Receives the new lookup table instance.</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2.CreateTransformedImageSource">
    <summary>Creates an image source which shares resources with an original.</summary>
    <param name="imageSource">The original image.</param>
    <param name="properties">Properties for the source image.</param>
    <param name="transformedImageSource">Receives the new image source.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ID2D1DeviceContext2.DrawGdiMetafile">
    <summary>Draws a metafile to the device context using the given source and destination rectangles.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="destinationRectangle">The rectangle in the target where the metafile will be drawn, relative to the upper left corner (defined in DIPs) of the render target. If NULL is specified, the destination rectangle is {0, 0, w, h}, where w and h are the width and height of the metafile as reported by<see cref="ID2D1GdiMetafile.GetBounds" />.</param>
    <param name="sourceRectangle">The rectangle of the source metafile that will be drawn, relative to the upper left corner (defined in DIPs) of the metafile. If NULL is specified, the source rectangle is the value returned by <see cref="ID2D1GdiMetafile1.GetSourceBounds" />.</param>
  </member>
  <member name="ID2D1DeviceContext2.DrawGdiMetafile">
    <summary>Draws a metafile to the device context using the given source and destination rectangles.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="destinationRectangle">The rectangle in the target where the metafile will be drawn, relative to the upper left corner (defined in DIPs) of the render target. If NULL is specified, the destination rectangle is {0, 0, w, h}, where w and h are the width and height of the metafile as reported by <see cref="ID2D1GdiMetafile.GetBounds" />.</param>
    <param name="sourceRectangle">The rectangle of the source metafile that will be drawn, relative to the upper left corner (defined in DIPs) of the metafile. If NULL is specified, the source rectangle is the value returned by <see cref="ID2D1GdiMetafile1.GetSourceBounds" />.</param>
  </member>
  <member name="ID2D1DeviceContext2.DrawGdiMetafile">
    <summary>Draws a metafile to the device context using the given source and destination rectangles.</summary>
    <param name="gdiMetafile">The metafile to draw.</param>
    <param name="destinationRectangle">The rectangle in the target where the metafile will be drawn, relative to the upper left corner (defined in DIPs) of the render target. If NULL is specified, the destination rectangle is {0, 0, w, h}, where w and h are the width and height of the metafile as reported by<see cref="ID2D1GdiMetafile.GetBounds" />.</param>
    <param name="sourceRectangle">The rectangle of the source metafile that will be drawn, relative to the upper left corner (defined in DIPs) of the metafile. If NULL is specified, the source rectangle is the value returned by <see cref="ID2D1GdiMetafile1.GetSourceBounds" />.</param>
  </member>
  <member name="ID2D1DeviceContext2.DrawGradientMesh">
    <summary>Renders a given gradient mesh to the target.</summary>
    <param name="gradientMesh">The gradient mesh to be rendered.</param>
  </member>
  <member name="ID2D1DeviceContext2.DrawInk">
    <summary>Renders the given ink object using the given brush and ink style.</summary>
    <param name="ink">The ink object to be rendered.</param>
    <param name="brush">The brush with which to render the ink object.</param>
    <param name="inkStyle">The ink style to use when rendering the ink object.</param>
  </member>
  <member name="ID2D1DeviceContext2.GetGradientMeshWorldBounds">
    <summary>Returns the world bounds of a given gradient mesh.</summary>
    <param name="gradientMesh">The gradient mesh whose world bounds will be calculated.</param>
    <param name="pBounds">When this method returns, contains a pointer to the bounds of the gradient mesh, in device independent pixels (DIPs).</param>
    <returns>S_OK if successful, otherwise a failure HRESULT.</returns>
  </member>
  <member name="ID2D1DeviceContext2">
    <summary>This interface performs all the same functions as the ID2D1DeviceContext1 interface, plus it enables functionality such as ink rendering, gradient mesh rendering, and improved image loading.</summary>
  </member>
</doc>