<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ID3D12ShaderReflection.GetBitwiseInstructionCount">
    <summary>Gets the number of bitwise instructions.</summary>
    <returns>The number of bitwise instructions.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetConstantBufferByIndex">
    <summary>Gets a constant buffer by index.</summary>
    <param name="Index">Zero-based index.</param>
    <returns>A pointer to a constant buffer (see <see cref="ID3D12ShaderReflectionConstantBuffer Interface" />).</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetConstantBufferByName">
    <summary>Gets a constant buffer by name.</summary>
    <param name="Name">The constant-buffer name.</param>
    <returns>A pointer to a constant buffer (see <see cref="ID3D12ShaderReflectionConstantBuffer Interface" />).</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetConversionInstructionCount">
    <summary>Gets the number of conversion instructions.</summary>
    <returns>Returns the number of conversion instructions.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetDesc">
    <summary>Gets a shader description.</summary>
    <param name="pDesc">A shader description, as a pointer to a <see cref="D3D12_SHADER_DESC" /> structure.</param>
    <returns>Returns one of the following <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetGSInputPrimitive">
    <summary>Gets the geometry-shader input-primitive description.</summary>
    <returns>The input-primitive description. See<see cref="D3D_PRIMITIVE_TOPOLOGY" />.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetInputParameterDesc">
    <summary>Gets an input-parameter description for a shader.</summary>
    <param name="ParameterIndex">A zero-based parameter index.</param>
    <param name="pDesc">A pointer to a shader-input-signature description. See <see cref="D3D12_SIGNATURE_PARAMETER_DESC" />.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetMinFeatureLevel">
    <summary>Gets the minimum feature level.</summary>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetMovcInstructionCount">
    <summary>Gets the number of Movc instructions.</summary>
    <returns>Returns the number of Movc instructions.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetMovInstructionCount">
    <summary>Gets the number of Mov instructions.</summary>
    <returns>Returns the number of Mov instructions.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetNumInterfaceSlots">
    <summary>Gets the number of interface slots in a shader.</summary>
    <returns>The number of interface slots in the shader.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetOutputParameterDesc">
    <summary>Gets an output-parameter description for a shader.</summary>
    <param name="ParameterIndex">A zero-based parameter index.</param>
    <param name="pDesc">A shader-output-parameter description, as a pointer to a <see cref="D3D12_SIGNATURE_PARAMETER_DESC" /> structure.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetPatchConstantParameterDesc">
    <summary>Gets a patch-constant parameter description for a shader.</summary>
    <param name="ParameterIndex">A zero-based parameter index.</param>
    <param name="pDesc">A pointer to a shader-input-signature description. See <see cref="D3D12_SIGNATURE_PARAMETER_DESC" />.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetRequiresFlags">
    <summary>Retrieves a group of flags that indicate the requirements of a shader.</summary>
    <returns>
      <para>A value that contains a combination of one or more shader requirements <code>#define</code> flags; each flag specifies a requirement of the shader. A default value of 0 means that there are no requirements.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_DOUBLES</b>. Shader requires that the graphics driver and hardware support the <i>double</i> data type.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</b>. Shader requires an early depth stencil.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</b>. Shader requires unordered access views (UAVs) at every pipeline stage.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_64_UAVS</b>. Shader requires 64 UAVs.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</b>. Shader requires the graphics driver and hardware to support minimum precision. For more info, see <a href="https://docs.microsoft.com//windows/win32/direct3dhlsl/using-hlsl-minimum-precision">Using HLSL minimum precision</a>.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</b>. Shader requires that the graphics driver and hardware support extended doubles instructions. For more info, see the <b>ExtendedDoublesShaderInstructions</b> member of <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" />.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</b>. Shader requires that the graphics driver and hardware support the <a href="https://docs.microsoft.com//windows/win32/direct3dhlsl/dx-graphics-hlsl-msad4">msad4</a> intrinsic function in shaders. For more info, see the <b>SAD4ShaderInstructions</b> member of <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" />.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</b>. Shader requires that the graphics driver and hardware support Direct3D 9 shadow support.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_TILED_RESOURCES</b>. Shader requires that the graphics driver and hardware support tiled resources.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_STENCIL_REF</b>. Shader requires a reference value for depth stencil tests. For more info, see the <b>PSSpecifiedStencilRefSupported</b> member of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure, and <see cref="ID3D12GraphicsCommandList.OMSetStencilRef" />.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_INNER_COVERAGE</b>. Shader requires that the graphics driver and hardware support inner coverage. For more info, see the enumeration constants <b>D3D_NAME_INNER_COVERAGE</b> and <b>D3D11_NAME_INNER_COVERAGE</b> in <see cref="D3D_NAME" />.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS</b>. Shader requires that the graphics driver and hardware support the loading of additional formats for typed unordered-access views (UAVs). See the <i>TypedUAVLoadAdditionalFormats</i> member of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_ROVS</b>. Shader requires that the graphics driver and hardware support rasterizer ordered views (ROVs). See <a href="https://docs.microsoft.com//windows/win32/direct3d12/rasterizer-order-views">Rasterizer Ordered Views</a>.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER</b>. Shader requires that the graphics driver and hardware support viewport and render target array index values from any shader-feeding rasterizer. For more info, see the member <i>VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation</i> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_WAVE_OPS</b>. Shader requires that the graphics driver and hardware support wave ops. For more info, see the member <b>WaveOps</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS1" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_INT64_OPS</b>. Shader requires that the graphics driver and hardware support 64-bit integer ops. For more info, see the member <b>Int64ShaderOps</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS1" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_VIEW_ID</b>. Shader requires that the graphics driver and hardware support view instancing using <b>SV_ViewID</b>. For more info, see the member <b>ViewInstancingTier</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS3" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_BARYCENTRICS</b>. Shader requires that the graphics driver and hardware support barycentrics using <b>SV_Barycentrics</b>. For more info, see the member <b>BarycentricsSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS3" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS</b>. Shader requires that the graphics driver and hardware support native 16-bit ops. For more info, see the member <b>Native16BitShaderOpsSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS4" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_SHADING_RATE</b>. Shader requires that the graphics driver and hardware support the Variable Shading Rate (VRS) feature. For more info, see the member <b>VariableShadingRateTier</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS6" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1</b>. Shader requires that the graphics driver and hardware support DXR tier 1.1. For more info, see the member <b>RaytracingTier</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS5" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK</b>. Shader requires that the graphics driver and hardware support Sampler Feedback. For more info, see the member <b>SamplerFeedbackTier</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS7" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE</b>. Shader requires that the graphics driver and hardware support int64 atomics on typed resources. For more info, see the member <b>AtomicInt64OnTypedResourceSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS9" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED</b>. Shader requires that the graphics driver and hardware support int64 atomics on groupshared memory. For more info, see the member <b>AtomicInt64OnGroupSharedSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS9" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS</b>. Shader requires that the graphics driver and hardware support derivatives in mesh and amplification shaders. For more info, see the member <b>DerivativesInMeshAndAmplificationShadersSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS9" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING</b>. Shader requires that the graphics driver and hardware support Dynamic Resources (a requirement for Shader Model 6.6) and the <b>ResourceDescriptorHeap</b> in particular. For more info, see the <a href="https://github.com/microsoft/directx-specs/blob/master/d3d/hlsl_sm_6_6_dynamicresources.md">HLSL dynamic resources</a> spec on GitHub.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING</b>. Shader requires that the graphics driver and hardware support Dynamic Resources (a requirement for Shader Model 6.6) and the <b>SamplerDescriptorHeap</b> in particular. For more info, see the <a href="https://github.com/microsoft/directx-specs/blob/master/d3d/hlsl_sm_6_6_dynamicresources.md">HLSL dynamic resources</a> spec on GitHub.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_WAVE_MMA</b>. Shader requires that the graphics driver and hardware support Wave MMA. For more info, see the member <b>WaveMMATier</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS9" /> structure.</para>
      <para>
        <b>D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE</b>. Shader requires that the graphics driver and hardware support int64 atomics on descriptor heap resources. For more info, see the member <b>AtomicInt64OnDescriptorHeapResourceSupported</b> of the <see cref="D3D12_FEATURE_DATA_D3D12_OPTIONS11" /> structure.</para>
    </returns>
  </member>
  <member name="ID3D12ShaderReflection.GetResourceBindingDesc">
    <summary>Gets a description of how a resource is bound to a shader.</summary>
    <param name="ResourceIndex">A zero-based resource index.</param>
    <param name="pDesc">A pointer to an input-binding description. See <see cref="D3D12_SHADER_INPUT_BIND_DESC" />.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetResourceBindingDescByName">
    <summary>Gets a description of how a resource is bound to a shader.</summary>
    <param name="Name">The constant-buffer name of the resource.</param>
    <param name="pDesc">A pointer to an input-binding description. See <see cref="D3D12_SHADER_INPUT_BIND_DESC" />.</param>
    <returns>Returns one of the <a href="https://docs.microsoft.com//windows/desktop/direct3d12/d3d12-graphics-reference-returnvalues">Direct3D 12 Return Codes</a>.</returns>
  </member>
  <member name="ID3D12ShaderReflection.GetThreadGroupSize">
    <summary>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</summary>
    <param name="pSizeX">A pointer to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</param>
    <param name="pSizeY">A pointer to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</param>
    <param name="pSizeZ">A pointer to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</param>
    <returns>
      <para>Returns the total size, in threads, of the thread-group grid by calculating the product of the size of each dimension.</para>
      <code>*pSizeX * *pSizeY * *pSizeZ;</code>
    </returns>
  </member>
  <member name="ID3D12ShaderReflection.GetVariableByName">
    <summary>Gets a variable by name.</summary>
    <param name="Name">A pointer to a string containing the variable name.</param>
    <returns>Returns a <see cref="ID3D12ShaderReflectionVariable Interface" /> interface.</returns>
  </member>
  <member name="ID3D12ShaderReflection.IsSampleFrequencyShader">
    <summary>Indicates whether a shader is a sample frequency shader.</summary>
    <returns>Returns true if the shader is a sample frequency shader; otherwise returns false.</returns>
  </member>
  <member name="ID3D12ShaderReflection">
    <summary>A shader-reflection interface accesses shader information.</summary>
  </member>
</doc>