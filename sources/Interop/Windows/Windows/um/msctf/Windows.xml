<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.getmessagea">
    <summary>Obtains a message from the message queue and does not return until a message is obtained. This is the ANSI version of this method.</summary>
    <param name="pMsg">Pointer to a <see cref="MSG" /> structure that receives message data.</param>
    <param name="hwnd">Handle to the window whose messages are obtained. The window must belong to the current thread. If this value is <b>NULL</b>, this method obtains messages for any window that belongs to the calling thread.</param>
    <param name="wMsgFilterMin">Specifies the lowest message value obtained.</param>
    <param name="wMsgFilterMax">Specifies the highest message value obtained.</param>
    <param name="pfResult">Pointer to a BOOL value that receives the return value from the <b>GetMessage</b> function.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.getmessagew">
    <summary>Obtains a message from the message queue and does not return until a message is obtained. This is the Unicode version of this method.</summary>
    <param name="pMsg">Pointer to a <see cref="MSG" /> structure that receives message data.</param>
    <param name="hwnd">Handle to the window whose messages are obtained. The window must belong to the current thread. If this value is <b>NULL</b>, this method obtains messages for any window owned by the calling thread.</param>
    <param name="wMsgFilterMin">Specifies the lowest message value to obtain.</param>
    <param name="wMsgFilterMax">Specifies the highest message value to obtain.</param>
    <param name="pfResult">Pointer to a BOOL that receives the return value from the <b>GetMessage</b> function.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.peekmessagea">
    <summary>Obtains a message from the message queue and returns if no message is obtained. This is the ANSI version of this method.</summary>
    <param name="pMsg">Pointer to a <see cref="MSG" /> structure that receives message data.</param>
    <param name="hwnd">Handle to the window whose messages are obtained. The window must belong to the current thread. If this value is <b>NULL</b>, this method obtains messages for any window owned by the calling thread.</param>
    <param name="wMsgFilterMin">Specifies the lowest message value to obtain.</param>
    <param name="wMsgFilterMax">Specifies the highest message value to obtain.</param>
    <param name="wRemoveMsg">Specifies how messages are handled. For more information, see the <b>PeekMessage</b> function.</param>
    <param name="pfResult">Pointer to a BOOL that receives the return value from the <b>PeekMessage</b> function.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.peekmessagew">
    <summary>Obtains a message from the message queue and returns if no message is obtained. This is the Unicode version of this method.</summary>
    <param name="pMsg">Pointer to a <see cref="MSG" /> structure that receives message data.</param>
    <param name="hwnd">Handle to the window whose messages are obtained. The window must belong to the current thread. If this value is <b>NULL</b>, this method obtains messages for any window that belongs to the calling thread.</param>
    <param name="wMsgFilterMin">Specifies the lowest message value to obtain.</param>
    <param name="wMsgFilterMax">Specifies the highest message value to obtain.</param>
    <param name="wRemoveMsg">Specifies how messages are handled. For more information, see the <b>PeekMessage</b> function.</param>
    <param name="pfResult">Pointer to a BOOL that receives the return value from the <b>PeekMessage</b> function.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateCategoryMgr">
    <summary>The <b>TF_CreateCategoryMgr</b> function creates a category manager object without having to initialize COM. Usage must be done carefully because the calling thread must maintain the reference count on an object that is owned by MSCTF.DLL.</summary>
    <param name="ppcat">Pointer to ITFCategoryMgr interface pointer that receives the category manager object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateDisplayAttributeMgr">
    <summary>
      <para>The <b>TF_CreateDisplayAttributeMgr</b> function is used to create a display attribute manager object without having to initialize COM. Usage of this method is not recommended, because the calling process must maintain a proper reference count on an object that is owned by Msctf.dll.</para>
      <para>It is instead recommended that display attribute manager objects be created using <see cref="CoCreateInstance" /> , as demonstrated in <see cref="ITfDisplayAttributeMgr" />.</para>
    </summary>
    <param name="ppdam">Pointer to an <b>ITfDisplayAttributeMgr</b> interface pointer that receives the display attribute manager object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>
            <i>ppdam</i> is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateInputProcessorProfiles">
    <summary>
      <para>The <b>TF_CreateInputProcessorProfiles</b> function is used to create a input processor profile object without having to initialize COM. Usage of this method is not recommended, because the calling process must maintain a proper reference count on an object that is owned by Msctf.dll.</para>
      <para>It is instead recommended that input processor profile objects be created using <see cref="CoCreateInstance" /> , as demonstrated in <see cref="ITfInputProcessorProfiles" />.</para>
    </summary>
    <param name="ppipr">Pointer to an <b>ITfInputProcessorProfiles</b> interface pointer that receives the input processor profile object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>
            <i>ppipr</i> is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateLangBarItemMgr">
    <summary>
      <para>The <b>TF_CreateLangBarItemMgr</b> function is used to create a language bar item manager object without having to initialize COM. Usage of this method is not recommended, because the calling process must maintain a proper reference count on an object that is owned by Msctf.dll.</para>
      <para>It is instead recommended that language bar item manager objects be created using <see cref="CoCreateInstance" /> , as demonstrated in <see cref="ITfLangBarItemMgr" />.</para>
    </summary>
    <param name="pplbim">Pointer to an <b>ITfLangBarItemMgr</b> interface pointer that receives the language bar item manager object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>
            <i>pplbim</i> is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateLangBarMgr">
    <summary>
      <para>The <b>TF_CreateLangBarMgr</b> function creates a language bar manager object without having to initialize COM. Usage of this method is not recommended, because the calling process must maintain a proper reference count on an object that is owned by Msctf.dll.</para>
      <para>It is instead recommended that language bar manager objects be created using <see cref="CoCreateInstance" /> , as demonstrated in <see cref="ITfLangBarMgr" />.</para>
    </summary>
    <param name="pppbm">Pointer to an <b>ITfLangBarMgr</b> interface pointer that receives the language bar manager object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>
            <i>pppbm</i> is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TF_CreateThreadMgr">
    <summary>
      <para>The <b>TF_CreateThreadMgr</b> function creates a thread manager object without having to initialize COM. Usage of this method is not recommended, because the calling process must maintain a proper reference count on an object that is owned by Msctf.dll.</para>
      <para>It is instead recommended that thread manager objects be created using <see cref="CoCreateInstance" /> , as demonstrated in <see cref="ITfThreadMgr" />.</para>
    </summary>
    <param name="pptim">Pointer to an <b>ITfThreadMgr</b> interface pointer that receives the thread manager object.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>S_OK</description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>E_FAIL</description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>E_INVALIDARG</description>
          <description>
            <i>pptim</i> is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>