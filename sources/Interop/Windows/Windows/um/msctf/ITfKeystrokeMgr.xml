<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITfKeystrokeMgr.AdviseKeyEventSink">
    <summary>
      <para>Installs a key event sink to receive keyboard events.</para>
    </summary>
    <param name="tid">
      <para>Identifier of the client that owns the key event sink. This value is obtained by a previous call to <see cref="ITfThreadMgr.Activate" />.</para>
    </param>
    <param name="pSink">
      <para>Pointer to a <see cref="ITfKeyEventSink" /> interface.</para>
    </param>
    <param name="fForeground">
      <para>Specifies if this key event sink is made the foreground key event sink. If this is <b>TRUE</b>, this key event sink is made the foreground key event sink. Otherwise, this key event sink does not become the foreground key event sink.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CONNECT_E_ADVISELIMIT</b>
            </para>
          </description>
          <description>
            <para>The client identified by <i>tid</i> has a key event sink installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The foreground key event sink receives all keyboard events. A non-foreground key event sink only receives preserved keys and key events that occur over text that marked owned by the client identifier.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink " />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfThreadMgr.Activate " />
  </member>
  <member name="ITfKeystrokeMgr.GetForeground">
    <summary>
      <para>Obtains the class identifier of the foreground TSF text service.</para>
    </summary>
    <param name="pclsid">
      <para>Pointer to a CLSID that receives the class identifier of the foreground TSF text service.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>There is no foreground text service.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pclsid</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ITfKeystrokeMgr.GetPreservedKey">
    <summary>
      <para>Obtains the command GUID for a preserved key.</para>
    </summary>
    <param name="pic">
      <para>Pointer to the application context. This value is returned by a previous call to <see cref="ITfDocumentMgr.CreateContext" />.</para>
    </param>
    <param name="pprekey">
      <para>Pointer to a <see cref="TF_PRESERVEDKEY" /> structure that identifies the preserved key to obtain. The <b>uVKey</b> member contains the virtual key code and the <b>uModifiers</b> member identifies the modifiers of the preserved key. The <b>uVKey</b> member must be less than 256.</para>
    </param>
    <param name="pguid">
      <para>Pointer to a GUID value that receives the command GUID of the preserved key. This is the GUID passed in the TSF text service call to <see cref="ITfKeystrokeMgr.PreserveKey" />. This value receives GUID_NULL if the preserved key is not found.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful and the preserved key was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The method was successful, but the preserved key was not found. <i>pguid</i> receives GUID_NULL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and used to provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.PreserveKey " />
    <seealso cref="TF_PRESERVEDKEY " />
  </member>
  <member name="ITfKeystrokeMgr.GetPreservedKeyDescription">
    <summary>
      <para>Obtains the description string of an existing preserved key.</para>
    </summary>
    <param name="rguid">
      <para>Contains the command GUID of the preserved key.</para>
    </param>
    <param name="pbstrDesc">
      <para>Pointer to a BSTR value the receives the description string. The caller must free this memory using <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters is invalid or the preserved key is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfKeystrokeMgr" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</seealso>
  </member>
  <member name="ITfKeystrokeMgr.IsPreservedKey">
    <summary>
      <para>Determines if a command GUID and key combination is a preserved key.</para>
    </summary>
    <param name="rguid">
      <para>Specifies the command GUID of the preserved key. This is the GUID passed in the text service call to <see cref="ITfKeystrokeMgr.PreserveKey" />.</para>
    </param>
    <param name="pprekey">
      <para>Pointer to a <see cref="TF_PRESERVEDKEY" /> structure that identifies the preserved key. The <b>uVKey</b> member contains the virtual key code and the <b>uModifiers</b> member identifies the modifiers of the preserved key. The <b>uVKey</b> member must be less than 256.</para>
    </param>
    <param name="pfRegistered">
      <para>Pointer to a BOOL that receives <b>TRUE</b> if the command GUID and key combination is a registered preserved key, or <b>FALSE</b> otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful and the preserved key was found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The method was successful, but the preserved key was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.PreserveKey " />
    <seealso cref="TF_PRESERVEDKEY " />
  </member>
  <member name="ITfKeystrokeMgr.KeyDown">
    <summary>
      <para>Passes a key down event to the keystroke manager.</para>
    </summary>
    <param name="wParam">
      <para>Specifies the virtual-key code of the key. For more information about this parameter, see the <i>wParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>.</para>
    </param>
    <param name="lParam">
      <para>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag of the key. For more information about this parameter, see the <i>lParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>.</para>
    </param>
    <param name="pfEaten">
      <para>Pointer to a BOOL that, on exit, indicates if the key event was handled. If this value receives <b>TRUE</b>, the key event was handled and the event should not be forwarded to the application. If this value is <b>FALSE</b>, the key event was not handled and the event should be forwarded to the application.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>There are no key event sinks installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this method is successful and <i>pfEaten</i> receives <b>TRUE</b>, the application should not process the key down event. If this method does not return S_OK or <i>pfEaten</i> receives <b>FALSE</b>, the application should process the key down event. The following is an example of how this is implemented.</para>
      <code>
if(msg.message == WM_KEYDOWN)
{
    if( pKeyboardMgr-&gt;TestKeyDown(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; pKeyboardMgr-&gt;KeyDown(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten)
    {
        //The key was handled by the keystroke manager or a TSF text service. Do not pass the key to the application.
        continue;
    }
    else
    {
        //Let the application process the key.
    }
}

</code>
      <para>If the keystroke manager does not handle the key event, it passes the key event to TSF text services by calling the TSF text service <see cref="ITfKeyEventSink.OnKeyDown" /> method.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink.OnKeyDown" />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.KeyUp" />
    <seealso cref="ITfKeystrokeMgr.TestKeyDown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</seealso>
  </member>
  <member name="ITfKeystrokeMgr.KeyUp">
    <summary>
      <para>Passes a key up event to the keystroke manager.</para>
    </summary>
    <param name="wParam">
      <para>Specifies the virtual-key code of the key. For more information about this parameter, see the <i>wParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>.</para>
    </param>
    <param name="lParam">
      <para>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag of the key. For more information about this parameter, see the <i>lParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>.</para>
    </param>
    <param name="pfEaten">
      <para>Pointer to a BOOL that, on exit, indicates if the key event will be handled. If this value receives <b>TRUE</b>, the key event would be handled and the event should not be forwarded to the application. If this value is <b>FALSE</b>, the key event would not be handled and the event should be forwarded to the application.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>No key event sinks are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If this method is successful and <i>pfEaten</i> receives <b>TRUE</b>, the application should not process the key down event. If this method does not return S_OK or <i>pfEaten</i> receives <b>FALSE</b>, the application should process the key down event. The following is an example of how this is implemented.</para>
      <code>
if(msg.message == WM_KEYUP)
{
    if( pKeyboardMgr-&gt;TestKeyUp(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; pKeyboardMgr-&gt;KeyUp(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten)
    {
        //The key was handled by the keystroke manager or a TSF text service. Do not pass the key to the application.
        continue;
    }
    else
    {
        //Let the application process the key.
    }
}

</code>
      <para>If the keystroke manager does not handle the key event, it passes the key event to the text services by a call to the text service <see cref="ITfKeyEventSink.OnKeyUp" /> method.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink.OnKeyUp" />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.KeyDown" />
    <seealso cref="ITfKeystrokeMgr.TestKeyUp" />
    <seealso href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</seealso>
  </member>
  <member name="ITfKeystrokeMgr.PreserveKey">
    <summary>
      <para>Registers a preserved key.</para>
    </summary>
    <param name="tid">
      <para>Contains the client identifier of the TSF text service. This value is passed to the TSF text service in its <see cref="ITfTextInputProcessor.Activate" /> method.</para>
    </param>
    <param name="rguid">
      <para>Contains the command GUID of the preserved key. This value is passed to the TSF text service <see cref="ITfKeyEventSink.OnPreservedKey" /> method to identify the preserved key when the preserved key is activated.</para>
    </param>
    <param name="prekey">
      <para>Pointer to a <see cref="TF_PRESERVEDKEY" /> structure that specifies the preserved key. The <b>uVKey</b> member contains the virtual key code and the <b>uModifiers</b> member identifies the modifiers of the preserved key.</para>
    </param>
    <param name="pchDesc">
      <para>Pointer to a Unicode string that contains the description of the preserved key. This cannot be <b>NULL</b> unless <i>cchDesc</i> is zero.</para>
    </param>
    <param name="cchDesc">
      <para>Specifies the number of characters in <i>pchDesc</i>. Pass zero for this parameter if no description is required.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_ALREADY_EXISTS</b>
            </para>
          </description>
          <description>
            <para>The preserved key is registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink.OnPreservedKey " />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.UnpreserveKey " />
    <seealso cref="ITfTextInputProcessor.Activate " />
    <seealso cref="TF_PRESERVEDKEY " />
  </member>
  <member name="ITfKeystrokeMgr.SetPreservedKeyDescription">
    <summary>
      <para>Modifies the description string of an existing preserved key.</para>
    </summary>
    <param name="rguid">
      <para>Contains the command GUID of the preserved key.</para>
    </param>
    <param name="pchDesc">
      <para>Pointer to a Unicode string that contains the new description of the preserved key. This cannot be <b>NULL</b> unless <i>cchDesc</i> is zero.</para>
    </param>
    <param name="cchDesc">
      <para>Number of characters in <i>pchDesc</i>. Pass zero for this parameter if no description is required.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid or the preserved key is not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.GetPreservedKeyDescription " />
  </member>
  <member name="ITfKeystrokeMgr.SimulatePreservedKey">
    <summary>
      <para>Simulates the execution of a preserved key sequence.</para>
    </summary>
    <param name="pic">
      <para>Pointer to the application context. This value was returned by a previous call to <see cref="ITfDocumentMgr.CreateContext" />.</para>
    </param>
    <param name="rguid">
      <para>Contains the command GUID of the preserved key.</para>
    </param>
    <param name="pfEaten">
      <para>Pointer to a BOOL that indicates if the key event was handled. If this value receives <b>TRUE</b>, the key event was handled. If this value is <b>FALSE</b>, the key event was not handled.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The preserved key cannot be simulated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfKeystrokeMgr" />
  </member>
  <member name="ITfKeystrokeMgr.TestKeyDown">
    <summary>
      <para>Determines if the keystroke manager will handle a key down event.</para>
    </summary>
    <param name="wParam">
      <para>Specifies the virtual-key code of the key. For more information about this parameter, see the <i>wParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>.</para>
    </param>
    <param name="lParam">
      <para>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag of the key. For more information about this parameter, see the <i>lParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>.</para>
    </param>
    <param name="pfEaten">
      <para>Pointer to a BOOL that indicates if the key event would be handled. If this value receives <b>TRUE</b>, the key event would be handled and the event should not be forwarded to the application. If this value is <b>FALSE</b>, the key event would not be handled and the event should be forwarded to the application.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>There are no key event sinks installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An application can determine if a key event will be handled by the keystroke manager with this method. If this method is successful and <i>pfEaten</i> receives <b>TRUE</b>, the application should call <see cref="ITfKeystrokeMgr.KeyDown" />. If this method does not return S_OK or <i>pfEaten</i> receives <b>FALSE</b>, the application should not call <b>ITfKeystrokeMgr.KeyDown</b> . The following is an example of how this is implemented.</para>
      <code>
if(msg.message == WM_KEYDOWN)
{
    if( pKeyboardMgr-&gt;TestKeyDown(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; pKeyboardMgr-&gt;KeyDown(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten)
    {
        //The key was handled by the keystroke manager or a TSF text service. Do not pass the key to the application.
        continue;
    }
    else
    {
        //Let the application process the key.
    }
}

</code>
      <para>If the keystroke manager does not handle the key event, it passes the key event to the TSF text services by calling the text service <see cref="ITfKeyEventSink.OnTestKeyDown" /> method.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink.OnTestKeyDown" />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.KeyDown" />
    <seealso cref="ITfKeystrokeMgr.TestKeyUp" />
    <seealso href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</seealso>
  </member>
  <member name="ITfKeystrokeMgr.TestKeyUp">
    <summary>
      <para>Determines if the keystroke manager will handle a key up event.</para>
    </summary>
    <param name="wParam">
      <para>Specifies the virtual-key code of the key. For more information about this parameter, see the <i>wParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>.</para>
    </param>
    <param name="lParam">
      <para>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag of the key. For more information about this parameter, see the <i>lParam</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>.</para>
    </param>
    <param name="pfEaten">
      <para>Pointer to a BOOL that indicates if the key event is handled. If this value receives <b>TRUE</b>, the key event is handled and the event should not be forwarded to the application. If this value is <b>FALSE</b>, the key event is not handled and the event should be forwarded to the application.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>No key event sinks are installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An application can determine if a key event is handled by the keystroke manager with this method. If this method is successful and <i>pfEaten</i> receives <b>TRUE</b>, the application should call <see cref="ITfKeystrokeMgr.KeyUp" />. If this method does not return S_OK or <i>pfEaten</i> receives <b>FALSE</b>, the application should not call <b>ITfKeystrokeMgr.KeyUp</b> . The following is an example of how this is implemented.</para>
      <code>
if(msg.message == WM_KEYUP)
{
    if( pKeyboardMgr-&gt;TestKeyUp(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; pKeyboardMgr-&gt;KeyUp(msg.wParam, msg.lParam, &amp;amp;amp;amp;amp;amp;amp;fEaten) == S_OK
        &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; fEaten)
    {
        The key was handled by the keystroke manager or a text service. Do not pass the key to the application.
        continue;
    }
    else
    {
        //Let the application process the key.
    }
}

</code>
      <para>If the keystroke manager does not handle the key event, it passes the key event to the TSF text service by calling the TSF text service <see cref="ITfKeyEventSink.OnTestKeyUp" /> method.</para>
    </remarks>
    <seealso cref="ITfKeyEventSink.OnTestKeyUp" />
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.KeyUp" />
    <seealso cref="ITfKeystrokeMgr.TestKeyDown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</seealso>
  </member>
  <member name="ITfKeystrokeMgr.UnadviseKeyEventSink">
    <summary>
      <para>Removes a key event sink.</para>
    </summary>
    <param name="tid">
      <para>Identifier of the client that owns the key event sink. This value was passed when the advise sink was installed using <see cref="ITfKeystrokeMgr.AdviseKeyEventSink" />.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>tid</i> parameter is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CONNECT_E_NOCONNECTION</b>
            </para>
          </description>
          <description>
            <para>The advise sink identified by <i>tid</i> was not found.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.AdviseKeyEventSink " />
  </member>
  <member name="ITfKeystrokeMgr.UnpreserveKey">
    <summary>
      <para>Unregisters a preserved key.</para>
    </summary>
    <param name="rguid">
      <para>Contains the command GUID of the preserved key.</para>
    </param>
    <param name="pprekey">
      <para>Pointer to a <see cref="TF_PRESERVEDKEY" /> structure that specifies the preserved key. The <i>uVKey</i> member contains the virtual key code and the <i>uModifiers</i> member identifies the modifiers of the preserved key.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CONNECT_E_NOCONNECTION</b>
            </para>
          </description>
          <description>
            <para>The preserved key is not registered.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Preserved keys are registered by TSF text services and provide keyboard shortcuts to common commands implemented by the TSF text service.</para>
    </remarks>
    <seealso cref="ITfKeystrokeMgr" />
    <seealso cref="ITfKeystrokeMgr.PreserveKey " />
    <seealso cref="TF_PRESERVEDKEY " />
  </member>
  <member name="ITfKeystrokeMgr">
    <summary>
      <para>The <b>ITfKeystrokeMgr</b> interface is implemented by the TSF manager and used by applications and text services to interact with the keyboard manager.</para>
    </summary>
  </member>
</doc>