<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITfRange.AdjustForInsert">
    <summary>
      <para>The <b>ITfRange.AdjustForInsert</b> method expands or contracts a range of text to adjust for text insertion.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="cchInsert">
      <para>Character count of the inserted text. This count is used in a futurecall to <see cref="ITfRange.SetText" />. If the character count is unknown, 0 can be used.</para>
    </param>
    <param name="pfInsertOk">
      <para>Pointer to a flag that indicates whether the context owner will accept (<b>TRUE</b>) or reject (<b>FALSE</b>) the insertion.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The application was unable to replace the selection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value in the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method should be used to prepare a range to initiate a new composition, before editing begins. It should be used only when the text is not inserted at the current selection. <see cref="ITFInsertAtSelection:InsertTextAtSelection" /> or <see cref="ITfInsertAtSelection.InsertEmbeddedAtSelection" /> are the correct methods to use when text is inserted at the current selection.</para>
      <para>The context owner can use this method to preserve behavior and help maintain a consistent user experience. For example, certain characters or objects in the context can be preserved from modifications, or overtyping can be supported.</para>
      <para>This method is not necessary when modifying an existing composition. It is acceptable to call <b>ITfRange.SetText</b> directly to modify text previously entered by the caller.</para>
      <para>On exit, if <i>*pfInsertOk</i> is set to <b>FALSE</b>, a future call to <b>ITfRange.SetText</b> or <see cref="ITfRange.InsertEmbedded" /> with this range is likely to fail. Otherwise, <i>*pfInsertOk</i> will be set to <b>TRUE</b>, and the range start anchor or end anchor can be repositioned at the discretion of the context owner.</para>
    </remarks>
    <seealso cref="ITFInsertAtSelection:InsertTextAtSelection " />
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfInsertAtSelection.InsertEmbeddedAtSelection " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.InsertEmbedded " />
    <seealso cref="ITfRange.SetText " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.Clone">
    <summary>
      <para>The <b>ITfRange.Clone</b> method duplicates this range of text.</para>
    </summary>
    <param name="ppClone">
      <para>Pointer to a new range object that references this range.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The method was unable to generate a pointer to the new range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The resulting new range object can be modified without affecting the original. However, modifying the document that contains the new range might cause the original range's anchors to be repositioned.</para>
      <para>The gravity of the original is preserved in the new range.</para>
    </remarks>
    <seealso cref="ITfRange" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Ranges</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.Collapse">
    <summary>
      <para>The <b>ITfRange.Collapse</b> method clears the range of text by moving its start anchor and end anchor to the same position.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="aPos">
      <para>
        <see cref="TfAnchor " /> enumeration that describes how to collapse the range.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_ANCHOR_START</b>
          </description>
          <description>
            <para>The end anchor is moved to the location of the start anchor.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_ANCHOR_END</b>
          </description>
          <description>
            <para>The start anchor is moved to the location of the end anchor.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The object does not support the interface, or a new range cannot be created.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>aPos</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The cookie in <i>ec</i> is invalid, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange.CompareEnd">
    <summary>
      <para>The <b>ITfRange.CompareEnd</b> method compares the end anchor position of this range of text to an anchor in another range.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pWith">
      <para>Pointer to a specified range in which an anchor is to be compared with this range end anchor.</para>
    </param>
    <param name="aPos">
      <para>Enumeration element that indicates which anchor of the specified <i>pWith</i> range to compare with this range end anchor.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_ANCHOR_START</b>
          </description>
          <description>
            <para>Compare this range end anchor with the specified range start anchor.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_ANCHOR_END</b>
          </description>
          <description>
            <para>Compare this range end anchor with the specified range end anchor.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="plResult">
      <para>Pointer to the result of the comparison between this range end anchor and the anchor of the specified <i>pWith</i> range.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>-1</b>
          </description>
          <description>
            <para>This end anchor is behind the anchor of the specified range (position of this end anchor &lt; position of the anchor of the specified range).</para>
          </description>
        </item>
        <item>
          <description>
            <b>0</b>
          </description>
          <description>
            <para>This end anchor is at the same position as the anchor of the specified range.</para>
          </description>
        </item>
        <item>
          <description>
            <b>+1</b>
          </description>
          <description>
            <para>This end anchor is ahead of the anchor of the specified range (position of this end anchor &gt; position of the anchor of the specified range).</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method will never return 0 unless the two anchors are in a single region. If the caller only requires information about whether the two anchors are positioned at the same location, <see cref="ITfRange.IsEqualEnd" /> is more efficient.</para>
      <para>This method is identical to <see cref="ITfRange.CompareStart" />, except that the end anchor of this range is compared to an anchor of another specified range.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.CompareStart " />
    <seealso cref="ITfRange.IsEqualEnd " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange.CompareStart">
    <summary>
      <para>The <b>ITfRange.CompareStart</b> method compares the start anchor position of this range of text to an anchor in another range.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pWith">
      <para>Pointer to a specified range in which an anchor is to be compared to this range start anchor.</para>
    </param>
    <param name="aPos">
      <para>Enumeration element that indicates which anchor of the specified <i>pWith</i> range to compare to this range start anchor.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_ANCHOR_START</b>
          </description>
          <description>
            <para>Compare this range start anchor with the specified range start anchor.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_ANCHOR_END</b>
          </description>
          <description>
            <para>Compare this range start anchor with the specified range end anchor.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="plResult">
      <para>Pointer to the result of the comparison between this range start anchor and the specified <i>pWith</i> range anchor.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>-1</b>
          </description>
          <description>
            <para>This start anchor is behind the anchor of the specified range (position of this start anchor &lt; position of the anchor of the specified range).</para>
          </description>
        </item>
        <item>
          <description>
            <b>0</b>
          </description>
          <description>
            <para>This start anchor is at the same position as the anchor of the specified range.</para>
          </description>
        </item>
        <item>
          <description>
            <b>+1</b>
          </description>
          <description>
            <para>This start anchor is ahead of the anchor of the specified range (position of this start anchor &gt; position of the anchor of the specified range).</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method will never return 0 unless the two anchors are in a single region. If the caller only requires information about whether the two anchors are positioned at the same location, <see cref="ITfRange.IsEqualStart" /> is more efficient.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.CompareEnd " />
    <seealso cref="ITfRange.IsEqualStart " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange.GetContext">
    <summary>
      <para>Obtains the context object to which the range belongs.</para>
    </summary>
    <param name="ppContext">
      <para>Pointer to an <see cref="ITfContext" /> interface pointer that receives the context object that the range belongs to.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppContext</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfContext " />
    <seealso cref="ITfRange" />
  </member>
  <member name="ITfRange.GetEmbedded">
    <summary>
      <para>The <b>ITfRange.GetEmbedded</b> method obtains content that corresponds to a <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-char--constants">TS_CHAR_EMBEDDED</a> character in the text stream. The start anchor of the range of text is positioned just before the character of interest.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="rguidService">
      <para>Identifier that specifies how the embedded content is obtained.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GUID_TS_SERVICE_ACCESSIBLE</b>
          </description>
          <description>
            <para>Output should be an <a href="https://docs.microsoft.com//windows/desktop/WinAuto/accessible-objects">Accessible object</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GUID_TS_SERVICE_ACTIVEX</b>
          </description>
          <description>
            <para>Caller requires a direct pointer to the object that supports the interface specified by <i>riid</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GUID_TS_SERVICE_DATAOBJECT</b>
          </description>
          <description>
            <para>Content should be obtained as an <see cref="IDataObject" /> data transfer object, with <i>riid</i> being IID_IDataObject. Clients should specify this option when a copy of the content is required.</para>
          </description>
        </item>
        <item>
          <description>
            <b>Caller-defined</b>
          </description>
          <description>
            <para>Text services and context owners can define custom GUIDs.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="riid">
      <para>UUID of the interface of the requested object.</para>
    </param>
    <param name="ppunk">
      <para>Pointer to the object. It can be cast to match <i>riid</i>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The implementing application does not expose embedded objects in its text stream.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>The object does not support the requested interface.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value in the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOOBJECT</b>
            </para>
          </description>
          <description>
            <para>The start anchor of the range is not positioned before a TF_CHAR_EMBEDDED character.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOSERVICE</b>
            </para>
          </description>
          <description>
            <para>The content cannot be returned to match <i>rguidService</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>While the obtained object might not support certain interfaces, it is likely that the object will support those interfaces associated with embedded documents or controls such as <b>IOleObject</b>, <b>IDataObject</b>, <b>IViewObject</b>, <b>IPersistStorage</b>, <b>IOleCache</b>, or <b>IDispatch</b>. The caller must use <b>QueryInterface</b> to probe for any interesting interface. If the method succeeds but <i>riid</i> is <b>NULL</b>, the application indicates the presence of an embedded object but does not expose the object itself. Text processors can still benefit from a notification about the potential word break.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WinAuto/accessible-objects">Accessible Objects</seealso>
    <seealso cref="IDataObject" />
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.InsertEmbedded " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">Miscellaneous Framework Constants</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.GetFormattedText">
    <summary>
      <para>The <b>ITfRange.GetFormattedText</b> method obtains formatted content contained within a range of text. The content is packaged in an object that supports the <see cref="IDataObject" /> interface.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="ppDataObject">
      <para>Pointer to an <b>IDataObject</b> pointer that receives an object that contains the formatted content. The formatted content is obtained using a STGMEDIUM global memory handle.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The context owner does not support exporting formatted text as an <b>IDataObject</b> object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The format and storage type of the <b>IDataObject</b> are determined by the application to which the range belongs.</para>
    </remarks>
    <seealso cref="IDataObject" />
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.GetGravity">
    <summary>
      <para>Obtains the gravity of the anchors in the object.</para>
    </summary>
    <param name="pgStart">
      <para>Pointer to a <see cref="TfGravity" /> value that receives the gravity of the start anchor.</para>
    </param>
    <param name="pgEnd">
      <para>Pointer to a <b>TfGravity</b> value that receives the gravity of the end anchor.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Anchor Gravity</seealso>
    <seealso cref="ITfDocumentMgr.CreateContext" />
    <seealso cref="ITfEditSession.DoEditSession" />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.SetGravity" />
    <seealso cref="TfGravity" />
  </member>
  <member name="ITfRange.GetText">
    <summary>
      <para>The <b>ITfRange.GetText</b> method obtains the content covered by this range of text.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="dwFlags">
      <para>Bit fields that specify optional behavior.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_TF_MOVESTART</b>
          </description>
          <description>
            <para>Start anchor of the range is advanced to the position after the last character returned.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_TF_IGNOREEND</b>
          </description>
          <description>
            <para>Method attempts to fill <i>pchText</i> with the maximum number of characters, instead of halting the copy at the position occupied by the end anchor of the range.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pchText">
      <para>Pointer to a buffer to receive the text in the range.</para>
    </param>
    <param name="cchMax">
      <para>Maximum size of the text buffer.</para>
    </param>
    <param name="pcch">
      <para>Pointer to a ULONG representing the number of characters written to the <i>pchText</i> text buffer.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tf-tf--constants">TF_TF_* Constants</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.InsertEmbedded">
    <summary>
      <para>The <b>ITfRange.InsertEmbedded</b> method inserts an object at the location of the start anchor of the range of text.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="dwFlags">
      <para>Bit fields that specify how insertion should occur. If <a href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">TF_IE_CORRECTION</a> is set, the operation is a correction, so that other text services can preserve data associated with the original text.</para>
    </param>
    <param name="pDataObject">
      <para>Pointer to the data transfer object to be inserted.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The implementing application does not expose embedded objects in its stream.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_COMPOSITION_REJECTED</b>
            </para>
          </description>
          <description>
            <para>The context owner rejected a default composition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The context owner cannot handle the specified object type.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_RANGE_NOT_COVERED</b>
            </para>
          </description>
          <description>
            <para>The caller already has an active composition, but the range is positioned over text not covered by the composition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_READONLY</b>
            </para>
          </description>
          <description>
            <para>The document or the location of the range cannot be modified.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this method to insert objects into the text stream, because the <a href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">TF_CHAR_EMBEDDED</a> object placeholder character cannot be passed into <see cref="ITfRange.SetText" />. This method is modeled after the OLE clipboard API, with applications using <i>pDataObject</i> as they would an <see cref="IDataObject" /> returned from OleGetClipboard.</para>
      <para>When a range covers multiple regions, the method should be called on each region separately. Otherwise, the method might fail.</para>
      <para>By default, text services start and end a temporary composition that covers the range, to ensure that context owners consistently recognize compositions over edited text. If the composition owner rejects a default composition, then the method returns TF_E_COMPOSITION_REJECTED. Default compositions are only created if the caller has not already started one. If the caller has an active composition, the call fails.</para>
      <para>To determine in advance whether a context owner supports insertion of a particular object, use <see cref="ITfQueryEmbedded.QueryInsertEmbedded" />.</para>
    </remarks>
    <seealso cref="IDataObject" />
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.GetEmbedded " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">Miscellaneous Framework Constants</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.IsEmpty">
    <summary>
      <para>The <b>ITfRange.IsEmpty</b> method verifies that the range of text is empty because the start and end anchors occupy the same position.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie that identifies the edit context. It is obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pfEmpty">
      <para>Pointer to a Boolean value. <b>TRUE</b> indicates the range is empty; <b>FALSE</b> indicates the range is not empty.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
  </member>
  <member name="ITfRange.IsEqualEnd">
    <summary>
      <para>The <see cref="ITfRange.IsEqualStart" /> method verifies that the end anchor of this range of text matches an anchor of another specified range.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pWith">
      <para>Pointer to a specified range in which an anchor is to be compared to this range end anchor.</para>
    </param>
    <param name="aPos">
      <para>Enumeration element that indicates which anchor of the specified <i>pWith</i> range to compare with this range end anchor.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_ANCHOR_START</b>
          </description>
          <description>
            <para>Compares this range end anchor with the specified range start anchor.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_ANCHOR_END</b>
          </description>
          <description>
            <para>Compares this range end anchor with the specified range end anchor.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pfEqual">
      <para>Pointer to a Boolean value. Upon return, <b>TRUE</b> indicates that the specified <i>pWith</i> range anchor matches this range end anchor. <b>FALSE</b> indicates otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is identical to <b>ITfRange.IsEqualStart</b>, except that the end anchor of this range is compared to an anchor of another specified range.</para>
      <para>This method is functionally equivalent to, but more efficient than, <see cref="ITfRange.CompareEnd" />.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.CompareEnd " />
    <seealso cref="ITfRange:IsEqualStart " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange.IsEqualStart">
    <summary>
      <para>The <b>ITfRange.IsEqualStart</b> method verifies that the start anchor of this range of text matches an anchor of another specified range.</para>
    </summary>
    <param name="ec">
      <para>Edit cookie obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pWith">
      <para>Pointer to a specified range in which an anchor is to be compared to this range start anchor.</para>
    </param>
    <param name="aPos">
      <para>Enumeration element that indicates which anchor of the specified <i>pWith</i> range to compare to this range start anchor.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_ANCHOR_START</b>
          </description>
          <description>
            <para>Compares this range start anchor with the specified range start anchor.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_ANCHOR_END</b>
          </description>
          <description>
            <para>Compares this range start anchor with the specified range end anchor.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pfEqual">
      <para>Pointer to a Boolean value. Upon return, <b>TRUE</b> indicates that the specified <i>pWith</i> range anchor matches this range start anchor. <b>FALSE</b> indicates otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is identical to, but more efficient than, <see cref="ITfRange.CompareStart" />.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.CompareStart " />
    <seealso cref="ITfRange:IsEqualEnd " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange.SetGravity">
    <summary>
      <para>Sets the gravity of the anchors in the object.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="gStart">
      <para>Contains one of the <see cref="TfGravity" /> values that specifies the gravity of the start anchor.</para>
    </param>
    <param name="gEnd">
      <para>Contains one of the <b>TfGravity</b> values that specifies the gravity of the end anchor.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The cookie in <i>ec</i> is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Anchor Gravity</seealso>
    <seealso cref="ITfDocumentMgr.CreateContext" />
    <seealso cref="ITfEditSession.DoEditSession" />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.GetGravity" />
    <seealso cref="TfGravity" />
  </member>
  <member name="ITfRange.SetText">
    <summary>
      <para>The <b>ITfRange.SetText</b> method replaces the content covered by the range of text. For an empty range object, the method results in an insertion at the location of the range. If the new content is an empty string (<i>cch</i> = 0), the method deletes the existing content within the range.</para>
    </summary>
    <param name="ec">
      <para>Identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="dwFlags">
      <para>Specifies optional behavior for correction of content. If set to the value of <a href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">TF_ST_CORRECTION</a>, then the operation is a correction of the existing content, not a creation of new content, and original text properties are preserved.</para>
    </param>
    <param name="pchText">
      <para>Pointer to a buffer that contains the text to replace the range contents.</para>
    </param>
    <param name="cch">
      <para>Contains the number of characters in <i>pchText</i>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_COMPOSITION_REJECTED</b>
            </para>
          </description>
          <description>
            <para>The context owner rejected a default composition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The value of the <i>ec</i> parameter is an invalid cookie, or the caller does not have a read/write lock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_RANGE_NOT_COVERED</b>
            </para>
          </description>
          <description>
            <para>The range is not within the active composition of the caller.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a range covers multiple regions, call <b>ITfRange.SetText</b> on each region separately. Otherwise, the method can fail.</para>
      <para>By default, text services start and end a temporary composition that covers the range, to ensure that context owners consistently recognize compositions over edited text. If the composition owner rejects a default composition, then the method returns TF_E_COMPOSITION_REJECTED. Default compositions are only created if the caller has not already started one. If the caller has an active composition, the call fails.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">TF_CHAR_EMBEDDED</a> object placeholder character might not be passed into this method. <see cref="ITfRange.InsertEmbedded" /> should be used instead.</para>
      <para>For inserting text, the <see cref="ITFInsertAtSelection:InsertTextAtSelection" /> method does not require a selection range to be allocated, and avoids the requirement that the range match the selection.</para>
    </remarks>
    <seealso cref="ITFInsertAtSelection:InsertTextAtSelection " />
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.GetText " />
    <seealso cref="ITfRange.InsertEmbedded " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">Miscellaneous Framework Constants</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-stores">Text Stores</seealso>
  </member>
  <member name="ITfRange.ShiftEnd">
    <summary>
      <para>Moves the end anchor of the range.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context. This is obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="cchReq">
      <para>Contains the number of characters that the end anchor is shifted. A negative value causes the anchor to move backward and a positive value causes the anchor to move forward.</para>
    </param>
    <param name="pcch">
      <para>Pointer to a <b>LONG</b> value that receives the number of characters the anchor shifted.</para>
    </param>
    <param name="pHalt">
      <para>Pointer to a <see cref="TF_HALTCOND" /> structure that contains conditions on the shift. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are called anchors.</para>
      <para>This method cannot move an anchor beyond a region boundary. If the shift reaches a region boundary, the number of characters actually shifted will be less than requested. <see cref="ITfRange.ShiftEndRegion" /> is used to shift the anchor to an adjacent region.</para>
      <para>If the shift operation causes the range end anchor to move past the start anchor, the start anchor is moved to the same location as the end anchor.</para>
      <para>ITfRange.ShiftEnd can be a lengthy operation. For better performance, use <see cref="ITfRange.ShiftEndToRange" /> when possible.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.ShiftEndRegion " />
    <seealso cref="ITfRange.ShiftStart " />
    <seealso cref="TF_HALTCOND " />
  </member>
  <member name="ITfRange.ShiftEndRegion">
    <summary>
      <para>Moves the end anchor into an adjacent region.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="dir">
      <para>Contains one of the <see cref="TfShiftDir" /> values that specify which adjacent region the end anchor is moved to.</para>
    </param>
    <param name="pfNoRegion">
      <para>Pointer to a <b>BOOL</b> value that receives a flag that indicates if the anchor is positioned adjacent to another region. Receives a nonzero value if the anchor is not adjacent to another region or zero otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pfNoRegion</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are known as anchors.</para>
      <para>The anchor must be positioned adjacent to the desired region prior to calling this method. If it is not, then <i>pfNoRegion</i> receives a nonzero value and the anchor is not moved. If the anchor is adjacent to the desired region, <i>pfNoRegion</i> receives zero and the anchor is moved into the region.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.ShiftEnd " />
    <seealso cref="ITfRange.ShiftStart " />
    <seealso cref="ITfRange.ShiftStartRegion " />
    <seealso cref="TfShiftDir " />
  </member>
  <member name="ITfRange.ShiftEndToRange">
    <summary>
      <para>Moves the end anchor of this range to an anchor within another range.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pRange">
      <para>Pointer to an <see cref="ITfRange" /> interface that contains the anchor that the end anchor is moved to.</para>
    </param>
    <param name="aPos">
      <para>Contains one of the <see cref="TfAnchor" /> values that specify which anchor of <i>pRange</i> the end anchor will get moved to.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pRange</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are called anchors.</para>
      <para>If the shift operation causes the range end anchor to move past the start anchor, the start anchor is moved to the same location as the end anchor.</para>
      <para>This method is more efficient than <see cref="ITfRange.ShiftEnd" /> and should be used.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange " />
    <seealso cref="ITfRange.ShiftEnd " />
    <seealso cref="ITfRange.ShiftStartToRange " />
  </member>
  <member name="ITfRange.ShiftStart">
    <summary>
      <para>Moves the start anchor of the range.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context. This is obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="cchReq">
      <para>Contains the number of characters the start anchor is shifted. A negative value causes the anchor to move backward and a positive value causes the anchor to move forward.</para>
    </param>
    <param name="pcch">
      <para>Pointer to a <b>LONG</b> value that receives the number of characters the anchor was shifted.</para>
    </param>
    <param name="pHalt">
      <para>Pointer to a <see cref="TF_HALTCOND" /> structure that contains conditions about the shift. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are called anchors.</para>
      <para>This method cannot move an anchor beyond a region boundary. If the shift reaches a region boundary, the number of characters actually shifted will be less than requested. <see cref="ITfRange.ShiftStartRegion" /> is used to shift the anchor to an adjacent region.</para>
      <para>If the shift operation causes the range start anchor to move past the end anchor, the end anchor is moved to the same location as the start anchor.</para>
      <para>
        <b>ITfRange.ShiftStart</b> can be a lengthy operation. For better performance, use <see cref="ITfRange.ShiftStartToRange" /> when possible.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.ShiftEnd " />
    <seealso cref="ITfRange.ShiftStartRegion " />
    <seealso cref="ITfRange.ShiftStartToRange " />
    <seealso cref="TF_HALTCOND " />
  </member>
  <member name="ITfRange.ShiftStartRegion">
    <summary>
      <para>Moves the start anchor into an adjacent region.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="dir">
      <para>Contains one of the <see cref="TfShiftDir" /> values that specifies which adjacent region the start anchor is moved to.</para>
    </param>
    <param name="pfNoRegion">
      <para>Pointer to a <b>BOOL</b> that receives a flag that indicates if the anchor is positioned adjacent to another region. Receives a nonzero value if the anchor is not adjacent to another region or zero otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pfNoRegion</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are called anchors.</para>
      <para>The anchor must be positioned adjacent to the desired region prior to calling this method. If it is not, then <i>pfNoRegion</i> receives a nonzero value and the anchor is not moved. If the anchor is adjacent to the desired region, <i>pfNoRegion</i> receives zero and the anchor is moved to the region.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange" />
    <seealso cref="ITfRange.ShiftEndRegion " />
    <seealso cref="ITfRange.ShiftStart " />
    <seealso cref="TfShiftDir " />
  </member>
  <member name="ITfRange.ShiftStartToRange">
    <summary>
      <para>Moves the start anchor of this range to an anchor within another range.</para>
    </summary>
    <param name="ec">
      <para>Contains an edit cookie that identifies the edit context obtained from <see cref="ITfDocumentMgr.CreateContext" /> or <see cref="ITfEditSession.DoEditSession" />.</para>
    </param>
    <param name="pRange">
      <para>Pointer to an <see cref="ITfRange" /> interface that contains the anchor that the start anchor is moved to.</para>
    </param>
    <param name="aPos">
      <para>Contains one of the <see cref="TfAnchor" /> values that specifies which anchor of <i>pRange</i> the start anchor is moved to.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pRange</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The edit context identified by <i>ec</i> does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The start and end positions of a range are called anchors.</para>
      <para>If the shift operation causes the range start anchor to move past the end anchor, the end anchor is moved to the same location as the start anchor.</para>
      <para>This method is more efficient than <see cref="ITfRange.ShiftStart" /> and should be used when possible.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr.CreateContext " />
    <seealso cref="ITfEditSession.DoEditSession " />
    <seealso cref="ITfRange " />
    <seealso cref="ITfRange.ShiftEndToRange " />
    <seealso cref="TfAnchor " />
  </member>
  <member name="ITfRange">
    <summary>
      <para>The <b>ITfRange</b> interface is used by text services and applications to reference and manipulate text within a given context. The interface ID is IID_ITfRange.</para>
    </summary>
    <remarks>
      <para>The TSF manager implements this interface. For more information about ranges, anchors, embedded objects, and other text properties used by TSF, see <a href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Ranges</a>, <a href="https://docs.microsoft.com//windows/desktop/TSF/embedded-objects">Embedded Objects</a>, and other topics within <a href="https://docs.microsoft.com//windows/desktop/TSF/using-text-services-framework">Using Text Services Framework</a>.</para>
      <h4>Examples</h4>
      <para>Once an <see cref="ITfComposition" /> composition object is instantiated, a pointer to an <b>ITfRange</b> interface pointer can be obtained by calling the <see cref="ITfComposition.GetRange" /> method, as shown in the following code example.</para>
      <code>
HRESULT         hr;
ITfComposition  *pComposition;
ITfRange        *pRange;
WCHAR           *achBuffer[64];  // Buffer to receive text.
ULONG           cch;

hr = pComposition-&gt;GetRange(&amp;amp;amp;amp;amp;amp;pRange);
if(SUCCEEDED(hr))
{
    // Loop to scan text:

    do
    {
        cch = ARRAYSIZE(achBuffer);
        hr = pRange-&gt;GetText(ec, TF_TF_MOVESTART | TF_TF_IGNOREEND, achBuffer, cch, &amp;amp;amp;amp;amp;amp;cch);
        if(SUCCEEDED(hr))
        {
            // Do something with the text.

            pRange-&gt;Release();
        }
    }
    while (cch == ARRAYSIZE(achBuffer));

    pComposition-&gt;Release();
}

</code>
      <para>A pointer to a current <b>ITfRange</b> object can be obtained from the &lt;range&gt; element of the <see cref="TF_SELECTION" /> structure.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/compositions">Compositions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/embedded-objects">Embedded Objects</seealso>
    <seealso cref="ITfComposition " />
    <seealso cref="ITfComposition.GetRange " />
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Ranges</seealso>
    <seealso cref="TF_SELECTION " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/using-text-services-framework">Using Text Services Framework</seealso>
  </member>
</doc>