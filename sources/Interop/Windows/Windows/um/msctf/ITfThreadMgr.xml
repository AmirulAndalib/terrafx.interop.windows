<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITfThreadMgr.Activate">
    <summary>
      <para>Activates TSF for the calling thread.</para>
    </summary>
    <param name="ptid">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/TSF/tfclientid">TfClientId</a> value that receives a client identifier.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ptid</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>This method was called while the thread was deactivating.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method can be called more than once from a thread, but each call must be matched with a corresponding call to <see cref="ITfThreadMgr.Deactivate" /> from the same thread.</para>
    </remarks>
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.Deactivate " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tfclientid">TfClientId
</seealso>
  </member>
  <member name="ITfThreadMgr.AssociateFocus">
    <summary>
      <para>Associates the focus for a window with a document manager object.</para>
    </summary>
    <param name="hwnd">
      <para>Handle of the window to associate the focus with.</para>
    </param>
    <param name="pdimNew">
      <para>Pointer to the document manager to associate the focus with. The TSF manager does not increment the object reference count. This value can be <b>NULL</b>.</para>
    </param>
    <param name="ppdimPrev">
      <para>Receives the document manager previously associated with the window. Receives <b>NULL</b> if there is no previous association. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method is provided as a convenience to the application developer. Associating the focus for a window with a document manager causes the TSF manager to automatically call <see cref="ITfThreadMgr.SetFocus" /> with the associated document manager when the associated window receives the focus.</para>
      <para>This method can only associate a single window with a single document manager. If the implementation associates multiple document managers with a single window, or the opposite, the implementation must call <b>ITfThreadMgr.SetFocus</b> to set the focus to the proper document manager.</para>
      <para>To restore the previous focus association, call this method with the same window handle and the value returned in the original call <i>ppdimPrev</i> for <i>pdimNew</i>. The following is an example.</para>
      <code>
//associate the focus for m_hwnd with m_pDocMgr
pThreadMgr-&gt;AssociateFocus(m_hwnd, m_pDocMgr, &amp;amp;amp;amp;amp;amp;m_pPrevDocMgr);



//Restore the original focus association.
ITfDocumentMgr *pTempDocMgr = NULL;

pThreadMgr-&gt;AssociateFocus(m_hwnd, m_pPrevDocMgr, &amp;amp;amp;amp;amp;amp;pTempDocMgr);

if(pTempDocMgr)
{
    pTempDocMgr-&gt;Release();
}

if(m_pPrevDocMgr)
{
    m_pPrevDocMgr-&gt;Release();
}

</code>
    </remarks>
    <seealso cref="ITfDocumentMgr " />
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.SetFocus " />
  </member>
  <member name="ITfThreadMgr.CreateDocumentMgr">
    <summary>
      <para>Creates a document manager object.</para>
    </summary>
    <param name="ppdim">
      <para>Pointer to an <see cref="ITfDocumentMgr" /> interface that receives the document manager object.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppdim</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation failure occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller must release the document manager when it is no longer required.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr " />
    <seealso cref="ITfThreadMgr" />
  </member>
  <member name="ITfThreadMgr.Deactivate">
    <summary>
      <para>Deactivates TSF for the calling thread.</para>
    </summary>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>This method was called while the thread was activating or this call had no corresponding <see cref="ITfThreadMgr.Activate" /> call.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Each call to this method must be matched with a previous call to <b>ITfThreadMgr.Activate</b> . This method must be called from the same thread that the corresponding <b>ITfThreadMgr.Activate</b> call was made from.</para>
    </remarks>
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.Activate " />
  </member>
  <member name="ITfThreadMgr.EnumDocumentMgrs">
    <summary>
      <para>Returns an enumerator for all the document managers within the calling thread.</para>
    </summary>
    <param name="ppEnum">
      <para>Pointer to a <see cref="IEnumTfDocumentMgrs" /> interface that receives the enumerator.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppEnum</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation failure occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller must release the enumerator when it is no longer required.</para>
    </remarks>
    <seealso cref="IEnumTfDocumentMgrs " />
    <seealso cref="ITfThreadMgr" />
  </member>
  <member name="ITfThreadMgr.EnumFunctionProviders">
    <summary>
      <para>Obtains an enumerator for all of the function providers registered for the calling thread.</para>
    </summary>
    <param name="ppEnum">
      <para>Address of a <see cref="IEnumTfFunctionProviders" /> interface that receives the function provider enumerator.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppEnum</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation failure occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The enumerator only contains the registered function providers. The enumerator will not contain the predefined function providers as described in <see cref="ITfThreadMgr.GetFunctionProvider" />.</para>
      <para>A function provider registers itself by calling the TSF manager <see cref="ITfSourceSingle.AdviseSingleSink" /> method with IID_ITfFunctionProvider.</para>
    </remarks>
    <seealso cref="IEnumTfFunctionProviders " />
    <seealso cref="ITfSourceSingle.AdviseSingleSink " />
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.GetFunctionProvider " />
  </member>
  <member name="ITfThreadMgr.GetFocus">
    <summary>
      <para>Returns the document manager that has the input focus.</para>
    </summary>
    <param name="ppdimFocus">
      <para>Pointer to a <see cref="ITfDocumentMgr" /> interface that receives the document manager with the current input focus. Receives <b>NULL</b> if no document manager has the focus.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>No document manager has focus. <i>ppdimFocus</i> be set to <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppdimFocus</i> is invalid.
</description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfDocumentMgr " />
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.AssociateFocus " />
    <seealso cref="ITfThreadMgr.SetFocus " />
  </member>
  <member name="ITfThreadMgr.GetFunctionProvider">
    <summary>
      <para>Obtains the specified function provider object.</para>
    </summary>
    <param name="clsid">
      <para>CLSID of the desired function provider. This can be the CLSID of a function provider registered for the calling thread or one of the following predefined values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GUID_SYSTEM_FUNCTIONPROVIDER</b>
          </description>
          <description>
            <para>Obtains the TSF system function provider.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GUID_APP_FUNCTIONPROVIDER</b>
          </description>
          <description>
            <para>Obtains the function provider implemented by the current application. This object is not available if the application does not register itself as a function provider.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppFuncProv">
      <para>Pointer to a <see cref="ITfFunctionProvider" /> interface that receives the function provider.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOPROVIDER</b>
            </para>
          </description>
          <description>
            <para>No function provider matching <i>clsid</i> was available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>GUID_SYSTEM_FUNCTIONPROVIDER was requested, but cannot be obtained.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A function provider registers by calling the TSF manager <see cref="ITfSourceSingle.AdviseSingleSink" /> method with IID_ITfFunctionProvider.</para>
    </remarks>
    <seealso cref="ITfFunctionProvider " />
    <seealso cref="ITfSourceSingle.AdviseSingleSink " />
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.EnumFunctionProviders " />
  </member>
  <member name="ITfThreadMgr.GetGlobalCompartment">
    <summary>
      <para>Obtains the global compartment manager object.</para>
    </summary>
    <param name="ppCompMgr">
      <para>Pointer to a <see cref="ITfCompartmentMgr" /> interface that receives the global compartment manager.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppCompMgr</i> is invalid.
</description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfCompartmentMgr " />
    <seealso cref="ITfThreadMgr" />
  </member>
  <member name="ITfThreadMgr.IsThreadFocus">
    <summary>
      <para>Determines if the calling thread has the TSF input focus.</para>
    </summary>
    <param name="pfThreadFocus">
      <para>Pointer to a BOOL that receives a value that indicates if the calling thread has input focus. This parameter receives a nonzero value if the calling thread has the focus or zero otherwise.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pfThreadFocus</i> is invalid.
</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ITfThreadMgr.SetFocus">
    <summary>
      <para>Sets the input focus to the specified document manager.</para>
    </summary>
    <param name="pdimFocus">
      <para>Pointer to a <see cref="ITfDocumentMgr" /> interface that receives the input focus. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pdimFocus</i> is invalid.
</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The application must call this method when the document window receives the input focus. If the application associates a window with a document manager using <see cref="ITfThreadMgr.AssociateFocus" />, the TSF manager calls this method for the application.</para>
    </remarks>
    <seealso cref="ITfDocumentMgr " />
    <seealso cref="ITfThreadMgr" />
    <seealso cref="ITfThreadMgr.AssociateFocus " />
    <seealso cref="ITfThreadMgr.GetFocus " />
  </member>
  <member name="ITfThreadMgr">
    <summary>
      <para>The <b>ITfThreadMgr</b> defines the primary object implemented by the TSF manager. <b>ITfThreadMgr</b> is used by applications and text services to activate and deactivate text services, create document managers, and maintain the document context focus.</para>
    </summary>
    <remarks>
      <para>An application obtains a pointer to this interface by calling <see cref="CoCreateInstance" /> with CLSID_TF_ThreadMgr as demonstrated below.</para>
      <para>A text service receives a pointer to this interface in its <see cref="ITfTextInputProcessor.Activate" /> method.</para>
      <h4>Examples</h4>
      <code>
HRESULT hr;
ITfThreadMgr* pThreadMgr;

hr = CoCreateInstance(  CLSID_TF_ThreadMgr,
                        NULL,
                        CLSCTX_INPROC_SERVER,
                        IID_ITfThreadMgr,
                        (void**)&amp;amp;amp;amp;amp;amp;pThreadMgr);

</code>
    </remarks>
    <seealso cref="CoCreateInstance" />
    <seealso cref="ITfTextInputProcessor.Activate " />
    <seealso cref="IUnknown" />
  </member>
</doc>