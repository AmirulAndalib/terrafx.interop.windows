<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.GetLocalManagedApplications">
    <summary>The<b>GetLocalManagedApplications</b> function can be run on the target computer to get a list of managed applications on that computer. The function can also be called in the context of a user to get a list of managed applications for that user. This function only returns applications that can be installed by the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a>.</summary>
    <param name="bUserApps">A value that, if <b>TRUE</b>, the <i>prgLocalApps</i> parameter contains a list of managed applications that applies to the user. If the value of this parameter is <b>FALSE</b>, the <i>prgLocalApps</i> parameter contains a list of managed applications that applies to the local computer.</param>
    <param name="pdwApps">The address of a <b>DWORD</b> that specifies the number of applications in the list returned by <i>prgLocalApps</i>.</param>
    <param name="prgLocalApps">The address of an array that contains the list of managed applications. You must call <b>LocalFree</b> to free this array when its contents are no longer required. This parameter cannot be null. The list is returned as a <see cref="LOCALMANAGEDAPPLICATION" /> structure.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</returns>
  </member>
  <member name="Windows.GetManagedApplicationCategories">
    <summary>The<b>GetManagedApplicationCategories</b> function gets a list of application categories for a domain. The list is the same for all users in the domain.</summary>
    <param name="dwReserved">This parameter is reserved. Its value must be 0.</param>
    <param name="pAppCategory">A <see cref="APPCATEGORYINFOLIST" /> structure that contains a list of application categories. This structure must be freed by calling <see cref="LocalFree" /> when the list is no longer required.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</returns>
  </member>
  <member name="Windows.GetManagedApplications">
    <summary>The<b>GetManagedApplications</b> function gets a list of applications that are displayed in the <b>Add</b> pane of <b>Add/Remove Programs</b> (ARP) for a specified user context.</summary>
    <param name="pCategory">
      <para>A pointer to a GUID that specifies the category</para>
      <para>of applications to be listed. If <i>pCategory</i> is not null, <i>dwQueryFlags</i> must contain <b>MANAGED_APPS_FROMCATEGORY</b>. If <i>pCategory</i> is null, <i>dwQueryFlags</i> cannot contain <b>MANAGED_APPS_FROMCATEGORY</b>.</para>
    </param>
    <param name="dwQueryFlags">
      <para>This parameter can contain one or more of the following values.</para>
      <h4>MANAGED_APPS_USERAPPLICATIONS</h4>
      <para>Lists all applications that apply to the user. The parameter <i>pCategory</i> must be null.</para>
      <h4>MANAGED_APPS_FROMCATEGORY</h4>
      <para>Lists only applications in the category specified by <i>pCategory</i>. The <i>pCategory</i> parameter cannot be null.</para>
    </param>
    <param name="dwInfoLevel">This parameter must be <b>MANAGED_APPS_INFOLEVEL_DEFAULT</b>.</param>
    <param name="pdwApps">The count of applications in the list returned by this function.</param>
    <param name="prgManagedApps">This parameter is a pointer to an array of <see cref="MANAGEDAPPLICATION" /> structures. This array contains the list of applications listed in the <b>Add</b> pane of <b>Add/Remove Programs</b> (ARP). You must call <b>LocalFree</b> to free the array when they array is no longer required.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</returns>
  </member>
  <member name="Windows.InstallApplication">
    <summary>The <b>InstallApplication</b> function can install applications that have been deployed to target users that belong to a domain. The security context of the user that is calling <b>InstallApplication</b> must be that of a domain user logged onto a computer in a domain that trusts the target user's domain. Group Policy must be successfully applied when the target user logs on.</summary>
    <param name="pInstallInfo">A pointer to a <see cref="INSTALLDATA" /> structure that specifies the application to install.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</returns>
  </member>
  <member name="Windows.UninstallApplication">
    <summary>
      <para>The<b>UninstallApplication</b> function uninstalls a group policy application that handles setup and installation using <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> .msi files. The <b>UninstallApplication</b> function should only be called in the context of the user for whom the user group policy application has previously attempted an uninstall by calling the <see cref="MsiConfigureProduct" /> function. The <see cref="InstallApplication" /> function can install group policy applications.</para>
      <div>
        <b>Note</b>  Failure to call <b>UninstallApplication</b> as part of the protocol for uninstalling a group policy-based application can cause the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> to indicate inaccurate information.</div>
    </summary>
    <param name="ProductCode">The <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> product code of the product being uninstalled. The <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> of the application should be provided in the form of a <a href="https://docs.microsoft.com//windows/desktop/Msi/guid">Windows Installer GUID</a> as a string with braces.</param>
    <param name="dwStatus">The status of the uninstall attempt. The <i>dwStatus</i> parameter is the Windows success code of the uninstall attempt returned by <see cref="MsiConfigureProduct" />. The system can use this to ensure that the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> indicates whether the uninstall failed or succeeded.</param>
    <returns>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</returns>
  </member>
</doc>