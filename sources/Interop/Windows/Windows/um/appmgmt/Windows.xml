<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.GetLocalManagedApplications">
    <summary>
      <para>The
<b>GetLocalManagedApplications</b> function can be run on the target computer to get  a list of managed applications on that computer. The function can also be called in the context of a user to get a list of managed applications for that user. This function only returns applications that can be installed by the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a>.</para>
    </summary>
    <param name="bUserApps">
      <para>A value that, if <b>TRUE</b>, the <i>prgLocalApps</i> parameter contains a list of managed applications that applies to the user.  If the value of this parameter is <b>FALSE</b>, the <i>prgLocalApps</i> parameter contains a list of managed applications that applies to the local computer.</para>
    </param>
    <param name="pdwApps">
      <para>The address of a <b>DWORD</b> that specifies the number of applications in the list returned by <i>prgLocalApps</i>.</para>
    </param>
    <param name="prgLocalApps">
      <para>The address of an array that contains the list of managed applications. You must call <b>LocalFree</b> to free this array when its contents are no longer required. This parameter cannot be null. The list is returned as a <see cref="LOCALMANAGEDAPPLICATION" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/group-policy-functions">Group Policy
Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/about-group-policy">Group Policy
Overview</seealso>
    <seealso cref="LOCALMANAGEDAPPLICATION" />
  </member>
  <member name="Windows.GetManagedApplicationCategories">
    <summary>
      <para>The
<b>GetManagedApplicationCategories</b> function gets a list of application categories for a domain. The list is the same for all users in the domain.</para>
    </summary>
    <param name="dwReserved">
      <para>This parameter is reserved. Its value must be 0.</para>
    </param>
    <param name="pAppCategory">
      <para>A <see cref="APPCATEGORYINFOLIST" /> structure that contains a list of application categories. This structure must be freed by calling <see cref="LocalFree" />  when the list is no longer required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</para>
    </returns>
    <remarks>
      <para>The structure returned by <b>GetManagedApplicationCategories</b> must be freed by calling <see cref="LocalFree" /> when the list is no longer required.</para>
    </remarks>
    <seealso cref="APPCATEGORYINFOLIST" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/group-policy-functions">Group Policy
Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/about-group-policy">Group Policy
Overview</seealso>
  </member>
  <member name="Windows.GetManagedApplications">
    <summary>
      <para>The
<b>GetManagedApplications</b> function gets a list of applications that are displayed in the <b>Add</b> pane of <b>Add/Remove Programs</b> (ARP) for a specified user context.</para>
    </summary>
    <param name="pCategory">
      <para>A pointer to a GUID that specifies the  category</para>
      <para>of applications to be listed. If <i>pCategory</i> is not null, <i>dwQueryFlags</i> must   contain <b>MANAGED_APPS_FROMCATEGORY</b>. If <i>pCategory</i> is null, <i>dwQueryFlags</i> cannot contain <b>MANAGED_APPS_FROMCATEGORY</b>.</para>
    </param>
    <param name="dwQueryFlags">
      <para>This parameter can contain one or more of the following values.</para>
      <h4>MANAGED_APPS_USERAPPLICATIONS</h4>
      <para>Lists all applications that apply to the user. The parameter <i>pCategory</i> must be null.</para>
      <h4>MANAGED_APPS_FROMCATEGORY</h4>
      <para>Lists only applications in the category specified by <i>pCategory</i>.   The <i>pCategory</i> parameter cannot be null.</para>
    </param>
    <param name="dwInfoLevel">
      <para>This parameter must be <b>MANAGED_APPS_INFOLEVEL_DEFAULT</b>.</para>
    </param>
    <param name="pdwApps">
      <para>The count of applications in the list returned by this function.</para>
    </param>
    <param name="prgManagedApps">
      <para>This parameter is a pointer to an array of <see cref="MANAGEDAPPLICATION" /> structures. This array contains the list of applications listed in the <b>Add</b> pane of  <b>Add/Remove Programs</b> (ARP). You must call <b>LocalFree</b> to free the array when they array is no longer required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/group-policy-functions">Group Policy
Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/about-group-policy">Group Policy
Overview</seealso>
  </member>
  <member name="Windows.InstallApplication">
    <summary>
      <para>The <b>InstallApplication</b> function can install applications  that have been deployed to target users that belong to a domain. The security context of the user that is calling <b>InstallApplication</b> must be that of a domain user logged onto a computer in a domain that trusts the target user's domain. Group Policy must be successfully applied when the target user logs on.</para>
    </summary>
    <param name="pInstallInfo">
      <para>A pointer to a <see cref="INSTALLDATA" /> structure that specifies the application to install.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</para>
    </returns>
    <remarks>
      <para>The <b>InstallApplication</b> function can only install applications that have been deployed by using  Group Policy. A domain administrator can deploy applications to  target users by using  the  user configuration section of Group Policy Objects (GPO). The target user must belong to the target domain and the GPO must apply to this  user in the target  domain. The <b>InstallApplication</b> function installs applications according to standard Group Policy inheritance rules.  If the same application is deployed in multiple GPOs, the function installs the version of the application deployed in the highest precedence GPO.  After an application has been  installed for a user, it is not visible to other users on the computer. This is standard for applications that are deployed through user group policy.</para>
      <para>The <b>InstallApplication</b> function can  install deployed applications that  use <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> (.msi files) or software installation settings (.zap files) to handle setup and installation.</para>
      <para>The
<b>InstallApplication</b> function can install applications that use a <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> package for their installation.  In this case,  the  user calling <b>InstallApplication</b> is not required to have administrator privileges. The system can install the application because the  Windows Installer  is a trusted application deployed by a domain administrator. The user that receives the application must have access to the location of the .msi files.</para>
      <para>Remove applications installed using .msi files by calling the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> function <see cref="MsiConfigureProduct" /> to uninstall the application. Then call <see cref="UninstallApplication" />  to  inform the system that the application is no longer managed on the client by Group Policy.  <b>UninstallApplication</b> should be called even if the uninstall fails because this enables the system to keep the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> accurate.</para>
      <para>The
<b>InstallApplication</b> function can also install applications that use setup applications based on software installation settings (.zap files). The user that receives the application must have access to the location of the .zap files. A .zap file is a text file similar to an .ini file, which enables Windows to publish an application (for example, Setup.exe) for installation with <b>Add or Remove Programs</b>. To publish applications that do not use the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a>, you must create a .zap file, copy the .zap file to the software distribution point servers, and then use Group Policy–based software deployment to publish the application for users.
If the application is deployed using .zap files, the user installing the application must have privileges on the machine to install the software. You cannot use .zap files for assigned applications.</para>
      <para>Remove applications using software installation settings (.zap files) by calling the uninstall function or a command  specific for the installation application.</para>
      <para>For information about using installation applications other than  the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> see article 231747, "How to Publish non-MSI Programs with .zap Files," in the Microsoft Knowledge Base.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/group-policy-functions">Group Policy
Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/about-group-policy">Group Policy
Overview</seealso>
    <seealso cref="INSTALLDATA" />
    <seealso cref="MsiConfigureProduct" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Reporting Group Policy</seealso>
    <seealso cref="UninstallApplication" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</seealso>
  </member>
  <member name="Windows.UninstallApplication">
    <summary>
      <para>The
<b>UninstallApplication</b> function uninstalls a group policy  application that handles setup and installation using <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> .msi files. The <b>UninstallApplication</b> function should only be called in the context of the user for whom the user group policy application has previously attempted an uninstall by calling the <see cref="MsiConfigureProduct" /> function. The <see cref="InstallApplication" /> function can install group policy applications.
<b>Note</b>  Failure to call <b>UninstallApplication</b> as part of the protocol for uninstalling a group policy-based application can cause the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> to indicate inaccurate information.</para>
    </summary>
    <param name="ProductCode">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> product code of the product being uninstalled. The <a href="https://docs.microsoft.com//windows/desktop/Msi/product-codes">product code</a> of the application should be provided in the form of  a <a href="https://docs.microsoft.com//windows/desktop/Msi/guid">Windows Installer GUID</a> as a string with braces.</para>
    </param>
    <param name="dwStatus">
      <para>The status of the uninstall attempt. The <i>dwStatus</i> parameter is the Windows success code of the uninstall attempt returned by <see cref="MsiConfigureProduct" />.  The system can use this to ensure that the  <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> indicates whether the uninstall failed or succeeded.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>. Otherwise, the function returns one of the system error codes. For a complete list of error codes, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System Error Codes</a> or the header file WinError.h.</para>
    </returns>
    <remarks>
      <para>Remove a group policy application that uses .msi files by calling  the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> function <see cref="MsiConfigureProduct" /> to uninstall the application. Then call <b>UninstallApplication</b>  to  inform the system that the application is no longer managed on the client by Group Policy.  <b>UninstallApplication</b> should be called even if the uninstall fails because this enables the system to keep the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/reporting-group-policy">Resultant Set of Policy (RSoP)</a> accurate.</para>
      <para>Remove applications installed using software installation settings (.zap files) by calling  the uninstall function or command  specific for the installation application. For information about using installation applications other than  the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-portal">Windows Installer</a> see article 231747, "How to Publish non-MSI Programs with .zap Files," in the Microsoft Knowledge Base.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/group-policy-functions">Group Policy
Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/Policy/about-group-policy">Group Policy
Overview</seealso>
    <seealso cref="InstallApplication" />
    <seealso cref="MsiConfigureProduct" />
  </member>
</doc>