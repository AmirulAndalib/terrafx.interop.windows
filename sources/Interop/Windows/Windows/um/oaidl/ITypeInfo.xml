<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITypeInfo.AddressOfMember">
    <summary>
      <para>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</para>
    </summary>
    <param name="memid">
      <para>The member ID of the static member whose address is to be retrieved. The member ID is defined by the DISPID.</para>
    </param>
    <param name="invKind">
      <para>Indicates whether the member is a property, and if so, what kind.</para>
    </param>
    <param name="ppv">
      <para>The static member.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The addresses are valid until the caller releases its reference to the type description. The <i>invKind</i> parameter can be ignored unless the address of a property function is being requested.</para>
      <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.CreateInstance">
    <summary>
      <para>Creates a new instance of a type that describes a component object class (coclass).</para>
    </summary>
    <param name="pUnkOuter">
      <para>The controlling <b>IUnknown</b>. If Null, then a stand-alone instance is created. If valid, then an aggregate object is created.</para>
    </param>
    <param name="riid">
      <para>An ID for the interface that the caller will use to communicate with the resulting object.</para>
    </param>
    <param name="ppvObj">
      <para>An instance of the created object.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>OLE could not find an implementation of one or more required interfaces.</para>
          </description>
        </item>
      </list>
      <para>Additional errors may be returned from <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-getactiveobject">GetActiveObject</a> or <b>CoCreateInstance</b>.</para>
    </returns>
    <remarks>
      <para>For types that describe a component object class (coclass), <b>CreateInstance</b> creates a new instance of the class. Normally, <b>CreateInstance</b> calls <b>CoCreateInstance</b> with the type description's GUID. For an Application object, it first calls <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-getactiveobject">GetActiveObject</a>. If the application is active, <b>GetActiveObject</b> returns the active object; otherwise, if <b>GetActiveObject</b> fails, <b>CreateInstance</b> calls <b>CoCreateInstance</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetContainingTypeLib">
    <summary>
      <para>Retrieves the containing type library and the index of the type description within that type library.</para>
    </summary>
    <param name="ppTLib">
      <para>The containing type library.</para>
    </param>
    <param name="pIndex">
      <para>The index of the type description within the containing type library.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>OLE could not find an implementation of one or more required interfaces.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetDllEntry">
    <summary>
      <para>Retrieves a description or specification of an entry point for a function in a DLL.</para>
    </summary>
    <param name="memid">
      <para>The ID of the member function whose DLL entry description is to be returned.</para>
    </param>
    <param name="invKind">
      <para>The kind of member identified by <i>memid</i>. This is important for properties, because one <i>memid</i> can identify up to three separate functions.</para>
    </param>
    <param name="pBstrDllName">
      <para>If not null, the function sets <i>pBstrDllName</i> to the name of the DLL.</para>
    </param>
    <param name="pBstrName">
      <para>If not null, the function sets <i>pBstrName</i> to the name of the entry point. If the entry point is specified by an ordinal, this argument is null.</para>
    </param>
    <param name="pwOrdinal">
      <para>If not null, and if the function is defined by an ordinal, the function sets <i>pwOrdinal</i> to the ordinal.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller passes in a member ID, which represents the member function whose entry description is desired. If the function has a DLL entry point, the name of the DLL that contains the function, as well as its name or ordinal identifier, are placed in the passed-in pointers allocated by the caller. If there is no DLL entry point for the function, an error is returned.</para>
      <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
      <para>The caller should use <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> to free the BSTRs referenced by <i>pBstrName</i> and <i>pBstrDllName</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetDocumentation">
    <summary>
      <para>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</para>
    </summary>
    <param name="memid">
      <para>The ID of the member whose documentation is to be returned.</para>
    </param>
    <param name="pBstrName">
      <para>The name of the specified item. If the caller does not need the item name, <i>pBstrName</i> can be null.</para>
    </param>
    <param name="pBstrDocString">
      <para>The documentation string for the specified item. If the caller does not need the documentation string, <i>pBstrDocString</i> can be null.</para>
    </param>
    <param name="pdwHelpContext">
      <para>The Help localization context. If the caller does not need the Help context, it can be null.</para>
    </param>
    <param name="pBstrHelpFile">
      <para>The fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, it can be null.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function <b>GetDocumentation</b> provides access to the documentation for the member specified by the <i>memid</i> parameter. If the passed-in <i>memid</i> is MEMBERID_NIL, then the documentation for the type description is returned.</para>
      <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
      <para>The caller should use <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-sysfreestring">SysFreeString</a> to free the BSTRs referenced by <i>pBstrName</i>, <i>pBstrDocString</i>, and <i>pBstrHelpFile</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetFuncDesc">
    <summary>
      <para>Retrieves the <see cref="FUNCDESC" /> structure that contains information about a specified function.</para>
    </summary>
    <param name="index">
      <para>The index of the function whose description is to be returned. The <i>index</i> should be in the range of 0 to 1 less than the number of functions in this type.</para>
    </param>
    <param name="ppFuncDesc">
      <para>A FUNCDESC structure that describes the specified function.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function <b>ITypeInfo.GetFuncDesc</b> provides access to a FUNCDESC structure that describes the function with the specified <i>index</i>. The FUNCDESC structure should be freed with <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasefuncdesc">ITypeInfo.ReleaseFuncDesc</a>. The number of functions in the type is one of the attributes contained in the TYPEATTR structure.</para>
      <h4>Examples</h4>
      <para>In the following example, the CHECKRESULT function is undefined. Replace this function with your error handling code.</para>
      <code>CHECKRESULT(ptypeinfo-&gt;GetFuncDesc(i, &amp;amp;amp;amp;amp;amp;pfuncdesc));
idMember = pfuncdesc-&gt;memid;
CHECKRESULT(ptypeinfo-&gt;GetDocumentation(idMember, &amp;amp;amp;amp;amp;amp;bstrName, NULL, NULL, NULL));
ptypeinfo-&gt;ReleaseFuncDesc(pfuncdesc);

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetIDsOfNames">
    <summary>
      <para>Maps between member names and member IDs, and parameter names and parameter IDs.</para>
    </summary>
    <param name="rgszNames">
      <para>An array of names to be mapped.</para>
    </param>
    <param name="cNames">
      <para>The count of the names to be mapped.</para>
    </param>
    <param name="pMemId">
      <para>Caller-allocated array in which name mappings are placed.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-getidsofnames">GetIDsOfNames</a> maps the name of a member (<b>rgszNames</b>[0]) and its parameters (<b>rgszNames</b>[1] ...<b>rgszNames</b>[<b>cNames</b>- 1]) to the ID of the member (<b>pMemId</b>[0]), and to the IDs of the specified parameters (<b>pMemId</b>[1] ... <b>pMemId</b>[<b>cNames</b>- 1]). The IDs of parameters are 0 for the first parameter in the member function's argument list, 1 for the second, and so on.</para>
      <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetImplTypeFlags">
    <summary>
      <para>Retrieves the IMPLTYPEFLAGS enumeration for one implemented interface or base interface in a type description.</para>
    </summary>
    <param name="index">
      <para>The index of the implemented interface or base interface for which to get the flags.</para>
    </param>
    <param name="pImplTypeFlags">
      <para>The IMPLTYPEFLAGS enumeration value.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The flags are associated with the act of inheritance, and not with the inherited interface.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetMops">
    <summary>
      <para>Retrieves marshaling information.</para>
    </summary>
    <param name="memid">
      <para>The member ID that indicates which marshaling information is needed.</para>
    </param>
    <param name="pBstrMops">
      <para>The opcode string used in marshaling the fields of the structure described by the referenced type description, or null if there is no information to return.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the passed-in member ID is MEMBERID_NIL, the function returns the opcode string for marshaling the fields of the structure described by the type description. Otherwise, it returns the opcode string for marshaling the function specified by the index.</para>
      <para>If the type description inherits from another type description, this function recurses on the base type description, if necessary, to find the item with the requested member ID.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetNames">
    <summary>
      <para>Retrieves the variable with the specified member ID or the name of the property or method and the parameters that correspond to the specified function ID.</para>
    </summary>
    <param name="memid">
      <para>The ID of the member whose name (or names) is to be returned.</para>
    </param>
    <param name="rgBstrNames">
      <para>The caller-allocated array. On return, each of the elements contains the name (or names) associated with the member.</para>
    </param>
    <param name="cMaxNames">
      <para>The length of the passed-in <i>rgBstrNames</i> array.</para>
    </param>
    <param name="pcNames">
      <para>The number of names in the <i>rgBstrNames</i> array.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller must release the returned BSTR array.</para>
      <para>If the member ID identifies a property that is implemented with property functions, the property name is returned. For property get functions, the names of the function and its parameters are always returned.</para>
      <para>For property put and put reference functions, the right side of the assignment is unnamed. If <i>cMaxNames</i> is less than is required to return all of the names of the parameters of a function, then only the names of the first <i>cMaxNames</i> - 1 parameters are returned. The names of the parameters are returned in the array in the same order that they appear elsewhere in the interface (for example, the same order in the parameter array associated with the FUNCDESC enumeration).</para>
      <para>If the type description inherits from another type description, this function is recursive to the base type description, if necessary, to find the item with the requested member ID.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetRefTypeInfo">
    <summary>
      <para>If a type description references other type descriptions, it retrieves the referenced type descriptions.</para>
    </summary>
    <param name="hRefType">
      <para>A handle to the referenced type description to return.</para>
    </param>
    <param name="ppTInfo">
      <para>The referenced type description.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>On return, the second parameter contains a pointer to a pointer to a type description that is referenced by this type description. A type description must have a reference to each type description that occurs as the type of any of its variables, function parameters, or function return types. For example, if the type of a data member is a record type, the type description for that data member contains the <i>hRefType</i> of a referenced type description. To get a pointer to the type description, the reference is passed to <b>GetRefTypeInfo</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetRefTypeOfImplType">
    <summary>
      <para>If a type description describes a COM class, it retrieves the type description of the implemented interface types. For an interface, <b>GetRefTypeOfImplType</b> returns the type information for inherited interfaces, if any exist.</para>
    </summary>
    <param name="index">
      <para>The index of the implemented type whose handle is returned. The valid range is 0 to the <b>cImplTypes</b> field in the TYPEATTR structure.</para>
    </param>
    <param name="pRefType">
      <para>A handle for the implemented interface (if any). This handle can be passed to <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">ITypeInfo.GetRefTypeInfo</a> to get the type description.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>TYPE_E_ELEMENTNOTFOUND
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Passed index is outside the range 0 to 1 less than the number of function descriptions.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the TKIND_DISPATCH type description is for a dual interface, the TKIND_INTERFACE type description can be obtained by calling <b>GetRefTypeOfImplType</b> with an <i>indexof</i> –1, and by passing the returned <i>pRefTypehandle</i> to <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getreftypeinfo">GetRefTypeInfo</a> to retrieve the type information.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetTypeAttr">
    <summary>
      <para>Retrieves a TYPEATTR structure that contains the attributes of the type description.</para>
    </summary>
    <param name="ppTypeAttr">
      <para>The attributes of this type description.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To free the TYPEATTR structure, use <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasetypeattr">ITypeInfo.ReleaseTypeAttr</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetTypeComp">
    <summary>
      <para>Retrieves the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> interface for the type description, which enables a client compiler to bind to the type description's members.</para>
    </summary>
    <param name="ppTComp">
      <para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> of the containing type library.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A client compiler can use the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypecomp">ITypeComp</a> interface to bind to members of the type.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.GetVarDesc">
    <summary>
      <para>Retrieves a VARDESC structure that describes the specified variable.</para>
    </summary>
    <param name="index">
      <para>The index of the variable whose description is to be returned. The index should be in the range of 0 to 1 less than the number of variables in this type.</para>
    </param>
    <param name="ppVarDesc">
      <para>A VARDESC that describes the specified variable.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_OUTOFMEMORY
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Insufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To free the VARDESC structure, use <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-releasevardesc">ReleaseVarDesc</a>.</para>
      <h4>Examples</h4>
      <para>In the following example, the CHECKRESULT function is undefined. Replace this function with your error handling code.</para>
      <code>CHECKRESULT(ptypeinfo-&gt;GetVarDesc(i, &amp;amp;amp;amp;amp;amp;pvardesc));
idMember = pvardesc-&gt;memid;
CHECKRESULT(ptypeinfo-&gt;GetDocumentation(idMember, &amp;amp;amp;amp;amp;amp;bstrName, NULL, NULL,
      NULL));
ptypeinfo-&gt;ReleaseVarDesc(pvardesc);

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.Invoke">
    <summary>
      <para>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</para>
    </summary>
    <param name="pvInstance">
      <para>An instance of the interface described by this type description.</para>
    </param>
    <param name="memid">
      <para>The interface member.</para>
    </param>
    <param name="wFlags">
      <para>Flags describing the context of the invoke call.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>DISPATCH_METHOD</b>
          </description>
          <description>
            <para>The member is accessed as a method. If there is ambiguity, both this and the DISPATCH_PROPERTYGET flag can be set.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DISPATCH_PROPERTYGET</b>
          </description>
          <description>
            <para>The member is retrieved as a property or data member.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DISPATCH_PROPERTYPUT</b>
          </description>
          <description>
            <para>The member is changed as a property or data member.</para>
          </description>
        </item>
        <item>
          <description>
            <b>DISPATCH_PROPERTYPUTREF</b>
          </description>
          <description>
            <para>The member is changed by using a reference assignment, rather than a value assignment. This flag is valid only when the property accepts a reference to an object.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pDispParams">
      <para>An array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</para>
    </param>
    <param name="pVarResult">
      <para>The result. Should be null if the caller does not expect any result. If <i>wFlags</i> specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, <i>pVarResultis</i> is ignored.</para>
    </param>
    <param name="pExcepInfo">
      <para>An exception information structure, which is filled in only if DISP_E_EXCEPTION is returned. If <i>pExcepInfo</i> is null on input, only an HRESULT error will be returned.</para>
    </param>
    <param name="puArgErr">
      <para>If Invoke returns DISP_E_TYPEMISMATCH, <i>puArgErr</i> indicates the index (within <i>rgvarg</i>) of the argument with incorrect type. If more than one argument returns an error, <i>puArgErr</i> indicates only the first argument with an error. Arguments in pDispParams-&gt;rgvarg appear in reverse order, so the first argument is the one having the highest index in the array. This parameter cannot be null.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>S_OK
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>E_INVALIDARG
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the arguments is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>DISP_E_EXCEPTION
</b>
                </description>
              </item>
            </list>
          </description>
          <description>
            <para>The member being invoked has returned an error HRESULT. If the member implements <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-ierrorinfo">IErrorInfo</a>, details are available in the error object. Otherwise, the <i>pExcepInfo</i> parameter contains details.</para>
          </description>
        </item>
      </list>
      <para>Any of the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch.Invoke</a> errors may also be returned.</para>
    </returns>
    <remarks>
      <para>Use the function <b>ITypeInfo.Invoke</b> to access a member of an object or invoke a method that implements the interface described by this type description. For objects that support the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> interface, you can use <b>Invoke</b> to implement <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch.Invoke</a>.</para>
      <para>
        <b>ITypeInfo.Invoke</b> takes a pointer to an instance of the class. Otherwise, its parameters are the same as <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-idispatch-invoke">IDispatch.Invoke</a>, except that <b>ITypeInfo.Invoke</b> omits the <i>refiid</i> and <i>lcid</i> parameters. When called, <b>ITypeInfo.Invoke</b> performs the actions described by the <b>IDispatch.Invoke</b> parameters on the specified instance.</para>
      <para>For VTBL interface members, <b>ITypeInfo.Invoke</b> passes the LCID of the type information into parameters tagged with the lcid attribute, and the returned value into the retval attribute.</para>
      <para>If the type description inherits from another type description, this function recurses on the base type description to find the item with the requested member ID.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.ReleaseFuncDesc">
    <summary>
      <para>Releases a FUNCDESC previously returned by <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getfuncdesc">ITypeInfo.GetFuncDesc</a>.</para>
    </summary>
    <param name="pFuncDesc">
      <para>The FUNCDESC to be freed.</para>
    </param>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.ReleaseTypeAttr">
    <summary>
      <para>Releases a TYPEATTR previously returned by <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-gettypeattr">ITypeInfo.GetTypeAttr</a>.</para>
    </summary>
    <param name="pTypeAttr">
      <para>The TYPEATTR to be freed.</para>
    </param>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo.ReleaseVarDesc">
    <summary>
      <para>Releases a VARDESC previously returned by <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nf-oaidl-itypeinfo-getvardesc">ITypeInfo.GetVarDesc</a>.</para>
    </summary>
    <param name="pVarDesc">
      <para>The VARDESC to be freed.</para>
    </param>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-itypeinfo">ITypeInfo</seealso>
  </member>
  <member name="ITypeInfo">
    <summary>
      <para>This section describes <b>ITypeInfo</b>, an interface typically used for reading information about objects. For example, an object browser tool can use <b>ITypeInfo</b> to extract information about the characteristics and capabilities of objects from type libraries.</para>
    </summary>
    <remarks>
      <para>Type information interfaces are intended to describe the parts of the application that can be called by outside clients, rather than those that might be used internally to build an application.</para>
      <para>The <b>ITypeInfo</b> interface provides access to the following:</para>
      <list type="bullet">
        <item>
          <description>
            <para>The set of function descriptions associated with the type. For interfaces, this contains the set of member functions in the interface.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The set of data member descriptions associated with the type. For structures, this contains the set of fields of the type.</para>
          </description>
        </item>
        <item>
          <description>
            <para>The general attributes of the type, such as whether it describes a structure, an interface, and so on.</para>
          </description>
        </item>
      </list>
      <para>The type description of an <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> interface can be used to implement the interface. For more information, see the description of <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oleauto/nf-oleauto-createstddispatch">CreateStdDispatch</a> in <a href="https://docs.microsoft.com//previous-versions/windows/desktop/automat/dispatch-interfaces">Dispatch Interface and API Functions</a>.</para>
      <para>An instance of <b>ITypeInfo</b> provides various information about the type of an object, and is used in different ways. A compiler can use an <b>ITypeInfo</b> to compile references to members of the type. A type interface browser can use it to find information about each member of the type. An <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/oaidl/nn-oaidl-idispatch">IDispatch</a> implementer can use it to provide automatic delegation of <b>IDispatch</b> calls to an interface.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/ms221172(v=vs.85)">Type Description Interfaces and Functions </seealso>
  </member>
</doc>