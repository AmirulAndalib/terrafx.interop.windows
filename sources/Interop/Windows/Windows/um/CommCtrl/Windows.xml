<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.Animate_Close">
    <summary>
      <para>Closes an AVI clip. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-open">ACM_OPEN</a> message explicitly, passing in <b>NULL</b> parameters.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control.</para>
    </param>
    <remarks>
      <para>You can use <b>Animate_Close</b> to close an AVI file or AVI resource that was previously opened for the specified animation control.</para>
    </remarks>
    <seealso cref="Animate_Open" />
  </member>
  <member name="Windows.Animate_Create">
    <summary>
      <para>Creates an animation control. <b>Animate_Create</b> calls the <see cref="CreateWindow" /> function to create the animation control.</para>
    </summary>
    <param name="hwndP">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the parent window.</para>
    </param>
    <param name="id">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The child window identifier of the animation control.</para>
    </param>
    <param name="dwStyle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>The window styles. For a list of the animation control style values, see <a href="https://docs.microsoft.com//windows/desktop/Controls/animation-control-styles">Animation Control Styles</a>.</para>
    </param>
    <param name="hInstance">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance of the module that is creating the animation control.</para>
    </param>
    <remarks>
      <para>The <b>Animate_Create</b> macro sets the width and height of the animation control to zero if the <a href="https://docs.microsoft.com//windows/desktop/Controls/animation-control-styles">ACS_CENTER</a> style is specified. If the <b>ACS_CENTER</b> style is not specified, <b>Animate_Create</b> sets the width and height based on the dimensions of a frame in the AVI clip.</para>
    </remarks>
  </member>
  <member name="Windows.Animate_IsPlaying">
    <summary>
      <para>Checks to see if an Audio-Video Interleaved (AVI) clip is playing. You can use this macro or send an <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-isplaying">ACM_ISPLAYING</a> message.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control.</para>
    </param>
  </member>
  <member name="Windows.Animate_Open">
    <summary>
      <para>Opens an AVI clip and displays its first frame in an animation control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-open">ACM_OPEN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control.</para>
    </param>
    <param name="szName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPTSTR</a></b></para>
      <para>A pointer to a buffer that contains the path of the AVI file or the name of an AVI resource. Alternatively, this parameter can consist of the AVI resource identifier in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and zero in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro. The control loads an AVI resource from the module specified by the instance handle passed to the <see cref="CreateWindow" /> function, the <see cref="Animate_Create" /> macro, or the dialog box creation function that created the control. The AVI file or resource specified by <i>lpszName</i> must not contain audio.</para>
      <para>If this parameter is <b>NULL</b>, the system closes the AVI file that was previously opened for the specified animation control, if any.</para>
    </param>
    <remarks>
      <para>You can only open silent AVI clips. <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-open">ACM_OPEN</a> and <b>Animate_Open</b> will fail if <i>lpszName</i> specifies an AVI clip that contains sound.</para>
      <para>You can use <see cref="Animate_Close" /> to close an AVI file or AVI resource that was previously opened for the specified animation control.</para>
    </remarks>
  </member>
  <member name="Windows.Animate_OpenEx">
    <summary>
      <para>Opens an AVI clip from a resource in a specified module and displays its first frame in an animation control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-open">ACM_OPEN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control.</para>
    </param>
    <param name="hInst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>An instance handle to the module from which the resource should be loaded. If this value is <b>NULL</b>, the resource is loaded from the module that created the animation control.</para>
    </param>
    <param name="szName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPTSTR</a></b></para>
      <para>A pointer to a buffer that contains the path of the AVI file or the name of an AVI resource. Alternatively, this parameter can consist of the AVI resource identifier in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and zero in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro. The control loads the AVI resource from the module specified by <i>hinst</i>. The AVI file or resource specified by <i>lpszName</i> must not contain audio.</para>
      <para>If this parameter is <b>NULL</b>, the system closes the AVI file that was previously opened for the specified animation control, if any.</para>
    </param>
    <remarks>
      <para>You can only open silent AVI clips. <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-open">ACM_OPEN</a> and <see cref="Animate_Open" /> will fail if <i>lpszName</i> specifies an AVI clip that contains sound.</para>
      <para>You can use <see cref="Animate_Close" /> to close an AVI file or AVI resource that was previously opened for the specified animation control.</para>
    </remarks>
  </member>
  <member name="Windows.Animate_Play">
    <summary>
      <para>Plays an AVI clip in an animation control. The control plays the clip in the background while the thread continues executing. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-play">ACM_PLAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control in which to play the AVI clip.</para>
    </param>
    <param name="from">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The zero-based index of the frame where playing begins. The value must be less than 65,536. A value of zero means begin with the first frame in the AVI clip.</para>
    </param>
    <param name="to">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The zero-based index of the frame where playing ends. The value must be less than 65,536. A value of -1 means end with the last frame in the AVI clip.</para>
    </param>
    <param name="rep">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The number of times to replay the AVI clip. A value of -1 means replay the clip indefinitely.</para>
    </param>
    <remarks>
      <para>You can use <see cref="Animate_Seek" /> to direct the animation control to display a particular frame of the AVI clip.</para>
    </remarks>
  </member>
  <member name="Windows.Animate_Seek">
    <summary>
      <para>Directs an animation control to display a particular frame of an AVI clip. The control displays the clip in the background while the thread continues executing. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-play">ACM_PLAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control in which to display the AVI frame.</para>
    </param>
    <param name="frame">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The zero-based index of the frame to display.</para>
    </param>
    <seealso cref="Animate_Play" />
  </member>
  <member name="Windows.Animate_Stop">
    <summary>
      <para>Stops playing an AVI clip in an animation control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/acm-stop">ACM_STOP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the animation control.</para>
    </param>
  </member>
  <member name="Windows.Button_GetIdealSize">
    <summary>
      <para>Gets the size of the button that best fits the text and image, if an image list is present. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getidealsize">BCM_GETIDEALSIZE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="psize">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a> structure that receives the desired size of the button including the text and image list if present.</para>
    </param>
    <remarks>
      <para>This macro is most applicable to PushButtons. When sent to a PushButton, the macro retrieves the bounding rectangle required to display the button's text. And, if the PushButton has an image list, the bounding rectangle is also sized to include the button's image.</para>
      <para>When sent to a button of any other type, the size of the control's window rectangle is retrieved.</para>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getidealsize">BCM_GETIDEALSIZE</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</seealso>
  </member>
  <member name="Windows.Button_GetImageList">
    <summary>
      <para>Gets the <see cref="BUTTON_IMAGELIST" /> structure that describes the image list that is set for a button control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getimagelist">BCM_GETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pbuttonImagelist">
      <para>Type: <b>PBUTTON_IMAGELIST</b></para>
      <para>A pointer to a <see cref="BUTTON_IMAGELIST" /> structure that contains image list information.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getimagelist">BCM_GETIMAGELIST</seealso>
    <seealso cref="BUTTON_IMAGELIST" />
  </member>
  <member name="Windows.Button_GetNote">
    <summary>
      <para>Gets the text of the note associated with a command link button. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getnote">BCM_GETNOTE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="psz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A pointer to a null-terminated, Unicode string that contains the note.</para>
    </param>
    <param name="pcc">
      <para>Type: <b>int</b></para>
      <para>A pointer to the length of the note, in characters.</para>
    </param>
    <remarks>
      <para>This macro works only with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_COMMANDLINK</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_DEFCOMMANDLINK</a> button styles.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-types-and-styles">Button Types</seealso>
  </member>
  <member name="Windows.Button_GetNoteLength">
    <summary>
      <para>Gets the length of the note text that may be displayed in the description for a command link. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getnotelength">BCM_GETNOTELENGTH</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <remarks>
      <para>Beginning with comctl32 DLL version 6.01, command link buttons may have a note. For information on DLL versions, see <a href="https://docs.microsoft.com//windows/desktop/Controls/common-control-versions">Common Control Versions</a>.</para>
      <para>The <b>Button_GetNoteLength</b> macro works only with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_COMMANDLINK</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_DEFCOMMANDLINK</a> button styles.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-types-and-styles">Button Types</seealso>
  </member>
  <member name="Windows.Button_GetSplitInfo">
    <summary>
      <para>Gets information for a specified split button control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-getsplitinfo">BCM_GETSPLITINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pInfo">
      <para>Type: <b><see cref="BUTTON_SPLITINFO" />*</b></para>
      <para>A pointer to a <see cref="BUTTON_SPLITINFO" /> structure to receive information on the button specified by <i>hwnd</i>. The calling application is responsible for allocating the memory for the structure. Set the <b>mask</b> member of this structure to determine what information to receive.</para>
    </param>
    <remarks>
      <para>Use this macro only with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_SPLITBUTTON</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_DEFSPLITBUTTON</a> button styles.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-types-and-styles">Button Types</seealso>
  </member>
  <member name="Windows.Button_GetTextMargin">
    <summary>
      <para>Gets the margins used to draw text in a button control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-gettextmargin">BCM_GETTEXTMARGIN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pmargin">
      <para>Type: <b>RECT*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that specifies the margins to use for drawing text in a button control.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.Button_SetDropDownState">
    <summary>
      <para>Sets the drop down state for a specified button with style of <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_SPLITBUTTON</a>. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-setdropdownstate">BCM_SETDROPDOWNSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="fDropDown">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> for state of  BST_DROPDOWNPUSHED, or <b>FALSE</b> otherwise.</para>
    </param>
  </member>
  <member name="Windows.Button_SetElevationRequiredState">
    <summary>
      <para>Sets the elevation required state for a specified button or command link to display an elevated icon. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-setshield">BCM_SETSHIELD</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="fRequired">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>TRUE</b> to draw an elevated icon, or <b>FALSE</b> otherwise.</para>
    </param>
    <remarks>
      <para>An application must use comctl32.dll version 6 to gain this functionality.</para>
    </remarks>
  </member>
  <member name="Windows.Button_SetImageList">
    <summary>
      <para>Assigns an image list to a button control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-setimagelist">BCM_SETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pbuttonImagelist">
      <para>Type: <b>PBUTTON_IMAGELIST</b></para>
      <para>A pointer to a <see cref="BUTTON_IMAGELIST" /> structure that contains the image list information to set.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.Button_SetNote">
    <summary>
      <para>Sets the text of the note associated with a specified command link button. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-setnote">BCM_SETNOTE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="psz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>A pointer to a null-terminated <b>WCHAR</b> string that contains the note.</para>
    </param>
    <remarks>
      <para>Beginning with comctl32 DLL version 6.01, command link buttons may have a note.</para>
      <para>This macro works only with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_COMMANDLINK</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_DEFCOMMANDLINK</a> button styles.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-types-and-styles">Button Types</seealso>
  </member>
  <member name="Windows.Button_SetSplitInfo">
    <summary>
      <para>Sets information for a specified split button control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-setsplitinfo">BCM_SETSPLITINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pInfo">
      <para>Type: <b><see cref="BUTTON_SPLITINFO" />*</b></para>
      <para>A pointer to a <see cref="BUTTON_SPLITINFO" /> structure. The calling application is responsible for allocating the memory for this structure and initializing it. Set the <b>mask</b> member of this structure to determine what information to set for the button specified by <i>hwnd</i>.</para>
    </param>
    <remarks>
      <para>Use this macro only with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_SPLITBUTTON</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_DEFSPLITBUTTON</a> button styles.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/button-types-and-styles">Button Types</seealso>
  </member>
  <member name="Windows.Button_SetTextMargin">
    <summary>
      <para>Sets the margins for drawing text in a button control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bcm-settextmargin">BCM_SETTEXTMARGIN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the button control.</para>
    </param>
    <param name="pmargin">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that specifies the margins to set for drawing text in a button control.</para>
    </param>
    <remarks>
      <para>To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ComboBox_GetCueBannerText">
    <summary>
      <para>Gets the cue banner text displayed in the edit control of a combo box. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getcuebanner">CB_GETCUEBANNER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the combo box.</para>
    </param>
    <param name="lpwText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPWSTR</a></b></para>
      <para>A pointer to a Unicode string buffer that receives the cue banner text. The calling application is responsible for allocating the memory for the buffer. The buffer size must be equal to the length of the cue banner string in <b>WCHAR</b><b>s</b>, plus 1—for the terminating <b>NULL</b> <b>WCHAR</b>.</para>
    </param>
    <param name="cchText">
      <para>Type: <b>int</b></para>
      <para>The size of the buffer pointed to by <i>lpwText</i> in <b>WCHAR</b><b>s</b>.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-features">Combo Box Features</seealso>
  </member>
  <member name="Windows.ComboBox_GetMinVisible">
    <summary>
      <para>Gets the minimum number of visible items in the drop-down list of a combo box.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Specifies the combo box.</para>
    </param>
    <remarks>
      <para>When the number of items in the drop-down list is greater than the minimum, the combo box uses a scroll bar.</para>
      <para>To use <b>ComboBox_GetMinVisible</b>, the application must specify comctl32.dll version 6 in the manifest. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/cb-getminvisible">CB_GETMINVISIBLE</seealso>
  </member>
  <member name="Windows.ComboBox_SetCueBannerText">
    <summary>
      <para>Sets the cue banner text that is displayed for the edit control of a combo box.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the combo box.</para>
    </param>
    <param name="lpcwText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A pointer to a null-terminated Unicode string buffer that contains the text.</para>
    </param>
    <remarks>
      <para>The cue banner is text that is displayed in the edit control of a combo box when there is no selection.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-features">Combo Box Features</seealso>
  </member>
  <member name="Windows.ComboBox_SetMinVisible">
    <summary>
      <para>Sets the minimum number of visible items in the drop-down list of a combo box.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The combo box.</para>
    </param>
    <param name="iMinVisible">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>The minimum number of visible items.</para>
    </param>
    <remarks>
      <para>When the number of items in the drop-down list is greater than the minimum, the combo box uses a scroll bar. By default, 30 is the minimum number of visible items.</para>
      <para>
        <code>Combobox_SetMinVisible (hwnd, iMinVisible)</code>
      </para>
      <para>is equivalent to the following call.</para>
      <para>
        <code>SendMessage((hwnd), CB_SETMINVISIBLE, (WPARAM) iMinVisible, 0);</code>
      </para>
      <para>To use <b>ComboBox_SetMinVisible</b>, the application must specify comctl32.dll version 6 in the manifest. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/cb-setminvisible">CB_SETMINVISIBLE</seealso>
  </member>
  <member name="Windows.CreateMappedBitmap">
    <summary>
      <para>Creates a bitmap for use in a toolbar.</para>
    </summary>
    <param name="hInstance">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>Handle to the module instance with the executable file that contains the bitmap resource.</para>
    </param>
    <param name="idBitmap">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT_PTR</a></b></para>
      <para>Resource identifier of the bitmap resource.</para>
    </param>
    <param name="wFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Bitmap flag. This parameter can be zero or the following value:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CMB_MASKED</b>
          </description>
          <description>
            <para>Uses a bitmap as a mask.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpColorMap">
      <para>Type: <b>LPCOLORMAP</b></para>
      <para>Pointer to a <see cref="COLORMAP" /> structure that contains the color information needed to map the bitmaps. If this parameter is <b>NULL</b>, the function uses the default color map.</para>
    </param>
    <param name="iNumMaps">
      <para>Type: <b>int</b></para>
      <para>Number of color maps pointed to by
<i>lpColorMap</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>Returns the handle to the bitmap if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The function creates a new bitmap using the bitmap data and colors specified by the bitmap resource and the color mapping information.</para>
      <para>This function is fully supported only for images with color maps; that is, images with 256 or fewer colors.</para>
      <h4>Examples</h4>
      <para>The following example code creates a bitmap from a resource and makes the color black appear transparent by mapping it to the system color for a button face.</para>
      <code>DWORD backgroundColor = GetSysColor(COLOR_BTNFACE);
COLORMAP colorMap;
colorMap.from = RGB(0, 0, 0);
colorMap.to = backgroundColor;
HBITMAP hbm = CreateMappedBitmap(g_hInst, IDB_BITMAP1, 0, &amp;amp;amp;amp;amp;amp;colorMap, 1);
</code>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindow">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindowA">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindowW">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindow">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindowA">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateStatusWindowW">
    <summary>
      <para>Creates a status window, which is typically used to display the status of an application. The window generally appears at the bottom of the parent window, and it contains the specified text.</para>
      <para>
        <b>Note</b>   This function is obsolete. Use <see cref="CreateWindow" /> instead.</para>
    </summary>
    <param name="style">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Window styles for the status window. This parameter must include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style and should also include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> style.</para>
    </param>
    <param name="lpszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the status text for the first part.</para>
    </param>
    <param name="hwndParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>handle to the parent window.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the status window. The window procedure uses this value to identify messages it sends to the parent window.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the handle to the status window if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateStatusWindow</b> function calls the <see cref="CreateWindow" /> function to create the window. It passes the parameters to  without modification and sets the position, width, and height parameters to <b>CreateWindow</b> default values.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines CreateStatusWindow as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CreateToolbarEx">
    <summary>
      <para>Creates a toolbar window and adds the specified buttons to the toolbar.</para>
      <para>
        <b>Note</b>   This function is deprecated, because it does not support all features of toolbars. Use <see cref="CreateWindowEx" /> instead. For examples, see <a href="https://docs.microsoft.com//windows/desktop/Controls/using-toolbar-controls">Using Toolbar Controls</a>.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the parent window for the toolbar.</para>
    </param>
    <param name="ws">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Window styles for the toolbar. The <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a> style is included by default. This parameter can also include a combination of styles as discussed in <a href="https://docs.microsoft.com//windows/desktop/Controls/toolbar-control-and-button-styles">Toolbar Control and Button Styles</a>.</para>
    </param>
    <param name="wID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Control identifier for the toolbar.</para>
    </param>
    <param name="nBitmaps">
      <para>Type: <b>int</b></para>
      <para>Number of button images contained in the bitmap specified by
<i>hBMInst</i> and
<i>wBMID</i>.</para>
    </param>
    <param name="hBMInst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>Module instance with the executable file that contains the bitmap resource.</para>
    </param>
    <param name="wBMID">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT_PTR</a></b></para>
      <para>Resource identifier for the bitmap resource. If
<i>hBMInst</i> is <b>NULL</b>, this parameter must be a valid bitmap handle.</para>
    </param>
    <param name="lpButtons">
      <para>Type: <b>LPCTBBUTTON</b></para>
      <para>Pointer to an array of <see cref="TBBUTTON" /> structures that contain information about the buttons to add to the toolbar.</para>
    </param>
    <param name="iNumButtons">
      <para>Type: <b>int</b></para>
      <para>Number of buttons to add to the toolbar.</para>
    </param>
    <param name="dxButton">
      <para>Type: <b>int</b></para>
      <para>Width, in pixels, of the buttons to add to the toolbar.</para>
    </param>
    <param name="dyButton">
      <para>Type: <b>int</b></para>
      <para>Height, in pixels, of the buttons to add to the toolbar.</para>
    </param>
    <param name="dxBitmap">
      <para>Type: <b>int</b></para>
      <para>Width, in pixels, of the button images to add to the buttons in the toolbar.</para>
    </param>
    <param name="dyBitmap">
      <para>Type: <b>int</b></para>
      <para>Height, in pixels, of the button images to add to the buttons in the toolbar.</para>
    </param>
    <param name="uStructSize">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Size of a <see cref="TBBUTTON" /> structure.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Returns the window handle to the toolbar if successful, or <b>NULL</b> otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Windows 95: The system can support a maximum of 16,364 window handles.</para>
    </remarks>
  </member>
  <member name="Windows.CreateUpDownControl">
    <summary>
      <para>Creates an up-down control.
Note: This function is obsolete. It is a 16 bit function and cannot handle 32 bit values for range and position.</para>
    </summary>
    <param name="dwStyle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Window styles for the control. This parameter should include the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_CHILD</a>, <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_BORDER</a>, and <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VISIBLE</a> styles, and it may include any of the window styles specific to the up-down control.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>Horizontal coordinate, in client coordinates, of the upper-left corner of the control.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>Vertical coordinate, in client coordinates, of the upper-left corner of the control.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>Width, in pixels, of the up-down control.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>Height, in pixels, of the up-down control.</para>
    </param>
    <param name="hParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the parent window of the up-down control.</para>
    </param>
    <param name="nID">
      <para>Type: <b>int</b></para>
      <para>Identifier for the up-down control.</para>
    </param>
    <param name="hInst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>Handle to the module instance of the application creating the up-down control.</para>
    </param>
    <param name="hBuddy">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the window associated with the up-down control. If this parameter is <b>NULL</b>, the control has no buddy window.</para>
    </param>
    <param name="nUpper">
      <para>Type: <b>int</b></para>
      <para>Upper limit (range) of the up-down control.</para>
    </param>
    <param name="nLower">
      <para>Type: <b>int</b></para>
      <para>Lower limit (range) of the up-down control.</para>
    </param>
    <param name="nPos">
      <para>Type: <b>int</b></para>
      <para>Position of the control.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>If the function succeeds, the return value is the window handle to the up-down control. If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.DateTime_CloseMonthCal">
    <summary>
      <para>Closes the date and time picker (DTP) control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-closemonthcal">DTM_CLOSEMONTHCAL</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the DTP control.</para>
    </param>
    <remarks>
      <para>Destroys the control and sends a <a href="https://docs.microsoft.com//windows/desktop/Controls/dtn-closeup">DTN_CLOSEUP</a> notification that the control is closing—as opposed to the control is opening (dropping-down as in the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtn-dropdown">DTN_DROPDOWN</a> notification)—to the control's parent.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/dtn-closeup">DTN_CLOSEUP</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/dtn-dropdown">DTN_DROPDOWN</seealso>
  </member>
  <member name="Windows.DateTime_GetDateTimePickerInfo">
    <summary>
      <para>Gets information for a specified date and time picker (DTP) control.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the DTP control.</para>
    </param>
    <param name="pdtpi">
      <para>Type: <b><see cref="DATETIMEPICKERINFO" />*</b></para>
      <para>
        <see cref="DATETIMEPICKERINFO" />
        <b>cbSize</b>
      </para>
    </param>
  </member>
  <member name="Windows.DateTime_GetIdealSize">
    <summary>
      <para>Gets the size needed to display the control without clipping. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getidealsize">DTM_GETIDEALSIZE</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the DTP control.</para>
    </param>
    <param name="psize">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a></b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145106(v=vs.85)">SIZE</a> structure to receive the size. The caller is responsible for allocating this structure.</para>
    </param>
  </member>
  <member name="Windows.DateTime_GetMonthCal">
    <summary>
      <para>Gets the handle to a date and time picker's (DTP) child month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getmonthcal">DTM_GETMONTHCAL</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <remarks>
      <para>DTP controls create a child month calendar control when the user clicks the drop-down arrow (<a href="https://docs.microsoft.com//windows/desktop/Controls/dtn-dropdown">DTN_DROPDOWN</a> notification). When the month calendar is no longer needed, it is destroyed (a <a href="https://docs.microsoft.com//windows/desktop/Controls/dtn-closeup">DTN_CLOSEUP</a> notification is sent on destruction). So your application must not rely on a static handle to the DTP's child month calendar.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/dtn-closeup">DTN_CLOSEUP</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/dtn-dropdown">DTN_DROPDOWN</seealso>
  </member>
  <member name="Windows.DateTime_GetMonthCalColor">
    <summary>
      <para>Gets the color for a given portion of the month calendar within a date and time picker (DTP) control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getmccolor">DTM_GETMCCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="iColor">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> specifying which month calendar color to retrieve. This value can be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MCSC_BACKGROUND</b>
          </description>
          <description>
            <para>Retrieve the background color displayed between months.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_MONTHBK</b>
          </description>
          <description>
            <para>Retrieve the background color displayed within the month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display text within a month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLEBK</b>
          </description>
          <description>
            <para>Retrieve the background color displayed in the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLETEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display text within the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TRAILINGTEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.DateTime_GetMonthCalFont">
    <summary>
      <para>Gets the font that the date and time picker (DTP) control's child month calendar control is currently using. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getmcfont">DTM_GETMCFONT</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
  </member>
  <member name="Windows.DateTime_GetMonthCalStyle">
    <summary>
      <para>Gets the style of a specified date and time picker (DTP) control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getmcstyle">DTM_GETMCSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the DTP control.</para>
    </param>
  </member>
  <member name="Windows.DateTime_GetRange">
    <summary>
      <para>Gets the current minimum and maximum allowable system times for a date and time picker (DTP) control. You can use this macro, or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getrange">DTM_GETRANGE</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>A pointer to a two-element array of <see cref="SYSTEMTIME" /> structures.</para>
    </param>
    <remarks>
      <para>The date and time picker displays only dates/times that fall within the specified range, preventing the user from selecting a date and time that falls outside the range. If the <see cref="DateTime_SetSystemtime" /> message specifies a date and time that falls outside the range, it will fail.</para>
    </remarks>
  </member>
  <member name="Windows.DateTime_GetSystemtime">
    <summary>
      <para>Gets the currently selected time from a date and time picker (DTP) control and places it in a specified <see cref="SYSTEMTIME" /> structure. You can use this macro, or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getsystemtime">DTM_GETSYSTEMTIME</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>A pointer to a <see cref="SYSTEMTIME" /> structure. If <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-getsystemtime">DTM_GETSYSTEMTIME</a> returns GDT_VALID, this structure will contain the currently selected time. Otherwise, it will not contain valid information. This parameter must be a valid pointer; it cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.DateTime_SetFormat">
    <summary>
      <para>Sets the display of a date and time picker (DTP) control based on a given format string. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setformat">DTM_SETFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="sz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>A pointer to a zero-terminated <a href="https://docs.microsoft.com//windows/desktop/Controls/date-and-time-picker-controls">format string</a> that defines the desired display. Setting this parameter to <b>NULL</b> will reset the control to the default format string for the current style.</para>
    </param>
    <remarks>
      <para>It is acceptable to include extra characters within the format string to produce a more rich display. However, any nonformat characters must be enclosed within single quotes. For example, the format string "'Today is: 'hh':'m':'s ddddMMMdd', 'yyy" would produce output like "Today is: 04:22:31 Tuesday Mar 23, 1996".</para>
      <para>
        <b>Note</b>   A DTP control tracks locale changes when it is using the default format string. If you set a custom format string, it will not be updated in response to locale changes.</para>
    </remarks>
  </member>
  <member name="Windows.DateTime_SetMonthCalColor">
    <summary>
      <para>Sets the color for a given portion of the month calendar within a date and time picker (DTP) control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setmccolor">DTM_SETMCCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="iColor">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> specifying which month calendar color to set. This value can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MCSC_BACKGROUND</b>
          </description>
          <description>
            <para>Set the background color displayed between months.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_MONTHBK</b>
          </description>
          <description>
            <para>Set the background color displayed within the month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TEXT</b>
          </description>
          <description>
            <para>Set the color used to display text within a month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLEBK</b>
          </description>
          <description>
            <para>Set the background color displayed in the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLETEXT</b>
          </description>
          <description>
            <para>Set the color used to display text within the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TRAILINGTEXT</b>
          </description>
          <description>
            <para>Set the color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that represents the color that will be set for the specified area of the month calendar.</para>
    </param>
    <remarks>
      <para>When visual styles are enabled, this macro has no effect except when <i>iColor</i> is MCSC_BACKGROUND.</para>
    </remarks>
  </member>
  <member name="Windows.DateTime_SetMonthCalFont">
    <summary>
      <para>Sets the font to be used by the date and time picker (DTP) control's child month calendar control. You can use this macro or explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setmcfont">DTM_SETMCFONT</a> message.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="hfont">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HFONT</a></b></para>
      <para>A handle to the font that will be set.</para>
    </param>
    <param name="fRedraw">
      <para>Type: <b>long</b></para>
      <para>Specifies whether the control should be redrawn immediately upon setting the font. Setting this parameter to <b>TRUE</b> causes the control to redraw itself.</para>
    </param>
  </member>
  <member name="Windows.DateTime_SetMonthCalStyle">
    <summary>
      <para>Sets the style for a specified date and time picker (DTP) control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setmcstyle">DTM_SETMCSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the DTP.</para>
    </param>
    <param name="dwStyle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/Controls/month-calendar-control-styles">Month Calendar Control Styles</a>
      </para>
    </param>
  </member>
  <member name="Windows.DateTime_SetRange">
    <summary>
      <para>Sets the minimum and maximum allowable system times for a date and time picker (DTP) control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setrange">DTM_SETRANGE</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="gd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A value that specifies which range values are valid. This value can be a combination of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GDTR_MIN</b>
          </description>
          <description>
            <para>The first element in the <see cref="SYSTEMTIME" /> structure array is valid and will be used to set the minimum allowable system time.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GDTR_MAX</b>
          </description>
          <description>
            <para>The second element in the <see cref="SYSTEMTIME" /> structure array is valid and will be used to set the maximum allowable system time.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>A pointer to a two-element array of <see cref="SYSTEMTIME" /> structures. The first element of the <b>SYSTEMTIME</b> array contains the minimum allowable time. The second element of the <b>SYSTEMTIME</b> array contains the maximum allowable time. It is not necessary to fill an array element that is not specified in the <i>flags</i> parameter.</para>
    </param>
    <remarks>
      <para>The date and time picker displays only dates/times that fall within the specified range, preventing the user from selecting a date and time that falls outside the range. If the <see cref="DateTime_SetSystemtime" /> message specifies a date and time that falls outside the range, it will fail.</para>
    </remarks>
  </member>
  <member name="Windows.DateTime_SetSystemtime">
    <summary>
      <para>Sets a date and time picker (DTP) control to a given date and time. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/dtm-setsystemtime">DTM_SETSYSTEMTIME</a> message explicitly.</para>
    </summary>
    <param name="hdp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a DTP control.</para>
    </param>
    <param name="gd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A value that specifies the action that should be performed. This should be set to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GDT_VALID</b>
          </description>
          <description>
            <para>Set the DTP control according to the data within the <see cref="SYSTEMTIME" /> structure pointed to by <i>lpSysTime</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GDT_NONE</b>
          </description>
          <description>
            <para>Set the DTP control to "no date" and clear its check box. When this flag is specified,
<i>lpSysTime</i> is ignored. This flag applies only to DTP controls that are set to the <a href="https://docs.microsoft.com//windows/desktop/Controls/date-and-time-picker-control-styles">DTS_SHOWNONE</a> style.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>A pointer to a <see cref="SYSTEMTIME" /> structure that contains the system time information by which to set the DTP control.</para>
    </param>
  </member>
  <member name="Windows.DefSubclassProc">
    <summary>
      <para>Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.</para>
    </summary>
    <param name="hWnd">
      <para>Type: <b>HWND</b></para>
      <para>A handle to the window being subclassed.</para>
    </param>
    <param name="uMsg">
      <para>Type: <b>UINT</b></para>
      <para>A value of type unsigned <b>int</b> that specifies a window message.</para>
    </param>
    <param name="wParam">
      <para>Type: <b>WPARAM</b></para>
      <para>Specifies additional message information. The contents of this parameter depend on the value of the window message.</para>
    </param>
    <param name="lParam">
      <para>Type: <b>LPARAM</b></para>
      <para>Specifies additional message information. The contents of this parameter depend on the value of the window message. Note: On 64-bit versions of Windows LPARAM is a 64-bit value.</para>
    </param>
    <returns>
      <para>Type: <b>LRESULT</b></para>
      <para>The returned value is specific to the message sent. This value should be ignored.</para>
    </returns>
    <remarks>
      <para>You do not need to call the default window procedure; this function calls it automatically.</para>
      <para>The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API.</para>
      <para>A subclass callback is identified by a unique pairing of a callback function pointer and an unsigned ID value. Each callback can also store a single <b>DWORD</b> of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call <see cref="SetWindowSubclass" /> to alter the value of its reference data element.</para>
      <para>
        <b>Warning</b>  You cannot use the subclassing helper functions to subclass a window across threads.</para>
    </remarks>
    <seealso cref="GetWindowSubclass" />
    <seealso cref="RemoveWindowSubclass" />
    <seealso cref="SetWindowSubclass" />
  </member>
  <member name="Windows.DrawInsert">
    <summary>
      <para>Draws the insert icon in the parent window of the specified drag list box.</para>
    </summary>
    <param name="handParent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the parent window of the drag list box.</para>
    </param>
    <param name="hLB">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the drag list box.</para>
    </param>
    <param name="nItem">
      <para>Type: <b>int</b></para>
      <para>The identifier of the icon item to be drawn.</para>
    </param>
  </member>
  <member name="Windows.DrawShadowText">
    <summary>
      <para>Draws text that has a shadow.</para>
    </summary>
    <param name="hdc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>HDC.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A pointer to a string that contains the text to be drawn.</para>
    </param>
    <param name="cch">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A <b>UINT</b> that specifies the number of characters in the string that is to be drawn.</para>
    </param>
    <param name="prc">
      <para>Type: <b>const <see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that contains, in logical coordinates, the rectangle in which the text is to be drawn.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A <b>DWORD</b> that specifies how the text is to be drawn. See <a href="https://docs.microsoft.com//windows/desktop/Controls/theme-format-values">Format Values</a> for possible parameter values.</para>
    </param>
    <param name="crText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> structure that contains the color of the text.</para>
    </param>
    <param name="crShadow">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> structure that contains the color of the text shadow.</para>
    </param>
    <param name="ixOffset">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> that specifies the x-coordinate of where the text should begin.</para>
    </param>
    <param name="iyOffset">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> that specifies the y-coordinate of where the text should begin.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the height of the text in logical units if the function succeeds, otherwise returns zero.</para>
    </returns>
    <remarks>
      <para>To use <b>DrawShadowText</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.DrawStatusText">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.DrawStatusTextA">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.DrawStatusTextW">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.DrawStatusText">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.DrawStatusTextA">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.DrawStatusTextW">
    <summary>
      <para>The <b>DrawStatusText</b> function draws the specified text in the style of a status window with borders.</para>
    </summary>
    <param name="hDC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>Handle to the display context for the window.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPCRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that contains the position, in client coordinates, of the rectangle in which the text is drawn. The function draws the borders just inside the edges of the specified rectangle.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>Pointer to a null-terminated string that specifies the text to display. Tab characters in the string determine whether the string is left-aligned, right-aligned, or centered.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Text drawing flags. This parameter can be a combination of these values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SBT_NOBORDERS</b>
          </description>
          <description>
            <para>Prevents borders from being drawn around the specified text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_POPOUT</b>
          </description>
          <description>
            <para>Draws highlighted borders that make the text stand out.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SBT_RTLREADING</b>
          </description>
          <description>
            <para>Indicates that the string pointed to by
<i>pszText</i> will be displayed in the opposite direction to the text in the parent window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Normal windows display text left-to-right (LTR). Windows can be <i>mirrored</i> to display languages such as Hebrew or Arabic that read right-to-left (RTL). Normally, the <i>pszText</i> string will be displayed in the same direction as the text in its parent window. If SBT_RTLREADING is set, the <i>pszText</i> string will read in the opposite direction from the text in the parent window.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines DrawStatusText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.Edit_EnableSearchWeb">
    <summary>
      <para>Enables or disables the "Search with Bing…" context menu item in edit controls. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-enablesearchweb">EM_ENABLESEARCHWEB</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="enable">
      <para>
        <b>TRUE</b> to enable web search, or <b>FALSE</b> to disable it.</para>
    </param>
  </member>
  <member name="Windows.Edit_GetCaretIndex">
    <summary>
      <para>Gets the character index of the caret location for a given edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-getcaretindex">EM_GETCARETINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
  </member>
  <member name="Windows.Edit_GetCueBannerText">
    <summary>
      <para>Gets the text that is displayed as a textual cue, or tip, in an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getcuebanner">EM_GETCUEBANNER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <param name="lpwText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A  pointer to a Unicode string that receives the text that is set as the cue banner.</para>
    </param>
    <param name="cchText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>A <b>LONG</b> that specifies the number of <b>WCHAR</b>s in the string referenced by <i>lpcwText</i>.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/em-getcuebanner">EM_GETCUEBANNER</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/edit-controls">Edit Controls</seealso>
  </member>
  <member name="Windows.Edit_GetEndOfLine">
    <summary>
      <para>Gets the end of line character used for the content of the edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-getendofline">EM_GETENDOFLINE</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
  </member>
  <member name="Windows.Edit_GetExtendedStyle">
    <summary>
      <para>Gets the extended styles that are currently in use for a given edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-getextendedstyle">EM_GETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to a list-view control.</para>
    </param>
  </member>
  <member name="Windows.Edit_GetFileLine">
    <summary>
      <para>Gets the text of the specified file (or logical) line (text wrap delimiters are ignored). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-getfileline">EM_GETFILELINE</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="lineNumber">
      <para>The logical line number.</para>
    </param>
    <param name="textBuffer">
      <para>The buffer that receives the text.</para>
    </param>
    <remarks>
      <para>This macro and corresponding message do not recognize text wrapping (visible lines) and, instead, recognize file (logical) lines with an end-of-line delimiter. When text wrap is turned off, visible lines are equivalent to file lines.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a>, <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> messages recognize visible line text wrapping and provide information for the line of text up to the wrapping line break. (Each subsequent line is delimited by the next text wrap break.)</para>
    </remarks>
  </member>
  <member name="Windows.Edit_GetFileLineCount">
    <summary>
      <para>Gets the number of file (or logical) lines (text wrap delimiters are ignored). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-getfilelinecount">EM_GETFILELINECOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <remarks>
      <para>This macro and corresponding message do not recognize text wrapping (visible lines) and, instead, recognize file (logical) lines with an end-of-line delimiter. When text wrap is turned off, visible lines are equivalent to file lines.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a>, <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> messages recognize visible line text wrapping and provide information for the line of text up to the wrapping line break. (Each subsequent line is delimited by the next text wrap break.)</para>
    </remarks>
  </member>
  <member name="Windows.Edit_GetFileLineFromChar">
    <summary>
      <para>Gets the index of the file (or logical) line of text that includes the specified character index  (text wrap delimiters are ignored). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-filelinefromchar">EM_FILELINEFROMCHAR</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="characterIndex">
      <para>The 0-based character index. If characterIndex = -1, the caret location index is used.</para>
    </param>
    <remarks>
      <para>The character index is the zero-based index of the character from the beginning of the edit control.</para>
      <para>This macro and corresponding message do not recognize text wrapping (visible lines) and, instead, recognize file (logical) lines with an end-of-line delimiter. When text wrap is turned off, visible lines are equivalent to file lines.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a>, <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> messages recognize visible line text wrapping and provide information for the line of text up to the wrapping line break. (Each subsequent line is delimited by the next text wrap break.)</para>
    </remarks>
  </member>
  <member name="Windows.Edit_GetFileLineIndex">
    <summary>
      <para>Gets the index of the file (or logical) line of text based on the specified visible line. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-filelineindex">EM_FILELINEINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="lineNumber">
      <para>The file line number, where the number of the
first line is 0. If lineNumber = -1, the file line with the caret is used.</para>
    </param>
    <remarks>
      <para>The logical line index is a zero-based index from the beginning of the edit control.</para>
      <para>This macro and corresponding message do not recognize text wrapping (visible lines) and, instead, recognize file (logical) lines with an end-of-line delimiter. When text wrap is turned off, visible lines are equivalent to file lines.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a>, <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> messages recognize visible line text wrapping and provide information for the line of text up to the wrapping line break. (Each subsequent line is delimited by the next text wrap break.)</para>
    </remarks>
  </member>
  <member name="Windows.Edit_GetFileLineLength">
    <summary>
      <para>Gets the length of the file (or logical) line of text from the specified character index  (text wrap delimiters are ignored). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-filelinelength">EM_FILELINELENGTH</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="characterIndex">
      <para>The character index. If characterIndex = -1, the caret location index is used, not including the
length of any selected text.</para>
    </param>
    <remarks>
      <para>The character index is the zero-based index of the character from the beginning of the edit control.</para>
      <para>This macro and corresponding message do not recognize text wrapping (visible lines) and, instead, recognize file (logical) lines with an end-of-line delimiter. When text wrap is turned off, visible lines are equivalent to file lines.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a>, <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> messages recognize visible line text wrapping and provide information for the line of text up to the wrapping line break. (Each subsequent line is delimited by the next text wrap break.)</para>
    </remarks>
  </member>
  <member name="Windows.Edit_GetHilite">
    <summary>
      <para>This macro is not implemented.</para>
    </summary>
    <param name="hwndCtl">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
  </member>
  <member name="Windows.Edit_GetZoom">
    <summary>
      <para>Gets the current zoom ratio of an edit control (the zoom ratio is always between 1/64 and 64). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getzoom">EM_GETZOOM</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="numerator">
      <para>The numerator of the ratio as a fraction.</para>
    </param>
    <param name="denominator">
      <para>The denominator of the ratio as a fraction.</para>
    </param>
  </member>
  <member name="Windows.Edit_HideBalloonTip">
    <summary>
      <para>Hides any balloon tip associated with an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-hideballoontip">EM_HIDEBALLOONTIP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/em-hideballoontip">EM_HIDEBALLOONTIP</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/edit-controls">Edit Controls</seealso>
  </member>
  <member name="Windows.Edit_SearchWeb">
    <summary>
      <para>Invokes the "Search with Bing…" context menu item in edit controls. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-searchweb">EM_SEARCHWEB</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
  </member>
  <member name="Windows.Edit_SetCaretIndex">
    <summary>
      <para>Sets the character index at which to locate the caret. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-setcaretindex">EM_SETCARETINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="newCaretPosition">
      <para>The character index.</para>
    </param>
  </member>
  <member name="Windows.Edit_SetCueBannerText">
    <summary>
      <para>Sets the text that is displayed as the textual cue, or tip, for an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setcuebanner">EM_SETCUEBANNER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <param name="lpcwText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A pointer to a Unicode string that contains the text to set as the textual cue.</para>
    </param>
    <remarks>
      <para>An edit control that is used to begin a search may display "Enter search here" in gray text as a textual cue. When the user clicks the text, the text goes away and the user can type.</para>
      <para>You cannot set a cue banner on a multiline edit control.</para>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/em-setcuebanner">EM_SETCUEBANNER</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/edit-controls">Edit Controls</seealso>
  </member>
  <member name="Windows.Edit_SetCueBannerTextFocused">
    <summary>
      <para>Sets the text that is displayed as the textual cue, or tip, for an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setcuebanner">EM_SETCUEBANNER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <param name="lpcwText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCWSTR</a></b></para>
      <para>A pointer to a Unicode string that contains the text to set as the textual cue.</para>
    </param>
    <param name="fDrawFocused">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Sets whether the cue text is drawn when the control has keyboard focus.</para>
    </param>
    <remarks>
      <para>An edit control that is used to begin a search may display "Enter search here" in gray text as a textual cue. <i>fDrawFocused</i> controls when the cue text disappears. If <i>fDrawFocused</i> is <b>FALSE</b>, then the cue text disappears when the edit control receives focus. If <i>fDrawFocused</i> is <b>TRUE</b>, then the cue text disappears when the user enters text into the edit control.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/em-setcuebanner">EM_SETCUEBANNER</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/edit-controls">Edit Controls</seealso>
    <seealso cref="Edit_SetCueBannerText" />
  </member>
  <member name="Windows.Edit_SetEndOfLine">
    <summary>
      <para>Sets the end of line character used for the content of the edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-setendofline">EM_SETENDOFLINE</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="eolType">
      <para>The end of line character to use.</para>
    </param>
  </member>
  <member name="Windows.Edit_SetExtendedStyle">
    <summary>
      <para>Sets extended styles for edit controls using the style mask. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-setextendedstyle">EM_SETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="dw">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a> value that specifies the extended edit control styles to set.</para>
    </param>
    <param name="dwMask">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a> value that specifies which styles are to be affected.</para>
    </param>
  </member>
  <member name="Windows.Edit_SetHilite">
    <summary>
      <para>This macro is not implemented.</para>
    </summary>
    <param name="hwndCtl">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <param name="ichStart">
      <para>Type: <b>int</b></para>
      <para>The index of the first character that is highlighted.</para>
    </param>
    <param name="ichEnd">
      <para>Type: <b>int</b></para>
      <para>The index of the last character that is highlighted.</para>
    </param>
  </member>
  <member name="Windows.Edit_SetZoom">
    <summary>
      <para>Sets the current zoom ratio of an edit control (the zoom ratio is always between 1/64 and 64). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setzoom">EM_SETZOOM</a> message explicitly.</para>
    </summary>
    <param name="hwndCtl">
      <para>A handle to the edit control.</para>
    </param>
    <param name="numerator">
      <para>The numerator of the ratio as a fraction.</para>
    </param>
    <param name="denominator">
      <para>The denominator of the ratio as a fraction.</para>
    </param>
  </member>
  <member name="Windows.Edit_ShowBalloonTip">
    <summary>
      <para>Displays a balloon tip associated with an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-showballoontip">EM_SHOWBALLOONTIP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the edit control.</para>
    </param>
    <param name="peditballoontip">
      <para>Type: <b>PEDITBALLOONTIP</b></para>
      <para>A pointer to an <see cref="EDITBALLOONTIP" /> structure that contains information about the balloon tip to display.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso cref="EDITBALLOONTIP" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/em-showballoontip">EM_SHOWBALLOONTIP</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/edit-controls">Edit Controls</seealso>
  </member>
  <member name="Windows.FIRST_IPADDRESS">
    <summary>
      <para>Extracts the field 0 value from a packed IP address retrieved with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-getaddress">IPM_GETADDRESS</a> message.</para>
    </summary>
    <param name="x">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The packed IP address value.</para>
    </param>
  </member>
  <member name="Windows.FlatSB_EnableScrollBar">
    <summary>
      <para>Enables or disables one or both flat scroll bar direction buttons. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="EnableScrollBar" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="unnamedParam2">
      <para>Type: <b>int</b></para>
      <para>A parameter that specifies the scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_BOTH</b>
          </description>
          <description>
            <para>Enables or disables the direction buttons on the horizontal and vertical scroll bars.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Enables or disables the direction buttons on the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Enables or disables the direction buttons on the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A parameter that specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ESB_DISABLE_BOTH</b>
          </description>
          <description>
            <para>Disables both direction buttons on the specified scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_DOWN</b>
          </description>
          <description>
            <para>Disables the down direction button on the vertical scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_LEFT</b>
          </description>
          <description>
            <para>Disables the left direction button on the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_LTUP</b>
          </description>
          <description>
            <para>Disables the left direction button on the horizontal scroll bar or the up direction button on the vertical scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_RIGHT</b>
          </description>
          <description>
            <para>Disables the right direction button on the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_RTDN</b>
          </description>
          <description>
            <para>Disables the right direction button on the horizontal scroll bar or the down direction button on the vertical scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_DISABLE_UP</b>
          </description>
          <description>
            <para>Disables the up direction button on the vertical scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ESB_ENABLE_BOTH</b>
          </description>
          <description>
            <para>Enables both direction buttons on the specified scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if the scroll bar changes, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_GetScrollInfo">
    <summary>
      <para>Gets the information for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="GetScrollInfo" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>A parameter that specifies the scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Retrieves the information for the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Retrieves the information for the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b>LPSCROLLINFO</b></para>
      <para>A pointer to a <see cref="SCROLLINFO" /> structure that will receive the information for the specified scroll bar. The <b>cbSize</b> and <b>fMask</b> members of the structure must be filled out prior to calling <b>FlatSB_GetScrollInfo</b>. The <b>fMask</b> member specifies which properties should be retrieved and can be any combination of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SIF_PAGE</b>
          </description>
          <description>
            <para>Retrieves the page information for the flat scroll bar. This will be placed in the <b>nPage</b> member of the <see cref="SCROLLINFO" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_POS</b>
          </description>
          <description>
            <para>Retrieves the position information for the flat scroll bar. This will be placed in the
<b>nPos</b> member of the <see cref="SCROLLINFO" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_RANGE</b>
          </description>
          <description>
            <para>Retrieves the range information for the flat scroll bar. This will be placed in the <b>nMin</b> and <b>nMax</b> members of the <see cref="SCROLLINFO" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_ALL</b>
          </description>
          <description>
            <para>A combination of SIF_PAGE, SIF_POS, and SIF_RANGE.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_GetScrollPos">
    <summary>
      <para>Gets the thumb position in a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="GetScrollPos" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The parameter that specifies the scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Retrieves the thumb position of the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Retrieves the thumb position of the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the current thumb position of the specified flat scroll bar.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_GetScrollProp">
    <summary>
      <para>Gets the properties for a flat scroll bar. This function can also be used to determine if <see cref="InitializeFlatSB" /> has been called for this window.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="propIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The parameter that determines what
<i>pValue</i> represents and which property is being retrieved. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>WSB_PROP_CXHSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the width, in pixels, of the direction buttons in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXHTHUMB</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the width, in pixels, of the thumb in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXVSCROLL</b>
          </description>
          <description>
            <i>pValue</i> a pointer to an INT value that receives the width, in pixels, of a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYHSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of the direction buttons in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVTHUMB</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of the thumb in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HBKGCOLOR</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to a <b>COLORREF</b> value that receives the background color in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives one of the following visual effects for the horizontal scroll bar.
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects are applied.</para></description></item></list></description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_PALETTE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an <b>HPALETTE</b> value that receives the palette that a scroll bar uses when drawing.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VBKGCOLOR</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to a <b>COLORREF</b> value that receives the background color in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives one of the following visual effects for the vertical scroll bar.
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects are applied.</para></description></item></list></description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_WINSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_HSCROLL</a> and <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VSCROLL</a> style bits contained by the current window.
</description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPINT</a></b></para>
      <para>A pointer to an <b>int</b> that receives the requested data. This parameter depends on the flag passed in
<i>index</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise. If
<i>index</i> is WSB_PROP_HSTYLE, the return is nonzero if <see cref="InitializeFlatSB" /> has been called for this window, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_GetScrollPropPtr">
    <summary>
      <para>Gets the properties for a flat scroll bar. This function can also be used to determine if <see cref="InitializeFlatSB" /> has been called for this window.</para>
      <para>
        <b>Note</b>  This is identical to <see cref="FlatSB_GetScrollProp" />.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="propIndex">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The parameter that determines what
<i>pValue</i> represents and which property is being retrieved. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>WSB_PROP_CXHSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the width, in pixels, of the direction buttons in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXHTHUMB</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the width, in pixels, of the thumb in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXVSCROLL</b>
          </description>
          <description>
            <i>pValue</i> a pointer to an INT value that receives the width, in pixels, of a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYHSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVSCROLL</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of the direction buttons in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVTHUMB</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the height, in pixels, of the thumb in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HBKGCOLOR</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to a <b>COLORREF</b> value that receives the background color in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives one of the following visual effects for the horizontal scroll bar.
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects are applied.</para></description></item></list></description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_PALETTE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an <b>HPALETTE</b> value that receives the palette that a scroll bar uses when drawing.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VBKGCOLOR</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to a <b>COLORREF</b> value that receives the background color in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives one of the following visual effects for the vertical scroll bar.
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar is displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects are applied.</para></description></item></list></description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_WINSTYLE</b>
          </description>
          <description>
            <i>pValue</i> is a pointer to an INT value that receives the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_HSCROLL</a> and <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VSCROLL</a> style bits contained by the current window.
</description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPINT</a></b></para>
      <para>A pointer to an <b>int</b> that receives the requested data. This parameter depends on the flag passed in
<i>index</i>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise. If
<i>index</i> is WSB_PROP_HSTYLE, the return is nonzero if <see cref="InitializeFlatSB" /> has been called for this window, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_GetScrollRange">
    <summary>
      <para>Gets the scroll range for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="GetScrollRange" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Retrieves the scroll range of the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Retrieves the scroll range of the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPINT</a></b></para>
      <para>A pointer to an INT value that receives the minimum scroll range value.</para>
    </param>
    <param name="unnamedParam4">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPINT</a></b></para>
      <para>A pointer to an INT value that receives the maximum scroll range value.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_SetScrollInfo">
    <summary>
      <para>Sets the information for a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="SetScrollInfo" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Sets the information for the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Sets the information for the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="psi">
      <para>Type: <b>LPSCROLLINFO</b></para>
      <para>A pointer to a <see cref="SCROLLINFO" /> structure that contains the new information for the specified scroll bar. The <b>cbSize</b> and
<b>fMask</b> members of the structure must be filled in prior to calling <b>FlatSB_SetScrollInfo</b>. The <b>fMask</b> member specifies which members of the structure contain valid information and can be any combination of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SIF_DISABLENOSCROLL</b>
          </description>
          <description>
            <para>Disables the scroll bar if the new information would cause the scroll bar to be removed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_PAGE</b>
          </description>
          <description>
            <para>Sets the page information for the flat scroll bar. The
<b>nPage</b> member of the <see cref="SCROLLINFO" /> structure must contain the new page value.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_POS</b>
          </description>
          <description>
            <para>Sets the position information for the flat scroll bar. The
<b>nPos</b> member of the <see cref="SCROLLINFO" /> structure must contain the new position value.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_RANGE</b>
          </description>
          <description>
            <para>Sets the range information for the flat scroll bar. The
<b>nMin</b> and
<b>nMax</b> members of the <see cref="SCROLLINFO" /> structure must contain the new range values.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SIF_ALL</b>
          </description>
          <description>
            <para>A combination of SIF_PAGE, SIF_POS, and SIF_RANGE.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="fRedraw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Specifies whether the scroll bar should be redrawn immediately to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn; if it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the current scroll position. If the call to <b>FlatSB_SetScrollInfo</b> changes the scroll position, then the previous position is returned.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_SetScrollPos">
    <summary>
      <para>Sets the current position of the thumb in a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="SetScrollPos" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Sets the thumb position of the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Sets the thumb position of the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pos">
      <para>Type: <b>int</b></para>
      <para>The new thumb position.</para>
    </param>
    <param name="fRedraw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Specifies whether the scroll bar should be redrawn immediately to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn; if it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the previous position of the thumb in the specified flat scroll bar.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_SetScrollProp">
    <summary>
      <para>Sets the properties for a flat scroll bar.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="index">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Determines what
<i>newValue</i> represents and which property is being set. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>WSB_PROP_CXHSCROLL</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the width, in pixels, of the direction buttons in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXHTHUMB</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the width, in pixels, of the thumb in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CXVSCROLL</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the width, in pixels, of the vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYHSCROLL</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the height, in pixels, of the horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVSCROLL</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the height, in pixels, of the direction buttons in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_CYVTHUMB</b>
          </description>
          <description>
            <i>newValue</i> is an INT_PTR value that represents the height, in pixels, of the thumb in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HBKGCOLOR</b>
          </description>
          <description>
            <i>newValue</i> is a
<b>COLORREF</b> value that represents the background color in a horizontal scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_HSTYLE</b>
          </description>
          <description>
            <i>newValue</i> is one of the following values that changes the visual effects for the horizontal scroll bar.
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar will be displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar will be displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects will be applied.</para></description></item></list></description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_PALETTE</b>
          </description>
          <description>
            <i>newValue</i> is an
<b>HPALETTE</b> value that represents the new palette that the scroll bar should use when drawing.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VBKGCOLOR</b>
          </description>
          <description>
            <i>newValue</i> is a
<b>COLORREF</b> value that represents the background color in a vertical scroll bar.
</description>
        </item>
        <item>
          <description>
            <b>WSB_PROP_VSTYLE</b>
          </description>
          <description>
            <i>newValue</i> is one of the following values that changes the visual effects for the vertical scroll bar:
<list type="table"><listheader><term>FSB_ENCARTA_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar will be displayed in 3-D.</para></description></listheader><item><term>FSB_FLAT_MODE</term><description><para>A standard flat scroll bar is displayed. When the mouse moves over a direction button or the thumb, that portion of the scroll bar will be displayed in inverted colors.</para></description></item><item><term>FSB_REGULAR_MODE</term><description><para>A normal, nonflat scroll bar is displayed. No special visual effects will be applied.</para></description></item></list></description>
        </item>
      </list>
    </param>
    <param name="newValue">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT_PTR</a></b></para>
      <para>A new value to set. This parameter depends on the flag passed in
<i>index</i>.</para>
    </param>
    <param name="unnamedParam4">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Specifies whether the scroll bar should be redrawn immediately to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn; if it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_SetScrollRange">
    <summary>
      <para>Sets the scroll range of a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="SetScrollRange" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Sets the scroll range of the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Sets the scroll range of the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="min">
      <para>Type: <b>int</b></para>
      <para>The new minimum scroll range value.</para>
    </param>
    <param name="max">
      <para>Type: <b>int</b></para>
      <para>The new maximum scroll range value.</para>
    </param>
    <param name="fRedraw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Specifies whether the scroll bar should be redrawn immediately to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn; if it is <b>FALSE</b>, the scroll bar is not redrawn.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FlatSB_ShowScrollBar">
    <summary>
      <para>Shows or hides a flat scroll bar. If flat scroll bars are not initialized for the window, this function calls the standard <see cref="ShowScrollBar" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that contains the flat scroll bar. This window handle must have been passed previously in a call to <see cref="InitializeFlatSB" />.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The scroll bar type. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SB_BOTH</b>
          </description>
          <description>
            <para>Shows or hides the horizontal and vertical scroll bars.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_HORZ</b>
          </description>
          <description>
            <para>Shows or hides the horizontal scroll bar.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SB_VERT</b>
          </description>
          <description>
            <para>Shows or hides the vertical scroll bar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="unnamedParam3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Specifies whether the scroll bar should be shown or hidden. If this parameter is nonzero, the scroll bar will be shown; if it is zero, the scroll bar will be hidden.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.FORWARD_WM_NOTIFY">
    <summary>
      <para>Sends or posts the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a> message.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a> message.</para>
    </param>
    <param name="idFrom">
      <para>Type: <b>int</b></para>
      <para>The identifier of the control sending the message.</para>
    </param>
    <param name="pnmhdr">
      <para>Type: <b><see cref="NMHDR" />*</b></para>
      <para>A pointer to an <see cref="NMHDR" /> structure that contains the notification code and additional information. For some notification codes, this parameter points to a larger structure that has the <b>NMHDR</b> structure as its first member.</para>
    </param>
    <param name="fn">
      <para>Type: <b>function</b></para>
      <para>The function that sends or posts the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a> message. This parameter can be either the <see cref="SendMessage" /> or <see cref="PostMessage" /> function.</para>
    </param>
    <remarks>
      <para>The <b>FORWARD_WM_NOTIFY</b> macro is defined as follows.</para>
      <code>#define FORWARD_WM_NOTIFY(hwnd, idFrom, pnmhdr, fn) \

    (void)(fn)((hwnd), WM_NOTIFY, (WPARAM)(int)(id), \
    (LPARAM)(NMHDR*)(pnmhdr))
</code>
    </remarks>
  </member>
  <member name="Windows.FOURTH_IPADDRESS">
    <summary>
      <para>Extracts the field 3 value from a packed IP address retrieved with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-getaddress">IPM_GETADDRESS</a> message.</para>
    </summary>
    <param name="x">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The packed IP address value.</para>
    </param>
  </member>
  <member name="Windows.GetEffectiveClientRect">
    <summary>
      <para>Calculates the dimensions of a rectangle in the client area that contains all the specified controls.</para>
    </summary>
    <param name="hWnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that has the client area to check.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that receives the dimensions of the rectangle.</para>
    </param>
    <param name="lpInfo">
      <para>Type: <b>const <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a>*</b></para>
      <para>A pointer to a null-terminated array of integers that identify controls in the client area. Each control requires a pair of consecutive elements. The first element of the pair must be nonzero and the second element of the pair must be the control identifier. The first pair represents the menu and is ignored. The last element must be zero to identify the end of the array.</para>
    </param>
    <remarks>
      <para>If a window in the <i>lprc</i> array is visible, or will be visible when its parent becomes visible, its rectangle is subtracted from the effective client rectangle.</para>
    </remarks>
    <seealso cref="ShowHideMenuCtl" />
  </member>
  <member name="Windows.GetMUILanguage">
    <summary>
      <para>Gets the language currently in use by the common controls for a particular process.</para>
    </summary>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LANGID</a></b></para>
      <para>Returns the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a> of the language an application has specified for the common controls by calling <see cref="InitMUILanguage" />. <b>GetMUILanguage</b> returns the value for the process from which it is called. If
<b>InitMUILanguage</b> has not been called or was not called from the same process, <b>GetMUILanguage</b> returns the language-neutral LANGID, <see cref="MAKELANGID" />(LANG_NEUTRAL, SUBLANG_NEUTRAL).</para>
    </returns>
    <remarks>
      <para>See <a href="https://docs.microsoft.com//windows/desktop/Intl/international-support">Internationalization for Windows Applications</a> for further discussion of localization.</para>
    </remarks>
  </member>
  <member name="Windows.GetWindowSubclass">
    <summary>
      <para>Retrieves the reference data for the specified window subclass callback.</para>
    </summary>
    <param name="hWnd">
      <para>Type: <b>HWND</b></para>
      <para>The handle of the window being subclassed.</para>
    </param>
    <param name="pfnSubclass">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a></b></para>
      <para>A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback.</para>
    </param>
    <param name="uIdSubclass">
      <para>Type: <b>UINT_PTR</b></para>
      <para>
        <b>UINT_PTR</b> subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value.</para>
    </param>
    <param name="pdwRefData">
      <para>Type: <b>DWORD_PTR*</b></para>
      <para>A pointer to a <b>DWORD</b> which will return the reference data. Note: On 64-bit versions of Windows, pointers are 64-bit values.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>The subclass callback was successfully installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>The subclass callback was not installed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To use <b>GetWindowSubclass</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso cref="DefSubclassProc" />
    <seealso cref="RemoveWindowSubclass" />
    <seealso cref="SetWindowSubclass" />
  </member>
  <member name="Windows.HANDLE_WM_NOTIFY">
    <summary>
      <para>Calls a function that processes the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a> message.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that received <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a>.</para>
    </param>
    <param name="wParam">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">WPARAM</a></b></para>
      <para>The first parameter of <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a>.</para>
    </param>
    <param name="lParam">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The second parameter of <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a>.</para>
    </param>
    <param name="fn">
      <para>Type: <b>function</b></para>
      <para>The function that is to process <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-notify">WM_NOTIFY</a>.</para>
    </param>
    <remarks>
      <para>The <b>HANDLE_WM_NOTIFY</b> macro is defined as follows.</para>
      <code>#define HANDLE_WM_NOTIFY(hwnd, wParam, lParam, fn) \

    (fn)((hwnd), (int)(wParam), (NMHDR*)(lParam))
</code>
      <para>The macro can be used inside a dialog window procedure to simplify the calling of an application-defined function that requires an <see cref="NMHDR" /> parameter.</para>
    </remarks>
  </member>
  <member name="Windows.Header_ClearAllFilters">
    <summary>
      <para>Clears all of the filters for a given header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-clearfilter">HDM_CLEARFILTER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <remarks>
      <para>When all the filters are cleared, the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdn-filterchange">HDN_FILTERCHANGE</a> notification will be sent only once.</para>
    </remarks>
    <seealso cref="Header_ClearFilter" />
  </member>
  <member name="Windows.Header_ClearFilter">
    <summary>
      <para>Clears the filter for a given header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-clearfilter">HDM_CLEARFILTER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>A value specifying the column of the filter to be cleared. Specifying -1 will clear all of the filters.</para>
    </param>
    <remarks>
      <para>If the column value is specified as -1, all the filters will be cleared and the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdn-filterchange">HDN_FILTERCHANGE</a> notification will be sent only once.</para>
    </remarks>
    <seealso cref="Header_ClearAllFilters" />
  </member>
  <member name="Windows.Header_CreateDragImage">
    <summary>
      <para>Creates a transparent version of an item image within an existing header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-createdragimage">HDM_CREATEDRAGIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>A zero-based index of the item within the header control. The image assigned to this item is used as the basis for the transparent image.</para>
    </param>
  </member>
  <member name="Windows.Header_DeleteItem">
    <summary>
      <para>Deletes an item from a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-deleteitem">HDM_DELETEITEM</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>An index of the item to delete.</para>
    </param>
    <remarks>
      <para>The <b>Header_DeleteItem</b> macro is defined as follows.</para>
      <code>#define Header_DeleteItem(hwndHD, index)     \

      (BOOL)SendMessage((hwndHD), HDM_DELETEITEM, (WPARAM)(int)(index), 0L)
</code>
    </remarks>
  </member>
  <member name="Windows.Header_EditFilter">
    <summary>
      <para>Moves the input focus to the edit box when a filter button has the focus.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>A value specifying the column to edit.</para>
    </param>
    <param name="fDiscardChanges">
      <para>Type: <b>fDiscardChanges</b></para>
      <para>A flag that specifies how to handle the user's editing changes. Use this flag to specify what to do if the user is in the process of editing the filter when the message is sent.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>TRUE</b>
            </b>
          </description>
          <description>
            <para>Discard the changes made by the user.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>FALSE</b>
            </b>
          </description>
          <description>
            <para>Accept the changes made by the user.</para>
          </description>
        </item>
      </list>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/hdm-editfilter">HDM_EDITFILTER</seealso>
  </member>
  <member name="Windows.Header_GetBitmapMargin">
    <summary>
      <para>Gets the width of the margin (in pixels) of a bitmap in an existing header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getbitmapmargin">HDM_GETBITMAPMARGIN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <seealso cref="Header_SetBitmapMargin" />
  </member>
  <member name="Windows.Header_GetFocusedItem">
    <summary>
      <para>Gets the item in a header control that has the focus. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getfocuseditem">HDM_GETFOCUSEDITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/header-controls">About Header Controls</seealso>
  </member>
  <member name="Windows.Header_GetImageList">
    <summary>
      <para>Gets the handle to the image list that has been set for an existing header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getimagelist">HDM_GETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
  </member>
  <member name="Windows.Header_GetItem">
    <summary>
      <para>Gets information about an item in a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitem">HDM_GETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the item for which information is to be retrieved.</para>
    </param>
    <param name="phdi">
      <para>Type: <b>LPHDITEM</b></para>
      <para>A pointer to an <see cref="HDITEM" /> structure. When the message is sent, the <b>mask</b> member indicates the type of information being requested. When the message returns, the other members receive the requested information. If the
<b>mask</b> member specifies zero, the message returns <b>TRUE</b> but copies no information to the structure.</para>
    </param>
    <remarks>
      <para>If the HDI_TEXT flag is set in the
<b>mask</b> member of the <see cref="HDITEM" /> structure, the control may change the
<b>pszText</b> member of the structure to point to the new text instead of filling the buffer with the requested text. Applications should not assume that the text will always be placed in the requested buffer.</para>
      <para>The <b>Header_GetItem</b> macro is defined as follows:</para>
      <code>#define Header_GetItem(hwndHD, index, phdi)      \

    (BOOL)SendMessage((hwndHD), HDM_GETITEM,   \

    (WPARAM)(int)(index), (LPARAM)(LPHDITEM)(phdi))
</code>
    </remarks>
  </member>
  <member name="Windows.Header_GetItemCount">
    <summary>
      <para>Gets a count of the items in a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitemcount">HDM_GETITEMCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <remarks>
      <para>The <b>Header_GetItemCount</b> macro is defined as follows.</para>
      <code>#define Header_GetItemCount(hwndHD)   \

       (int)SendMessage((hwndHD), HDM_GETITEMCOUNT, 0, 0L)
</code>
    </remarks>
  </member>
  <member name="Windows.Header_GetItemDropDownRect">
    <summary>
      <para>Gets the coordinates of the drop-down button for a specified item in a header control. The header control must be of type <b>HDF_SPLITBUTTON</b>. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitemdropdownrect">HDM_GETITEMDROPDOWNRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the header control item for which to retrieve the bounding rectangle.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive the bounding rectangle information. The message sender is responsible for allocating this structure. The coordinates returned in the <b>RECT</b> structure are expressed as screen coordinates.</para>
    </param>
  </member>
  <member name="Windows.Header_GetItemRect">
    <summary>
      <para>Gets the bounding rectangle for a given item in a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitemrect">HDM_GETITEMRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the header control item for which to retrieve the bounding rectangle.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that receives the bounding rectangle information.</para>
    </param>
  </member>
  <member name="Windows.Header_GetOrderArray">
    <summary>
      <para>Gets the current left-to-right order of items in a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getorderarray">HDM_GETORDERARRAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="iCount">
      <para>Type: <b>int</b></para>
      <para>The number of integer elements that
<i>lpiArray</i> can hold. This value must be equal to the number of items in the control (see <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitemcount">HDM_GETITEMCOUNT</a>).</para>
    </param>
    <param name="lpi">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an array of integers that receive the index values for items in the header.</para>
    </param>
    <remarks>
      <para>The number of elements in <i>lpiArray</i> is specified in <i>iSize</i> and must be equal to the number of items in the control. For example, the following code fragment will reserve enough memory to hold the index values.</para>
      <code>
int iItems,

    *lpiArray;



// Get memory for buffer

if((iItems = SendMessage(hwndHD, HDM_GETITEMCOUNT, 0,0))!=-1)

    if(!(lpiArray = calloc(iItems,sizeof(int))))

MessageBox(hwnd, "Out of memory.","Error", MB_OK);
</code>
    </remarks>
  </member>
  <member name="Windows.Header_GetOverflowRect">
    <summary>
      <para>Gets the coordinates of the drop-down overflow area for a specified header control. The header control must be of type <b>HDF_SPLITBUTTON</b>. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getoverflowrect">HDM_GETOVERFLOWRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="lprc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive the bounding rectangle information.The message sender is responsible for allocating this structure. The coordinates returned in the <b>RECT</b> structure are expressed as screen coordinates.</para>
    </param>
  </member>
  <member name="Windows.Header_GetStateImageList">
    <summary>
      <para>Gets the handle to the image list that has been set for an existing header control state.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
  </member>
  <member name="Windows.Header_GetUnicodeFormat">
    <summary>
      <para>Gets the Unicode character format flag for the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getunicodeformat">HDM_GETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the control.</para>
    </param>
    <seealso cref="Header_SetUnicodeFormat" />
  </member>
  <member name="Windows.Header_InsertItem">
    <summary>
      <para>Inserts a new item into a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-insertitem">HDM_INSERTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the item after which the new item is to be inserted. The new item is inserted at the end of the header control if
<i>index</i> is greater than or equal to the number of items in the control. If
<i>index</i> is zero, the new item is inserted at the beginning of the header control.</para>
    </param>
    <param name="phdi">
      <para>Type: <b>const LPHDITEM</b></para>
      <para>A pointer to an <see cref="HDITEM" /> structure that contains information about the new item.</para>
    </param>
    <remarks>
      <para>The <b>Header_InsertItem</b> macro is defined as follows:</para>
      <code>#define Header_InsertItem(hwndHD, index, phdi) \

    (int)SendMessage((hwndHD), HDM_INSERTITEM, (WPARAM)(int)(index), \

    (LPARAM)(const LPHDITEM)(phdi))
</code>
    </remarks>
  </member>
  <member name="Windows.Header_Layout">
    <summary>
      <para>Retrieves the correct size and position of a header control within the parent window. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-layout">HDM_LAYOUT</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="playout">
      <para>Type: <b>LPHDLAYOUT</b></para>
      <para>A pointer to an <see cref="HDLAYOUT" /> structure. The
<b>prc</b> member specifies the coordinates of a rectangle, and the
<b>pwpos</b> member receives the size and position for the header control within the rectangle.</para>
    </param>
    <remarks>
      <para>The <b>Header_Layout</b> macro is defined as follows:</para>
      <code>#define Header_Layout(hwndHD, playout) \

    (BOOL)SendMessage((hwndHD), HDM_LAYOUT, 0, \

    (LPARAM)(LPHDLAYOUT)(playout))
</code>
    </remarks>
  </member>
  <member name="Windows.Header_OrderToIndex">
    <summary>
      <para>Retrieves an index value for an item based on its order in the header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/hdm-ordertoindex">HDM_ORDERTOINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The order that the item appears within the header control, from left to right. The index value of the item in the far left column would be 0, the next item to the right would be 1, and so on.</para>
    </param>
  </member>
  <member name="Windows.Header_SetBitmapMargin">
    <summary>
      <para>Sets the width of the margin for a bitmap in an existing header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setbitmapmargin">HDM_SETBITMAPMARGIN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="iWidth">
      <para>Type: <b>int</b></para>
      <para>The width, specified in pixels, of the margin that surrounds a bitmap within an existing header control.</para>
    </param>
    <seealso cref="Header_GetBitmapMargin" />
  </member>
  <member name="Windows.Header_SetFilterChangeTimeout">
    <summary>
      <para>Sets the timeout interval between the time a change takes place in the filter attributes and the posting of an <a href="https://docs.microsoft.com//windows/desktop/Controls/hdn-filterchange">HDN_FILTERCHANGE</a> notification. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setfilterchangetimeout">HDM_SETFILTERCHANGETIMEOUT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The timeout value, in milliseconds.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setfilterchangetimeout">HDM_SETFILTERCHANGETIMEOUT</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/hdn-filterchange">HDN_FILTERCHANGE</seealso>
  </member>
  <member name="Windows.Header_SetFocusedItem">
    <summary>
      <para>Sets the focus to a specified item in a header control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setfocuseditem">HDM_SETFOCUSEDITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the header control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>The index of item.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/header-controls">About Header Controls</seealso>
  </member>
  <member name="Windows.Header_SetHotDivider">
    <summary>
      <para>Changes the color of a divider between header items to indicate the destination of an external drag-and-drop operation. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-sethotdivider">HDM_SETHOTDIVIDER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="fPos">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A value specifying how
<i>dwInputValue</i> is to be interpreted. The value in this field can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>TRUE</b>
            </b>
          </description>
          <description>
            <para>Indicates that
<i>dwInputValue</i> holds client coordinates of the pointer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>FALSE</b>
            </b>
          </description>
          <description>
            <para>Indicates that
<i>dwInputValue</i> holds a divider index value.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>The value held here is interpreted depending on the value of
<i>flag</i>.</para>
      <para>If
<i>flag</i> is <b>TRUE</b>,
<i>dwInputValue</i> represents the x- and y- client coordinates of the pointer. The x-coordinate is in the low word, and the y-coordinate is in the high word. Upon receiving the message, the header control highlights the appropriate divider based on the
<i>dwInputValue</i> coordinates.</para>
      <para>If
<i>flag</i> is <b>FALSE</b>,
<i>dwInputValue</i> represents the integer index of the divider that will be highlighted.</para>
    </param>
    <remarks>
      <para>A header control set to the <a href="https://docs.microsoft.com//windows/desktop/Controls/header-control-styles">HDS_DRAGDROP</a> style produces this effect automatically. This message is intended to be used when the owner of the control handles drag-and-drop operations manually.</para>
    </remarks>
  </member>
  <member name="Windows.Header_SetImageList">
    <summary>
      <para>Assigns an image list to an existing header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setimagelist">HDM_SETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to an image list.</para>
    </param>
  </member>
  <member name="Windows.Header_SetItem">
    <summary>
      <para>Sets the attributes of the specified item in a header control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setitem">HDM_SETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwndHD">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The current index of the item whose attributes are to be changed.</para>
    </param>
    <param name="phdi">
      <para>Type: <b>LPHDITEM</b></para>
      <para>A pointer to an <see cref="HDITEM" /> structure that contains item information. When this message is sent, the
<b>mask</b> member of the structure must be set to indicate which attributes are being set.</para>
    </param>
    <remarks>
      <para>The <see cref="HDITEM" /> structure that supports this macro supports item order and image list information. By using these members, you can control the order in which items are displayed and specify images to appear with items.</para>
    </remarks>
  </member>
  <member name="Windows.Header_SetOrderArray">
    <summary>
      <para>Sets the left-to-right order of header items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setorderarray">HDM_SETORDERARRAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="iCount">
      <para>Type: <b>int</b></para>
      <para>The size of the buffer at
<i>lpiArray</i>, in elements. This value must equal the value returned by <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-getitemcount">HDM_GETITEMCOUNT</a>.</para>
    </param>
    <param name="lpi">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an array that specifies the order in which items should be displayed, from left to right. For example, if the contents of the array are {2,0,1}, the control displays item 2, item 0, and item 1, from left to right.</para>
    </param>
  </member>
  <member name="Windows.Header_SetStateImageList">
    <summary>
      <para>Assigns an image list to an existing header control state.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a header control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to an image list control.</para>
    </param>
  </member>
  <member name="Windows.Header_SetUnicodeFormat">
    <summary>
      <para>Sets the UNICODE character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/hdm-setunicodeformat">HDM_SETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the control.</para>
    </param>
    <param name="fUnicode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters.</para>
    </param>
    <seealso cref="Header_GetUnicodeFormat" />
  </member>
  <member name="Windows.HIMAGELIST_QueryInterface">
    <summary>
      <para>Retrieves a pointer to an <see cref="IImageList" /> or <see cref="IImageList2" /> object that corresponds to the image list's HIMAGELIST handle.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>The handle to the image list.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The identifier of the interface being requested. Normally IID_IImageList or IID_IImageList2.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the address of the interface pointer requested in <i>riid</i>. If the object does not support the interface specified in <i>riid</i>, <i>ppv</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_Add">
    <summary>
      <para>Adds an image or images to an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="hbmImage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>A handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap.</para>
    </param>
    <param name="hbmMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the index of the first new image if successful, or -1 otherwise.</para>
    </returns>
    <remarks>
      <para>The <b>ImageList_Add</b> function copies the bitmap to an internal data structure. Be sure to use the <see cref="DeleteObject" /> function to delete
<i>hbmImage</i> and
<i>hbmMask</i> after the function returns.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_AddIcon">
    <summary>
      <para>Adds an icon or cursor to an image list. <b>ImageList_AddIcon</b> calls the <see cref="ImageList_ReplaceIcon" /> function.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list. If this parameter identifies a masked image list, the macro copies both the image and mask bitmaps of the icon or cursor. If this parameter identifies a nonmasked image list, the macro copies only the image bitmap.</para>
    </param>
    <param name="hicon">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HICON</a></b></para>
      <para>A handle to the icon or cursor that contains the bitmap and mask for the new image.</para>
    </param>
    <remarks>
      <para>Because the system does not save
<i>hicon</i>, you can destroy it after the macro returns if the icon or cursor was created by the <see cref="CreateIcon" /> function. You do not need to destroy <i>hicon</i> if it was loaded by the <see cref="LoadIcon" /> function; the system automatically frees an icon resource when it is no longer needed.</para>
      <para>The <b>ImageList_AddIcon</b> macro is defined as follows:</para>
      <code>#define  ImageList_AddIcon(himl, hicon) ImageList_ReplaceIcon(himl, -1, hicon)
</code>
    </remarks>
  </member>
  <member name="Windows.ImageList_AddMasked">
    <summary>
      <para>Adds an image or images to an image list, generating a mask from the specified bitmap.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="hbmImage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>A handle to the bitmap that contains one or more images. The number of images is inferred from the width of the bitmap.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate the mask. Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is CLR_DEFAULT, then the color of the pixel at (0,0) is used as the mask.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the index of the first new image if successful, or -1 otherwise.</para>
    </returns>
    <remarks>
      <para>The <b>ImageList_AddMasked</b> function copies the bitmap to an internal data structure. Bitmaps with color depth greater than 8bpp are not supported. Be sure to use the <see cref="DeleteObject" /> function to delete <i>hbmImage</i> after the function returns.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_BeginDrag">
    <summary>
      <para>Begins dragging an image.</para>
    </summary>
    <param name="himlTrack">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="iTrack">
      <para>Type: <b>int</b></para>
      <para>The index of the image to drag.</para>
    </param>
    <param name="dxHotspot">
      <para>Type: <b>int</b></para>
      <para>The x-coordinate of the location of the drag position relative to the upper-left corner of the image.</para>
    </param>
    <param name="dyHotspot">
      <para>Type: <b>int</b></para>
      <para>The y-coordinate of the location of the drag position relative to the upper-left corner of the image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>This function creates a temporary image list that is used for dragging. In response to subsequent <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> messages, you can move the drag image by using the <see cref="ImageList_DragMove" /> function. To end the drag operation, you can use the <see cref="ImageList_EndDrag" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_Copy">
    <summary>
      <para>Copies images within a given image list.</para>
    </summary>
    <param name="himlDst">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to an image list that is the target of the copy operation. In current versions of Windows, both <i>himlDst</i> and <i>himlSrc</i> must be identical.</para>
    </param>
    <param name="iDst">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the image to be used as the destination of the copy operation.</para>
    </param>
    <param name="himlSrc">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to an image list that is the target of the copy operation. In current versions of Windows, both <i>himlDst</i> and <i>himlSrc</i> must be identical.</para>
    </param>
    <param name="iSrc">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the image to be used as the source of the copy operation.</para>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>the bit flag value that specifies the type of copy operation to be made. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ILCF_MOVE</b>
          </description>
          <description>
            <para>The source image is copied to the destination image's index. This operation results in multiple instances of a given image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILCF_SWAP</b>
          </description>
          <description>
            <para>The source and destination images exchange positions within the image list.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_Create">
    <summary>
      <para>Creates a new image list.</para>
    </summary>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width, in pixels, of each image.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>The height, in pixels, of each image.</para>
    </param>
    <param name="flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A set of bit flags that specify the type of image list to create. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/Controls/ilc-constants">Image List Creation Flags</a>.</para>
    </param>
    <param name="cInitial">
      <para>Type: <b>int</b></para>
      <para>The number of images that the image list initially contains.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>When you finish using the image list, destroy it by calling the <see cref="ImageList_Destroy" /> function.</para>
      <para>
        <b>Note</b>  Comctl32.dll version 6 is not redistributable but it is included in Windows or later. To use Comctl32.dll version 6, specify it in a manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_Destroy">
    <summary>
      <para>Destroys an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list to destroy.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_DragEnter">
    <summary>
      <para>Displays the drag image at the specified position within the window.</para>
    </summary>
    <param name="hwndLock">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that owns the drag image.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>To begin a drag operation, use the <see cref="ImageList_BeginDrag" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_DragLeave">
    <summary>
      <para>Unlocks the specified window and hides the drag image, allowing the window to be updated.</para>
    </summary>
    <param name="hwndLock">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that owns the drag image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_DragMove">
    <summary>
      <para>Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> message.</para>
    </summary>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>To begin a drag operation, use the <see cref="ImageList_BeginDrag" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_DragShowNolock">
    <summary>
      <para>Shows or hides the image being dragged.</para>
    </summary>
    <param name="fShow">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A value specifying whether to show or hide the image being dragged. Specify <b>TRUE</b> to show the image or <b>FALSE</b> to hide the image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_Draw">
    <summary>
      <para>Draws an image list item in the specified device context.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the image to draw.</para>
    </param>
    <param name="hdcDst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>A handle to the destination device context.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>The x-coordinate at which to draw within the specified device context.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>The y-coordinate at which to draw within the specified device context.</para>
    </param>
    <param name="fStyle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The drawing style and, optionally, the overlay image. For information about specifying an overlay image index, see the comments section at the end of this topic. This parameter can be a combination of an overlay image index and one or more of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ILD_BLEND</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_BLEND25</b>
          </description>
          <description>
            <para>Draws the image, blending 25 percent with the system highlight color. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_BLEND50</b>
          </description>
          <description>
            <para>Draws the image, blending 50 percent with the system highlight color. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_FOCUS</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_IMAGE</b>
          </description>
          <description>
            <para>Set this flag if the overlay does not require a mask to be drawn. This flag causes <see cref="ImageList_DrawEx" /> to draw just the image, ignoring the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_MASK</b>
          </description>
          <description>
            <para>Draws the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_NORMAL</b>
          </description>
          <description>
            <para>Draws the image using the background color for the image list. If the background color is the CLR_NONE value, the image is drawn transparently using the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_SELECTED</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_TRANSPARENT</b>
          </description>
          <description>
            <para>Draws the image transparently using the mask, regardless of the background color. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>An overlay image is drawn transparently over the primary image specified in the <i>i</i> parameter. To specify an overlay image in the <i>fStyle</i> parameter, use the <see cref="INDEXTOOVERLAYMASK" /> macro to shift the one-based index of the overlay image. Use the OR operator to logically combine the return value of the macro with the drawing style flags specified in the <i>fStyle</i> parameter. You must first specify this image as an overlay image by using the <see cref="ImageList_SetOverlayImage" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_DrawEx">
    <summary>
      <para>Draws an image list item in the specified device context. The function uses the specified drawing style and blends the image with the specified color.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the image to draw.</para>
    </param>
    <param name="hdcDst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HDC</a></b></para>
      <para>A handle to the destination device context.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>The x-coordinate at which to draw within the specified device context.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>The y-coordinate at which to draw within the specified device context.</para>
    </param>
    <param name="dx">
      <para>Type: <b>int</b></para>
      <para>The width of the portion of the image to draw relative to the upper-left corner of the image. If <i>dx</i> and
<i>dy</i> are zero, the function draws the entire image. The function does not ensure that the parameters are valid.</para>
    </param>
    <param name="dy">
      <para>Type: <b>int</b></para>
      <para>The height of the portion of the image to draw, relative to the upper-left corner of the image. If
<i>dx</i> and
<i>dy</i> are zero, the function draws the entire image. The function does not ensure that the parameters are valid.</para>
    </param>
    <param name="rgbBk">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The background color of the image. This parameter can be an application-defined RGB value or one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CLR_NONE</b>
          </description>
          <description>
            <para>No background color. The image is drawn transparently.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CLR_DEFAULT</b>
          </description>
          <description>
            <para>The default background color. The image is drawn using the background color of the image list.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="rgbFg">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The foreground color of the image. This parameter can be an application-defined RGB value or one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CLR_NONE</b>
          </description>
          <description>
            <para>No blend color. The image is blended with the color of the destination device context.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CLR_DEFAULT</b>
          </description>
          <description>
            <para>The default foreground color. The image is drawn using the system highlight color as the foreground color.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="fStyle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The drawing style and, optionally, the overlay image. For information about specifying an overlay image index, see the comments section at the end of this topic. This parameter can be a combination of an overlay image index and one or more of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ILD_BLEND</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_BLEND25</b>
          </description>
          <description>
            <para>Draws the image, blending 25 percent with the blend color specified by <i>rgbFg</i>. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_BLEND50</b>
          </description>
          <description>
            <para>Draws the image, blending 50 percent with the blend color specified by <i>rgbFg</i>. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_FOCUS</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_IMAGE</b>
          </description>
          <description>
            <para>Set this flag if the overlay does not require a mask to be drawn. This flag causes <b>ImageList_DrawEx</b> to draw just the image, ignoring the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_MASK</b>
          </description>
          <description>
            <para>Draws the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_NORMAL</b>
          </description>
          <description>
            <para>Draws the image using the background color for the image list. If the background color is the CLR_NONE value, the image is drawn transparently using the mask.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILD_SELECTED</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>ILD_TRANSPARENT</b>
          </description>
          <description>
            <para>Draws the image transparently using the mask, regardless of the background color. This value has no effect if the image list does not contain a mask.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>An overlay image is drawn transparently over the primary image specified in the <i>i</i> parameter. To specify an overlay image in the <i>fStyle</i> parameter, use the <see cref="INDEXTOOVERLAYMASK" /> macro to shift the one-based index of the overlay image. Use the OR operator to logically combine the return value of the macro with the drawing style flags specified in the <i>fStyle</i> parameter. You must first specify this image as an overlay image by using the <see cref="ImageList_SetOverlayImage" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_DrawIndirect">
    <summary>
      <para>Draws an image list image based on an <see cref="IMAGELISTDRAWPARAMS" /> structure.</para>
    </summary>
    <param name="pimldp">
      <para>Type: <b><see cref="IMAGELISTDRAWPARAMS" />*</b></para>
      <para>A pointer to an <see cref="IMAGELISTDRAWPARAMS" /> structure that contains information about the draw operation.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, and zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_Duplicate">
    <summary>
      <para>Creates a duplicate of an existing image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list to be duplicated. All information contained in the original image list for normal images is copied to the new image list. Overlay images are not copied.</para>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the new duplicate image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_EndDrag">
    <summary>
      <para>Ends a drag operation.</para>
    </summary>
    <remarks>
      <para>The temporary image list is destroyed when the <b>ImageList_EndDrag</b> function is called. To begin a drag operation, use the <see cref="ImageList_BeginDrag" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_ExtractIcon">
    <summary>
      <para>Calls the <see cref="ImageList_GetIcon" /> function to create an icon or cursor based on an image and mask in an image list.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>This parameter is not used and should always be zero.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the image.</para>
    </param>
    <remarks>
      <para>It is the responsibility of the calling application to destroy the icon returned from this function by using the <see cref="DestroyIcon" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_GetBkColor">
    <summary>
      <para>Retrieves the current background color for an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The return value is the background color.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_GetDragImage">
    <summary>
      <para>Retrieves the temporary image list that is used for the drag image. The function also retrieves the current drag position and the offset of the drag image relative to the drag position.</para>
    </summary>
    <param name="ppt">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the current drag position. Can be <b>NULL</b>.</para>
    </param>
    <param name="pptHotspot">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
      <para>A pointer to a <b>POINT</b> structure that receives the offset of the drag image relative to the drag position. Can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>The temporary image list is destroyed when the <see cref="ImageList_EndDrag" /> function is called. To begin a drag operation, use the <see cref="ImageList_BeginDrag" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_GetIcon">
    <summary>
      <para>Creates an icon from an image and mask in an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>An index of the image.</para>
    </param>
    <param name="flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A combination of flags that specify the drawing style. For a list of values, see the description of the <i>fStyle</i> parameter of the <see cref="ImageList_Draw" /> function.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HICON</a></b></para>
      <para>Returns the handle to the icon if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>It is the responsibility of the calling application to destroy the icon returned from this function using the <see cref="DestroyIcon" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_GetIconSize">
    <summary>
      <para>Retrieves the dimensions of images in an image list. All images in an image list have the same dimensions.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an integer variable that receives the width, in pixels, of each image.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an integer variable that receives the height, in pixels, of each image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_GetImageCount">
    <summary>
      <para>Retrieves the number of images in an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the number of images.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_GetImageInfo">
    <summary>
      <para>Retrieves information about an image.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the image.</para>
    </param>
    <param name="pImageInfo">
      <para>Type: <b><see cref="IMAGEINFO" />*</b></para>
      <para>A pointer to an <see cref="IMAGEINFO" /> structure that receives information about the image. The information in this structure can be used to directly manipulate the bitmaps for the image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>An application should not call <see cref="DeleteObject" /> to destroy the bitmaps retrieved by <b>ImageList_GetImageInfo</b>. The system destroys the bitmaps when the application calls the <see cref="ImageList_Destroy" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_LoadBitmap">
    <summary>
      <para>Calls the <see cref="ImageList_LoadImage" /> function to create an image list from the specified bitmap resource.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the bitmap resource. This parameter is <b>NULL</b> if you are loading an OEM bitmap.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load. If the <i>hi</i> parameter is non-<b>NULL</b>, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module. If <i>hi</i> is <b>NULL</b>, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM bitmap to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM bitmap identifiers defined in WINUSER.H. These identifiers have the OBM_ prefix.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified bitmap.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated.</para>
    </param>
  </member>
  <member name="Windows.ImageList_LoadImage">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_LoadImageA">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_LoadImageW">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_LoadImage">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_LoadImageA">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_LoadImageW">
    <summary>
      <para>Creates an image list from the specified bitmap.</para>
    </summary>
    <param name="hi">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the instance that contains the resource. This parameter can be <b>NULL</b> if you are loading an image from a file or loading an OEM resource.</para>
    </param>
    <param name="lpbmp">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>The image to load.</para>
      <para>If the <i>uFlags</i> parameter includes LR_LOADFROMFILE, <i>lpbmp</i> is the address of a null-terminated string that names the file containing the image to load.</para>
      <para>If the <i>hi</i> parameter is non-<b>NULL</b> and LR_LOADFROMFILE is not specified, <i>lpbmp</i> is the address of a null-terminated string that contains the name of the image resource in the <i>hi</i> module.</para>
      <para>If <i>hi</i> is <b>NULL</b> and LR_LOADFROMFILE is not specified, the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of this parameter must be the identifier of an OEM image to load. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro with one of the OEM image identifiers defined in Winuser.h. These identifiers have the following prefixes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>OBM_ for OEM bitmaps</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OIC_ for OEM icons</b>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <b>OCR_ for OEM cursors</b>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width of each image. The height of each image and the initial number of images are inferred by the dimensions of the specified resource.</para>
    </param>
    <param name="cGrow">
      <para>Type: <b>int</b></para>
      <para>The number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain.</para>
    </param>
    <param name="crMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The color used to generate a mask. Each pixel of this color in the specified bitmap, cursor, or icon is changed to black, and the corresponding bit in the mask is set to 1. If this parameter is the CLR_NONE value, no mask is generated. If this parameter is the CLR_DEFAULT value, the color of the pixel at the upper-left corner of the image is treated as the mask color.</para>
    </param>
    <param name="uType">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A flag that specifies the type of image to load. This parameter must be IMAGE_BITMAP to indicate that a bitmap is being loaded.</para>
      <para>
        <b>Note</b>  <b>ImageList_LoadImage</b> is for use only with bitmap files. No other image types are supported.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IMAGE_BITMAP</b>
          </description>
          <description>
            <para>Loads a bitmap.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="uFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flags that specify how to load the image. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LR_CREATEDIBSECTION</b>
          </description>
          <description>
            <para>Causes the function to return a DIB section bitmap rather than a compatible bitmap when the <i>uType</i> parameter specifies IMAGE_BITMAP. LR_CREATEDIBSECTION is useful for loading a bitmap without mapping it to the colors of the display device.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTCOLOR</b>
          </description>
          <description>
            <para>Uses the color format of the display.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_DEFAULTSIZE</b>
          </description>
          <description>
            <para>Uses the width or height specified by the system metric values for cursors and icons if the <i>cx</i> parameter is set to zero. If this value is not specified and <i>cx</i> is set to zero, the function sets the size to the one specified in the resource. If the resource contains multiple images, the function sets the size to that of the first image.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADFROMFILE</b>
          </description>
          <description>
            <para>Loads the image from the file specified by the <i>lpbmp</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADMAP3DCOLORS</b>
          </description>
          <description>
            <para>Searches the color table for the image and replaces the following shades of gray with the corresponding three-dimensional color:</para>
            <para>Dk Gray: RGB(128, 128, 128)COLOR_3DSHADOW</para>
            <para>Gray: RGB(192, 192, 192)COLOR_3DFACE</para>
            <para>Lt Gray: RGB(223, 223, 223)COLOR_3DLIGHT</para>
            <para>For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_LOADTRANSPARENT</b>
          </description>
          <description>
            <para>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (the COLOR_WINDOW display color). All pixels in the image that use that color become the default window value color. This value applies only to images that have a corresponding color table. For more information, see the Remarks section.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_MONOCHROME</b>
          </description>
          <description>
            <para>Loads the image in black and white.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LR_SHARED</b>
          </description>
          <description>
            <para>Shares the image handle if the image is loaded multiple times. Do not use this value for images that have nontraditional sizes that might change after loading or for images that are loaded from a file.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>LR_LOADTRANSPARENT does not load the image transparently. It creates an opaque image list that only appears transparent because all the background pixels have been changed to COLOR_WINDOW. If the images are drawn over a background that is not the color COLOR_WINDOW, the image does not draw properly. Also, LR_LOADTRANSPARENT and LR_LOADMAP3DCOLORS use the system colors that were in effect at the time that <b>ImageList_LoadImage</b> was called. If the system colors subsequently change, the application must reload the image to remap the colors.</para>
      <blockquote>
        <para>[!NOTE]
The commctrl.h header defines ImageList_LoadImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="LoadImage" />
  </member>
  <member name="Windows.ImageList_Merge">
    <summary>
      <para>Creates a new image by combining two existing images. The function also creates a new image list in which to store the image.</para>
    </summary>
    <param name="himl1">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the first image list.</para>
    </param>
    <param name="i1">
      <para>Type: <b>int</b></para>
      <para>The index of the first existing image.</para>
    </param>
    <param name="himl2">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the second image list.</para>
    </param>
    <param name="i2">
      <para>Type: <b>int</b></para>
      <para>The index of the second existing image.</para>
    </param>
    <param name="dx">
      <para>Type: <b>int</b></para>
      <para>The x-offset of the second image relative to the first image.</para>
    </param>
    <param name="dy">
      <para>Type: <b>int</b></para>
      <para>The y-offset of the second image relative to the first image.</para>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the new image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>The new image consists of the second existing image drawn transparently over the first. The mask for the new image is the result of performing a logical OR operation on the masks of the two existing images.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_Read">
    <summary>
      <para>Reads an image list from a stream.</para>
    </summary>
    <param name="pstm">
      <para>Type: <b>LPSTREAM</b></para>
      <para>A pointer to the stream.</para>
    </param>
    <returns>
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Returns the handle to the image list if successful, or <b>NULL</b> otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_ReadEx">
    <summary>
      <para>Reads an image list from a stream, and returns an <see cref="IImageList" /> interface to the image list.</para>
    </summary>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A flag that specifies how the stream is read.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ILP_NORMAL</b>
          </description>
          <description>
            <para>Expects an image list that was written with the ILP_NORMAL flag specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILP_DOWNLEVEL</b>
          </description>
          <description>
            <para>Expects an image list that was written with the ILP_DOWNLEVEL flag specified.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pstm">
      <para>Type: <b>LPSTREAM</b></para>
      <para>The address of the stream.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>An IID for the image list.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>The address of a pointer to the interface for the image list if successful, <b>NULL</b> otherwise.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To use <b>ImageList_ReadEx</b>, the application must specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso cref="ImageList_Read" />
    <seealso cref="ImageList_Write" />
    <seealso cref="ImageList_WriteEx" />
  </member>
  <member name="Windows.ImageList_Remove">
    <summary>
      <para>Removes an image from an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the image to remove. If this parameter is -1, the function removes all images.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>When an image is removed, the indexes of the remaining images are adjusted so that the image indexes always range from zero to one less than the number of images in the image list. For example, if you remove the image at index 0, then image 1 becomes image 0, image 2 becomes image 1, and so on.</para>
    </remarks>
    <seealso cref="ImageList_RemoveAll" />
  </member>
  <member name="Windows.ImageList_RemoveAll">
    <summary>
      <para>Calls the <see cref="ImageList_Remove" /> function to remove all of the images from an image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
  </member>
  <member name="Windows.ImageList_Replace">
    <summary>
      <para>Replaces an image in an image list with a new image.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>An index of the image to replace.</para>
    </param>
    <param name="hbmImage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>A handle to the bitmap that contains the image.</para>
    </param>
    <param name="hbmMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HBITMAP</a></b></para>
      <para>A handle to the bitmap that contains the mask. If no mask is used with the image list, this parameter is ignored.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>The <b>ImageList_Replace</b> function copies the bitmap to an internal data structure. Be sure to use the <see cref="DeleteObject" /> function to delete <i>hbmImage</i> and <i>hbmMask</i> after the function returns.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_ReplaceIcon">
    <summary>
      <para>Replaces an image with an icon or cursor.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the image to replace. If
<i>i</i> is -1, the function appends the image to the end of the list.</para>
    </param>
    <param name="hicon">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HICON</a></b></para>
      <para>The handle to the icon or cursor that contains the bitmap and mask for the new image.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the index of the image if successful, or -1 otherwise.</para>
    </returns>
    <remarks>
      <para>Because the system does not save
<i>hicon</i>, you can destroy it after the function returns if the icon or cursor was created by the <see cref="CreateIcon" /> function. You do not need to destroy <i>hicon</i> if it was loaded by the <see cref="LoadIcon" /> function; the system automatically frees an icon resource when it is no longer needed.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_SetBkColor">
    <summary>
      <para>Sets the background color for an image list. This function only works if you add an icon or use <see cref="ImageList_AddMasked" /> with a black and white bitmap. Without a mask, the entire image is drawn; hence the background color is not visible.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="clrBk">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The background color to set. This parameter can be the CLR_NONE value; in that case, images are drawn transparently using the mask.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>Returns the previous background color if successful, or CLR_NONE otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_SetDragCursorImage">
    <summary>
      <para>Creates a new drag image by combining the specified image (typically a mouse cursor image) with the current drag image.</para>
    </summary>
    <param name="himlDrag">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list that contains the new image to combine with the drag image.</para>
    </param>
    <param name="iDrag">
      <para>Type: <b>int</b></para>
      <para>The index of the new image to combine with the drag image.</para>
    </param>
    <param name="dxHotspot">
      <para>Type: <b>int</b></para>
      <para>The x-position of the hot spot within the new image.</para>
    </param>
    <param name="dyHotspot">
      <para>Type: <b>int</b></para>
      <para>The y-position of the hot spot within the new image.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_SetIconSize">
    <summary>
      <para>Sets the dimensions of images in an image list and removes all images from the list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The width, in pixels, of the images in the image list. All images in an image list have the same dimensions.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>The height, in pixels, of the images in the image list. All images in an image list have the same dimensions.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_SetImageCount">
    <summary>
      <para>Resizes an existing image list.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list that will be resized.</para>
    </param>
    <param name="uNewCount">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A value specifying the new size of the image list.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>If an application expands an image list with this function, it must add new images by using the <see cref="ImageList_Replace" /> function. If your application does not add valid images at the new indexes, draw operations that use the new indexes will be unpredictable.</para>
      <para>If you decrease the size of an image list by using this function, the truncated images are freed.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_SetOverlayImage">
    <summary>
      <para>Adds a specified image to the list of images to be used as overlay masks. An image list can have up to four overlay masks in version 4.70 and earlier and up to 15 in version 4.71. The function assigns an overlay mask index to the specified image.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="iImage">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of an image in the <i>himl</i> image list. This index identifies the image to use as an overlay mask.</para>
    </param>
    <param name="iOverlay">
      <para>Type: <b>int</b></para>
      <para>The one-based index of the overlay mask.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>An overlay mask is an image drawn transparently over another image. To draw an overlay mask over an image, call the <see cref="ImageList_Draw" /> or <see cref="ImageList_DrawEx" /> function. The <i>fStyle</i> parameter of these functions can use the <see cref="INDEXTOOVERLAYMASK" /> macro to specify an overlay mask index.</para>
      <para>A call to this method fails and returns E_INVALIDARG unless the image list is created using a mask.</para>
    </remarks>
  </member>
  <member name="Windows.ImageList_Write">
    <summary>
      <para>Writes an image list to a stream.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="pstm">
      <para>Type: <b>LPSTREAM</b></para>
      <para>A pointer to the stream.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.ImageList_WriteEx">
    <summary>
      <para>Writes an image list to a stream.</para>
    </summary>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A flag that specifies how the stream is written.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ILP_NORMAL</b>
          </description>
          <description>
            <para>Writes to the stream using the file format for <a href="https://docs.microsoft.com//windows/desktop/Controls/common-control-versions">Common Controls 6.0</a>, which includes information about image list attributes new to this version.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ILP_DOWNLEVEL</b>
          </description>
          <description>
            <para>Writes to the stream using a file format previous to version 6.0.  Specify this flag if you need to save image lists loaded under Common Controls versions earlier than version 6.0.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pstm">
      <para>Type: <b>LPSTREAM</b></para>
      <para>The address of the stream.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>You should not create an image list that is written with the ILP_DOWNLEVEL flag with <see cref="ILC_COLOR32" />.</para>
      <para>To use <b>ImageList_WriteEx</b>, the application must specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
    <seealso cref="ImageList_Read" />
    <seealso cref="ImageList_ReadEx" />
    <seealso cref="ImageList_Write" />
  </member>
  <member name="Windows.INDEXTOOVERLAYMASK">
    <summary>
      <para>Prepares the index of an overlay mask so that the <see cref="ImageList_Draw" /> function can use it.</para>
    </summary>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>An index of an overlay mask.</para>
    </param>
    <remarks>
      <para>The <b>INDEXTOOVERLAYMASK</b> macro is defined as follows.</para>
      <code>#define INDEXTOOVERLAYMASK(i) ((i) &lt;&lt; 8)
</code>
    </remarks>
  </member>
  <member name="Windows.INDEXTOSTATEIMAGEMASK">
    <summary>
      <para>Prepares the index of a state image so that a tree-view control or list-view control can use the index to retrieve the state image for an item.</para>
    </summary>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of a state image.</para>
    </param>
    <remarks>
      <para>The <b>INDEXTOSTATEIMAGEMASK</b> macro is defined as follows:</para>
      <code>#define INDEXTOSTATEIMAGEMASK(i) ((i) &lt;&lt; 12)
</code>
    </remarks>
  </member>
  <member name="Windows.InitCommonControls">
    <summary>
      <para>Registers and initializes certain common control window classes. This function is obsolete. New applications should use the <see cref="InitCommonControlsEx" /> function.</para>
    </summary>
    <remarks>
      <para>Under Comctl32.dll version 5.x, only Windows 95 classes (ICC_WIN95_CLASSES) can be registered through <b>InitCommonControls</b>. Programs which require additional common control classes must use the <see cref="InitCommonControlsEx" /> function.</para>
      <para>Under Comctl32.dll version 6.0 and later, <b>InitCommonControls</b> does nothing. Applications must explicitly register all common controls through <see cref="InitCommonControlsEx" />.</para>
    </remarks>
  </member>
  <member name="Windows.InitCommonControlsEx">
    <summary>
      <para>Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the  DLL. An application must call this function before creating a common control.</para>
    </summary>
    <param name="picce">
      <para>Type: <b>const LPINITCOMMONCONTROLSEX</b></para>
      <para>A pointer to an <see cref="INITCOMMONCONTROLSEX" /> structure that contains information specifying which control classes will be registered.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise.</para>
    </returns>
    <remarks>
      <para>The effect of each call to <b>InitCommonControlsEx</b> is cumulative. For example, if <b>InitCommonControlsEx</b> is called with the <see cref="ICC_UPDOWN_CLASS" /> flag, then is later called with the <see cref="ICC_HOTKEY_CLASS" /> flag, the result is that both the up-down and hot key common control classes are registered and available to the application.</para>
    </remarks>
  </member>
  <member name="Windows.InitializeFlatSB">
    <summary>
      <para>Initializes flat scroll bars for a particular window.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window that will receive flat scroll bars.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
    <remarks>
      <para>This function must be called before any other flat scroll bar functions are called. The window will receive flat scroll bars by default. The scroll bar style can be changed with the <see cref="FlatSB_SetScrollProp" /> function.</para>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows.InitMUILanguage">
    <summary>
      <para>Enables an application to specify a language to be used with the common controls that is different from the system language.</para>
    </summary>
    <param name="uiLang">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LANGID</a></b></para>
      <para>The  <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a> of the language to be used by the common controls.</para>
    </param>
    <remarks>
      <para>This function enables an application to override the system language setting, and specify a different language for the common controls. The selected language only applies to the process that <b>InitMUILanguage</b> is called from. See <a href="https://docs.microsoft.com//windows/desktop/Intl/international-support">Internationalization for Windows Applications</a> for further discussion of localization.</para>
    </remarks>
    <seealso cref="GetMUILanguage" />
  </member>
  <member name="Windows.LBItemFromPt">
    <summary>
      <para>Retrieves the index of the item at the specified point in a list box.</para>
    </summary>
    <param name="hLB">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list box to check.</para>
    </param>
    <param name="pt">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a></b></para>
      <para>A <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that contains the screen coordinates to check.</para>
    </param>
    <param name="bAutoScroll">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A scroll flag. If this parameter is <b>TRUE</b> and the point is directly above or below the list box, the function scrolls the list box by one line and returns -1. Otherwise, the function does not scroll the list box.</para>
    </param>
    <returns>
      <para>Type: <b>int</b></para>
      <para>Returns the item identifier if the point is over a list item, or -1 otherwise.</para>
    </returns>
    <remarks>
      <para>The <b>LBItemFromPt</b> function only scrolls the list box if a minimum amount of time has passed since it last did so. Timing prevents the list box from scrolling too quickly if the function is called repeatedly in rapid succession—for example, when <a href="https://docs.microsoft.com//windows/desktop/Controls/dl-dragging">DL_DRAGGING</a> notification codes or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> messages are processed.</para>
      <para>If the specified point is outside the client area of the list box and
<i>bAutoScroll</i> is <b>TRUE</b>, the function scrolls the list box instead of returning an item identifier.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_ApproximateViewRect">
    <summary>
      <para>Calculates the approximate width and height required to display a given number of items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-approximateviewrect">LVM_APPROXIMATEVIEWRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b>hwndLV</b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iWidth">
      <para>Type: <b>int</b></para>
      <para>The proposed x-dimension of the control, in pixels. This parameter can be -1 to allow the message to use the current width value.</para>
    </param>
    <param name="iHeight">
      <para>Type: <b>int</b></para>
      <para>The proposed y-dimension of the control, in pixels. This parameter can be -1 to allow the message to use the current height value.</para>
    </param>
    <param name="iCount">
      <para>Type: <b>int</b></para>
      <para>The number of items to be displayed in the control. If this parameter is -1, the message uses the total number of items in the control.</para>
    </param>
  </member>
  <member name="Windows.ListView_Arrange">
    <summary>
      <para>Arranges items in icon view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-arrange">LVM_ARRANGE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>One of the following values that specifies alignment:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVA_ALIGNLEFT</b>
          </description>
          <description>
            <para>Not implemented. Apply the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_ALIGNLEFT</a> style instead.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVA_ALIGNTOP</b>
          </description>
          <description>
            <para>Not implemented. Apply the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_ALIGNTOP</a> style instead.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVA_DEFAULT</b>
          </description>
          <description>
            <para>Aligns items according to the list-view control's current alignment styles (the default value).</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVA_SNAPTOGRID</b>
          </description>
          <description>
            <para>Snaps all icons to the nearest grid position.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.ListView_CancelEditLabel">
    <summary>
      <para>Cancels an item text editing operation. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-canceleditlabel">LVM_CANCELEDITLABEL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_CancelEditLabel</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_CreateDragImage">
    <summary>
      <para>Creates a drag image list for the specified item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-createdragimage">LVM_CREATEDRAGIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the item.</para>
    </param>
    <param name="lpptUpLeft">
      <para>Type: <b>LPPOINT</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the initial location of the upper-left corner of the image, in view coordinates.</para>
    </param>
    <remarks>
      <para>Your application is responsible for destroying the image list when it is no longer needed.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_DeleteAllItems">
    <summary>
      <para>Removes all items from a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-deleteallitems">LVM_DELETEALLITEMS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>When a list-view control receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-deleteallitems">LVM_DELETEALLITEMS</a> message, it sends the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvn-deleteallitems">LVN_DELETEALLITEMS</a> notification code to its parent window.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_DeleteColumn">
    <summary>
      <para>Removes a column from a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-deletecolumn">LVM_DELETECOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>An index of the column to delete.</para>
    </param>
    <remarks>
      <para>Deleting column zero of a list-view control is supported only in ComCtl32.dll version 6 and later. Version 5 also supports deleting column zero, but only  after you use <a href="https://docs.microsoft.com//windows/desktop/Controls/ccm-setversion">CCM_SETVERSION</a> to set the version to 5 or later. In versions prior to version 5, if you must delete column zero, insert a zero length dummy column zero and delete column one and above.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_DeleteItem">
    <summary>
      <para>Removes an item from a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-deleteitem">LVM_DELETEITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>An index of the list-view item to delete.</para>
    </param>
  </member>
  <member name="Windows.ListView_EditLabel">
    <summary>
      <para>Begins in-place editing of the specified list-view item's text. The message implicitly selects and focuses the specified item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-editlabel">LVM_EDITLABEL</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item. To cancel editing, set
<i>iItem</i> to -1.</para>
    </param>
    <remarks>
      <para>When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass the edit control, but you should not destroy it.</para>
      <para>The control must have the focus before you send this message to the control. Focus can be set using the <see cref="SetFocus" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/winmsg/wm-cancelmode">WM_CANCELMODE</seealso>
  </member>
  <member name="Windows.ListView_EnableGroupView">
    <summary>
      <para>Enables or disables whether the items in a list-view control display as a group. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-enablegroupview">LVM_ENABLEGROUPVIEW</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="fEnable">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>BOOL</b>
        <b>TRUE</b>
        <b>FALSE</b>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_EnableGroupView</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_EnsureVisible">
    <summary>
      <para>Ensures that a list-view item is either entirely or partially visible, scrolling the list-view control if necessary. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-ensurevisible">LVM_ENSUREVISIBLE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="fPartialOK">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A value specifying whether the item must be entirely visible. If this parameter is <b>TRUE</b>, no scrolling occurs if the item is at least partially visible.</para>
    </param>
  </member>
  <member name="Windows.ListView_FindItem">
    <summary>
      <para>Searches for a list-view item with the specified characteristics. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-finditem">LVM_FINDITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iStart">
      <para>Type: <b>int</b></para>
      <para>The index of the item after which to begin the search, or -1 to start from the beginning.</para>
    </param>
    <param name="plvfi">
      <para>Type: <b>const LPLVFINDINFO</b></para>
      <para>A pointer to an <see cref="LVFINDINFO" /> structure that contains information about what to search for.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetBkColor">
    <summary>
      <para>Gets the background color of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getbkcolor">LVM_GETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetBkImage">
    <summary>
      <para>Gets the background image in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getbkimage">LVM_GETBKIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvbki">
      <para>Type: <b>LPLVBKIMAGE</b></para>
      <para>A pointer to a <see cref="LVBKIMAGE" /> structure that will receive the background image information.</para>
    </param>
    <seealso cref="ListView_SetBkImage" />
  </member>
  <member name="Windows.ListView_GetCallbackMask">
    <summary>
      <para>Gets the callback mask for a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcallbackmask">LVM_GETCALLBACKMASK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcallbackmask">LVM_SETCALLBACKMASK</seealso>
  </member>
  <member name="Windows.ListView_GetCheckState">
    <summary>
      <para>Determines if an item in a list-view control is selected. This should be used only for list-view controls that have the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_CHECKBOXES</a> style.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the item for which to retrieve the check state.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetColumn">
    <summary>
      <para>Gets the attributes of a list-view control's column. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcolumn">LVM_GETCOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>The index of the column.</para>
    </param>
    <param name="pcol">
      <para>Type: <b>LPLVCOLUMN</b></para>
      <para>A pointer to an <see cref="LVCOLUMN" /> structure that specifies the information to retrieve and receives information about the column. The
<b>mask</b> member specifies which column attributes to retrieve. If the <b>mask</b> member specifies the LVCF_TEXT value, the <b>pszText</b> member must contain the address of the buffer that receives the item text, and the <b>cchTextMax</b> member must specify the size of the buffer.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetColumnOrderArray">
    <summary>
      <para>Gets the current left-to-right order of columns in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcolumnorderarray">LVM_GETCOLUMNORDERARRAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="iCount">
      <para>Type: <b>int</b></para>
      <para>The number of columns in the list-view control.</para>
    </param>
    <param name="pi">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an array of integers that will receive the index values of the columns in the list-view control. The array must be large enough to hold
<i>iCount</i> elements.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetColumnWidth">
    <summary>
      <para>Gets the width of a column in report or list view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcolumnwidth">LVM_GETCOLUMNWIDTH</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>The index of the column. This parameter is ignored in list view.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetCountPerPage">
    <summary>
      <para>Calculates the number of items that can fit vertically in the visible area of a list-view control when in list or report view. Only fully visible items are counted. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcountperpage">LVM_GETCOUNTPERPAGE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetEditControl">
    <summary>
      <para>Gets the handle to the edit control being used to edit a list-view item's text. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-geteditcontrol">LVM_GETEDITCONTROL</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>When label editing begins, an edit control is created, positioned, and initialized. Before it is displayed, the list-view control sends its parent window an <a href="https://docs.microsoft.com//windows/desktop/Controls/lvn-beginlabeledit">LVN_BEGINLABELEDIT</a> notification code.</para>
      <para>To customize label editing, implement a handler for <a href="https://docs.microsoft.com//windows/desktop/Controls/lvn-beginlabeledit">LVN_BEGINLABELEDIT</a> and have it use <b>ListView_GetEditControl</b> to send an <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-geteditcontrol">LVM_GETEDITCONTROL</a> message to the list-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle to customize the edit control by sending the usual
<b>EM_XXX</b> messages.</para>
      <para>When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass the edit control, but you should not destroy it. To cancel editing, you can send the list-view control a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-cancelmode">WM_CANCELMODE</a> message.</para>
      <para>The list-view item being edited is the currently focused item—that is, the item in the focused state. To find an item based on its state, use the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getnextitem">LVM_GETNEXTITEM</a> message.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/lvm-geteditcontrol">LVM_GETEDITCONTROL</seealso>
  </member>
  <member name="Windows.ListView_GetEmptyText">
    <summary>
      <para>Gets the text meant for display when the list-view control appears empty. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getemptytext">LVM_GETEMPTYTEXT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pszText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PWSTR</a></b></para>
      <para>A pointer to a null-terminated, Unicode buffer of size specified by <i>cchText</i> to receive the text. The caller is responsible for allocating the buffer.</para>
    </param>
    <param name="cchText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The size of the buffer pointed to by <i>pszText</i>, including the terminating               <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetExtendedListViewStyle">
    <summary>
      <para>Gets the extended styles that are currently in use for a given list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getextendedlistviewstyle">LVM_GETEXTENDEDLISTVIEWSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetFocusedGroup">
    <summary>
      <para>Gets the group that has the focus. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getfocusedgroup">LVM_GETFOCUSEDGROUP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetFooterInfo">
    <summary>
      <para>Gets information on the footer of a specified list-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getfooterinfo">LVM_GETFOOTERINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvfi">
      <para>Type: <b>LPLVFOOTERINFO</b></para>
      <para>A pointer to a <see cref="LVFOOTERINFO" /> structure to receive information depending on the value of the <b>mask</b> member. The calling application is responsible for allocating this structure and setting the <b>mask</b> member.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetFooterItem">
    <summary>
      <para>Gets information on a footer item for a specified list-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getfooteritem">LVM_GETFOOTERITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>An index of the item.</para>
    </param>
    <param name="pfi">
      <para>Type: <b><see cref="LVFOOTERITEM" />*</b></para>
      <para>A pointer to a <see cref="LVFOOTERITEM" /> structure to receive a value for the <i>state</i> and/or <i>pszText</i> members according to the value of the <i>mask</i> member. The caller is responsible for allocating this structure and setting its members to indicate to the receiver what information to return. For more information, see <b>LVFOOTERITEM</b>.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetFooterItemRect">
    <summary>
      <para>Gets the coordinates of a  footer for a specified item in a list-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getfooteritemrect">LVM_GETFOOTERITEMRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the item in the list-view control.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive the coordinates. The calling application is responsible for allocating this structure. The coordinates received are expressed as client coordinates.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetFooterRect">
    <summary>
      <para>Gets the coordinates of the footer for a specified list-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getfooterrect">LVM_GETFOOTERRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive the coordinates. The caller is responsible for allocating this structure. The coordinates received are expressed as client coordinates.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetGroupCount">
    <summary>
      <para>Gets the number of groups. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getgroupcount">LVM_GETGROUPCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetGroupCount</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetGroupHeaderImageList">
    <summary>
      <para>Gets the group header image list that has been set for an existing list-view control.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To specify an image list another way, such as, by large icons, small icons, or state images, send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getimagelist">LVM_GETIMAGELIST</a> message explicitly.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetGroupInfo">
    <summary>
      <para>Gets group information. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getgroupinfo">LVM_GETGROUPINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iGroupId">
      <para>Type: <b>int</b></para>
    </param>
    <param name="pgrp">
      <para>Type: <b>PLVGROUP</b></para>
      <para>
        <see cref="LVGROUP" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetGroupInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetGroupInfoByIndex">
    <summary>
      <para>Gets information on a specified group. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lvm-getgroupinfobyindex">LVM_GETGROUPINFOBYINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iIndex">
      <para>Type: <b>int</b></para>
      <para>The index of the group.</para>
    </param>
    <param name="pgrp">
      <para>Type: <b>PLVGROUP</b></para>
      <para>A pointer to an <see cref="LVGROUP" /> structure to receive information on the group specified by <i>iIndex</i>. The calling application is responsible for allocating memory for the structure and any buffers in the structure, such as, the one pointed to by <b>pszHeader</b>. Set any contingent members of the structure, such as, <b>cchHeader</b>—the size of the buffer pointed to by <b>pszHeader</b> in <b>WCHAR</b><b>s</b>, including the terminating <b>NULL</b>. Set <b>cbSize</b> to the size of <b>LVGROUP</b> in bytes.</para>
      <para>The message receiver is responsible for setting the structure members with information for the group specified by <i>iIndex</i>.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetGroupMetrics">
    <summary>
      <para>Gets information about the display of groups. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getgroupmetrics">LVM_GETGROUPMETRICS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pGroupMetrics">
      <para>Type: <b>PLVGROUPMETRICS</b></para>
      <para>
        <see cref="LVGROUPMETRICS" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetGroupMetrics</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetGroupRect">
    <summary>
      <para>Gets the rectangle for a specified group. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getgrouprect">LVM_GETGROUPRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iGroupId">
      <para>Type: <b>int</b></para>
      <para>Specifies the group by <b>iGroupId</b> (see <see cref="LVGROUP" /> structure).</para>
    </param>
    <param name="type">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>Specifies the type of rectangle to retrieve. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVGGR_GROUP</b>
          </description>
          <description>
            <para>Coordinates of the entire expanded group.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVGGR_HEADER</b>
          </description>
          <description>
            <para>Coordinates of the header only (collapsed group).</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVGGR_LABEL</b>
          </description>
          <description>
            <para>Coordinates of the label only.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVGGR_SUBSETLINK</b>
          </description>
          <description>
            <para>Coordinates of the subset link only (markup subset). A list-view control can limit the number of visible items displayed in each group.  A link is presented to the user to allow the user to expand the group.  This flag will return the bounding rectangle of the subset link if the group is a subset (group state of LVGS_SUBSETED, see structure <see cref="LVGROUP" />, member <b>state</b>). This flag is provided so that accessibility applications can locate the link.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive information on the group specified by <i>iGroupId</i>. The message receiver is responsible for setting the structure members with information for the group specified by <i>iGroupId</i>. The calling application is responsible for allocating memory for the structure.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetGroupState">
    <summary>
      <para>Gets the state for a specified group. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getgroupstate">LVM_GETGROUPSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="dwGroupId">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the group by <b>iGroupId</b> (see  <see cref="LVGROUP" /> structure).</para>
    </param>
    <param name="dwMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the state values to retrieve. This is a combination of the flags listed for the <b>state</b> member of <see cref="LVGROUP" />.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetHeader">
    <summary>
      <para>Gets the handle to the header control used by a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getheader">LVM_GETHEADER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetHotCursor">
    <summary>
      <para>Gets the HCURSOR used when the pointer is over an item while hot tracking is enabled. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gethotcursor">LVM_GETHOTCURSOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <remarks>
      <para>A list-view control uses hot tracking and hover selection when the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TRACKSELECT</a> style is set.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetHotItem">
    <summary>
      <para>Gets the index of the hot item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gethotitem">LVM_GETHOTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetHoverTime">
    <summary>
      <para>Gets the amount of time that the mouse cursor must hover over an item before it is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gethovertime">LVM_GETHOVERTIME</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <remarks>
      <para>The hover time only affects list-view controls that have the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TRACKSELECT</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_ONECLICKACTIVATE</a>, or <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TWOCLICKACTIVATE</a> extended list-view style.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetImageList">
    <summary>
      <para>Gets the handle to an image list used for drawing list-view items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getimagelist">LVM_GETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iImageList">
      <para>Type: <b>int</b></para>
      <para>The image list to retrieve. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVSIL_NORMAL</b>
          </description>
          <description>
            <para>Image list with large icons.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_SMALL</b>
          </description>
          <description>
            <para>Image list with small icons.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_STATE</b>
          </description>
          <description>
            <para>Image list with state images.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_GROUPHEADER</b>
          </description>
          <description>
            <para>Image list for group header.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.ListView_GetInsertMark">
    <summary>
      <para>Gets the position of the insertion point. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getinsertmark">LVM_GETINSERTMARK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="lvim">
      <para>Type: <b>PLVINSERTMARK</b></para>
      <para>
        <see cref="LVINSERTMARK" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetInsertMark</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetInsertMarkColor">
    <summary>
      <para>Gets the color of the insertion point. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getinsertmarkcolor">LVM_GETINSERTMARKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetInsertMarkColor</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetInsertMarkRect">
    <summary>
      <para>Gets the rectangle that bounds the insertion point. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getinsertmarkrect">LVM_GETINSERTMARKRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="rc">
      <para>Type: <b>LPRECT</b></para>
      <para>
        <see cref="RECT" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetInsertMarkRect</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetISearchString">
    <summary>
      <para>Gets the incremental search string of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getisearchstring">LVM_GETISEARCHSTRING</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="lpsz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPSTR</a></b></para>
      <para>A pointer to a buffer that receives the incremental search string. To just retrieve the length of the string, set <i>lpsz</i> to <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>The incremental search string is the character sequence that the user types while the list view has the input focus. Each time the user types a character, the system appends the character to the search string and then searches for a matching item. If the system finds a match, it selects the item and, if necessary, scrolls it into view.</para>
      <para>A time-out period is associated with each character that the user types. If the time-out period elapses before the user types another character, the incremental search string is reset.</para>
      <para>Make sure that the buffer is large enough to hold the string. If it is too small, an immediate invalid page fault will result.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetItem">
    <summary>
      <para>Gets some or all of a list-view item's attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitem">LVM_GETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>LPLVITEM</b></para>
      <para>A pointer to an <see cref="LVITEM" /> structure that specifies the information to retrieve and receives information about the list-view item.</para>
    </param>
    <remarks>
      <para>When the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitem">LVM_GETITEM</a> message is sent, the
<b>iItem</b> and <b>iSubItem</b> members identify the item or subitem to retrieve information about and the <b>mask</b> member specifies which attributes to retrieve. For a list of possible values, see the description of the <see cref="LVITEM" /> structure.</para>
      <para>If the LVIF_TEXT flag is set in the <b>mask</b> member of the <see cref="LVITEM" /> structure, the <b>pszText</b> member must point to a valid buffer and the <b>cchTextMax</b> member must be set to the number of characters in that buffer. Applications should not assume that the text will necessarily be placed in the specified buffer. The control may instead change the <b>pszText</b> member of the structure to point to the new text rather than place it in the buffer.</para>
      <para>If the <b>mask</b> member specifies the LVIF_STATE value, the <b>stateMask</b> member must specify the item state bits to retrieve. On output, the <b>state</b> member contains the values of the specified state bits.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetItemCount">
    <summary>
      <para>Gets the number of items in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemcount">LVM_GETITEMCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetItemIndexRect">
    <summary>
      <para>Gets the bounding rectangle for all or part of a subitem in the current view of a specified list-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemindexrect">LVM_GETITEMINDEXRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvii">
      <para>Type: <b><see cref="LVITEMINDEX" />*</b></para>
      <para>A pointer to a <see cref="LVITEMINDEX" /> structure for the parent item of the subitem. The caller is responsible for allocating this structure and setting its members. <i>plvii</i> must not be <b>NULL</b>.</para>
    </param>
    <param name="iSubItem">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>The index of the subitem.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LONG</a></b></para>
      <para>The portion of the list-view subitem for which to retrieve the bounding rectangle. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIR_BOUNDS</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the entire subitem, including the icon and label.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_ICON</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the icon or small icon of the subitem.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_LABEL</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the subitem text.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to a <see cref="RECT" /> structure to receive the coordinates. The caller is responsible for allocating this structure. <i>prc</i> must not be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>If <i>iSubItem</i> is zero, this macro returns the coordinates of the rectangle to the item pointed to by <i>plvii</i>. The value LVIR_SELECTBOUNDS for the parameter <i>code</i> is not supported.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetItemPosition">
    <summary>
      <para>Gets the position of a list-view item. You can use this macro or explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemposition">LVM_GETITEMPOSITION</a> message.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="ppt">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the position of the item's upper-left corner, in view coordinates.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetItemRect">
    <summary>
      <para>Gets the bounding rectangle for all or part of an item in the current view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemrect">LVM_GETITEMRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>A pointer to a <see cref="RECT" /> structure that receives the bounding rectangle.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>The portion of the list-view item from which to retrieve the bounding rectangle. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIR_BOUNDS</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the entire item, including the icon and label.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_ICON</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the icon or small icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_LABEL</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the item text.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_SELECTBOUNDS</b>
          </description>
          <description>
            <para>Returns the union of the LVIR_ICON and LVIR_LABEL rectangles, but excludes columns in report view.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.ListView_GetItemSpacing">
    <summary>
      <para>Determines the spacing between items in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemspacing">LVM_GETITEMSPACING</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="fSmall">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A view for which to retrieve the item spacing. This parameter is <b>TRUE</b> for small icon view, or <b>FALSE</b> for icon view.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetItemState">
    <summary>
      <para>Gets the state of a list-view item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemstate">LVM_GETITEMSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The state information to retrieve. This parameter can be a combination of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIS_CUT</b>
          </description>
          <description>
            <para>The item is marked for a cut-and-paste operation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_DROPHILITED</b>
          </description>
          <description>
            <para>The item is highlighted as a drag-and-drop target.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_FOCUSED</b>
          </description>
          <description>
            <para>The item has the focus, so it is surrounded by a standard focus rectangle. Although more than one item may be selected, only one item can have the focus.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_SELECTED</b>
          </description>
          <description>
            <para>The item is selected. The appearance of a selected item depends on whether it has the focus and also on the system colors used for selection.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_OVERLAYMASK</b>
          </description>
          <description>
            <para>Use this mask to retrieve the item's overlay image index.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_STATEIMAGEMASK</b>
          </description>
          <description>
            <para>Use this mask to retrieve the item's state image index.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>An item's state information includes a set of bit flags as well as image list indexes that indicate the item's state image and overlay image.</para>
    </remarks>
    <seealso cref="ListView_SetItemState" />
  </member>
  <member name="Windows.ListView_GetItemText">
    <summary>
      <para>Gets the text of a list-view item or subitem. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemtext">LVM_GETITEMTEXT</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="iSubItem_">
      <para>Type: <b>int</b></para>
      <para>The index of the subitem. To retrieve the item text, set
<i>iSubItem</i> to zero.</para>
    </param>
    <param name="pszText_">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPTSTR</a></b></para>
      <para>A pointer to a buffer that receives the item or subitem text.</para>
    </param>
    <param name="cchTextMax_">
      <para>Type: <b>int</b></para>
      <para>The number of characters in the
<i>pszText</i> buffer.</para>
    </param>
    <seealso cref="LVITEM" />
  </member>
  <member name="Windows.ListView_GetNextItem">
    <summary>
      <para>Searches for a list-view item that has the specified properties and bears the specified relationship to a specified item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getnextitem">LVM_GETNEXTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the item with which to begin the search, or -1 to find the first item that matches the specified flags. The specified item itself is excluded from the search.</para>
    </param>
    <param name="flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The geometric relation of the requested item to the specified item and, if specified, the state of the requested item. For a list of possible values, see the description of the
<i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getnextitem">LVM_GETNEXTITEM</a> message. If an item does not have all of the specified state flags set, the search continues with the next item.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetNextItemIndex">
    <summary>
      <para>Gets the index of the item in a particular list-view control that has the specified properties and relationship to another specific item. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lvm-getnextitemindex">LVM_GETNEXTITEMINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvii">
      <para>Type: <b><see cref="LVITEMINDEX" />*</b></para>
      <para>A pointer to the <see cref="LVITEMINDEX" /> structure with which the item begins the search, or -1 to find the first item that matches the specified flags. The calling process is responsible for allocating this structure and setting its members.</para>
    </param>
    <param name="flags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The relationship to the item specified in parameter
<i>plvii</i>. This can be one or a combination of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>Searches by index.</description>
              </item>
            </list>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_ALL</description>
              </item>
            </list>
          </description>
          <description>
            <para>Searches for a subsequent item by index, the default value.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>Searches by physical relationship to the index of the item where the search is to begin.</description>
              </item>
            </list>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_ABOVE</description>
              </item>
            </list>
          </description>
          <description>
            <para>Searches for an item that is above the specified item.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_BELOW</description>
              </item>
            </list>
          </description>
          <description>
            <para>Searches for an item that is below the specified item.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_TOLEFT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Searches for an item to the left of the specified item.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_PREVIOUS</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> Searches for the item that is previous to the specified item. The LVNI_PREVIOUS flag is not directional (LVNI_ABOVE will find the item positioned above, while LVNI_PREVIOUS will find the item ordered before.)  The LVNI_PREVIOUS flag essentially reverses the logic of the search performed via the LVM_GETNEXTITEM or LVM_GETNEXTITEMINDEX messages.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_TORIGHT</description>
              </item>
            </list>
          </description>
          <description>
            <para>Searches for an item to the right of the specified item.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_DIRECTIONMASK</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> A directional flag mask with value as follows: LVNI_ABOVE | LVNI_BELOW | LVNI_TOLEFT | LVNI_TORIGHT.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>The state of the item to find can be specified with one or a combination of the following values:</description>
              </item>
            </list>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_CUT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The item has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_CUT</a> state flag set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_DROPHILITED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The item has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_DROPHILITED</a> state flag set</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_FOCUSED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The item has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_FOCUSED</a> state flag set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_SELECTED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The item has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_SELECTED</a> state flag set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_STATEMASK</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> A state flag mask with value as follows: LVNI_FOCUSED | LVNI_SELECTED | LVNI_CUT | LVNI_DROPHILITED.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>Searches by appearance of items or by group.</description>
              </item>
            </list>
          </description>
          <description></description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_VISIBLEORDER</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> Search the visible order.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_VISIBLEONLY</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> Search the visible items.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>LVNI_SAMEGROUPONLY</description>
              </item>
            </list>
          </description>
          <description>
            <b>Windows Vista and later:</b> Search the current group.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>If an item does not have all of the specified state flags set, the search continues with the next item.</description>
              </item>
            </list>
          </description>
          <description></description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Note that the following flags, for use only with Windows Vista, are mutually exclusive of any other flags in use: LVNI_PREVIOUS, LVNI_VISIBLEONLY, LVNI_SAMEGROUPONLY, LVNI_VISIBLEORDER, LVNI_DIRECTIONMASK, and LVNI_STATEMASK.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getnextitem">LVM_GETNEXTITEM</seealso>
  </member>
  <member name="Windows.ListView_GetNumberOfWorkAreas">
    <summary>
      <para>Gets the number of working areas in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getnumberofworkareas">LVM_GETNUMBEROFWORKAREAS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pnWorkAreas">
      <para>Type: <b>LPUINT</b></para>
      <para>A pointer to a UINT value that receives the number of working areas in the list-view control. If zero is placed in this variable, then no working areas are currently set. This value cannot be <b>NULL</b>.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/using-list-view-controls">Using List-View Controls</seealso>
  </member>
  <member name="Windows.ListView_GetOrigin">
    <summary>
      <para>Gets the current view origin for a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getorigin">LVM_GETORIGIN</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="ppt">
      <para>Type: <b>LPPOINT</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the view origin.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetOutlineColor">
    <summary>
      <para>Gets the color of the border of a list-view control if the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_BORDERSELECT</a> extended window style is set. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getoutlinecolor">LVM_GETOUTLINECOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetOutlineColor</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetSelectedColumn">
    <summary>
      <para>Gets an integer that specifies the selected column. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getselectedcolumn">LVM_GETSELECTEDCOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetSelectedColumn</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetSelectedCount">
    <summary>
      <para>Determines the number of selected items in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getselectedcount">LVM_GETSELECTEDCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetSelectionMark">
    <summary>
      <para>Gets the selection mark from a list-view control. You can use this macro or explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getselectionmark">LVM_GETSELECTIONMARK</a> message.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <remarks>
      <para>The selection mark is the item index from which a multiple selection starts.</para>
    </remarks>
    <seealso cref="ListView_SetSelectionMark" />
  </member>
  <member name="Windows.ListView_GetStringWidth">
    <summary>
      <para>Determines the width of a specified string using the specified list-view control's current font. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getstringwidth">LVM_GETSTRINGWIDTH</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="psz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCSTR</a></b></para>
      <para>A pointer to a null-terminated string.</para>
    </param>
    <remarks>
      <para>The <b>ListView_GetStringWidth</b> macro returns the exact width, in pixels, of the specified string. If you use the returned string width as the column width in a call to the <see cref="ListView_SetColumnWidth" /> macro, the string will be truncated. To retrieve the column width that can contain the string without truncating it, you must add padding to the returned string width.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetSubItemRect">
    <summary>
      <para>Gets information about the rectangle that surrounds a subitem in a list-view control. You can use this macro (recommended) or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getsubitemrect">LVM_GETSUBITEMRECT</a> message explicitly. This macro is intended to be used only on list-view controls that use the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_REPORT</a> style.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>The index of the subitem's parent item.</para>
    </param>
    <param name="iSubItem">
      <para>Type: <b>int</b></para>
      <para>The one-based index of the subitem.</para>
    </param>
    <param name="code">
      <para>Type: <b>int</b></para>
      <para>A portion of the list-view subitem for which to retrieve the bounding rectangle information. This value can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIR_BOUNDS</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the entire item, including the icon and label.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_ICON</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the icon or small icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIR_LABEL</b>
          </description>
          <description>
            <para>Returns the bounding rectangle of the entire item, including the icon and label. This is identical to LVIR_BOUNDS.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives the subitem bounding rectangle information.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetTextBkColor">
    <summary>
      <para>Gets the text background color of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gettextbkcolor">LVM_GETTEXTBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetTextColor">
    <summary>
      <para>Gets the text color of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gettextcolor">LVM_GETTEXTCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetTileInfo">
    <summary>
      <para>Gets information about a tile in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gettileinfo">LVM_GETTILEINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pti">
      <para>Type: <b>PLVTILEINFO</b></para>
      <para>
        <see cref="LVTILEINFO" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetTileInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetTileViewInfo">
    <summary>
      <para>Gets information about a list-view control in tile view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gettileviewinfo">LVM_GETTILEVIEWINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="ptvi">
      <para>Type: <b>PLVTILEVIEWINFO</b></para>
      <para>
        <see cref="LVTILEVIEWINFO" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetTileViewInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetToolTips">
    <summary>
      <para>Gets the tooltip control that the list-view control uses to display tooltips. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-gettooltips">LVM_GETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <seealso cref="ListView_SetToolTips" />
  </member>
  <member name="Windows.ListView_GetTopIndex">
    <summary>
      <para>Gets the index of the topmost visible item when in list or report view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lvm-gettopindex">LVM_GETTOPINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetUnicodeFormat">
    <summary>
      <para>Gets the Unicode character format flag for the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getunicodeformat">LVM_GETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the control.</para>
    </param>
    <seealso cref="ListView_SetUnicodeFormat" />
  </member>
  <member name="Windows.ListView_GetView">
    <summary>
      <para>Gets the current view of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getview">LVM_GETVIEW</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_GetView</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_GetViewRect">
    <summary>
      <para>Gets the bounding rectangle of all items in the list-view control. The list view must be in icon or small icon view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getviewrect">LVM_GETVIEWRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="prc">
      <para>Type: <b><a href="https://docs.microsoft.com//previous-versions/dd162897(v=vs.85)">RECT</a>*</b></para>
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/dd162897(v=vs.85)">RECT</a> structure that receives the bounding rectangle. All coordinates are relative to the visible area of the list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_GetWorkAreas">
    <summary>
      <para>Gets the working areas from a list-view control. You can use this macro, or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getworkareas">LVM_GETWORKAREAS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="nWorkAreas">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>The number of <see cref="RECT" /> structures in the array at <i>lprc</i>.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to an array of <see cref="RECT" /> structures that receive the working areas of the list-view control. Values in these structures are in client coordinates. <i>nWorkAreas</i>  specifies the number of structures in this array.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/using-list-view-controls">Using List-View Controls</seealso>
  </member>
  <member name="Windows.ListView_HasGroup">
    <summary>
      <para>Determines whether the list-view control has a specified group. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-hasgroup">LVM_HASGROUP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="dwGroupId">
      <para>Type: <b>int</b></para>
    </param>
    <remarks>
      <para>To use <b>ListView_HasGroup</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_HitTest">
    <summary>
      <para>Determines which list-view item, if any, is at a specified position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-hittest">LVM_HITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pinfo">
      <para>Type: <b>LPLVHITTESTINFO</b></para>
      <para>A pointer to an <see cref="LVHITTESTINFO" /> structure that contains the position to hit test and receives information about the results of the hit test.</para>
    </param>
  </member>
  <member name="Windows.ListView_HitTestEx">
    <summary>
      <para>Determines which list-view item, if any, is at a specified position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-hittest">LVM_HITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pinfo">
      <para>Type: <b>LPLVHITTESTINFO</b></para>
      <para>A pointer to an <see cref="LVHITTESTINFO" /> structure that contains the position to hit test and receives information about the results of the hit test.</para>
    </param>
    <remarks>
      <para>This macro passes -1 as the <i>wParam</i> of the message, specifying that the <b>iGroup</b> and <b>iSubItem</b> members of <i>pinfo</i> are retrieved.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_InsertColumn">
    <summary>
      <para>Inserts a new column in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertcolumn">LVM_INSERTCOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>The index of the new column.</para>
    </param>
    <param name="pcol">
      <para>Type: <b>const LPLVCOLUMN</b></para>
      <para>A pointer to an <see cref="LVCOLUMN" /> structure that contains the attributes of the new column.</para>
    </param>
    <remarks>
      <para>Columns are visible only in report (details) view.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_InsertGroup">
    <summary>
      <para>Inserts a group into a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertgroup">LVM_INSERTGROUP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="index">
      <para>Type: <b>int</b></para>
    </param>
    <param name="pgrp">
      <para>Type: <b>PLVGROUP</b></para>
      <para>
        <see cref="LVGROUP" />
      </para>
    </param>
    <remarks>
      <para>To turn on group mode, call <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-enablegroupview">LVM_ENABLEGROUPVIEW</a> or <see cref="ListView_EnableGroupView" />.</para>
      <para>To use <b>ListView_InsertGroup</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_InsertGroupSorted">
    <summary>
      <para>Inserts a group into an ordered list of groups. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertgroupsorted">LVM_INSERTGROUPSORTED</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="structInsert">
      <para>Type: <b>PLVINSERTGROUPSORTED</b></para>
      <para>
        <see cref="LVINSERTGROUPSORTED" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_InsertGroupSorted</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_InsertItem">
    <summary>
      <para>Inserts a new item in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertitem">LVM_INSERTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>const LPLVITEM</b></para>
      <para>A pointer to an <see cref="LVITEM" /> structure that specifies the attributes of the list-view item. Use the <b>iItem</b> member to specify the zero-based index at which the new item should be inserted. If this value is greater than the number of items currently contained by the listview control, the new item will be appended to the end of the list and assigned the correct index. Examine the macro's return value to determine the actual index assigned to the item.</para>
    </param>
    <remarks>
      <para>You cannot use <b>ListView_InsertItem</b> or <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertitem">LVM_INSERTITEM</a> to insert subitems. The <b>iSubItem</b> member of the <see cref="LVITEM" /> structure must be zero. See <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitem">LVM_SETITEM</a> for information on setting subitems.</para>
      <para>If a list-view control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_CHECKBOXES</a> style set, any value placed in bits 12 through 15 of the <b>state</b> member of the <see cref="LVITEM" /> structure will be ignored. When an item is added with this style set, it will always be set to the unchecked state.</para>
      <para>If a list-view control has either the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_SORTASCENDING</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_SORTDESCENDING</a> window style, an <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertitem">LVM_INSERTITEM</a> message will fail if you try to insert an item that has LPSTR_TEXTCALLBACK as the <b>pszText</b> member of its <see cref="LVITEM" /> structure.</para>
      <para>The <b>ListView_InsertItem</b> macro will insert the new item in the proper position in the sort order if the following conditions hold:</para>
      <list type="bullet">
        <item>
          <description>You are using one of the LVS_SORTXXX styles. </description>
        </item>
        <item>
          <description>You are not using the LVS_OWNERDRAW style. </description>
        </item>
        <item>
          <description>The
<b>pszText</b> member of the structure pointed to by <i>pitem</i> is not set to LPSTR_TEXTCALLBACK. </description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="Windows.ListView_InsertMarkHitTest">
    <summary>
      <para>Retrieves the insertion point closest to a specified point. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-insertmarkhittest">LVM_INSERTMARKHITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="point">
      <para>Type: <b>LPPOINT</b></para>
      <para>
        <b>POINT</b>
      </para>
    </param>
    <param name="lvim">
      <para>Type: <b>PLVINSERTMARK</b></para>
      <para>
        <see cref="LVINSERTMARK" />
        <i>point</i>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_InsertMarkHitTest</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_IsGroupViewEnabled">
    <summary>
      <para>Checks whether the list-view control has group view
enabled. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-isgroupviewenabled">LVM_ISGROUPVIEWENABLED</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_IsGroupViewEnabled</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_IsItemVisible">
    <summary>
      <para>Indicates whether an item in the list-view control is visible. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-isitemvisible">LVM_ISITEMVISIBLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="index">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of item in list-view control.</para>
    </param>
  </member>
  <member name="Windows.ListView_MapIDToIndex">
    <summary>
      <para>Maps the ID of an item to an index. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lvm-mapidtoindex">LVM_MAPIDTOINDEX</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="id">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A <b>UINT</b> that contains the unique ID of an item.</para>
    </param>
    <remarks>
      <para>List-view controls internally track items by index. This can present problems because indexes can change during the control's existence.</para>
      <para>You can use this macro to tag an item with an ID when you create the item.
You use this ID to guarantee uniqueness during the existence of the list-view control.</para>
      <para>To uniquely identify an item, take the index that returns from a call, such as <see cref="IComponent.GetDisplayInfo" />, and call <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-mapindextoid">LVM_MAPINDEXTOID</a>. The return value is a unique ID.</para>
      <para>If you need to know the index of an item after creating an ID, call
<a href="https://docs.microsoft.com//windows/desktop/controls/lvm-mapidtoindex">LVM_MAPIDTOINDEX</a> with the unique ID and it returns the most current index.</para>
      <para>
        <b>Note</b>  In a multithreaded environment, you can only be sure the correct index is returned
on the thread that hosts the list-view control, not on background threads.</para>
      <para>To use <b>ListView_MapIDToIndex</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_MapIndexToID">
    <summary>
      <para>Maps the index of an item to a unique ID. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-mapindextoid">LVM_MAPINDEXTOID</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="index">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>A <b>UINT</b> that contains the index of an item.</para>
    </param>
    <remarks>
      <para>List-view controls internally track items by index. This can present problems because indexes can change during the control's existence.</para>
      <para>You can use this macro to tag an item with an ID when you create the item. You use this ID to guarantee uniqueness during the existence of the list-view control.</para>
      <para>To uniquely identify an item, take the index that is returned from a call such as <see cref="IComponent.GetDisplayInfo" /> and call <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-mapindextoid">LVM_MAPINDEXTOID</a>. The return value is a unique ID.</para>
      <para>
        <b>Note</b>  In a multithreaded environment, you can only be sure the correct index is returned on the thread that hosts the list-view control, not on background threads.</para>
      <para>To use <b>ListView_MapIndexToID</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_MoveGroup">
    <summary>
      <para>This macro is not implemented.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iGroupId">
      <para>Type: <b>int</b></para>
      <para>
        <b>int</b>
      </para>
    </param>
    <param name="toIndex">
      <para>Type: <b>int</b></para>
      <para>
        <b>int</b>
      </para>
    </param>
  </member>
  <member name="Windows.ListView_MoveItemToGroup">
    <summary>
      <para>This macro is not implemented.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="idItemFrom">
      <para>Type: <b>int</b></para>
      <para>
        <b>int</b>
      </para>
    </param>
    <param name="idGroupTo">
      <para>Type: <b>int</b></para>
      <para>
        <b>int</b>
      </para>
    </param>
  </member>
  <member name="Windows.ListView_RedrawItems">
    <summary>
      <para>Forces a list-view control to redraw a range of items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-redrawitems">LVM_REDRAWITEMS</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iFirst">
      <para>Type: <b>int</b></para>
      <para>The index of the first item to redraw.</para>
    </param>
    <param name="iLast">
      <para>Type: <b>int</b></para>
      <para>The index of the last item to redraw.</para>
    </param>
    <remarks>
      <para>The specified items are not actually redrawn until the list-view window receives a <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> message to repaint. To repaint immediately, call the <see cref="UpdateWindow" /> function after using this macro.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_RemoveAllGroups">
    <summary>
      <para>Removes all groups from a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-removeallgroups">LVM_REMOVEALLGROUPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <remarks>
      <para>To use <b>ListView_RemoveAllGroups</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_RemoveGroup">
    <summary>
      <para>Removes a group from a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-removegroup">LVM_REMOVEGROUP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iGroupId">
      <para>Type: <b>int</b></para>
    </param>
    <remarks>
      <para>To use <b>ListView_RemoveGroup</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_Scroll">
    <summary>
      <para>Scrolls the content of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-scroll">LVM_SCROLL</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="dx">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> that specifies the amount of horizontal scrolling,  in pixels, relative to the current position of the list view content. If the list-view control is in list view, this value is rounded up to the nearest number of pixels that form a whole column.</para>
    </param>
    <param name="dy">
      <para>Type: <b>int</b></para>
      <para>A value of type <b>int</b> that specifies the amount of vertical scrolling, in pixels, relative to the current position of the list view content.</para>
    </param>
    <remarks>
      <para>When the list-view control is in report view, the control can only be scrolled vertically in whole line increments. Therefore, the
<i>dy</i> parameter will be rounded to the nearest number of pixels that form a whole line increment. For example, if the height of a line is 16 pixels and 8 is passed for <i>dy</i>, the list will be scrolled by 16 pixels (1 line). If 7 is passed for <i>dy</i>, the list will be scrolled 0 pixels (0 lines).</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetBkColor">
    <summary>
      <para>Sets the background color of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setbkcolor">LVM_SETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="clrBk">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The background color to set or the CLR_NONE value for no background color. List-view controls with background colors redraw themselves significantly faster than those without background colors.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetBkImage">
    <summary>
      <para>Sets the background image in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setbkimage">LVM_SETBKIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvbki">
      <para>Type: <b>LPLVBKIMAGE</b></para>
      <para>A pointer to an <see cref="LVBKIMAGE" /> structure that contains the new background image information.</para>
    </param>
    <remarks>
      <para>Because the list-view control uses OLE COM to manipulate the background images, the calling application must call <see cref="CoInitialize" /> or <see cref="OleInitialize" /> before using this macro. It is best to call one of these functions when the application is initialized and call either <see cref="CoUninitialize" /> or <see cref="OleUninitialize" /> when the application is terminating.</para>
    </remarks>
    <seealso cref="ListView_GetBkImage" />
  </member>
  <member name="Windows.ListView_SetCallbackMask">
    <summary>
      <para>Changes the callback mask for a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcallbackmask">LVM_SETCALLBACKMASK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The value of the callback mask. The bits of the mask indicate the item states or images for which the application stores the current state data. This value can be any combination of the following constants:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIS_CUT</b>
          </description>
          <description>
            <para>The item is marked for a cut-and-paste operation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_DROPHILITED</b>
          </description>
          <description>
            <para>The item is highlighted as a drag-and-drop target.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_FOCUSED</b>
          </description>
          <description>
            <para>The item has the focus.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_SELECTED</b>
          </description>
          <description>
            <para>The item is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_OVERLAYMASK</b>
          </description>
          <description>
            <para>The application stores the image list index of the current overlay image for each item.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_STATEIMAGEMASK</b>
          </description>
          <description>
            <para>The application stores the image list index of the current state image for each item.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>The <i>callback mask</i> of a list-view control is a set of bit flags that specify the item states for which the application, rather than the control, stores the current data. The callback mask applies to all of the control's items, unlike the callback item designation, which applies to a specific item. The callback mask is zero by default, meaning that the list-view control stores all item state information. After creating a list-view control and initializing its items, you can use the <b>ListView_SetCallbackMask</b> macro or <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcallbackmask">LVM_SETCALLBACKMASK</a> message to change the callback mask. To retrieve the current callback mask, send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getcallbackmask">LVM_GETCALLBACKMASK</a> message.</para>
      <para>For more information about overlay images and state images, see <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-controls-overview">List-View Image Lists</a>.</para>
      <para>For more information on list-view callbacks, see <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-controls-overview">Callback Items and the Callback Mask</a></para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/lvn-getdispinfo">LVN_GETDISPINFO</seealso>
  </member>
  <member name="Windows.ListView_SetCheckState">
    <summary>
      <para>Selects or deselects an item in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemstate">LVM_SETITEMSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The index of the item for which to set the check state.</para>
    </param>
    <param name="fCheck">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>A value that is set to <b>TRUE</b> to select the item, or <b>FALSE</b> to deselect it.</para>
    </param>
    <remarks>
      <para>This macro should only be used for list-view controls with the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_CHECKBOXES</a> style.</para>
    </remarks>
    <seealso cref="ListView_SetItemState" />
  </member>
  <member name="Windows.ListView_SetColumn">
    <summary>
      <para>Sets the attributes of a list-view column. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcolumn">LVM_SETCOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>The index of the column.</para>
    </param>
    <param name="pcol">
      <para>Type: <b>LPLVCOLUMN</b></para>
      <para>A pointer to an <see cref="LVCOLUMN" /> structure that contains the new column attributes. The <b>mask</b> member specifies which column attributes to set. If the <b>mask</b> member specifies the LVCF_TEXT value, the <b>pszText</b> member is the address of a null-terminated string and the <b>cchTextMax</b> member is ignored.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetColumnOrderArray">
    <summary>
      <para>Sets the left-to-right order of columns in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcolumnorderarray">LVM_SETCOLUMNORDERARRAY</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="iCount">
      <para>Type: <b>int</b></para>
      <para>The number of columns in the list-view control.</para>
    </param>
    <param name="pi">
      <para>Type: <b>int*</b></para>
      <para>A pointer to an array specifying the order in which columns should be displayed, from left to right. For example, if the contents of the array are {2,0,1}, the control displays column 2, column 0, and column 1, from left to right.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetColumnWidth">
    <summary>
      <para>Used to change the width of a column in report view or the width of all columns in list-view mode. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setcolumnwidth">LVM_SETCOLUMNWIDTH</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of a valid column. For list-view mode, this parameter must be set to zero.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The new width of the column, in pixels. For report-view mode, the following special values are supported:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVSCW_AUTOSIZE</b>
          </description>
          <description>
            <para>Automatically sizes the column.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSCW_AUTOSIZE_USEHEADER</b>
          </description>
          <description>
            <para>Automatically sizes the column to fit the header text. If you use this value with the last column, its width is set to fill the remaining width of the list-view control.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>Assume that you have a 2-column list-view control with a width of 500 pixels. If the width of column zero is set to 200 pixels, and you make the following call.</para>
      <para>
        <code>ListView_SetColumnWidth(hwnd, 1, LVSCW_AUTOSIZE_USEHEADER)</code>
      </para>
      <para>The second (and last) column will be 300 pixels wide.</para>
      <para>Note that <b>ListView_SetColumnWidth</b> converts the
<i>cx</i> parameter to a 16-bit value.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetExtendedListViewStyle">
    <summary>
      <para>Sets extended styles for list-view controls. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setextendedlistviewstyle">LVM_SETEXTENDEDLISTVIEWSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control that will receive the style change.</para>
    </param>
    <param name="dw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A <b>DWORD</b> value that specifies the extended list-view control style. This parameter can be a combination of <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">Extended List-View Styles</a>.</para>
    </param>
    <remarks>
      <para>For backward compatibility reasons, the <b>ListView_SetExtendedListViewStyle</b> macro has not been updated to use
<i>dwExMask</i>. To use the <i>dwExMask</i> value, use the <see cref="ListView_SetExtendedListViewStyleEx" /> macro.</para>
      <para>When you use this macro to set the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_CHECKBOXES</a> style, any previously set state image index will be discarded. All check boxes will be initialized to the unchecked state. The state image index is contained in bits 12 through 15 of the
<b>state</b> member of the <see cref="LVITEM" /> structure.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetExtendedListViewStyleEx">
    <summary>
      <para>Sets extended styles for list-view controls using the style mask. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setextendedlistviewstyle">LVM_SETEXTENDEDLISTVIEWSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control that will receive the style change.</para>
    </param>
    <param name="dwMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A <b>DWORD</b> value that specifies which styles in
<i>dwExStyle</i> are to be affected. This parameter can be a combination of <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">Extended List-View Styles</a>. Only the extended styles in <i>dwExMask</i> will be changed. All other styles will be maintained as they are. If this parameter is zero, all of the styles in <i>dwExStyle</i> will be affected.</para>
    </param>
    <param name="dw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>A <b>DWORD</b> value that specifies the extended list-view control styles to set. This parameter can be a combination of <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">Extended List-View Styles</a>. Styles that are not set, but that are specified in <i>dwExMask</i>, are removed.</para>
    </param>
    <remarks>
      <para>When you use this macro to set the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_CHECKBOXES</a> style, any previously set state image index will be discarded. All check boxes will be initialized to the unchecked state. The state image index is contained in bits 12 through 15 of the
<b>state</b> member of the <see cref="LVITEM" /> structure.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetGroupHeaderImageList">
    <summary>
      <para>Assigns an image list to the group header of a list-view control.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIML</b></para>
      <para>A handle to the image list.</para>
    </param>
    <remarks>
      <para>The current image list will be destroyed when the list-view control is destroyed unless the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_SHAREIMAGELISTS</a> style is set. If you use this message to replace one image list with another, your application must explicitly destroy all image lists other than the current one.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetGroupInfo">
    <summary>
      <para>Sets group information. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setgroupinfo">LVM_SETGROUPINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iGroupId">
      <para>Type: <b>int</b></para>
    </param>
    <param name="pgrp">
      <para>Type: <b>PLVGROUP</b></para>
      <para>
        <see cref="LVGROUP" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetGroupInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetGroupMetrics">
    <summary>
      <para>Sets information about the display of groups. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setgroupmetrics">LVM_SETGROUPMETRICS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pGroupMetrics">
      <para>Type: <b>PLVGROUPMETRICS</b></para>
      <para>
        <see cref="LVGROUPMETRICS" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetGroupMetrics</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetGroupState">
    <summary>
      <para>Sets the state for a specified group.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="dwGroupId">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the group by <b>iGroupId</b> (see <see cref="LVGROUP" /> structure).</para>
    </param>
    <param name="dwMask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the state values to set or clear. This is a combination of the flags listed for the <b>state</b> member of <see cref="LVGROUP" />.</para>
    </param>
    <param name="dwState">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the state values to set. States that are not included here but are included in <i>dwMask</i> are cleared.</para>
    </param>
    <remarks>
      <para>
        <b>Note</b>  To use this macro, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
      <para>You can also set the group state by using <see cref="ListView_SetGroupInfo" />.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetHotCursor">
    <summary>
      <para>Sets the HCURSOR that the list-view control uses when the pointer is over an item while hot tracking is enabled. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sethotcursor">LVM_SETHOTCURSOR</a> message explicitly. To check whether hot tracking is enabled, call <see cref="SystemParametersInfo" />.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="hcur">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HCURSOR</a></b></para>
      <para>A handle to the cursor to be set.</para>
    </param>
    <remarks>
      <para>A list-view control uses hot tracking and hover selection when the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TRACKSELECT</a> style is set.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetHotItem">
    <summary>
      <para>Sets the hot item in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sethotitem">LVM_SETHOTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>The zero-based index of the item to be set as the hot item.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetHoverTime">
    <summary>
      <para>Sets the amount of time that the mouse cursor must hover over an item before it is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sethovertime">LVM_SETHOVERTIME</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="dwHoverTimeMs">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>The new amount of time, in milliseconds, that the mouse cursor must hover over an item before it is selected. If this value is (<b>DWORD</b>)-1, then the hover time is set to the default hover time.</para>
    </param>
    <remarks>
      <para>The hover time only affects list-view controls that have the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TRACKSELECT</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_ONECLICKACTIVATE</a>, or <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_TWOCLICKACTIVATE</a> extended list-view style.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetIconSpacing">
    <summary>
      <para>Sets the spacing between icons in list-view controls set to the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_ICON</a> style. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-seticonspacing">LVM_SETICONSPACING</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The distance, in pixels, to set between icons on the x-axis.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>The distance, in pixels, to set between icons on the y-axis.</para>
    </param>
    <remarks>
      <para>The
<i>cx</i> and <i>cy</i> parameters are relative to the upper-left corner of an icon bitmap. Therefore, to set spacing between icons that do not overlap, the <i>cx</i> or <i>cy</i> values must include the size of the icon, plus the amount of empty space desired between icons. Values that do not include the width of the icon will result in overlaps.</para>
      <para>When defining the icon spacing, <i>cx</i> and <i>cy</i> must set to 4 or larger. Smaller values will not yield the desired layout. You can reset <i>cx</i> and <i>cy</i> to the default spacing by setting both values to -1. This approach only allows you to reset both default settings. You cannot reset only <i>cx</i> or <i>cy</i> to the default setting by setting one of them to -1.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetImageList">
    <summary>
      <para>Assigns an image list to a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setimagelist">LVM_SETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>A handle to the image list to assign.</para>
    </param>
    <param name="iImageList">
      <para>Type: <b>int</b></para>
      <para>The type of image list. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVSIL_NORMAL</b>
          </description>
          <description>
            <para>Image list with large icons.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_SMALL</b>
          </description>
          <description>
            <para>Image list with small icons.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_STATE</b>
          </description>
          <description>
            <para>Image list with state images.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSIL_GROUPHEADER</b>
          </description>
          <description>
            <para>Image list for group header.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>The current image list will be destroyed when the list-view control is destroyed unless the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_SHAREIMAGELISTS</a> style is set. If you use this message to replace one image list with another, your application must explicitly destroy all image lists other than the current one.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetInfoTip">
    <summary>
      <para>Sets tooltip text. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setinfotip">LVM_SETINFOTIP</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvInfoTip">
      <para>Type: <b>PLVSETINFOTIP</b></para>
      <para>
        <see cref="LVSETINFOTIP" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetInfoTip</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetInsertMark">
    <summary>
      <para>Sets the insertion point to the defined position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setinsertmark">LVM_SETINSERTMARK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="lvim">
      <para>Type: <b>PLVINSERTMARK</b></para>
      <para>
        <see cref="LVINSERTMARK" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetInsertMark</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetInsertMarkColor">
    <summary>
      <para>Sets the color of the insertion point. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setinsertmarkcolor">LVM_SETINSERTMARKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="color">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <b>COLORREF</b>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetInsertMarkColor</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetItem">
    <summary>
      <para>Sets some or all of a list-view item's attributes. You can also use <b>ListView_SetItem</b> to set the text of a subitem. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitem">LVM_SETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>const LPLVITEM</b></para>
      <para>A pointer to an <see cref="LVITEM" /> structure that contains the new item attributes. The <b>iItem</b> and
<b>iSubItem</b> members identify the item or subitem, and the
<b>mask</b> member specifies which attributes to set. If the <b>mask</b> member specifies the LVIF_TEXT value, the <b>pszText</b> member is the address of a null-terminated string and the <b>cchTextMax</b> member is ignored. If the <b>mask</b> member specifies the LVIF_STATE value, the <b>stateMask</b> member specifies which item states to change, and the <b>state</b> member contains the values for those states.</para>
    </param>
    <remarks>
      <para>To set the attributes of a list-view item, set the
<b>iItem</b> member of the <see cref="LVITEM" /> structure to the index of the item, and set the
<b>iSubItem</b> member to zero. For an item, you can use the
<b>state</b>, <b>pszText</b>,
<b>iImage</b>, and <b>lParam</b> members of the <b>LVITEM</b> structure to modify these item parameters.</para>
      <para>To set the text of a subitem, set the <b>iItem</b> and <b>iSubItem</b> members to indicate the specific subitem, and use the <b>pszText</b> member to specify the text. Alternatively, you can use the <see cref="ListView_SetItemText" /> macro to set the text of a subitem. You cannot set the <b>state</b> or <b>lParam</b> members for subitems because subitems do not have these attributes. In version 4.70 and later, you can set the <b>iImage</b> member for subitems. The subitem image will be displayed if the list-view control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_SUBITEMIMAGES</a> extended style. Previous versions will ignore the subitem image.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetItemCount">
    <summary>
      <para>Causes the list-view control to allocate memory for the specified number of items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemcount">LVM_SETITEMCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="cItems">
      <para>Type: <b>int</b></para>
      <para>The number of items for which the list-view control should allocate memory.</para>
    </param>
    <remarks>
      <para>If the list-view control was created without the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_OWNERDATA</a> style, this macro causes the control to allocate its internal data structures for the specified number of items. This prevents the control from having to allocate the data structures every time an item is added.</para>
      <para>If the list-view control was created with the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_OWNERDATA</a> style (a <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-controls-overview">virtual list view</a>), the <see cref="ListView_SetItemCountEx" /> macro should be used.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetItemCountEx">
    <summary>
      <para>Sets the virtual number of items in a <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-controls-overview">virtual list view</a>. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemcount">LVM_SETITEMCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a virtual list-view control.</para>
    </param>
    <param name="cItems">
      <para>Type: <b>int</b></para>
      <para>The number of items that the list-view control will contain.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Values that specify the behavior of the list-view control after resetting the item count. This value can be a combination of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVSICF_NOINVALIDATEALL</b>
          </description>
          <description>
            <para>The list-view control will not repaint unless affected items are currently in view.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVSICF_NOSCROLL</b>
          </description>
          <description>
            <para>The list-view control will not change the scroll position when the item count changes.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>This macro is intended only for list-view controls that use the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_OWNERDATA</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_REPORT</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_LIST</a> styles.</para>
      <para>If the list-view control was created with the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_OWNERDATA</a> style, this macro sets the virtual number of items that the control contains.</para>
      <para>If the list-view control was created without the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_OWNERDATA</a> style, the <see cref="ListView_SetItemCount" /> macro should be used.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetItemIndexState">
    <summary>
      <para>Sets the state of a specified list-view item. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemindexstate">LVM_SETITEMINDEXSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="plvii">
      <para>Type: <b><see cref="LVITEMINDEX" />*</b></para>
      <para>A pointer to an <see cref="LVITEMINDEX" /> structure for the item. The caller is responsible for allocating this structure and setting the members.</para>
    </param>
    <param name="data">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The state to set on the item as one or more (as a bitwise combination) of the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">List-View Item States</a> flags.</para>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The valid bits of the state specified by parameter <i>data</i>. For more information, see the <i>stateMask</i> member of the <see cref="LVITEM" />) structure.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetItemPosition">
    <summary>
      <para>Moves an item to a specified position in a list-view control (in icon or small icon view). You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemposition">LVM_SETITEMPOSITION</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>The new x-position of the item's upper-left corner, in view coordinates.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>The new y-position of the item's upper-left corner, in view coordinates.</para>
    </param>
    <remarks>
      <para>If the list-view control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_AUTOARRANGE</a> style, the list-view control is arranged after the position of the item is set.</para>
      <para>On Windows Vista, calling this macro on a list-view control with the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_AUTOARRANGE</a> style does nothing, and the return value is <b>FALSE</b>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetItemPosition32">
    <summary>
      <para>Moves an item to a specified position in a list-view control (in icon or small icon view). This macro differs from the <see cref="ListView_SetItemPosition" /> macro in that it uses 32-bit coordinates. You can use the <b>ListView_SetItemPosition32</b> macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemposition32">LVM_SETITEMPOSITION32</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item for which to set the position.</para>
    </param>
    <param name="x0">
      <para>Type: <b>int</b></para>
      <para>New horizontal coordinates of the item.</para>
    </param>
    <param name="y0">
      <para>Type: <b>int</b></para>
      <para>New vertical coordinates of the item.</para>
    </param>
    <seealso href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</seealso>
  </member>
  <member name="Windows.ListView_SetItemState">
    <summary>
      <para>Changes the state of an item in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemstate">LVM_SETITEMSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the list-view item. If this parameter is -1, then the state change is applied to all items.</para>
    </param>
    <param name="data">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>New state bits for the item. The <i>mask</i> parameter indicates the valid bits of the <i>state</i> parameter. The macro ignores bits in the <i>state</i> parameter if the corresponding bit is not set in the <i>mask</i> parameter. The low-order byte contains a set of bit flags that indicate the item's state. This byte can be a combination of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>LVIS_CUT</b>
          </description>
          <description>
            <para>The item is marked for a cut-and-paste operation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_DROPHILITED</b>
          </description>
          <description>
            <para>The item is highlighted as a drag-and-drop target.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_FOCUSED</b>
          </description>
          <description>
            <para>The item has the focus, so it is surrounded by a standard focus rectangle. Although more than one item may be selected, only one item can have the focus.</para>
          </description>
        </item>
        <item>
          <description>
            <b>LVIS_SELECTED</b>
          </description>
          <description>
            <para>The item is selected. The appearance of a selected item depends on whether it has the focus and also on the system colors used for selection. Items will only show as selected if the list-view control has focus or the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_SHOWSELALWAYS</a> style is used.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Bits of the
<i>state</i> parameter that you want to set or clear. You can use <b>ListView_SetItemState</b> both to set and to clear bits. To set an item's overlay image index, set the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_OVERLAYMASK</a> bits. To set an item's state image index, set the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_STATEIMAGEMASK</a> bits.</para>
    </param>
    <remarks>
      <para>An item's state value includes a set of bit flags that indicate the item's state. The state value can also include image list indexes that indicate the item's state image and overlay image.</para>
      <para>The
<i>mask</i> parameter specifies the state bits you want to modify, and the <i>state</i> parameter specifies the new value for those bits. To set a bit in the item's internal state, set it in both the <i>mask</i> and <i>state</i> parameters. To clear a bit in the item's internal state, set it in the <i>mask</i> parameter and clear it in the <i>state</i> parameter. To leave a bit unchanged in the item's internal state, clear it in the <i>mask</i> parameter.</para>
      <para>Bits 8 through 11 of the <i>state</i> parameter specify the one-based index of an overlay image in the control's image lists. Both the full-sized icon image list and the small icon image list can have overlay images. The overlay image is superimposed over the item's icon image. If these bits are zero, the item has no overlay image. To isolate these bits, use the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_OVERLAYMASK</a> mask. To specify an overlay index, use the <see cref="INDEXTOOVERLAYMASK" /> macro.</para>
      <para>Bits 12 through 15 of the <i>state</i> parameter specify the one-based index of an image in the control's state image list. The state image is displayed next to an item's icon to indicate an application-defined state. If these bits are zero, the item has no state image. To isolate these bits, use the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-item-states">LVIS_STATEIMAGEMASK</a> mask. To specify a state image index, use the <see cref="INDEXTOSTATEIMAGEMASK" /> macro.</para>
    </remarks>
    <seealso cref="ListView_GetItemState" />
  </member>
  <member name="Windows.ListView_SetItemText">
    <summary>
      <para>Changes the text of a list-view item or subitem. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setitemtext">LVM_SETITEMTEXT</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The zero-based index of the list-view item.</para>
    </param>
    <param name="iSubItem_">
      <para>Type: <b>int</b></para>
      <para>The one-based index of the subitem. To set the item label, set
<i>iSubItem</i> to zero.</para>
    </param>
    <param name="pszText_">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPCTSTR</a></b></para>
      <para>A pointer to a null-terminated string that contains the new text. This parameter can be LPSTR_TEXTCALLBACK to indicate a callback item for which the parent window stores the text. In this case, the list-view control sends the parent an <a href="https://docs.microsoft.com//windows/desktop/Controls/lvn-getdispinfo">LVN_GETDISPINFO</a> notification code when it needs the text.
This parameter can be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetOutlineColor">
    <summary>
      <para>Sets the color of the border of a list-view control if the <a href="https://docs.microsoft.com//windows/desktop/Controls/extended-list-view-styles">LVS_EX_BORDERSELECT</a> extended window style is set. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setoutlinecolor">LVM_SETOUTLINECOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="color">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <b>COLORREF</b>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetOutlineColor</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetSelectedColumn">
    <summary>
      <para>Sets the index of the selected column. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setselectedcolumn">LVM_SETSELECTEDCOLUMN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iCol">
      <para>Type: <b>int</b></para>
      <para>
        <b>int</b>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetSelectedColumn</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetSelectionMark">
    <summary>
      <para>Sets the selection mark in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setselectionmark">LVM_SETSELECTIONMARK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>the zero-based index of the list-view item to be selected.</para>
    </param>
    <remarks>
      <para>The selection mark is the item index from which a multiple selection starts. This macro does not affect the selection state of the item.</para>
    </remarks>
    <seealso cref="ListView_GetSelectionMark" />
  </member>
  <member name="Windows.ListView_SetTextBkColor">
    <summary>
      <para>Sets the background color of text in a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-settextbkcolor">LVM_SETTEXTBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="clrTextBk">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The new text background color. This can be CLR_NONE for no background color.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetTextColor">
    <summary>
      <para>Sets the text color of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-settextcolor">LVM_SETTEXTCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="clrText">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>The new text color.</para>
    </param>
  </member>
  <member name="Windows.ListView_SetTileInfo">
    <summary>
      <para>Sets information for an existing tile of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-settileinfo">LVM_SETTILEINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="pti">
      <para>Type: <b>PLVTILEINFO</b></para>
      <para>
        <see cref="LVTILEINFO" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetTileInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetTileViewInfo">
    <summary>
      <para>Sets information that a list-view control uses in tile view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-settileviewinfo">LVM_SETTILEVIEWINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="ptvi">
      <para>Type: <b>PLVTILEVIEWINFO</b></para>
      <para>
        <see cref="LVTILEVIEWINFO" />
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetTileViewInfo</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetToolTips">
    <summary>
      <para>Sets the tooltip control that the list-view control will use to display tooltips. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-settooltips">LVM_SETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="hwndNewHwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the tooltip control to be set.</para>
    </param>
    <seealso cref="ListView_GetToolTips" />
  </member>
  <member name="Windows.ListView_SetUnicodeFormat">
    <summary>
      <para>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setunicodeformat">LVM_SETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the control.</para>
    </param>
    <param name="fUnicode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>The character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters.</para>
    </param>
    <seealso cref="ListView_GetUnicodeFormat" />
  </member>
  <member name="Windows.ListView_SetView">
    <summary>
      <para>Sets the view of a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setview">LVM_SETVIEW</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="iView">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>
        <b>DWORD</b>
        <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setview">LVM_SETVIEW</a>
      </para>
    </param>
    <remarks>
      <para>To use <b>ListView_SetView</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SetWorkAreas">
    <summary>
      <para>Sets the working areas within a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-setworkareas">LVM_SETWORKAREAS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to a list-view control.</para>
    </param>
    <param name="nWorkAreas">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>The number of <see cref="RECT" /> structures in the array at
<i>lprc</i>. The maximum number of working areas allowed is defined by the <b>LV_MAX_WORKAREAS</b> value.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>A pointer to an array of <see cref="RECT" /> structures that contain the new working areas of the list-view control. Values in these structures are in client coordinates. If this parameter is <b>NULL</b>, the working area will be set to the client area of the control. <i>nWorkAreas</i> specifies the number of structures in this array.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/using-list-view-controls">Using List-View Controls</seealso>
  </member>
  <member name="Windows.ListView_SortGroups">
    <summary>
      <para>Uses an application-defined comparison function to sort groups by ID within a list-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sortgroups">LVM_SORTGROUPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="_pfnGroupCompate">
      <para>Type: <b>PFNLVGROUPCOMPARE</b></para>
    </param>
    <param name="_plv">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPVOID</a></b></para>
    </param>
    <remarks>
      <para>To use <b>ListView_SortGroups</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SortItems">
    <summary>
      <para>Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to reflect the new sequence. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sortitems">LVM_SORTITEMS</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="_pfnCompare">
      <para>Type: <b>PFNLVCOMPARE</b></para>
      <para>A pointer to the application-defined comparison function. The comparison function is called during the sort operation each time the relative order of two list items needs to be compared.</para>
    </param>
    <param name="_lPrm">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The application-defined value that is passed to the comparison function.</para>
    </param>
    <remarks>
      <para>The comparison function has the following form.</para>
      <code>int CALLBACK CompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
</code>
      <para>The
<i>lParam1</i> parameter is the value associated with the first item being compared; and the
<i>lParam2</i> parameter is the value associated with the second item. These are the values that were specified in the
<b>lParam</b> member of the items' <see cref="LVITEM" /> structure when they were inserted into the list. The <i>lParamSort</i> parameter is the same value passed to the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sortitems">LVM_SORTITEMS</a> message.</para>
      <para>The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.</para>
      <para>
        <b>Note</b>   During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view control, the results are unpredictable.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SortItemsEx">
    <summary>
      <para>Uses an application-defined comparison function to sort the items of a list-view control. The index of each item changes to reflect the new sequence. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-sortitemsex">LVM_SORTITEMSEX</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="_pfnCompare">
      <para>Type: <b>PFNLVCOMPARE</b></para>
      <para>A pointer to an application-defined comparison function. It is called during the sort operation each time the relative order of two list items needs to be compared.</para>
    </param>
    <param name="_lPrm">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The application-defined value that is passed to the comparison function.</para>
    </param>
    <remarks>
      <para>The comparison function has the following form.</para>
      <code>int CALLBACK CompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
</code>
      <para>where
<i>lParam1</i> is the index of the first item and
<i>lParam2</i> the index of the second. The
<b>ListView_SortItemsEx</b>'s
<i>lParamSort</i> parameter is passed to the callback function as its third parameter.</para>
      <para>The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.</para>
      <para>You can send an <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitemtext">LVM_GETITEMTEXT</a> message to retrieve further information on an item, if needed.</para>
      <para>This macro is similar to <see cref="ListView_SortItems" />, except for the type of information passed to the comparison function. With <b>ListView_SortItemsEx</b>, the item's index is passed instead of its
<i>lparam</i> value.</para>
      <para>
        <b>Note</b>   During the sorting process, the list-view contents are unstable. If the callback function sends any messages to the list-view control aside from <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-getitem">LVM_GETITEM</a> (<see cref="ListView_GetItem" />), the results are unpredictable.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_SubItemHitTest">
    <summary>
      <para>Determines which list-view item or subitem is located at a given position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-subitemhittest">LVM_SUBITEMHITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control that will be hit-tested.</para>
    </param>
    <param name="plvhti">
      <para>Type: <b>LPLVHITTESTINFO</b></para>
      <para>A pointer to an <see cref="LVHITTESTINFO" /> structure. The <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure within <b>LVHITTESTINFO</b> must be set to the client coordinates to be hit-tested.</para>
    </param>
  </member>
  <member name="Windows.ListView_SubItemHitTestEx">
    <summary>
      <para>Determines which list-view item or subitem is located at a given position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-subitemhittest">LVM_SUBITEMHITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control that will be hit-tested.</para>
    </param>
    <param name="plvhti">
      <para>Type: <b>LPLVHITTESTINFO</b></para>
      <para>A pointer to an <see cref="LVHITTESTINFO" /> structure. The <a href="https://docs.microsoft.com//previous-versions/dd162805(v=vs.85)">POINT</a> structure within <b>LVHITTESTINFO</b> must be set to the client coordinates to be hit-tested.</para>
    </param>
    <remarks>
      <para>This macro passes -1 as the <i>wparam</i> of the message, specifying that the <b>iGroup</b> member of <i>plvhti</i> is retrieved.</para>
    </remarks>
  </member>
  <member name="Windows.ListView_Update">
    <summary>
      <para>Updates a list-view item. If the list-view control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-view-window-styles">LVS_AUTOARRANGE</a> style, this macro causes the list-view control to be arranged. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lvm-update">LVM_UPDATE</a> message explicitly.</para>
    </summary>
    <param name="hwndLV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>The index of the item to update.</para>
    </param>
  </member>
  <member name="Windows.LoadIconWithScaleDown">
    <summary>
      <para>Loads an icon. If the icon is not a standard size, this function scales down a larger image instead of scaling up a smaller image.</para>
    </summary>
    <param name="hinst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined icon or a standalone icon file, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="pszName">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>A pointer to a null-terminated, Unicode buffer that contains location information about the icon to load.</para>
      <para>If <i>hinst</i> is non-<b>NULL</b>, <i>pszName</i>  specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hinst</i> is <b>NULL</b>, <i>pszName</i> specifies either the name of a standalone icon (.ico) file or the identifier of a predefined icon to load. The following identifiers are recognized. To pass these constants to the <b>LoadIconWithScaleDown</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the IDI_ERROR icon, pass <code>MAKEINTRESOURCE(IDI_ERROR)</code> as the <i>pszName</i> parameter and <b>NULL</b> as the <i>hinst</i> parameter.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>IDI_APPLICATION</b>
          </description>
          <description>
            <para>Default application icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_ASTERISK</b>
          </description>
          <description>
            <para>Same as IDI_INFORMATION.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_ERROR</b>
          </description>
          <description>
            <para>Hand-shaped icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_EXCLAMATION</b>
          </description>
          <description>
            <para>Same as IDI_WARNING.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_HAND</b>
          </description>
          <description>
            <para>Same as IDI_ERROR.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_INFORMATION</b>
          </description>
          <description>
            <para>Asterisk icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_QUESTION</b>
          </description>
          <description>
            <para>Question mark icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_WARNING</b>
          </description>
          <description>
            <para>Exclamation point icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_WINLOGO</b>
          </description>
          <description>
            <para>Windows logo icon.</para>
          </description>
        </item>
        <item>
          <description>
            <b>IDI_SHIELD</b>
          </description>
          <description>
            <para>Security Shield icon.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>The desired width, in pixels, of the icon.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>The desired height, in pixels, of the icon.</para>
    </param>
    <param name="phico">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HICON</a>*</b></para>
      <para>When this function returns, contains a pointer to the handle of the loaded icon.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The contents of the buffer pointed to by <i>pszName</i> do not fit any of the expected interpretations.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function will first search the icon file for an icon having exactly the same size. If a match is not found, then unless both <i>cx</i> and <i>cy</i> match one of the standard icon sizes—16, 32, 48, or 256 pixels— the next largest icon is selected and then scaled down to the desired size. For example, if an icon with an x dimension of 40 pixels is requested by the callign application, the 48-pixel icon is used and scaled down to 40 pixels. In contrast, the <see cref="LoadImage" /> function selects the 32-pixel icon and scales it up to 40 pixels.</para>
      <para>If the function is unable to locate a larger icon, it defaults to the standard behavior of finding the next smallest icon and scaling it up to the desired size.</para>
    </remarks>
  </member>
  <member name="Windows.MakeDragList">
    <summary>
      <para>Changes the specified single-selection list box to a drag list box.</para>
    </summary>
    <param name="hLB">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the single-selection list box.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Returns nonzero if successful, or zero otherwise.</para>
    </returns>
  </member>
  <member name="Windows.MAKEIPADDRESS">
    <summary>
      <para>Packs four byte-values into a single LPARAM suitable for use with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-setaddress">IPM_SETADDRESS</a> message.</para>
    </summary>
    <param name="b1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The field 0 address.</para>
    </param>
    <param name="b2">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The field 1 address.</para>
    </param>
    <param name="b3">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The field 2 address.</para>
    </param>
    <param name="b4">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The field 3 address.</para>
    </param>
  </member>
  <member name="Windows.MAKEIPRANGE">
    <summary>
      <para>Packs two byte-values into a single LPARAM suitable for use with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-setrange">IPM_SETRANGE</a> message.</para>
    </summary>
    <param name="low">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The lower limit of the range.</para>
    </param>
    <param name="high">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BYTE</a></b></para>
      <para>The upper limit of the range.</para>
    </param>
  </member>
  <member name="Windows.MenuHelp">
    <summary>
      <para>Processes <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-menuselect">WM_MENUSELECT</a> and <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> messages and displays Help text about the current menu in the specified status window.</para>
    </summary>
    <param name="uMsg">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Message being processed. This can be either <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-menuselect">WM_MENUSELECT</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a>.</para>
    </param>
    <param name="wParam">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">WPARAM</a></b></para>
      <para>wParam of the message specified in
<i>uMsg</i>.</para>
    </param>
    <param name="lParam">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>lParam of the message specified in
<i>uMsg</i>.</para>
    </param>
    <param name="hMainMenu">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HMENU</a></b></para>
      <para>Handle to the application's main menu.</para>
    </param>
    <param name="hInst">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>Handle to the module that contains the string resources.</para>
    </param>
    <param name="hwndStatus">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the status window.</para>
    </param>
    <param name="lpwIDs">
      <para>Type: <b>LPUINT</b></para>
      <para>Pointer to an array of values that contains pairs of string resource identifiers and menu handles. The function searches the array for the handle to the selected menu and, if found, uses the corresponding resource identifier to load the appropriate Help string.</para>
    </param>
    <remarks>
      <para>The <b>MenuHelp</b> function is a helper function. Helper functions are available as a convenience to programming. They combine into one call a sequence of frequently used calls. You use <b>MenuHelp</b> to send <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-menuselect">WM_MENUSELECT</a> and <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> messages.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_GetCalendarBorder">
    <summary>
      <para>Gets the border size, in pixels, of a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcalendarborder">MCM_GETCALENDARBORDER</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetCalendarCount">
    <summary>
      <para>Gets the number of calendars currently displayed in the calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcalendarcount">MCM_GETCALENDARCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetCalendarGridInfo">
    <summary>
      <para>Gets information about a calendar grid.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pmcGridInfo">
      <para>Type: <b><see cref="MCGRIDINFO" />*</b></para>
      <para>Pointer to an <see cref="MCGRIDINFO" /> structure that contains information about the calendar grid.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetCALID">
    <summary>
      <para>Gets the current calendar ID for the given calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcalid">MCM_GETCALID</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetColor">
    <summary>
      <para>Retrieves the color for a given portion of a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcolor">MCM_GETCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="iColor">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Value of type <b>int</b> specifying which month calendar color to retrieve. This value can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MCSC_BACKGROUND</b>
          </description>
          <description>
            <para>Retrieve the background color displayed between months.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_MONTHBK</b>
          </description>
          <description>
            <para>Retrieve the background color displayed within the month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display text within a month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLEBK</b>
          </description>
          <description>
            <para>Retrieve the background color displayed in the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLETEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display text within the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TRAILINGTEXT</b>
          </description>
          <description>
            <para>Retrieve the color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.MonthCal_GetCurrentView">
    <summary>
      <para>Gets the view for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcurrentview">MCM_GETCURRENTVIEW</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetCurSel">
    <summary>
      <para>Retrieves the currently selected date. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getcursel">MCM_GETCURSEL</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a <see cref="SYSTEMTIME" /> structure that will receive the currently selected date information. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetFirstDayOfWeek">
    <summary>
      <para>Retrieves the first day of the week for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getfirstdayofweek">MCM_GETFIRSTDAYOFWEEK</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetMaxSelCount">
    <summary>
      <para>Retrieves the maximum date range that can be selected in a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getmaxselcount">MCM_GETMAXSELCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <remarks>
      <para>You can change the maximum date range that can be selected by using the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setmaxselcount">MCM_SETMAXSELCOUNT</a> message.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_GetMaxTodayWidth">
    <summary>
      <para>Retrieves the maximum width of the "today" string in a month calendar control. This includes the label text and the date text. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getmaxtodaywidth">MCM_GETMAXTODAYWIDTH</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetMinReqRect">
    <summary>
      <para>Retrieves the minimum size required to display a full month in a month calendar control. Size information is presented in the form of a <see cref="RECT" /> structure. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getminreqrect">MCM_GETMINREQRECT</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that will receive bounding rectangle information. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
    <remarks>
      <para>The minimum required window size for a month calendar control depends on the currently selected font, control styles, system metrics, and regional settings. When an application changes anything that affects the minimum window size, or processes a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> message, it should call <b>MonthCal_GetMinReqRect</b> to determine the new minimum size.</para>
      <para>
        <b>Note</b>  The rectangle returned by <b>MonthCal_GetMinReqRect</b> does not include the width of the "Today" string, if it is present. If the <a href="https://docs.microsoft.com//windows/desktop/Controls/month-calendar-control-styles">MCS_NOTODAY</a> style is not set, your application should also retrieve the rectangle that defines the "Today" string width by calling the <see cref="MonthCal_GetMaxTodayWidth" /> macro. Use the larger of the two rectangles to ensure that the "Today" string is not clipped.</para>
      <para>The <b>top</b> and <b>left</b> members of <i>lpRectInfo</i> will always be zero. The <b>right</b> and <b>bottom</b> members represent the minimum <i>cx</i> and <i>cy</i> required for the control.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_GetMonthDelta">
    <summary>
      <para>Retrieves the scroll rate for a month calendar control. The scroll rate is the number of months that the control moves its display when the user clicks a scroll button. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getmonthdelta">MCM_GETMONTHDELTA</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetMonthRange">
    <summary>
      <para>Retrieves date information (using <see cref="SYSTEMTIME" /> structures) that represents the high and low limits of a month calendar control's display. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getmonthrange">MCM_GETMONTHRANGE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="gmr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Value specifying the scope of the range limits to be retrieved. This value must be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GMR_DAYSTATE</b>
          </description>
          <description>
            <para>Include preceding and trailing months of visible range that are only partially displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GMR_VISIBLE</b>
          </description>
          <description>
            <para>Include only those months that are entirely displayed.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a two-element array of <see cref="SYSTEMTIME" /> structures that will receive the lower and upper limits of the scope specified by <i>dwFlag</i>. The lower and upper limits are placed in lprgSysTimeArray[0] and lprgSysTimeArray[1], respectively. The time members of these structures will not be modified. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetRange">
    <summary>
      <para>Retrieves the minimum and maximum allowable dates set for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getrange">MCM_GETRANGE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a two-element array of <see cref="SYSTEMTIME" /> structures that will receive the date limit information. The minimum limit is set in <i>lprgSysTimeArray</i>[0], and <i>lprgSysTimeArray</i>[1] receives the maximum limit. If either element is set to all zeros, then no corresponding limit is set for the month calendar control. The time members of these structures will not be modified. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetSelRange">
    <summary>
      <para>Retrieves date information that represents the upper and lower limits of the date range currently selected by the user. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getselrange">MCM_GETSELRANGE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a two-element array of <see cref="SYSTEMTIME" /> structures that will receive the lower and upper limits of the user's selection. The lower and upper limits are placed in <i>lprgSysTimeArray</i>[0] and <i>lprgSysTimeArray</i>[1], respectively. The time members of these structures will not be modified. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetToday">
    <summary>
      <para>Retrieves the date information for the date specified as "today" for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-gettoday">MCM_GETTODAY</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a <see cref="SYSTEMTIME" /> structure that will receive the date information. The time members of this structure will not be modified. This parameter must be a valid address and cannot be <b>NULL</b>.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_GetUnicodeFormat">
    <summary>
      <para>Retrieves the Unicode character format flag for the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-getunicodeformat">MCM_GETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <seealso cref="MonthCal_SetUnicodeFormat" />
  </member>
  <member name="Windows.MonthCal_HitTest">
    <summary>
      <para>Determines which portion of a month calendar control is at a given point on the screen. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-hittest">MCM_HITTEST</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pinfo">
      <para>Type: <b>PMCHITTESTINFO</b></para>
      <para>Pointer to an <see cref="MCHITTESTINFO" /> structure. Upon calling the macro, the <b>cbSize</b> member must be set to the size of the <b>MCHITTESTINFO</b> structure, and <b>pt</b> must be set to the point you want to hit test.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetCalendarBorder">
    <summary>
      <para>Sets the border size, in pixels, of a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setcalendarborder">MCM_SETCALENDARBORDER</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="fset">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>If <b>TRUE</b>, then the border size is set to the number of pixels that <i>xyborder</i> specifies. If <b>FALSE</b>, then the border size is reset to the default value specified by the theme, or zero if themes are not being used.</para>
    </param>
    <param name="xyborder">
      <para>Type: <b>int</b></para>
      <para>Number of pixels of the border size.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetCALID">
    <summary>
      <para>Sets the calendar ID for the given calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setcalid">MCM_SETCALID</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="calid">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Calendar ID. One of the <a href="https://docs.microsoft.com//windows/desktop/Intl/calendar-identifiers">Calendar Identifiers</a> constants.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetColor">
    <summary>
      <para>Sets the color for a given portion of a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setcolor">MCM_SETCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="iColor">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Value of type <b>int</b> specifying which month calendar color to set. This value can be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MCSC_BACKGROUND</b>
          </description>
          <description>
            <para>Set the background color displayed between months.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_MONTHBK</b>
          </description>
          <description>
            <para>Set the background color displayed within the month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TEXT</b>
          </description>
          <description>
            <para>Set the color used to display text within a month.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLEBK</b>
          </description>
          <description>
            <para>Set the background color displayed in the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TITLETEXT</b>
          </description>
          <description>
            <para>Set the color used to display text within the calendar's title.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCSC_TRAILINGTEXT</b>
          </description>
          <description>
            <para>Set the color used to display header day and trailing day text. Header and trailing days are the days from the previous and following months that appear on the current month calendar.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <b>COLORREF</b> value that represents the color that will be set for the specified area of the month calendar.</para>
    </param>
    <remarks>
      <para>If visual styles are active, this macro has no effect except when <i>iColor</i> is MCSC_BACKGROUND.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_SetCurrentView">
    <summary>
      <para>Sets the view for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setcurrentview">MCM_SETCURRENTVIEW</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="dwNewView">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>New view. One of the following constants.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MCMV_MONTH</b>
          </description>
          <description>
            <para>Monthly view.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCMV_YEAR</b>
          </description>
          <description>
            <para>Annual view.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCMV_DECADE</b>
          </description>
          <description>
            <para>Decade view.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MCMV_CENTURY</b>
          </description>
          <description>
            <para>Century view.</para>
          </description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.MonthCal_SetCurSel">
    <summary>
      <para>Sets the currently selected date for a month calendar control. If the specified date is not in view, the control updates the display to bring it into view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setcursel">MCM_SETCURSEL</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a <see cref="SYSTEMTIME" /> structure that contains the date to be set as the current selection. The time members of this structure are ignored.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetDayState">
    <summary>
      <para>Sets the day states for all months that are currently visible within a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setdaystate">MCM_SETDAYSTATE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="cbds">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Value of type <b>int</b> indicating how many elements are in the array that <i>lpDayStateArray</i> points to.</para>
    </param>
    <param name="rgds">
      <para>Type: <b>LPMONTHDAYSTATE</b></para>
      <para>Pointer to an array of <a href="https://docs.microsoft.com//windows/desktop/Controls/monthdaystate">MONTHDAYSTATE</a> values that define how the month calendar control will draw each day in its display.</para>
    </param>
    <remarks>
      <para>An application can explicitly set day state information by using this macro, but the state will not persist when a different part of the calendar is scrolled into view. Day state information is usually set in response to the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcn-getdaystate">MCN_GETDAYSTATE</a> notification code, which is sent whenever the control needs to be refreshed.</para>
      <para>The array at
<i>lpDayStateArray</i> must contain as many elements as the value returned by the following macro:</para>
      <para>
        <code>MonthCal_GetMonthRange(hwndMC, GMR_DAYSTATE, NULL);</code>
      </para>
      <para>The preceding macro returns the total number of months that are in complete or partial view within the month calendar's display.</para>
      <para>Keep in mind that the array at
<i>lpDayStateArray</i> must contain <a href="https://docs.microsoft.com//windows/desktop/Controls/monthdaystate">MONTHDAYSTATE</a> values that correspond with all months currently in the control's display, in chronological order. This includes the two months that may be  partially displayed before the first month and after the last month.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/using-month-calendar-controls">Using Month Calendar Controls</seealso>
  </member>
  <member name="Windows.MonthCal_SetFirstDayOfWeek">
    <summary>
      <para>Sets the first day of the week for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setfirstdayofweek">MCM_SETFIRSTDAYOFWEEK</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="iDay">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Value of type <b>int</b> that specifies which day is to be set as the first day of the week, where 0 is Monday, 1 is Tuesday, and so on.</para>
    </param>
    <remarks>
      <para>If the first day of the week is set to anything other than the default (LOCALE_IFIRSTDAYOFWEEK), the control will not automatically update first-day-of-the-week changes based on locale changes.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_SetMaxSelCount">
    <summary>
      <para>Sets the maximum number of days that can be selected in a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setmaxselcount">MCM_SETMAXSELCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="n">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Value of type <b>int</b> that will be set to represent the maximum number of days that can be selected.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetMonthDelta">
    <summary>
      <para>Sets the scroll rate for a month calendar control. The scroll rate is the number of months that the control moves its display when the user clicks a scroll button. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setmonthdelta">MCM_SETMONTHDELTA</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="n">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Value representing the number of months to be set as the control's scroll rate. If this value is zero, the month delta is reset to the default, which is the number of months displayed in the control.</para>
    </param>
    <remarks>
      <para>The PAGE UP and PAGE DOWN keys, VK_PRIOR and VK_NEXT, change the selected month by one, regardless of the number of months displayed or the value set by <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setmonthdelta">MCM_SETMONTHDELTA</a>.</para>
    </remarks>
  </member>
  <member name="Windows.MonthCal_SetRange">
    <summary>
      <para>Sets the minimum and maximum allowable dates for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setrange">MCM_SETRANGE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="gd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Flag values that specify which date limits are being set. This value must be one or both of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GDTR_MAX</b>
          </description>
          <description>
            <para>The maximum allowable date is being set. The <see cref="SYSTEMTIME" /> structure at <i>lprgSysTimeArray</i>[1] must contain date information.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GDTR_MIN</b>
          </description>
          <description>
            <para>The minimum allowable date is being set. The <see cref="SYSTEMTIME" /> structure at <i>lprgSysTimeArray</i>[0] must contain date information.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a two-element array of <see cref="SYSTEMTIME" /> structures that contain the date limits. The maximum limit must be in <i>lprgSysTimeArray</i>[1] if GDTR_MAX is specified, and <i>lprgSysTimeArray</i>[0] must contain the minimum limit if GDTR_MIN is specified.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetSelRange">
    <summary>
      <para>Sets the selection for a month calendar control to a given date range. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setselrange">MCM_SETSELRANGE</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="rgst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a two-element array of <see cref="SYSTEMTIME" /> structures that contain date information representing the selection limits. The first selected date must be specified in <i>lprgSysTimeArray</i>[0], and the last selected date must be specified in <i>lprgSysTimeArray</i>[1]. The time members of these structures are ignored.</para>
    </param>
  </member>
  <member name="Windows.MonthCal_SetToday">
    <summary>
      <para>Sets the "today" selection for a month calendar control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-settoday">MCM_SETTODAY</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="pst">
      <para>Type: <b>LPSYSTEMTIME</b></para>
      <para>Pointer to a <see cref="SYSTEMTIME" /> structure that contains the date to be set as the "today" selection for the control. If this parameter is set to <b>NULL</b>, the control returns to the default setting. The time members of this structure are ignored. If the "today" selection is set to any date other than the default, the following conditions apply:</para>
      <list type="bullet">
        <item>
          <description>The control will not automatically update the "today" selection when the time passes midnight for the current day.</description>
        </item>
        <item>
          <description>The control will not automatically update its display based on locale changes.</description>
        </item>
      </list>
    </param>
  </member>
  <member name="Windows.MonthCal_SetUnicodeFormat">
    <summary>
      <para>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-setunicodeformat">MCM_SETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <param name="fUnicode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters.</para>
    </param>
    <seealso cref="MonthCal_GetUnicodeFormat" />
  </member>
  <member name="Windows.MonthCal_SizeRectToMin">
    <summary>
      <para>Calculates how many calendars will fit in the given rectangle, and then returns the minimum size that a rectangle needs to be to fit that number of calendars. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/mcm-sizerecttomin">MCM_SIZERECTTOMIN</a> message explicitly.</para>
    </summary>
    <param name="hmc">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a month calendar control.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" /></b></para>
      <para>On entry, contains a pointer to a <see cref="RECT" /> structure that describes a region that is greater than or equal to the size necessary to fit the desired number of calendars. When this function returns, contains the minimum <b>RECT</b> structure that fits this number of calendars.</para>
    </param>
  </member>
  <member name="Windows.Pager_ForwardMouse">
    <summary>
      <para>Enables or disables mouse forwarding for the pager control. When mouse forwarding is enabled, the pager control forwards <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> messages to the contained window. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-forwardmouse">PGM_FORWARDMOUSE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="bForward">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>BOOL</b> value that determines if mouse forwarding is enabled or disabled. If this value is nonzero, mouse forwarding is enabled. If this value is zero, mouse forwarding is disabled.</para>
    </param>
  </member>
  <member name="Windows.Pager_GetBkColor">
    <summary>
      <para>Retrieves the current background color for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getbkcolor">PGM_GETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <remarks>
      <para>By default, the pager control will use the system button face color as the background color. This is the same color that can be retrieved by calling <see cref="GetSysColorBrush" /> with COLOR_BTNFACE.</para>
    </remarks>
  </member>
  <member name="Windows.Pager_GetBorder">
    <summary>
      <para>Retrieves the current border size for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getborder">PGM_GETBORDER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
  </member>
  <member name="Windows.Pager_GetButtonSize">
    <summary>
      <para>Retrieves the current button size for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getbuttonsize">PGM_GETBUTTONSIZE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <seealso cref="Pager_SetButtonSize" />
  </member>
  <member name="Windows.Pager_GetButtonState">
    <summary>
      <para>Retrieves the state of the specified button in a pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getbuttonstate">PGM_GETBUTTONSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="iButton">
      <para>Type: <b>int</b></para>
      <para>Indicates which button to retrieve the state for. See the description for <i>iButton</i> in <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getbuttonstate">PGM_GETBUTTONSTATE</a> for a list of possible values.</para>
    </param>
  </member>
  <member name="Windows.Pager_GetDropTarget">
    <summary>
      <para>Retrieves a pager control's <see cref="IDropTarget" /> interface pointer. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getdroptarget">PGM_GETDROPTARGET</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="ppdt">
      <para>Type: <b><see cref="IDropTarget" />**</b></para>
      <para>Pointer to an <see cref="IDropTarget" /> pointer that receives the interface pointer. It is the caller's responsibility to call
<see cref="Release" /> on this pointer when it is no longer needed.</para>
    </param>
  </member>
  <member name="Windows.Pager_GetPos">
    <summary>
      <para>Retrieves the current scroll position of the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-getpos">PGM_GETPOS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
  </member>
  <member name="Windows.Pager_RecalcSize">
    <summary>
      <para>Forces the pager control to recalculate the size of the contained window. Using this macro will result in a <a href="https://docs.microsoft.com//windows/desktop/Controls/pgn-calcsize">PGN_CALCSIZE</a> notification being sent. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-recalcsize">PGM_RECALCSIZE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
  </member>
  <member name="Windows.Pager_SetBkColor">
    <summary>
      <para>Sets the current background color for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-setbkcolor">PGM_SETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <b>COLORREF</b> value that contains the new background color of the pager control.</para>
    </param>
    <remarks>
      <para>By default, the pager control will use the system button face color as the background color. This is the same color that can be retrieved by calling <see cref="GetSysColorBrush" /> with COLOR_BTNFACE.</para>
    </remarks>
  </member>
  <member name="Windows.Pager_SetBorder">
    <summary>
      <para>Sets the current border size for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-setborder">PGM_SETBORDER</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="iBorder">
      <para>Type: <b>int</b></para>
      <para>New size of the border, in pixels. This value should not be larger than the pager button or less than zero. If <i>iBorder</i> is too large, the border will be drawn the same size as the button. If
<i>iBorder</i> is negative, the border size will be set to zero.</para>
    </param>
  </member>
  <member name="Windows.Pager_SetButtonSize">
    <summary>
      <para>Sets the current button size for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-setbuttonsize">PGM_SETBUTTONSIZE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="iSize">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the new button size, in pixels.</para>
    </param>
    <remarks>
      <para>If the pager control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/pager-control-styles">PGS_HORZ</a> style, the button size determines the width of the pager buttons. If the pager control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/pager-control-styles">PGS_VERT</a> style, the button size determines the height of the pager buttons. By default, the pager control sets its button size to three-fourths of the width of the scroll bar.</para>
    </remarks>
    <seealso cref="Pager_GetButtonSize" />
  </member>
  <member name="Windows.Pager_SetChild">
    <summary>
      <para>Sets the contained window for the pager control. This macro will not change the parent of the contained window; it only assigns a window handle to the pager control for scrolling. In most cases, the contained window will be a child window. If this is the case, the contained window should be a child of the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-setchild">PGM_SETCHILD</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="hwndChild">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the window to be contained.</para>
    </param>
  </member>
  <member name="Windows.Pager_SetPos">
    <summary>
      <para>Sets the scroll position for the pager control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/pgm-setpos">PGM_SETPOS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the pager control.</para>
    </param>
    <param name="iPos">
      <para>Type: <b>int</b></para>
      <para>Value of type <b>int</b> that contains the new scroll position, in pixels.</para>
    </param>
  </member>
  <member name="Windows.RemoveWindowSubclass">
    <summary>
      <para>Removes a subclass callback from a window.</para>
    </summary>
    <param name="hWnd">
      <para>Type: <b>HWND</b></para>
      <para>The handle of the window being subclassed.</para>
    </param>
    <param name="pfnSubclass">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a></b></para>
      <para>A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see <a href="https://docs.microsoft.com//windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a>.</para>
    </param>
    <param name="uIdSubclass">
      <para>Type: <b>UINT_PTR</b></para>
      <para>The <b>UINT_PTR</b> subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>
        <b>TRUE</b> if the subclass callback was successfully removed; otherwise, <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>Subclass callbacks are identified by their combination of the callback address and the subclass ID defined by the calling process.</para>
      <para>The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API.</para>
      <para>No reference counting is performed for the callback; it may repeatedly call <see cref="SetWindowSubclass" /> to alter the value of its reference data element.</para>
      <para>
        <b>Warning</b>  You cannot use the subclassing helper functions to subclass a window across threads.</para>
    </remarks>
    <seealso cref="DefSubclassProc" />
    <seealso cref="GetWindowSubclass" />
    <seealso cref="SetWindowSubclass" />
  </member>
  <member name="Windows.SECOND_IPADDRESS">
    <summary>
      <para>Extracts the field 1 value from a packed IP address retrieved with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-getaddress">IPM_GETADDRESS</a> message.</para>
    </summary>
    <param name="x">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The packed IP address value.</para>
    </param>
  </member>
  <member name="Windows.SetWindowSubclass">
    <summary>
      <para>Installs or updates a window subclass callback.</para>
    </summary>
    <param name="hWnd">
      <para>Type: <b>HWND</b></para>
      <para>The handle of the window being subclassed.</para>
    </param>
    <param name="pfnSubclass">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a></b></para>
      <para>A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see <a href="https://docs.microsoft.com//windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a>.</para>
    </param>
    <param name="uIdSubclass">
      <para>Type: <b>UINT_PTR</b></para>
      <para>The subclass ID. This ID together with the subclass procedure uniquely identify a subclass. To remove a subclass, pass the subclass procedure and this value to the <see cref="RemoveWindowSubclass" /> function. This value is passed to the subclass procedure in the uIdSubclass parameter.</para>
    </param>
    <param name="dwRefData">
      <para>Type: <b>DWORD_PTR</b></para>
      <para>
        <b>DWORD_PTR</b> to reference data. The meaning of this value is determined by the calling application. This value is passed to the subclass procedure in the dwRefData parameter. A different dwRefData is associated with each combination of window handle, subclass procedure and uIdSubclass.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>
        <b>TRUE</b> if the subclass callback was successfully installed; otherwise, <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>Subclass callbacks are identified by the combination of the callback address and the caller-defined subclass ID. If the callback address and ID pair have not yet been installed, then this function installs the subclass. If the pair has already been installed, then this function just updates the reference data.</para>
      <para>Each callback can store a single <b>DWORD</b> of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call <b>SetWindowSubclass</b> to alter the value of its reference data element.</para>
      <para>
        <b>Warning</b>  You cannot use the subclassing helper functions to subclass a window across threads.</para>
    </remarks>
    <seealso cref="DefSubclassProc" />
    <seealso cref="GetWindowSubclass" />
    <seealso cref="RemoveWindowSubclass" />
  </member>
  <member name="Windows.TabCtrl_AdjustRect">
    <summary>
      <para>Calculates a tab control's display area given a window rectangle, or calculates the window rectangle that would correspond to a specified display area. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-adjustrect">TCM_ADJUSTRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="bLarger">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Operation to perform. If this parameter is <b>TRUE</b>,
<i>prc</i> specifies a display rectangle and receives the corresponding window rectangle. If this parameter is <b>FALSE</b>,
<i>prc</i> specifies a window rectangle and receives the corresponding display area.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that specifies the given rectangle and receives the calculated rectangle.</para>
    </param>
    <remarks>
      <para>This message applies only to tab controls that are at the top. It does not apply to tab controls that are on the sides or bottom.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_DeleteAllItems">
    <summary>
      <para>Removes all items from a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-deleteallitems">TCM_DELETEALLITEMS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_DeleteItem">
    <summary>
      <para>Removes an item from a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-deleteitem">TCM_DELETEITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>Index of the item to delete.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_DeselectAll">
    <summary>
      <para>Resets items in a tab control, clearing any that were set to the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-item-states">TCIS_BUTTONPRESSED</a> state. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-deselectall">TCM_DESELECTALL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="fExcludeFocus">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flag value that specifies the scope of the item deselection. If this parameter is set to <b>FALSE</b>, all tab items will be reset. If it is set to <b>TRUE</b>, all but the currently selected tab item will be reset.</para>
    </param>
    <remarks>
      <para>This message is only meaningful if the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-styles">TCS_BUTTONS</a> style flag has been set.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_GetCurFocus">
    <summary>
      <para>Returns the index of the item that has the focus in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getcurfocus">TCM_GETCURFOCUS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <remarks>
      <para>The item that has the focus may be different than the selected item.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_GetCurSel">
    <summary>
      <para>Determines the currently selected tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getcursel">TCM_GETCURSEL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_GetExtendedStyle">
    <summary>
      <para>Retrieves the extended styles that are currently in use for the tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getextendedstyle">TCM_GETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_GetImageList">
    <summary>
      <para>Retrieves the image list associated with a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getimagelist">TCM_GETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_GetItem">
    <summary>
      <para>Retrieves information about a tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getitem">TCM_GETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>Index of the tab.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>LPTCITEM</b></para>
      <para>Pointer to a <see cref="TCITEM" /> structure that specifies the information to retrieve and receives information about the tab. When the message is sent, the
<b>mask</b> member specifies which attributes to return. If the <b>mask</b> member specifies the TCIF_TEXT value, the
<b>pszText</b> member must contain the address of the buffer that receives the item text, and the <b>cchTextMax</b> member must specify the size of the buffer.</para>
    </param>
    <remarks>
      <para>If the TCIF_TEXT flag is set in the
<b>mask</b> member of the <see cref="TCITEM" /> structure, the control may change the <b>pszText</b> member of the structure to point to the new text instead of filling the buffer with the requested text. The control may set the <b>pszText</b> member to <b>NULL</b> to indicate that no text is associated with the item.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_GetItemCount">
    <summary>
      <para>Retrieves the number of tabs in the tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getitemcount">TCM_GETITEMCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_GetItemRect">
    <summary>
      <para>Retrieves the bounding rectangle for a tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getitemrect">TCM_GETITEMRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>Index of the tab.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>Pointer to a structure that receives the bounding rectangle of the tab, in viewport coordinates.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_GetRowCount">
    <summary>
      <para>Retrieves the current number of rows of tabs in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getrowcount">TCM_GETROWCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <remarks>
      <para>Only tab controls that have the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-styles">TCS_MULTILINE</a> style can have multiple rows of tabs.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_GetToolTips">
    <summary>
      <para>Retrieves the handle to the tooltip control associated with a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-gettooltips">TCM_GETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <remarks>
      <para>A tab control creates a tooltip control if it has the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-styles">TCS_TOOLTIPS</a>. You can also assign a tooltip control to a tab control by using the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-settooltips">TCM_SETTOOLTIPS</a> message.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_GetUnicodeFormat">
    <summary>
      <para>Retrieves the UNICODE character format flag for the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getunicodeformat">TCM_GETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <seealso cref="TabCtrl_SetUnicodeFormat" />
  </member>
  <member name="Windows.TabCtrl_HighlightItem">
    <summary>
      <para>Sets the highlight state of a tab item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-highlightitem">TCM_HIGHLIGHTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Zero-based index of a tab control item.</para>
    </param>
    <param name="fHighlight">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">WORD</a></b></para>
      <para>Value specifying the highlight state to be set. If this value is nonzero, the tab is highlighted. If this value is zero, the tab is set to its default state.</para>
    </param>
    <remarks>
      <para>In Comctl32.dll version 6.0, this macro has no visible effect when a theme is active.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_HitTest">
    <summary>
      <para>Determines which tab, if any, is at a specified screen position. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-hittest">TCM_HITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwndTC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="pinfo">
      <para>Type: <b>LPTCHITTESTINFO</b></para>
      <para>Pointer to a <see cref="TCHITTESTINFO" /> structure that specifies the screen position to test.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_InsertItem">
    <summary>
      <para>Inserts a new tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-insertitem">TCM_INSERTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>Index of the new tab.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>const LPTCITEM</b></para>
      <para>Pointer to a <see cref="TCITEM" /> structure that specifies the attributes of the tab. The <b>dwState</b> and <b>dwStateMask</b> members of this structure are ignored by this message.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_RemoveImage">
    <summary>
      <para>Removes an image from a tab control's image list. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-removeimage">TCM_REMOVEIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>Index of the image to remove.</para>
    </param>
    <remarks>
      <para>The tab control updates each tab's image index, so each tab remains associated with the same image as before. If a tab is using the image being removed, the tab will be set to have no image.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_SetCurFocus">
    <summary>
      <para>Sets the focus to a specified tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setcurfocus">TCM_SETCURFOCUS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>Zero-based index of the tab that gets the focus.</para>
    </param>
    <remarks>
      <para>If the tab control has the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-styles">TCS_BUTTONS</a> style (button mode), the tab with the focus may be different from the selected tab. For example, when a tab is selected, the user can press the arrow keys to set the focus to a different tab without changing the selected tab. In button mode, the <b>TabCtrl_SetCurFocus</b> macro sets the input focus to the button associated with the specified tab, but it does not change the selected tab.</para>
      <para>If the tab control does not have the <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-styles">TCS_BUTTONS</a> style, changing the focus also changes the selected tab. In this case, the tab control sends the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcn-selchanging">TCN_SELCHANGING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tcn-selchange">TCN_SELCHANGE</a> notification codes to its parent window.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tcm-getcurfocus">TCM_GETCURFOCUS</seealso>
    <seealso cref="TabCtrl_GetCurFocus" />
  </member>
  <member name="Windows.TabCtrl_SetCurSel">
    <summary>
      <para>Selects a tab in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setcursel">TCM_SETCURSEL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="i">
      <para>Type: <b>int</b></para>
      <para>Index of the tab to select.</para>
    </param>
    <remarks>
      <para>A tab control does not send a <a href="https://docs.microsoft.com//windows/desktop/Controls/tcn-selchanging">TCN_SELCHANGING</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/tcn-selchange">TCN_SELCHANGE</a> notification code when a tab is selected using the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setcursel">TCM_SETCURSEL</a> message.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_SetExtendedStyle">
    <summary>
      <para>Sets the extended styles that the tab control will use. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setextendedstyle">TCM_SETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="dw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Value that contains the new tab control extended styles. This value is a combination of tab control <a href="https://docs.microsoft.com//windows/desktop/Controls/tab-control-extended-styles">extended styles</a>.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetImageList">
    <summary>
      <para>Assigns an image list to a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setimagelist">TCM_SETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>Handle to the image list to assign to the tab control.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetItem">
    <summary>
      <para>Sets some or all of a tab's attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setitem">TCM_SETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="iItem">
      <para>Type: <b>int</b></para>
      <para>Index of the item.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>LPTCITEM</b></para>
      <para>Pointer to a <see cref="TCITEM" /> structure that contains the new item attributes. The <b>mask</b> member specifies which attributes to set. If the <b>mask</b> member specifies the LVIF_TEXT value, the <b>pszText</b> member is the address of a null-terminated string and the <b>cchTextMax</b> member is ignored.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetItemExtra">
    <summary>
      <para>Sets the number of bytes per tab reserved for application-defined data in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setitemextra">TCM_SETITEMEXTRA</a> message explicitly.</para>
    </summary>
    <param name="hwndTC">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="cb">
      <para>Type: <b>int</b></para>
      <para>Number of extra bytes.</para>
    </param>
    <remarks>
      <para>By default, the number of extra bytes is four. An application that changes the number of extra bytes cannot use the <see cref="TCITEM" /> structure to retrieve and set the application-defined data for a tab. Instead, you must define a new structure that consists of the <see cref="TCITEMHEADER" /> structure followed by application-defined members.</para>
      <para>An application should only change the number of extra bytes when a tab control does not contain any tabs.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_SetItemSize">
    <summary>
      <para>Sets the width and height of tabs in a fixed-width or owner-drawn tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setitemsize">TCM_SETITEMSIZE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>New width, in pixels.</para>
    </param>
    <param name="y">
      <para>Type: <b>int</b></para>
      <para>New height, in pixels.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetMinTabWidth">
    <summary>
      <para>Sets the minimum width of items in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setmintabwidth">TCM_SETMINTABWIDTH</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="x">
      <para>Type: <b>int</b></para>
      <para>Minimum width to be set for a tab control item. If this parameter is set to -1, the control will use the default tab width.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetPadding">
    <summary>
      <para>Sets the amount of space (padding) around each tab's icon and label in a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setpadding">TCM_SETPADDING</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="cx">
      <para>Type: <b>int</b></para>
      <para>Amount of horizontal padding, in pixels.</para>
    </param>
    <param name="cy">
      <para>Type: <b>int</b></para>
      <para>Amount of vertical padding, in pixels.</para>
    </param>
  </member>
  <member name="Windows.TabCtrl_SetToolTips">
    <summary>
      <para>Assigns a tooltip control to a tab control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-settooltips">TCM_SETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tab control.</para>
    </param>
    <param name="hwndTT">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tooltip control.</para>
    </param>
    <remarks>
      <para>You can retrieve the tooltip control associated with a tab control by using the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-gettooltips">TCM_GETTOOLTIPS</a> message.</para>
    </remarks>
  </member>
  <member name="Windows.TabCtrl_SetUnicodeFormat">
    <summary>
      <para>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tcm-setunicodeformat">TCM_SETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <param name="fUnicode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters.</para>
    </param>
    <seealso cref="TabCtrl_GetUnicodeFormat" />
  </member>
  <member name="Windows.TaskDialog">
    <summary>
      <para>The <b>TaskDialog</b> function creates, displays, and operates a task dialog. The task dialog contains application-defined message text and title, icons, and any combination of predefined push buttons. This function does not support the registration of a callback function to receive notifications.</para>
    </summary>
    <param name="hwndOwner">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the owner window of the task dialog to be created. If this parameter is <b>NULL</b>, the task dialog has no owner window.</para>
    </param>
    <param name="hInstance">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HINSTANCE</a></b></para>
      <para>Handle to the module that contains the icon resource identified by the <i>pszIcon</i> member, and the string resources identified by the <i>pszWindowTitle</i> and <i>pszMainInstruction</i> members.  If this parameter is <b>NULL</b>, <i>pszIcon</i> must be <b>NULL</b> or a pointer to a null-terminated, Unicode string that contains a system resource identifier, for example, TD_ERROR_ICON.</para>
    </param>
    <param name="pszWindowTitle">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>Pointer to the string to be used for the task dialog title. This parameter is a null-terminated, Unicode string that contains either text, or an integer resource identifier passed through the <see cref="MAKEINTRESOURCE" /> macro.  If this parameter is <b>NULL</b>, the filename of the executable program is used.</para>
    </param>
    <param name="pszMainInstruction">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>Pointer to the string to be used for the main instruction. This parameter is a null-terminated, Unicode string that contains either text, or an integer resource identifier passed through the <see cref="MAKEINTRESOURCE" /> macro.  This parameter can be <b>NULL</b> if no main instruction is wanted.</para>
    </param>
    <param name="pszContent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>Pointer to a string used for additional text that appears below the main instruction, in a smaller font. This parameter is a null-terminated, Unicode string that contains either text, or an integer resource identifier passed through the <see cref="MAKEINTRESOURCE" /> macro. Can be <b>NULL</b> if no additional text is wanted.</para>
    </param>
    <param name="dwCommonButtons">
      <para>Type: <b>TASKDIALOG_COMMON_BUTTON_FLAGS</b></para>
      <para>Specifies the push buttons displayed in the dialog box. This parameter may be a combination of flags from the following group.</para>
      <para>
        <b>Note</b>  If no buttons are specified, the dialog box will contain the <b>OK</b> button by default.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TDCBF_OK_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>OK</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TDCBF_YES_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>Yes</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TDCBF_NO_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>No</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TDCBF_CANCEL_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>Cancel</b>. This button must be specified for the dialog box to respond to typical cancel actions (Alt-F4 and Escape).</para>
          </description>
        </item>
        <item>
          <description>
            <b>TDCBF_RETRY_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>Retry</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TDCBF_CLOSE_BUTTON</b>
          </description>
          <description>
            <para>The task dialog contains the push button: <b>Close</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszIcon">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">PCWSTR</a></b></para>
      <para>Pointer to a string that identifies the icon to display in the task dialog. This parameter must be an integer resource identifier passed to the <see cref="MAKEINTRESOURCE" /> macro or one of the following predefined values. If this parameter is <b>NULL</b>, no icon will be displayed. If the <i>hInstance</i> parameter is <b>NULL</b> and one of the predefined values is not used, the <b>TaskDialog</b> function fails.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TD_ERROR_ICON</b>
          </description>
          <description>
            <para>A stop-sign icon appears in the task dialog.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TD_INFORMATION_ICON</b>
          </description>
          <description>
            <para>An icon consisting of a lowercase letter i in a circle appears in the task dialog.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TD_SHIELD_ICON</b>
          </description>
          <description>
            <para>A security shield icon appears in the task dialog.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TD_WARNING_ICON</b>
          </description>
          <description>
            <para>An exclamation-point icon appears in the task dialog.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pnButton">
      <para>Type: <b>int*</b></para>
      <para>When this function returns, contains a pointer to an integer location that receives one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>Function call failed. Refer to return value for more information.</description>
        </item>
        <item>
          <description>
            <b>IDCANCEL</b>
          </description>
          <description>
            <b>Cancel</b> button was selected, Alt-F4 was pressed, Escape was pressed or the user clicked on the <b>close window</b> button.</description>
        </item>
        <item>
          <description>
            <b>IDNO</b>
          </description>
          <description>
            <b>No</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDOK</b>
          </description>
          <description>
            <b>OK</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDRETRY</b>
          </description>
          <description>
            <b>Retry</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDYES</b>
          </description>
          <description>
            <b>Yes</b> button was selected.</description>
        </item>
      </list>
      <para>If this value is <b>NULL</b>, no value is returned.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The operation completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There is insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The operation failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you use a task dialog box to indicate that the system is low on memory, the strings pointed to by the <i>pszMainInstruction</i> and <i>pszWindowTitle</i> parameters should not be taken from a resource file since an attempt to load the resource may fail.</para>
      <para>If you create a task dialog while a dialog box is present, use a handle to the dialog box as the <i>hWndParent</i> parameter. The <i>hWndParent</i> parameter should not identify a child window, such as a control in a dialog box.</para>
      <para>Because task dialog boxes use the correct system-defined UI elements, you should use them instead of using message boxes created with the <see cref="MessageBox" /> function. To achieve more functionality, use <see cref="TaskDialogIndirect" />.</para>
      <para>The following example code, to be included as part of a larger program, shows how to create a task dialog and capture input.</para>
      <code>
int nButtonPressed = 0;
TaskDialog(NULL, hInst,
    MAKEINTRESOURCE(IDS_APPLICATION_TITLE),
    MAKEINTRESOURCE(IDS_DOSOMETHING),
    MAKEINTRESOURCE(IDS_SOMECONTENT),
    TDCBF_OK_BUTTON | TDCBF_CANCEL_BUTTON,
    TD_WARNING_ICON,
    &amp;amp;amp;amp;amp;amp;nButtonPressed);

if (IDOK == nButtonPressed)
{
    // OK button pressed
}
else if (IDCANCEL == nButtonPressed)
{
    // Cancel pressed
}
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/dlgbox/dialog-boxes">Dialog Boxes</seealso>
  </member>
  <member name="Windows.TaskDialogIndirect">
    <summary>
      <para>The <b>TaskDialogIndirect</b> function creates, displays, and operates a task dialog. The task dialog contains application-defined icons, messages, title, verification check box, command links, push buttons, and radio buttons. This function can register a callback function to receive notification messages.</para>
    </summary>
    <param name="pTaskConfig">
      <para>Type: <b>const <see cref="TASKDIALOGCONFIG" />*</b></para>
      <para>Pointer to a <see cref="TASKDIALOGCONFIG" /> structure that contains information used to display the task dialog.</para>
    </param>
    <param name="pnButton">
      <para>Type: <b>int*</b></para>
      <para>Address of a variable that receives either:</para>
      <list type="bullet">
        <item>
          <description>one of the button IDs specified in the <b>pButtons</b> member of the <i>pTaskConfig</i> parameter</description>
        </item>
        <item>
          <description>one of the following values:</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>Function call failed. Refer to return value for more information.</description>
        </item>
        <item>
          <description>
            <b>IDCANCEL</b>
          </description>
          <description>
            <b>Cancel</b> button was selected, Alt-F4 was pressed, Escape was pressed or the user clicked on the <b>close window</b> button.</description>
        </item>
        <item>
          <description>
            <b>IDNO</b>
          </description>
          <description>
            <b>No</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDOK</b>
          </description>
          <description>
            <b>OK</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDRETRY</b>
          </description>
          <description>
            <b>Retry</b> button was selected.</description>
        </item>
        <item>
          <description>
            <b>IDYES</b>
          </description>
          <description>
            <b>Yes</b> button was selected.</description>
        </item>
      </list>
      <para>If this parameter is <b>NULL</b>, no value is returned.</para>
    </param>
    <param name="pnRadioButton">
      <para>Type: <b>int*</b></para>
      <para>Address of a variable that receives one of the button IDs specified in the <b>pRadioButtons</b> member of the <i>pTaskConfig</i> parameter. If this parameter is <b>NULL</b>, no value is returned.</para>
    </param>
    <param name="pfVerificationFlagChecked">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a>*</b></para>
      <para>Address of a variable that receives one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>TRUE</b>
          </description>
          <description>The verification checkbox was checked when the dialog was dismissed.</description>
        </item>
        <item>
          <description>
            <b>FALSE</b>
          </description>
          <description>The verification checkbox was not checked when the dialog was dismissed.</description>
        </item>
      </list>
      <para>If this parameter is <b>NULL</b>, the verification checkbox is disabled.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The operation completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There is insufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more arguments are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The operation failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you use a task dialog box to indicate that the system is low on memory, the strings pointed to by the various string and icon members in the <see cref="TASKDIALOGCONFIG" /> structure should not be taken from a resource file since an attempt to load the resource may fail.</para>
      <para>If you create a task dialog while a dialog box is present, use a handle to the dialog box as the <i>hWndParent</i> parameter. The <i>hWndParent</i> parameter should not identify a child window, such as a control in a dialog box.</para>
      <para>The parent window should not be hidden or disabled when this function is called.</para>
      <code>
int nButtonPressed                  = 0;
TASKDIALOGCONFIG config             = {0};
const TASKDIALOG_BUTTON buttons[]   = {
                                        { IDOK, L"Change password" }
                                      };
config.cbSize                       = sizeof(config);
config.hInstance                    = hInst;
config.dwCommonButtons              = TDCBF_CANCEL_BUTTON;
config.pszMainIcon                  = TD_WARNING_ICON;
config.pszMainInstruction           = L"Change Password";
config.pszContent                   = L"Remember your changed password.";
config.pButtons                     = buttons;
config.cButtons                     = ARRAYSIZE(buttons);

TaskDialogIndirect(&amp;amp;amp;amp;amp;amp;config, &amp;amp;amp;amp;amp;amp;nButtonPressed, NULL, NULL);
switch (nButtonPressed)
{
    case IDOK:
        break; // the user pressed button 0 (change password).
    case IDCANCEL:
        break; // user canceled the dialog
    default:
        break; // should never happen
}
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/dlgbox/dialog-boxes">Dialog Boxes</seealso>
  </member>
  <member name="Windows.THIRD_IPADDRESS">
    <summary>
      <para>Extracts the field 2 value from a packed IP address retrieved with the <a href="https://docs.microsoft.com//windows/desktop/Controls/ipm-getaddress">IPM_GETADDRESS</a> message.</para>
    </summary>
    <param name="x">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPARAM</a></b></para>
      <para>The packed IP address value.</para>
    </param>
  </member>
  <member name="Windows.TreeView_CreateDragImage">
    <summary>
      <para>Creates a dragging bitmap for the specified item in a tree-view control. The macro also creates an image list for the bitmap and adds the bitmap to the image list. An application can display the image when dragging the item by using the image list functions. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-createdragimage">TVM_CREATEDRAGIMAGE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item that receives the new dragging bitmap.</para>
    </param>
    <remarks>
      <para>If you create a tree-view control without an associated image list, you cannot use the <b>TreeView_CreateDragImage</b> macro to create the image to display during a drag operation. You must implement your own method of creating a drag cursor.</para>
      <para>Your application is responsible for destroying the image list when it is no longer needed.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_DeleteAllItems">
    <summary>
      <para>Deletes all items from a tree-view control.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>Once an item is deleted from a tree-view control, its <b>HTREEITEM</b> handle is invalid and cannot be used.</para>
      <para>The parent window receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-deleteitem">TVN_DELETEITEM</a> notification code when each item is removed.</para>
      <para>If the item label is being edited, the edit operation is canceled and the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-endlabeledit">TVN_ENDLABELEDIT</a> notification code.</para>
      <para>You can also delete all items with the <see cref="TreeView_DeleteItem" /> macro or the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-deleteitem">TVM_DELETEITEM</a> message by setting
<i>lParam</i> to TVI_ROOT.</para>
      <para>If the window style for a tree-view control contains TVS_NOSCROLL and all items are deleted, new items are not displayed until the window styles are reset. The following code shows one way to ensure that items are always displayed.</para>
      <code>DWORD styles = GetWindowLong(hwnd, GWL_STYLE);
TreeView_DeleteAllItems(hwnd);
SetWindowLong(hwnd, GWL_STYLE, styles);
</code>
    </remarks>
  </member>
  <member name="Windows.TreeView_DeleteItem">
    <summary>
      <para>Removes an item and all its children from a tree-view control. You can also send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-deleteitem">TVM_DELETEITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>
        <b>HTREEITEM</b> handle to the item to delete. If <i>hitem</i> is set to TVI_ROOT, all items are deleted from the tree-view control. You can also use the <see cref="TreeView_DeleteAllItems" /> macro to delete all items.</para>
    </param>
    <remarks>
      <para>It is not safe to delete items in response to a notification such as <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-selchanging">TVN_SELCHANGING</a>.</para>
      <para>Once an item is deleted, its handle is invalid and cannot be used.</para>
      <para>The parent window receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-deleteitem">TVN_DELETEITEM</a> notification code when each item is removed.</para>
      <para>If the item label is being edited, the edit operation is canceled and the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-endlabeledit">TVN_ENDLABELEDIT</a> notification code.</para>
      <para>If you delete all items in a tree-view control that has the <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-window-styles">TVS_NOSCROLL</a> style, items subsequently added may not display properly. For more information, see <see cref="TreeView_DeleteAllItems" />.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_EditLabel">
    <summary>
      <para>Begins in-place editing of the specified item's text, replacing the text of the item with a single-line edit control containing the text. This macro implicitly selects and focuses the specified item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-editlabel">TVM_EDITLABEL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item to edit.</para>
    </param>
    <remarks>
      <para>This macro sends a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-beginlabeledit">TVN_BEGINLABELEDIT</a> notification code to the parent of the tree-view control.</para>
      <para>When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. You can subclass the edit control, but do not destroy it.</para>
      <para>The control must have the focus before you call this macro. Focus can be set using the <see cref="SetFocus" /> function.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_EndEditLabelNow">
    <summary>
      <para>Ends the editing of a tree-view item's label. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-endeditlabelnow">TVM_ENDEDITLABELNOW</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="fCancel">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Variable that indicates whether the editing is canceled without being saved to the label. If this parameter is <b>TRUE</b>, the system cancels editing without saving the changes. Otherwise, the system saves the changes to the label.</para>
    </param>
    <remarks>
      <para>This macro causes the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-endlabeledit">TVN_ENDLABELEDIT</a> notification code to be sent to the parent window of the tree-view control.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_EnsureVisible">
    <summary>
      <para>Ensures that a tree-view item is visible, expanding the parent item or scrolling the tree-view control, if necessary. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-ensurevisible">TVM_ENSUREVISIBLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <remarks>
      <para>If the <b>TreeView_EnsureVisible</b> macro expands the parent item, the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_Expand">
    <summary>
      <para>The <b>TreeView_Expand</b> macro expands or collapses the list of child items associated with the specified parent item, if any. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-expand">TVM_EXPAND</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the parent item that will be expanded or collapsed.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Action flag. For a list of possible values, see the description of the <i>flag</i> parameter in <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-expand">TVM_EXPAND</a>.</para>
    </param>
    <remarks>
      <para>Expanding a node that is already expanded, or collapsing a node that is already collapsed is considered a successful operation and the macro returns a nonzero value. Attempting to expand or collapse a node that has no children is considered a failure and the return value is zero.</para>
      <para>When an item is first expanded by a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-expand">TVM_EXPAND</a> message, the action generates <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes and the item's <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-item-states">TVIS_EXPANDEDONCE</a> state flag is set. As long as this state flag remains set, subsequent <b>TVM_EXPAND</b> messages do not generate TVN_ITEMEXPANDING or TVN_ITEMEXPANDED notifications. To reset the <b>TVIS_EXPANDEDONCE</b> state flag, you must send a <b>TVM_EXPAND</b> message with the TVE_COLLAPSE and TVE_COLLAPSERESET flags set. Attempting to explicitly set <b>TVIS_EXPANDEDONCE</b> will result in unpredictable behavior.</para>
      <para>The expand operation may fail if the owner of the treeview control denies the operation in response to a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> notification.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetBkColor">
    <summary>
      <para>Retrieves the current background color of the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getbkcolor">TVM_GETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <seealso cref="TreeView_SetBkColor" />
  </member>
  <member name="Windows.TreeView_GetCheckState">
    <summary>
      <para>Gets the check state of the specified item. You can also use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemstate">TVM_GETITEMSTATE</a> message directly.</para>
    </summary>
    <param name="hwndTV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hti">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <remarks>
      <para>A tree-view control can have two image lists. The normal image list stores the selected, nonselected, and overlay images. Check boxes are stored in the state image list and displayed to the left of the corresponding normal image. State images are specified by a one-based index. An index of zero indicates that there is no state image. See <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-controls">Tree-View Image Lists</a> for a discussion of how to handle tree-view images.</para>
      <para>If you want to define your own state images, this macro assumes that the checked and unchecked images have the same indexes as the standard image list: 1 for unchecked and 2 for checked.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetChild">
    <summary>
      <para>Retrieves the first child item of the specified tree-view item. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_CHILD flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to a tree-view item.</para>
    </param>
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetNextSibling" />
    <seealso cref="TreeView_GetParent" />
    <seealso cref="TreeView_GetPrevSibling" />
  </member>
  <member name="Windows.TreeView_GetCount">
    <summary>
      <para>Retrieves a count of the items in a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getcount">TVM_GETCOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>The node count returned by <b>TreeView_GetCount</b> is limited to integer values. If you add a node beyond 32767 the macro returns a negative value. After adding 65536 nodes the count returns to zero. When this occurs, the tree-view control appears empty with no scrollbars. For more information see the Knowledge Base article <a href="https://support.microsoft.com/default.aspx?scid=kb;en-us;q182231">Q182231</a>.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetDropHilight">
    <summary>
      <para>Retrieves the tree-view item that is the target of a drag-and-drop operation. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_DROPHILITE flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
  </member>
  <member name="Windows.TreeView_GetEditControl">
    <summary>
      <para>Retrieves the handle to the edit control being used to edit a tree-view item's text. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-geteditcontrol">TVM_GETEDITCONTROL</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle to the edit control being used to edit a tree-view item's text, or NULL if no item is being edited.</para>
    </returns>
    <remarks>
      <para>When label editing begins, an edit control is created but not positioned or displayed. Before it is displayed, the tree-view control sends its parent window a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-beginlabeledit">TVN_BEGINLABELEDIT</a> notification code.</para>
      <para>To customize label editing, implement a handler for <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-beginlabeledit">TVN_BEGINLABELEDIT</a> and have it use <b>TreeView_GetEditControl</b> to send a <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-geteditcontrol">TVM_GETEDITCONTROL</a> message to the tree-view control. If a label is being edited, the return value will be a handle to the edit control. Use this handle to customize the edit control by sending the usual EM_XXX messages.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetExtendedStyle">
    <summary>
      <para>Retrieves the extended style for a specified tree-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getextendedstyle">TVM_GETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>The extended styles for a tree-view control have nothing to do with the extended styles used with function <see cref="CreateWindowEx" /> or function <see cref="SetWindowLong" />.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetFirstVisible">
    <summary>
      <para>Retrieves the first visible item in a tree-view control window. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_FIRSTVISIBLE flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</seealso>
    <seealso cref="TreeView_GetLastVisible" />
    <seealso cref="TreeView_GetNextVisible" />
    <seealso cref="TreeView_GetPrevVisible" />
  </member>
  <member name="Windows.TreeView_GetImageList">
    <summary>
      <para>Retrieves the handle to the normal or state image list associated with a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getimagelist">TVM_GETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="iImage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Type of image list to retrieve. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TVSIL_NORMAL</b>
          </description>
          <description>
            <para>Indicates the normal image list, which contains selected, nonselected, and overlay images for the items of a tree-view control.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVSIL_STATE</b>
          </description>
          <description>
            <para>Indicates the state image list. You can use state images to indicate application-defined item states. A state image is displayed to the left of an item's selected or nonselected image.</para>
          </description>
        </item>
      </list>
    </param>
    <seealso cref="TreeView_SetImageList" />
  </member>
  <member name="Windows.TreeView_GetIndent">
    <summary>
      <para>Retrieves the amount, in pixels, that child items are indented relative to their parent items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getindent">TVM_GETINDENT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
  </member>
  <member name="Windows.TreeView_GetInsertMarkColor">
    <summary>
      <para>Retrieves the color used to draw the insertion mark for the tree view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getinsertmarkcolor">TVM_GETINSERTMARKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <seealso cref="TreeView_SetInsertMarkColor" />
  </member>
  <member name="Windows.TreeView_GetISearchString">
    <summary>
      <para>Retrieves the incremental search string for a tree-view control. The tree-view control uses the incremental search string to select an item based on characters typed by the user. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getisearchstring">TVM_GETISEARCHSTRING</a> message explicitly.</para>
    </summary>
    <param name="hwndTV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="lpsz">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">LPTSTR</a></b></para>
      <para>Pointer to the buffer that receives the incremental search string.</para>
    </param>
    <remarks>
      <para>
        <b>Security Warning:  </b>Using this macro incorrectly might compromise the security of your program. You must allocate a large enough buffer to hold the string. First call the macro passing <b>NULL</b> in <i>lpsz</i>. This returns the number of characters, excluding <b>NULL</b>, that are required. Then call the macro a second time to retrieve the string.  You should review <a href="https://docs.microsoft.com//windows/desktop/Controls/sec-comctls">Security Considerations: Microsoft Windows Controls</a> before continuing.</para>
      <para>If the tree-view control is not in incremental search mode, the return value is zero.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetItem">
    <summary>
      <para>Retrieves some or all of a tree-view item's attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitem">TVM_GETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>LPTVITEM</b></para>
      <para>Pointer to a <see cref="TVITEM" /> structure that specifies the information to retrieve and receives information about the item. With <a href="https://docs.microsoft.com//windows/desktop/Controls/common-control-versions">version 4.71</a> and later, you can use a <see cref="TVITEMEX" /> structure instead.</para>
    </param>
    <remarks>
      <para>When the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitem">TVM_GETITEM</a> message is sent, the
<b>hItem</b> member of the <see cref="TVITEM" /> or <see cref="TVITEMEX" /> structure identifies the item to retrieve information about, and the <b>mask</b> member specifies the attributes to retrieve.</para>
      <para>If the TVIF_TEXT flag is set in the
<b>mask</b> member of the <see cref="TVITEM" /> or <see cref="TVITEMEX" /> structure, the <b>pszText</b> member must point to a valid buffer and the <b>cchTextMax</b> member must be set to the number of characters in that buffer. The returned text will not necessarily be stored in the original buffer passed by the application. It is possible that <b>pszText</b> will point to text in a new buffer rather than place it in the old buffer.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetItemHeight">
    <summary>
      <para>Retrieves the current height of the tree-view items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemheight">TVM_GETITEMHEIGHT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <seealso cref="TreeView_SetItemHeight" />
  </member>
  <member name="Windows.TreeView_GetItemPartRect">
    <summary>
      <para>Retrieves the largest possible bounding rectangle that constitutes the "hit zone" for a specified part of an item. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitempartrect">TVM_GETITEMPARTRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the tree-view item.</para>
    </param>
    <param name="prc">
      <para>Type: <b><see cref="RECT" />*</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives the bounding rectangle. The caller is responsible for allocating this structure. The coordinates received are relative to the upper-left corner of the tree-view control.</para>
    </param>
    <param name="partid">
      <para>Type: <b>TVITEMPART*</b></para>
      <para>ID of the item part. This value must be <b>TVGIPR_BUTTON</b> (0x0001).</para>
    </param>
    <remarks>
      <para>This message returns the largest possible bounding rectangle such that for every (x,y) coordinate within the rectangle, a click by the user at that coordinate would constitute a hit on that part of the item.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetItemRect">
    <summary>
      <para>Retrieves the bounding rectangle for a tree-view item and indicates whether the item is visible. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the tree-view item.</para>
    </param>
    <param name="prc">
      <para>Type: <b>LPRECT</b></para>
      <para>Pointer to a <see cref="RECT" /> structure that receives the bounding rectangle. The coordinates are relative to the upper-left corner of the tree-view control.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Value specifying the portion of the item for which to retrieve the bounding rectangle. If this parameter is <b>TRUE</b>, the bounding rectangle includes only the text of the item. Otherwise, it includes the entire line that the item occupies in the tree-view control.</para>
    </param>
  </member>
  <member name="Windows.TreeView_GetItemState">
    <summary>
      <para>Retrieves some or all of a tree-view item's state attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemstate">TVM_GETITEMSTATE</a> message explicitly.</para>
    </summary>
    <param name="hwndTV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hti">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Mask used to specify the states to query for. It is equivalent to the <b>stateMask</b> member of <see cref="TVITEMEX" />.</para>
    </param>
  </member>
  <member name="Windows.TreeView_GetLastVisible">
    <summary>
      <para>Retrieves the last expanded item in a tree-view control. This does not retrieve the last item visible in the tree-view window. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_LASTVISIBLE flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</seealso>
    <seealso cref="TreeView_GetFirstVisible" />
    <seealso cref="TreeView_GetNextVisible" />
    <seealso cref="TreeView_GetPrevVisible" />
  </member>
  <member name="Windows.TreeView_GetLineColor">
    <summary>
      <para>Gets the current line color. You can also use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getlinecolor">TVM_GETLINECOLOR</a> message directly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>This message only retrieves line colors. To retrieve the colors of the plus sign (+) and minus sign (-) inside the buttons, use the <see cref="TreeView_GetTextColor" /> macro.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getlinecolor">TVM_GETLINECOLOR</seealso>
  </member>
  <member name="Windows.TreeView_GetNextItem">
    <summary>
      <para>Retrieves the tree-view item that bears the specified relationship to a specified item. You can use this macro, use one of the
<b>TreeView_Get</b> macros described below, or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Flag specifying the item to retrieve. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TVGN_CARET</b>
          </description>
          <description>
            <para>Retrieves the currently selected item. You can use the <see cref="TreeView_GetSelection" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_CHILD</b>
          </description>
          <description>
            <para>Retrieves the first child item of the item specified by the
<i>hitem</i> parameter. You can use the <see cref="TreeView_GetChild" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_DROPHILITE</b>
          </description>
          <description>
            <para>Retrieves the item that is the target of a drag-and-drop operation. You can use the <see cref="TreeView_GetDropHilight" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_FIRSTVISIBLE</b>
          </description>
          <description>
            <para>Retrieves the first visible item. You can use the <see cref="TreeView_GetFirstVisible" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_NEXT</b>
          </description>
          <description>
            <para>Retrieves the next sibling item. You can use the <see cref="TreeView_GetNextSibling" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_NEXTSELECTED</b>
          </description>
          <description>
            <b>Windows Vista and later.</b> Retrieves the next selected item. You can use the <see cref="TreeView_GetNextSelected" /> macro to send this message.
</description>
        </item>
        <item>
          <description>
            <b>TVGN_NEXTVISIBLE</b>
          </description>
          <description>
            <para>Retrieves the next visible item that follows the specified item. The specified item must be visible. Use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</a> message to determine whether an item is visible. You can use the <see cref="TreeView_GetNextVisible" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_PARENT</b>
          </description>
          <description>
            <para>Retrieves the parent of the specified item. You can use the <see cref="TreeView_GetParent" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_PREVIOUS</b>
          </description>
          <description>
            <para>Retrieves the previous sibling item. You can use the <see cref="TreeView_GetPrevSibling" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_PREVIOUSVISIBLE</b>
          </description>
          <description>
            <para>Retrieves the first visible item that precedes the specified item. The specified item must be visible. Use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</a> message to determine whether an item is visible. You can use the <see cref="TreeView_GetPrevVisible" /> macro to send this message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_ROOT</b>
          </description>
          <description>
            <para>Retrieves the topmost or very first item of the tree-view control. You can use the <see cref="TreeView_GetRoot" /> macro to send this message.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>This macro will return <b>NULL</b> if the item being retrieved is the root node of the tree. For example, if you use this macro with the TVGN_PARENT flag on a first-level child of the tree view's root node, the macro will return <b>NULL</b>.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_GetNextSelected">
    <summary>
      <para>Retrieves the tree-view item that bears the <b>TVGN_NEXTSELECTED</b> relationship to a specified tree item.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM*</b></para>
      <para>Specifies the tree item by handle.</para>
    </param>
    <remarks>
      <para>Used to find the next selected item when there are multiple items selected.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</seealso>
  </member>
  <member name="Windows.TreeView_GetNextSibling">
    <summary>
      <para>Retrieves the next sibling item of a specified item in a tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_NEXT flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item.</para>
    </param>
    <seealso cref="TreeView_GetChild" />
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetParent" />
    <seealso cref="TreeView_GetPrevSibling" />
  </member>
  <member name="Windows.TreeView_GetNextVisible">
    <summary>
      <para>Retrieves the next visible item that follows a specified item in a tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_NEXTVISIBLE flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. The specified item must be visible. Use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</a> message to determine whether an item is visible.</para>
    </param>
    <seealso cref="TreeView_GetFirstVisible" />
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetPrevVisible" />
  </member>
  <member name="Windows.TreeView_GetParent">
    <summary>
      <para>Retrieves the parent item of the specified tree-view item. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_PARENT flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>The handle to the parent item of this tree-view item, or NULL.</para>
    </returns>
    <remarks>
      <para>This macro will return <b>NULL</b> if the parent of the specified item is the root node of the tree.</para>
    </remarks>
    <seealso cref="TreeView_GetChild" />
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetNextSibling" />
    <seealso cref="TreeView_GetPrevSibling" />
  </member>
  <member name="Windows.TreeView_GetPrevSibling">
    <summary>
      <para>Retrieves the previous sibling item of a specified item in a tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_PREVIOUS flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item.</para>
    </param>
    <seealso cref="TreeView_GetChild" />
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetNextSibling" />
    <seealso cref="TreeView_GetParent" />
  </member>
  <member name="Windows.TreeView_GetPrevVisible">
    <summary>
      <para>Retrieves the first visible item that precedes a specified item in a tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_PREVIOUSVISIBLE flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. The specified item must be visible. Use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getitemrect">TVM_GETITEMRECT</a> message to determine whether an item is visible.</para>
    </param>
    <seealso cref="TreeView_GetFirstVisible" />
    <seealso cref="TreeView_GetNextItem" />
    <seealso cref="TreeView_GetNextVisible" />
  </member>
  <member name="Windows.TreeView_GetRoot">
    <summary>
      <para>Retrieves the topmost or very first item of the tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_ROOT flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <seealso cref="TreeView_GetNextItem" />
  </member>
  <member name="Windows.TreeView_GetScrollTime">
    <summary>
      <para>Retrieves the maximum scroll time for the tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getscrolltime">TVM_GETSCROLLTIME</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>The maximum scroll time is the longest amount of time that a scroll operation can take. Scrolling will be adjusted so that the scroll will take place within the maximum scroll time. A scroll operation may take less time than the maximum.</para>
    </remarks>
    <seealso cref="TreeView_SetScrollTime" />
  </member>
  <member name="Windows.TreeView_GetSelectedCount">
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
  </member>
  <member name="Windows.TreeView_GetSelection">
    <summary>
      <para>Retrieves the currently selected item in a tree-view control. You can use this macro, or you can explicitly send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getnextitem">TVM_GETNEXTITEM</a> message with the TVGN_CARET flag.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <seealso cref="TreeView_GetNextItem" />
  </member>
  <member name="Windows.TreeView_GetTextColor">
    <summary>
      <para>Retrieves the current text color of the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-gettextcolor">TVM_GETTEXTCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <seealso cref="TreeView_SetTextColor" />
  </member>
  <member name="Windows.TreeView_GetToolTips">
    <summary>
      <para>Retrieves the handle to the child tooltip control used by a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-gettooltips">TVM_GETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <remarks>
      <para>When created, tree-view controls automatically create a child tooltip control. To prevent a tree-view control from using tooltips, create the control with the <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-window-styles">TVS_NOTOOLTIPS</a> style.</para>
    </remarks>
    <seealso cref="TreeView_SetToolTips" />
  </member>
  <member name="Windows.TreeView_GetUnicodeFormat">
    <summary>
      <para>Retrieves the Unicode character format flag for the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getunicodeformat">TVM_GETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <seealso cref="TreeView_SetUnicodeFormat" />
  </member>
  <member name="Windows.TreeView_GetVisibleCount">
    <summary>
      <para>Obtains the number of items that can be fully visible in the client window of a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getvisiblecount">TVM_GETVISIBLECOUNT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <remarks>
      <para>The number of items that can be fully visible may be greater than the number of items in the control. The control calculates this value by dividing the height of the client window by the height of an item.</para>
      <para>Note that the return value is the number of items that can be
<i>fully</i> visible. If you can see all of 20 items and part of one more item, the return value is 20.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_HitTest">
    <summary>
      <para>Determines the location of the specified point relative to the client area of a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-hittest">TVM_HITTEST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="lpht">
      <para>Type: <b>LPTVHITTESTINFO</b></para>
      <para>Pointer to a <see cref="TVHITTESTINFO" /> structure. When the message is sent, the <b>pt</b> member specifies the coordinates of the point to test. When the message returns, the <b>hItem</b> member is the handle to the item at the specified point or <b>NULL</b> if no item occupies the point. Also, when the message returns, the <b>flags</b> member is a hit test value that indicates the location of the specified point. For a list of hit test values, see the description of the <b>TVHITTESTINFO</b> structure.</para>
    </param>
  </member>
  <member name="Windows.TreeView_InsertItem">
    <summary>
      <para>Inserts a new item in a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-insertitem">TVM_INSERTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="lpis">
      <para>Type: <b>LPTVINSERTSTRUCT</b></para>
      <para>Pointer to a <see cref="TVINSERTSTRUCT" /> structure that specifies the attributes of the tree-view item.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvn-endlabeledit">TVN_ENDLABELEDIT</seealso>
  </member>
  <member name="Windows.TreeView_MapAccIDToHTREEITEM">
    <summary>
      <para>Maps an accessibility ID to an <b>HTREEITEM</b>. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-mapaccidtohtreeitem">TVM_MAPACCIDTOHTREEITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the list-view control.</para>
    </param>
    <param name="id">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>The accessibility ID to map to an <b>HTREEITEM</b>.</para>
    </param>
    <remarks>
      <para>To use <b>TreeView_MapAccIDToHTREEITEM</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
      <para>
        <b>Note</b>  The accessibility ID is not the same as that mentioned in <see cref="IAccessibleObject" />. This is a unique ID used for treeview items as long as treeitems do not exceed the max limit of <b>UINT</b>.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_MapHTREEITEMtoAccID">
    <summary>
      <para>Maps an <b>HTREEITEM</b> to an accessibility ID. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-maphtreeitemtoaccid">TVM_MAPHTREEITEMTOACCID</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the list-view control.</para>
    </param>
    <param name="htreeitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>The value to be mapped.</para>
    </param>
    <remarks>
      <para>To use <b>TreeView_MapHTREEITEMtoAccID</b>, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cookbook-overview">Enabling Visual Styles</a>.</para>
      <para>
        <b>Note</b>  The accessibility ID is not the same as that mentioned in <see cref="IAccessibleObject" />. This is a unique ID used for treeview items as long as treeitems do not exceed the max limit of <b>UINT</b>.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_Select">
    <summary>
      <para>Selects the specified tree-view item, scrolls the item into view, or redraws the item in the style used to indicate the target of a drag-and-drop operation. You can use this macro or the <see cref="TreeView_SelectItem" />, <see cref="TreeView_SelectSetFirstVisible" />, or <see cref="TreeView_SelectDropTarget" /> macros, or you can send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. If the <i>hitem</i> parameter is <b>NULL</b>, the control is set to have no selected item.</para>
    </param>
    <param name="code">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Action flag. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TVGN_CARET</b>
          </description>
          <description>
            <para>Sets the selection to the given item. The control's parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-selchanging">TVN_SELCHANGING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-selchanged">TVN_SELCHANGED</a> notification codes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_DROPHILITE</b>
          </description>
          <description>
            <para>Redraws the given item in the style used to indicate the target of a drag-and-drop operation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVGN_FIRSTVISIBLE</b>
          </description>
          <description>
            <para>Ensures that the specified item is visible, and, if possible, displays it at the top of the control's window. Tree-view controls display as many items as will fit in the window. If the specified item is near the bottom of the control's hierarchy of items, it might not become the first visible item, depending on how many items fit in the window.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>If the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item. In this case, the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SelectDropTarget">
    <summary>
      <para>Redraws a specified tree-view control item in the style used to indicate the target of a drag-and-drop operation. You can use this macro or the <see cref="TreeView_Select" /> macro, or you can send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. If the <i>hitem</i> parameter is <b>NULL</b>, the control is set to have no selected item.</para>
    </param>
    <remarks>
      <para>If the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item. In this case, the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes.</para>
      <para>Using the <b>TreeView_SelectDropTarget</b> macro is equivalent to sending the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message with its
<i>flag</i> parameter set to the TVGN_DROPHILITE value.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SelectItem">
    <summary>
      <para>Selects the specified tree-view item. You can use this macro or the <see cref="TreeView_Select" /> macro, or you can send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. If the <i>hitem</i> parameter is <b>NULL</b>, the control is set to have no selected item.</para>
    </param>
    <remarks>
      <para>When you call the <b>TreeView_SelectItem</b> macro, the control's parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-selchanging">TVN_SELCHANGING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-selchanged">TVN_SELCHANGED</a> notification codes. Also, if the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item. In this case, the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes.</para>
      <para>Using the <b>TreeView_SelectItem</b> macro is equivalent to sending the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message with its <i>flag</i> parameter set to the TVGN_CARET value.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SelectSetFirstVisible">
    <summary>
      <para>Scrolls the tree-view control vertically to ensure that the specified item is visible. If possible, the specified item becomes the first visible item at the top of the control's window. You can use this macro or the <see cref="TreeView_Select" /> macro, or you can send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to an item. If the <i>hitem</i> parameter is <b>NULL</b>, the control is set to have no selected item.</para>
    </param>
    <remarks>
      <para>Tree-view controls display as many items as will fit in the window. If the specified item is near the bottom of the control's hierarchy of items, it might not become the first visible item, depending on how many items fit in the window.</para>
      <para>If the specified item is the child of a collapsed parent item, the parent's list of child items is expanded to reveal the specified item. In this case, the parent window receives the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanding">TVN_ITEMEXPANDING</a> and <a href="https://docs.microsoft.com//windows/desktop/Controls/tvn-itemexpanded">TVN_ITEMEXPANDED</a> notification codes.</para>
      <para>Using the <b>TreeView_SelectSetFirstVisible</b> macro is equivalent to sending the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-selectitem">TVM_SELECTITEM</a> message with its <i>flag</i> parameter set to the TVGN_FIRSTVISIBLE value.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SetAutoScrollInfo">
    <summary>
      <para>Sets information used to determine auto-scroll characteristics. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setautoscrollinfo">TVM_SETAUTOSCROLLINFO</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="uPixPerSec">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies pixels per second. The offset to scroll is divided by the <i>uPixPerSec</i> to determine the total duration of the auto-scroll.</para>
    </param>
    <param name="uUpdateTime">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Specifies the redraw time interval. Redraw at every elapsed interval, until the item is scrolled into view.  Given <i>uPixPerSec</i>, the location of the item is calculated and a repaint occurs. Set this value to create smooth scrolling.</para>
    </param>
    <remarks>
      <para>Autoscroll information is used to scroll a nonvisible item into view. The control must have the <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-window-extended-styles">TVS_EX_AUTOHSCROLL</a> extended style. For information on extended styles, see Tree-View Control Extended Styles.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SetBkColor">
    <summary>
      <para>Sets the background color of the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setbkcolor">TVM_SETBKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that contains the new background color. If this argument is -1, the control will revert to using the system color for the background color.</para>
    </param>
    <seealso cref="TreeView_GetBkColor" />
  </member>
  <member name="Windows.TreeView_SetCheckState">
    <summary>
      <para>Sets the item's state image to "checked" or "unchecked." You can also use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setitem">TVM_SETITEM</a> message directly.</para>
    </summary>
    <param name="hwndTV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hti">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <param name="fCheck">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Value that indicates which state image is displayed. Set
<i>fCheck</i> to <b>TRUE</b> to display the checked state image or <b>FALSE</b> to display the unchecked image.</para>
    </param>
    <remarks>
      <para>A tree-view control can have two image lists. The normal image list stores the selected, nonselected, and overlay images. Check boxes are stored in the state image list and displayed to the left of the corresponding normal image. State images are specified by a one-based index. An index of zero indicates that there is no state image. See <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-controls">Tree-View Image Lists</a> for a discussion of how to handle tree-view images.</para>
      <para>If you want to define your own state images, this macro assumes that the checked and unchecked images have the same indexes as the standard image list: 1 for unchecked and 2 for checked.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SetExtendedStyle">
    <summary>
      <para>Sets the extended style for a specified TreeView control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setextendedstyle">TVM_SETEXTENDEDSTYLE</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the TreeView control.</para>
    </param>
    <param name="dw">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">DWORD</a></b></para>
      <para>Value that indicates the extended style. For more information on styles, see <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-window-extended-styles">Tree-View Control Extended Styles</a>.</para>
    </param>
    <param name="mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Mask used to select the styles to be set.</para>
    </param>
  </member>
  <member name="Windows.TreeView_SetImageList">
    <summary>
      <para>Sets the normal or state image list for a tree-view control and redraws the control using the new images. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setimagelist">TVM_SETIMAGELIST</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="himl">
      <para>Type: <b>HIMAGELIST</b></para>
      <para>The HIMAGELIST handle to the image list. If <i>himl</i> is <b>NULL</b>, the message removes the specified image list from the tree-view control.</para>
    </param>
    <param name="iImage">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Type of image list to set. This parameter can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TVSIL_NORMAL</b>
          </description>
          <description>
            <para>Indicates the normal image list, which contains selected, nonselected, and overlay images for the items of a tree-view control.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TVSIL_STATE</b>
          </description>
          <description>
            <para>Indicates the state image list. You can use state images to indicate application-defined item states. A state image is displayed to the left of an item's selected or nonselected image.</para>
          </description>
        </item>
      </list>
    </param>
    <remarks>
      <para>The tree-view control will not destroy the image list specified with this message. Your application must destroy the image list when it is no longer needed.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getimagelist">TVM_GETIMAGELIST</seealso>
    <seealso cref="TreeView_GetImageList" />
  </member>
  <member name="Windows.TreeView_SetIndent">
    <summary>
      <para>Sets the width of indentation for a tree-view control and redraws the control to reflect the new width. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setindent">TVM_SETINDENT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="indent">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">INT</a></b></para>
      <para>Width, in pixels, of the indentation. If this parameter is less than the system-defined minimum width, the new width is set to the system-defined minimum.</para>
    </param>
    <remarks>
      <para>The system-defined minimum indent value is typically five pixels, but it is not fixed. To retrieve the exact value of the minimum indent on a particular system, use the <b>TreeView_SetIndent</b> macro with <i>indent</i> set to zero. Then use the <see cref="TreeView_GetIndent" /> macro to retrieve the minimum indent value.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setindent">TVM_SETINDENT</seealso>
  </member>
  <member name="Windows.TreeView_SetInsertMark">
    <summary>
      <para>Sets the insertion mark in a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setinsertmark">TVM_SETINSERTMARK</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="hItem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>
        <b>HTREEITEM</b> that specifies at which item the insertion mark will be placed. If this argument is <b>NULL</b>, the insertion mark is removed.</para>
    </param>
    <param name="fAfter">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>
        <b>BOOL</b> value that specifies if the insertion mark is placed before or after the specified item. If this argument is nonzero, the insertion mark will be placed after the item. If this argument is zero, the insertion mark will be placed before the item.</para>
    </param>
  </member>
  <member name="Windows.TreeView_SetInsertMarkColor">
    <summary>
      <para>Sets the color used to draw the insertion mark for the tree view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setinsertmarkcolor">TVM_SETINSERTMARKCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that contains the new insertion mark color.</para>
    </param>
    <seealso cref="TreeView_GetInsertMarkColor" />
  </member>
  <member name="Windows.TreeView_SetItem">
    <summary>
      <para>The <b>TreeView_SetItem</b> macro sets some or all of a tree-view item's attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setitem">TVM_SETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="pitem">
      <para>Type: <b>LPTVITEM</b></para>
      <para>Pointer to a <see cref="TVITEM" /> structure that contains the new item attributes. With <a href="https://docs.microsoft.com//windows/desktop/Controls/common-control-versions">version 4.71</a> and later, you can instead use a <see cref="TVITEMEX" /> structure.</para>
    </param>
    <remarks>
      <para>The <b>hItem</b> member of the <see cref="TVITEM" /> or <see cref="TVITEMEX" /> structure identifies the item, and the <b>mask</b> member specifies which attributes to set.</para>
    </remarks>
    <seealso cref="TreeView_GetItem" />
  </member>
  <member name="Windows.TreeView_SetItemHeight">
    <summary>
      <para>Sets the height of the tree-view items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setitemheight">TVM_SETITEMHEIGHT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="iHeight">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">SHORT</a></b></para>
      <para>New height of every item in the tree view, in pixels. Heights less than 1 will be set to 1. If this argument is not even, it will be rounded down to the nearest even value. If this argument is -1, the control will revert to using its default item height.</para>
    </param>
    <remarks>
      <para>The tree-view control uses this value for the height of all items. To modify the height of individual items, see the description of the <b>iIntegral</b> member of the <see cref="TVITEMEX" /> structure.</para>
    </remarks>
    <seealso cref="TreeView_GetItemHeight" />
  </member>
  <member name="Windows.TreeView_SetItemState">
    <summary>
      <para>Sets a tree-view item's state attributes. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setitem">TVM_SETITEM</a> message explicitly.</para>
    </summary>
    <param name="hwndTV">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hti">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <param name="data">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Value that is equivalent to the <b>state</b> member of <see cref="TVITEMEX" />.</para>
    </param>
    <param name="_mask">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>Mask used to select the states to be set. It is equivalent to the
<b>stateMask</b> member of <see cref="TVITEMEX" />.</para>
    </param>
  </member>
  <member name="Windows.TreeView_SetLineColor">
    <summary>
      <para>Sets the current line color. You can also use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setlinecolor">TVM_SETLINECOLOR</a> message directly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> that specifies the new line color. Use the CLR_DEFAULT value to restore the system default colors.</para>
    </param>
    <remarks>
      <para>This message only changes line colors. To change the colors of the plus sign (+) and minus sign (-) inside the buttons, use the <see cref="TreeView_SetTextColor" /> macro.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setlinecolor">TVM_SETLINECOLOR</seealso>
  </member>
  <member name="Windows.TreeView_SetScrollTime">
    <summary>
      <para>Sets the maximum scroll time for the tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setscrolltime">TVM_SETSCROLLTIME</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="uTime">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">UINT</a></b></para>
      <para>New maximum scroll time, in milliseconds. If this value is less than 100, it will be rounded up to 100.</para>
    </param>
    <remarks>
      <para>The maximum scroll time is the longest amount of time that a scroll operation can take. Scrolling will be adjusted so that the scroll will take place within the maximum scroll time. A scroll operation may take less time than the maximum.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Controls/tvm-getscrolltime">TVM_GETSCROLLTIME</seealso>
  </member>
  <member name="Windows.TreeView_SetTextColor">
    <summary>
      <para>Sets the text color of the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-settextcolor">TVM_SETTEXTCOLOR</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="clr">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">COLORREF</a></b></para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that contains the new text color. If this argument is -1, the control will revert to using the system color for the text color.</para>
    </param>
    <seealso cref="TreeView_GetTextColor" />
  </member>
  <member name="Windows.TreeView_SetToolTips">
    <summary>
      <para>Sets a tree-view control's child tooltip control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-settooltips">TVM_SETTOOLTIPS</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tree-view control.</para>
    </param>
    <param name="hwndTT">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to a tooltip control.</para>
    </param>
    <remarks>
      <para>When created, tree-view controls automatically create a child tooltip control. To prevent a tree-view control from using tooltips, create the control with the <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-control-window-styles">TVS_NOTOOLTIPS</a> style.</para>
    </remarks>
    <seealso cref="TreeView_GetToolTips" />
  </member>
  <member name="Windows.TreeView_SetUnicodeFormat">
    <summary>
      <para>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-setunicodeformat">TVM_SETUNICODEFORMAT</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the control.</para>
    </param>
    <param name="fUnicode">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters.</para>
    </param>
    <seealso cref="TreeView_GetUnicodeFormat" />
  </member>
  <member name="Windows.TreeView_ShowInfoTip">
    <summary>
      <para>Shows the infotip for a specified item in a tree-view control. Use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-showinfotip">TVM_SHOWINFOTIP</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HITEM</b></para>
      <para>Handle to the item.</para>
    </param>
    <remarks>
      <para>Most applications do not use this macro. Infotips are shown automatically. For more information, see Using Tree-view Infotips in the <a href="https://docs.microsoft.com//windows/desktop/Controls/tree-view-controls">About Tree-View Controls</a> overview.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SortChildren">
    <summary>
      <para>Sorts the child items of the specified parent item in a tree-view control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-sortchildren">TVM_SORTCHILDREN</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="hitem">
      <para>Type: <b>HTREEITEM</b></para>
      <para>Handle to the parent item whose child items are to be sorted.</para>
    </param>
    <param name="recurse">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Value that specifies whether the sorting is recursive. Set <i>fRecurse</i> to <b>TRUE</b> to sort all levels of child items below the parent item. Otherwise, only the parent's immediate children are sorted.</para>
    </param>
    <remarks>
      <para>This message alphabetizes the tree items using <see cref="lstrcmpi" /> on the item name. You can use the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-sortchildrencb">TVM_SORTCHILDRENCB</a> message to customize the ordering behavior.</para>
    </remarks>
  </member>
  <member name="Windows.TreeView_SortChildrenCB">
    <summary>
      <para>Sorts tree-view items using an application-defined callback function that compares the items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/tvm-sortchildrencb">TVM_SORTCHILDRENCB</a> message explicitly.</para>
    </summary>
    <param name="hwnd">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>Handle to the tree-view control.</para>
    </param>
    <param name="psort">
      <para>Type: <b>LPTVSORTCB</b></para>
      <para>Pointer to a <see cref="TVSORTCB" /> structure. The <b>lpfnCompare</b> member is the address of the application-defined callback function, which is called during the sort operation each time the relative order of two list items needs to be compared. For more information about the callback function, see the description of <b>TVSORTCB</b>.</para>
    </param>
    <param name="recurse">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">BOOL</a></b></para>
      <para>Reserved. Must be zero.</para>
    </param>
  </member>
  <member name="Windows.UninitializeFlatSB">
    <summary>
      <para>Uninitializes flat scroll bars for a particular window. The specified window will revert to standard scroll bars.</para>
    </summary>
    <param name="unnamedParam1">
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HWND</a></b></para>
      <para>A handle to the window with the flat scroll bars that will be uninitialized.</para>
    </param>
    <returns>
      <para>Type: <b><a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">HRESULT</a></b></para>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>One of the window's scroll bars is currently in use. The operation cannot be completed at this time.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>The window does not have flat scroll bars initialized.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The operation was successful.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Flat scroll bar functions are implemented in Comctl32.dll versions 4.71 through 5.82. Comctl32.dll versions 6.00 and higher do not support flat scroll bars.</para>
    </remarks>
  </member>
  <member name="Windows._TrackMouseEvent">
    <summary>
      <para>Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. This function calls <see cref="TrackMouseEvent" /> if it exists, otherwise it emulates it.</para>
    </summary>
    <param name="lpEventTrack">
      <para>Type: <b>LPTRACKMOUSEEVENT</b></para>
      <para>A pointer to a <see cref="TRACKMOUSEEVENT" /> structure that contains tracking information.</para>
    </param>
    <returns>
      <para>Type: <b>BOOL</b></para>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, return value is zero.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/inputdev/mouse-input">Mouse Input</seealso>
    <seealso cref="SystemParametersInfo" />
    <seealso cref="TRACKMOUSEEVENT" />
    <seealso cref="TrackMouseEvent" />
  </member>
</doc>