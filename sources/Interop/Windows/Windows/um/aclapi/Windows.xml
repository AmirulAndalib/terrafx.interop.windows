<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.BuildExplicitAccessWithName">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildExplicitAccessWithNameA">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildExplicitAccessWithNameW">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildExplicitAccessWithName">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildExplicitAccessWithNameA">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildExplicitAccessWithNameW">
    <summary>The <b>BuildExplicitAccessWithName</b> function initializes an<see cref="EXPLICIT_ACCESS" /> structure with data specified by the caller. The trustee is identified by a name string.</summary>
    <param name="pExplicitAccess">A pointer to an<see cref="EXPLICIT_ACCESS" /> structure to initialize. The <b>BuildExplicitAccessWithName</b> function does not allocate any memory. This parameter cannot be <b>NULL</b>.</param>
    <param name="pTrusteeName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the<see cref="TRUSTEE" /> structure. The <b>BuildExplicitAccessWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
    <param name="AccessPermissions">Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> for the <b>grfAccessPermissions</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The mask is a set of bit flags that use the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> allows, denies, or audits for the trustee. The functions that use the <b>EXPLICIT_ACCESS</b> structure do not convert, interpret, or validate the bits in this mask.</param>
    <param name="AccessMode">Specifies an access mode for the <b>grfAccessMode</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. The access mode indicates whether the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) allows, denies, or audits the specified rights. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), this parameter can be one of the values from the<see cref="ACCESS_MODE" /> enumeration. For a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), this parameter can be a combination of <b>ACCESS_MODE</b> values.</param>
    <param name="Inheritance">
      <para>Specifies an inheritance type for the <b>grfInheritance</b> member of the <see cref="EXPLICIT_ACCESS" /> structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the<see cref="ACL" /> is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the <b>AceFlags</b> member of the<see cref="ACE_HEADER" /> structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTAINER_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INHERIT_ONLY_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJECT_INHERIT_ACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_AND_OBJECTS_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_CONTAINERS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>CONTAINER_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SUB_OBJECTS_ONLY_INHERIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the <b>OBJECT_INHERIT_ACE</b> and <b>INHERIT_ONLY_ACE</b> flags.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildSecurityDescriptor">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildSecurityDescriptorA">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildSecurityDescriptorW">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildSecurityDescriptor">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildSecurityDescriptorA">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildSecurityDescriptorW">
    <summary>
      <para>The <b>BuildSecurityDescriptor</b> function allocates and initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.</para>
      <para>The <b>BuildSecurityDescriptor</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. The self-relative format makes the security descriptor suitable for storing in a stream.</para>
    </summary>
    <param name="pOwner">
      <para>A pointer to a<see cref="TRUSTEE" /> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the owner SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the owner SID in <i>pOldSD</i> is <b>NULL</b>, the owner SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a <see cref="TRUSTEE" /> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <b>BuildSecurityDescriptor</b> looks up the SID associated with the specified trustee name.</para>
      <para>If this parameter is <b>NULL</b>, the function uses the group SID from the original security descriptor pointed to by <i>pOldSD</i>. If <i>pOldSD</i> is <b>NULL</b>, or if the group SID in <i>pOldSD</i> is <b>NULL</b>, the group SID is <b>NULL</b> in the new security descriptor.</para>
    </param>
    <param name="cCountOfAccessEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAccessEntries</i> array.</param>
    <param name="pListOfAccessEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe access control information for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an<see cref="ACL" /> from an array of <b>EXPLICIT_ACCESS</b> structures, see the<see cref="SetEntriesInAcl" /> function.</para>
      <para>If <i>pListOfAccessEntries</i> is <b>NULL</b>, the new security descriptor gets the DACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or if the DACL in <i>pOldSD</i> is <b>NULL</b>, the new DACL is <b>NULL</b>.</para>
    </param>
    <param name="cCountOfAuditEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfAuditEntries</i> array.</param>
    <param name="pListOfAuditEntries">
      <para>A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <i>pOldSD</i>, if any. If <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the function creates a new SACL based solely on the information in the array.</para>
      <para>If <i>pListOfAuditEntries</i> is <b>NULL</b>, the new security descriptor gets the SACL from <i>pOldSD</i>. In this case, if <i>pOldSD</i> is <b>NULL</b>, or the SACL in <i>pOldSD</i> is <b>NULL</b>, the new SACL is <b>NULL</b>.</para>
    </param>
    <param name="pOldSD">A pointer to an existing self-relative<see cref="SECURITY_DESCRIPTOR" /> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be <b>NULL</b>.</param>
    <param name="pSizeNewSD">A pointer to a variable that receives the size, in bytes, of the security descriptor.</param>
    <param name="pNewSD">A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.BuildTrusteeWithName">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithNameA">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithNameW">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithName">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithNameA">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithNameW">
    <summary>The <b>BuildTrusteeWithName</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the trustee name. The function sets other members of the structure to default values.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithName</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pName">
      <para>A pointer to a null-terminated string that contains the name of the trustee for the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The <b>BuildTrusteeWithName</b> function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NULL</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_NAME</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndName">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndNameA">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndNameW">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndName">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndNameA">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndNameW">
    <summary>The <b>BuildTrusteeWithObjectsAndName</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that will be initialized by this function. If the value of this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjName">A pointer to an<see cref="OBJECTS_AND_NAME" /> structure that contains information about the trustee and the securable object.</param>
    <param name="ObjectType">A pointer to an<see cref="SE_OBJECT_TYPE" /> enumeration that contains information about the type of securable object.</param>
    <param name="ObjectTypeName">A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the ObjectType GUID that corresponds to this name.</param>
    <param name="InheritedObjectTypeName">A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure returned in the <i>pTrustee</i> parameter. This function determines the InheritedObjectType GUID that corresponds to this name.</param>
    <param name="Name">A pointer to a string that specifies the name used to identify the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSid">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSidA">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSidW">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSid">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSidA">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithObjectsAndSidW">
    <summary>The <b>BuildTrusteeWithObjectsAndSid</b> function initializes a<see cref="TRUSTEE" /> structure with the object-specific <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the<see cref="SID" /> structure that represents the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> of the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithObjectsAndSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pObjSid">A pointer to an<see cref="OBJECTS_AND_SID" /> structure that contains information about the trustee and the securable object.</param>
    <param name="pObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the ObjectType GUID to be added to the<see cref="TRUSTEE" /> structure.</param>
    <param name="pInheritedObjectGuid">A pointer to a <see cref="GUID" /> structure that describes the InheritedObjectType GUID to be added to the <see cref="TRUSTEE" /> structure.</param>
    <param name="pSid">A pointer to a<see cref="SID" /> structure that identifies the trustee.</param>
  </member>
  <member name="Windows.BuildTrusteeWithSid">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithSidA">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithSidW">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithSid">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithSidA">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.BuildTrusteeWithSidW">
    <summary>The <b>BuildTrusteeWithSid</b> function initializes a<see cref="TRUSTEE" /> structure. The caller specifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure to initialize. The <b>BuildTrusteeWithSid</b> function does not allocate any memory. If this parameter is <b>NULL</b> or a pointer that is not valid, the results are undefined.</param>
    <param name="pSid">
      <para>A pointer to a<see cref="SID" /> structure that identifies the trustee. The <b>BuildTrusteeWithSid</b> function assigns this pointer to the <b>ptstrName</b> member of the <see cref="TRUSTEE" /> structure. The function sets the other members of the <b>TRUSTEE</b> structure as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>pMultipleTrustee</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>
            <b>NULL</b>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MultipleTrusteeOperation</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>NO_MULTIPLE_TRUSTEE</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeForm</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_SID</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>TrusteeType</b>
                  </b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>TRUSTEE_IS_UNKNOWN</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.FreeInheritedFromArray">
    <summary>The <b>FreeInheritedFromArray</b> function frees memory allocated by the<see cref="GetInheritanceSource" /> function.</summary>
    <param name="pInheritArray">A pointer to the array of <see cref="INHERITED_FROM" /> structures returned by <see cref="GetInheritanceSource" />.</param>
    <param name="AceCnt">Number of entries in <i>pInheritArray</i>.</param>
    <param name="pfnArray">Unused. Set to <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAcl">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAclA">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAclW">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAcl">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAclA">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetAuditedPermissionsFromAclW">
    <summary>The <b>GetAuditedPermissionsFromAcl</b> function retrieves the audited access rights for a specified trustee. The audited rights are based on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the<see cref="ACL" /> specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get the trustee's audited access rights.</param>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify a trustee. For information about SID structures, see <see cref="SID" />.</param>
    <param name="pSuccessfulAuditedRights">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the successful audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee successfully uses any of these access rights.</param>
    <param name="pFailedAuditRights">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that receives the failed audit mask for rights audited for the trustee specified by the <i>pTrustee</i> parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAcl">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAclA">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAclW">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAcl">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAclA">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetExplicitEntriesFromAclW">
    <summary>The <b>GetExplicitEntriesFromAcl</b> function retrieves an array of structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pacl">A pointer to an<see cref="ACL" /> structure from which to get<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> information.</param>
    <param name="pcCountOfExplicitEntries">A pointer to a variable that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSource">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="GetInheritanceSourceW" />, is supported.</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSourceA">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="GetInheritanceSourceW" />, is supported.</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSourceW">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="GetInheritanceSourceW" />, is supported.</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSource">
    <summary>The <b>GetInheritanceSource</b> function returns information about the source of inherited <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSourceA">
    <summary>The <b>GetInheritanceSource</b> function returns information about the source of inherited <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetInheritanceSourceW">
    <summary>The <b>GetInheritanceSource</b> function returns information about the source of inherited <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</summary>
    <param name="pObjectName">A pointer to the name of the object that uses the ACL to be checked.</param>
    <param name="ObjectType">The type of object indicated by <i>pObjectName</i>. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL.</param>
    <param name="SecurityInfo">The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION.</param>
    <param name="Container">
      <b>TRUE</b> if the object is a container object or <b>FALSE</b> if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT.</param>
    <param name="pObjectClassGuids">Optional list of GUIDs that identify the object types or names associated with <i>pObjectName</i>. This may be <b>NULL</b> if the object manager only supports one object class or has no GUID associated with the object class.</param>
    <param name="GuidCount">Number of GUIDs pointed to by <i>pObjectClassGuids</i>.</param>
    <param name="pAcl">The ACL for the object.</param>
    <param name="pfnArray">Reserved. Set this parameter to <b>NULL</b>.</param>
    <param name="pGenericMapping">The mapping of generic rights to specific rights for the object.</param>
    <param name="pInheritArray">A pointer to an array of <see cref="INHERITED_FROM" /> structures that the <b>GetInheritanceSource</b> function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfo">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfoA">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfoW">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfo">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfoA">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetNamedSecurityInfoW">
    <summary>The <b>GetNamedSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by name.</summary>
    <param name="pObjectName">A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</param>
    <param name="ObjectType">Specifies a value from the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> returned in <i>ppSecurityDescriptor</i> or <b>NULL</b> if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or <b>NULL</b> if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or <b>NULL</b> if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetSecurityInfo">
    <summary>The <b>GetSecurityInfo</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for an object specified by a handle.</summary>
    <param name="handle">A handle to the object from which to retrieve security information.</param>
    <param name="ObjectType">
      <see cref="SE_OBJECT_TYPE" /> enumeration value that indicates the type of object.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in <i>ppSecurityDescriptor</i>. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you do not need the owner SID.</param>
    <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you do not need the group SID.</param>
    <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you do not need the DACL.</param>
    <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you do not need the SACL.</param>
    <param name="ppSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the<see cref="LocalFree" /> function.</para>
      <para>This parameter is required if any one of the <i>ppsidOwner</i>, <i>ppsidGroup</i>, <i>ppDacl</i>, or <i>ppSacl</i> parameters is not <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeForm">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeFormA">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeFormW">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeForm">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeFormA">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeFormW">
    <summary>The <b>GetTrusteeForm</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the structure uses a name string or a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to identify the trustee.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the<see cref="TRUSTEE_FORM" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeName">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeNameA">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeNameW">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeName">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeNameA">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeNameW">
    <summary>The <b>GetTrusteeName</b> function retrieves the trustee name from the specified <see cref="TRUSTEE" /> structure.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>
      <para>If the <b>TrusteeForm</b> member of the <see cref="TRUSTEE" /> structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the <b>ptstrName</b> member of the structure.</para>
      <para>If the <b>TrusteeForm</b> member is TRUSTEE_IS_SID, the return value is <b>NULL</b>. The function does not look up the name associated with a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </returns>
  </member>
  <member name="Windows.GetTrusteeType">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeTypeA">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeTypeW">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeType">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeTypeA">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.GetTrusteeTypeW">
    <summary>The <b>GetTrusteeType</b> function retrieves the trustee type from the specified <see cref="TRUSTEE" /> structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.</summary>
    <param name="pTrustee">A pointer to a<see cref="TRUSTEE" /> structure.</param>
    <returns>The return value is one of the constants from the <see cref="TRUSTEE_TYPE" /> enumeration.</returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorParts">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorPartsA">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorPartsW">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorParts">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorPartsA">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.LookupSecurityDescriptorPartsW">
    <summary>The <b>LookupSecurityDescriptorParts</b> function retrieves security information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>.</summary>
    <param name="ppOwner">
      <para>A pointer to a variable that receives a pointer to a<see cref="TRUSTEE" /> structure. The function looks up the name associated with the owner<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) in the <i>pSD</i><a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the owner.</para>
    </param>
    <param name="ppGroup">
      <para>A pointer to a variable that receives a pointer to a <see cref="TRUSTEE" /> structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the <b>ptstrName</b> member of the <b>TRUSTEE</b> structure. The function sets the <b>TrusteeForm</b> member to TRUSTEE_IS_NAME.</para>
      <para>This parameter can be <b>NULL</b> if you are not interested in the name of the group.</para>
    </param>
    <param name="pcCountOfAccessEntries">A pointer to a <b>ULONG</b> that receives the number of<see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAccessEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAccessEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAccessEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the security descriptor. The<see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures use the TRUSTEE_IS_NAME form. For a description of how an array of <b>EXPLICIT_ACCESS</b> structures describes the ACEs in an<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), see the<see cref="GetExplicitEntriesFromAcl" /> function. If this parameter is <b>NULL</b>, the <i>cCountOfAccessEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pcCountOfAuditEntries">A pointer to a <b>ULONG</b> that receives the number of <see cref="EXPLICIT_ACCESS" /> structures returned in the <i>pListOfAuditEntries</i> array. This parameter can be <b>NULL</b> only if the <i>pListOfAuditEntries</i> parameter is also <b>NULL</b>.</param>
    <param name="ppListOfAuditEntries">A pointer to a variable that receives a pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the security descriptor. The <see cref="TRUSTEE" /> structure in these <b>EXPLICIT_ACCESS</b> structures uses the TRUSTEE_IS_NAME form. If this parameter is <b>NULL</b>, the <i>cCountOfAuditEntries</i> parameter must also be <b>NULL</b>.</param>
    <param name="pSD">A pointer to an existing <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> from which the function retrieves security information.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAcl">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAclA">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAclW">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAcl">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAclA">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetEntriesInAclW">
    <summary>The <b>SetEntriesInAcl</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) by merging new access control or audit control information into an existing<see cref="ACL" /> structure.</summary>
    <param name="cCountOfExplicitEntries">The number of<see cref="EXPLICIT_ACCESS" /> structures in the <i>pListOfExplicitEntries</i> array.</param>
    <param name="pListOfExplicitEntries">A pointer to an array of <see cref="EXPLICIT_ACCESS" /> structures that describe the access control information to merge into the existing ACL.</param>
    <param name="OldAcl">A pointer to the existing ACL. This parameter can be <b>NULL</b>, in which case, the function creates a new ACL based on the <see cref="EXPLICIT_ACCESS" /> entries.</param>
    <param name="NewAcl">A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the<see cref="LocalFree" /> function to free the returned buffer.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfo">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfoA">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfoW">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfo">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfoA">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetNamedSecurityInfoW">
    <summary>The <b>SetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by name.</summary>
    <param name="pObjectName">
      <para>A pointer to a <b>null</b>-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.</para>
      <para>For descriptions of the string formats for the different object types, see<see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. If the caller does not have the <b>SeRestorePrivilege</b> constant (see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privilege-constants">Privilege Constants</a>), this <b>SID</b> must be contained in the caller's token, and must have the <b>SE_GROUP_OWNER</b> permission enabled. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner <b>SID</b>, this parameter can be <b>NULL</b>.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to the new DACL for the object. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">
      <para>A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</para>
      <para>If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.SetSecurityInfo">
    <summary>
      <para>The <b>SetSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified object. The caller identifies the object by a handle.</para>
      <para>To set the SACL of an object, the caller must have the <b>SE_SECURITY_NAME</b> privilege enabled.</para>
    </summary>
    <param name="handle">A handle to the object for which to set security information.</param>
    <param name="ObjectType">A member of the<see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object identified by the <i>handle</i> parameter.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="psidOwner">A pointer to a SID that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you are not setting the owner SID.</param>
    <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. This parameter can be <b>NULL</b> if you are not setting the primary group SID.</param>
    <param name="pDacl">A pointer to the new DACL for the object. This parameter is ignored unless the value of the <i>SecurityInfo</i> parameter includes the <b>DACL_SECURITY_INFORMATION</b> flag. If the value of the <i>SecurityInfo</i> parameter includes the <b>DACL_SECURITY_INFORMATION</b> flag and the value of this parameter is set to <b>NULL</b>, full access to the object is granted to everyone. For information about <b>null</b> DACLs, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/creating-a-dacl">Creating a DACL</a>.</param>
    <param name="pSacl">A pointer to the new SACL for the object. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. This parameter can be <b>NULL</b> if you are not setting the SACL.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfo">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeResetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfoA">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeResetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfoW">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeResetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfo">
    <summary>The <b>TreeResetNamedSecurityInfo</b> function resets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfoA">
    <summary>The <b>TreeResetNamedSecurityInfo</b> function resets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeResetNamedSecurityInfoW">
    <summary>The <b>TreeResetNamedSecurityInfo</b> function resets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to reset. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="KeepExplicit">Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If <i>KeepExplicit</i> is <b>TRUE</b>, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>. If <i>KeepExplicit</i> is <b>FALSE</b>, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from <i>pDacl</i> and <i>pSacl</i>.</param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeResetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeResetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfo">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeSetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfoA">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeSetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfoW">
    <summary>This version of this function is not supported. The wide character version of this function, <see cref="TreeSetNamedSecurityInfoW" />, is supported.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfo">
    <summary>The <b>TreeSetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfoA">
    <summary>The <b>TreeSetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
  <member name="Windows.TreeSetNamedSecurityInfoW">
    <summary>The <b>TreeSetNamedSecurityInfo</b> function sets specified security information in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a specified tree of objects. This function allows a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) or any elements in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.</summary>
    <param name="pObjectName">
      <code>		Pointer to a &lt;b&gt;null&lt;/b&gt;-terminated string that specifies the name of the root node object for the objects that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see</code>
      <para>
        <see cref="SE_OBJECT_TYPE" />.</para>
    </param>
    <param name="ObjectType">A value of the <see cref="SE_OBJECT_TYPE" /> enumeration that indicates the type of object named by the <i>pObjectName</i> parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively.</param>
    <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</param>
    <param name="pOwner">A pointer to a <see cref="SID" /> structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The <i>SecurityInfo</i> parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be <b>NULL</b>.</param>
    <param name="pGroup">A pointer to a <see cref="SID" /> structure that identifies the primary group of the object. The <i>SecurityInfo</i> parameter must include the GROUP_SECURITY_INFORMATION flag. To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be <b>NULL</b>.</param>
    <param name="pDacl">A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) structure that represents the new DACL for the objects being reset. The <i>SecurityInfo</i> parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each object, including the root object. If you are not setting the DACL, this parameter can be <b>NULL</b>.</param>
    <param name="pSacl">A pointer to an ACL structure that represents the new SACL for the objects being reset. The <i>SecurityInfo</i> parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be <b>NULL</b>.</param>
    <param name="dwAction">
      <para>Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_SET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The security information is set on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. If ACLs are specified in either the <i>pDacl</i> or <i>pSacl</i> parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree.<para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TREE_SEC_INFO_RESET_KEEP_EXPLICIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>The security information is reset on the object specified by the <i>pObjectName</i> parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged. <para>If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the <i>pObjectName</i> parameter.</para></description>
        </listheader>
      </list>
    </param>
    <param name="fnProgress">
      <para>A pointer to the function used to track the progress of the <b>TreeSetNamedSecurityInfo</b> function. The prototype of the progress function is:</para>
      <code>#include &lt;windows.h&gt; #include &lt;Aclapi.h&gt; #pragma comment(lib, "Advapi32.lib") typedef VOID (*FN_PROGRESS) ( IN LPWSTR pObjectName, // Name of object just processed IN DWORD Status, // Status of operation on object IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set IN PVOID Args, // Caller specific data IN BOOL SecuritySet // Whether security was set );</code>
      <para>The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in <i>fnProgress</i>, and during the tree operation, <b>TreeSetNamedSecurityInfo</b> passes the name of the last object processed, the error status of that operation, and the current PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using <i>pInvokeSetting</i>.</para>
      <para>If no progress function is to be used, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ProgressInvokeSetting">A value of the <see cref="PROG_INVOKE_SETTING" /> enumeration that specifies the initial setting for the progress function.</param>
    <param name="Args">A pointer to a <b>VOID</b> for progress function arguments specified by the caller.</param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, it returns an error code defined in WinError.h.</para>
    </returns>
  </member>
</doc>