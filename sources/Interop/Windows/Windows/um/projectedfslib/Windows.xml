<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.PrjAllocateAlignedBuffer">
    <summary>Allocates a buffer that meets the memory alignment requirements of the virtualization instance's storage device.</summary>
    <param name="namespaceVirtualizationContext">Opaque handle for the virtualization instance.</param>
    <param name="size">The size of the buffer required, in bytes.</param>
    <returns>Returns NULL if the buffer could not be allocated.</returns>
  </member>
  <member name="Windows.PrjClearNegativePathCache">
    <summary>Purges the virtualization instance's negative path cache, if it is active.</summary>
    <param name="namespaceVirtualizationContext">Opaque handle for the virtualization instance.</param>
    <param name="totalEntryNumber">Optional pointer to a variable that receives the number of paths that were in the cache before it was purged.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjCompleteCommand">
    <summary>Indicates that the provider has completed processing a callback from which it had previously returned HRESULT_FROM_WIN32(ERROR_IO_PENDING).</summary>
    <param name="namespaceVirtualizationContext">Opaque handle for the virtualization instance. This must be the value from the VirtualizationInstanceHandle member of the callbackData passed to the provider in the callback that is being complete.</param>
    <param name="commandId">A value identifying the callback invocation that the provider is completing. This must be the value from the CommandId member of the callbackData passed to the provider in the callback that is being completed.</param>
    <param name="completionResult">The final HRESULT of the operation.</param>
    <param name="extendedParameters">Optional pointer to extended parameters required for completing certain callbacks.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjDeleteFile">
    <summary>Enables a provider to delete an item that has been cached on the local file system.</summary>
    <param name="namespaceVirtualizationContext">An opaque handle for the virtualization instance.</param>
    <param name="destinationFileName">A null-terminated Unicode string specifying the path, relative to the virtualization root, to the file or directory to be deleted.</param>
    <param name="updateFlags">Flags to control the delete operation should be allowed given the state of the file.</param>
    <param name="failureReason">Optional pointer to receive a code describing the reason a delete failed.</param>
    <returns>If an HRESULT_FROM_WIN32(ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION) error is returned, the update failed due to the item's state and the value of updateFlags. failureReason, if specified, will describe the reason for the failure.</returns>
  </member>
  <member name="Windows.PrjDoesNameContainWildCards">
    <summary>Determines whether a name contains wildcard characters.</summary>
    <param name="fileName">A null-terminated Unicode string to check for wildcard characters.</param>
    <returns>True if fileName contains wildcards, False otherwise.</returns>
  </member>
  <member name="Windows.PrjFileNameCompare">
    <summary>Compares two file names and returns a value that indicates their relative collation order.</summary>
    <param name="fileName1">A null-terminated Unicode string specifying the first name to compare.</param>
    <param name="fileName2">A null-terminated Unicode string specifying the second name to compare.</param>
    <returns>
      <list type="bullet">
        <item>
          <description>&lt;0 indicates fileName1 is before fileName2 in collation order</description>
        </item>
        <item>
          <description>0 indicates fileName1 is equal to fileName2</description>
        </item>
        <item>
          <description>&gt;0 indicates fileName1 is after fileName2 in collation order</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.PrjFileNameMatch">
    <summary>Determines whether a file name matches a search pattern.</summary>
    <param name="fileNameToCheck">A null-terminated Unicode string of at most MAX_PATH characters specifying the file name to check against pattern.</param>
    <param name="pattern">A null-terminated Unicode string of at most MAX_PATH characters specifying the pattern to compare against fileNameToCheck.</param>
    <returns>True if fileNameToCheck matches pattern, False otherwise.</returns>
  </member>
  <member name="Windows.PrjFillDirEntryBuffer">
    <summary>Provides information for one file or directory to an enumeration.</summary>
    <param name="fileName">A pointer to a null-terminated string that contains the name of the entry</param>
    <param name="fileBasicInfo">Basic information about the entry to be filled.</param>
    <param name="dirEntryBufferHandle">An opaque handle to a structure that receives information about the filled entries.</param>
    <returns>HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER) indicates that dirEntryBufferHandle doesn't have enough space for the new entry.</returns>
  </member>
  <member name="Windows.PrjFillDirEntryBuffer2">
    <summary>Provides information for one file or directory to an enumeration and allows the caller to specify extended information.</summary>
    <param name="dirEntryBufferHandle">An opaque handle to a structure that receives information about the filled entries.</param>
    <param name="fileName">A pointer to a null-terminated string that contains the name of the entry</param>
    <param name="fileBasicInfo">Basic information about the entry to be filled.</param>
    <param name="extendedInfo">A pointer to a <see cref="PRJ_EXTENDED_INFO" /> struct specifying extended information about the entry to be filled.</param>
    <returns>
      <para>HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER) indicates that dirEntryBufferHandle doesn't have enough space for the new entry.</para>
      <para>E_INVALIDARG indicates that extendedInfo.InfoType is unrecognized.</para>
    </returns>
  </member>
  <member name="Windows.PrjFreeAlignedBuffer">
    <summary>Frees an allocated buffer.</summary>
    <param name="buffer">The buffer to free.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjGetOnDiskFileState">
    <summary>Gets the on-disk file state for a file or directory.</summary>
    <param name="destinationFileName">A null-terminated Unicode string specifying the full path to the file whose state is to be queried.</param>
    <param name="fileState">This is a combination of one or more PRJ_FILE_STATE values describing the file state.</param>
    <returns>HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND) indicates destinationFileName does not exist. HRESULT_FROM_WIN32(ERROR_PATH_NOT_FOUND) indicates that an intermediate component of the path to destinationFileName does not exist.</returns>
  </member>
  <member name="Windows.PrjGetVirtualizationInstanceInfo">
    <summary>Retrieves information about the virtualization instance.</summary>
    <param name="namespaceVirtualizationContext">An opaque handle for the virtualization instance.</param>
    <param name="virtualizationInstanceInfo">On input points to a buffer to fill with information about the virtualization instance. On successful return the buffer is filled in.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjMarkDirectoryAsPlaceholder">
    <summary>Converts an existing directory to a directory placeholder.</summary>
    <param name="rootPathName">A null-terminated Unicode string specifying the full path to the virtualization root.</param>
    <param name="targetPathName">
      <para>A null-terminated Unicode string specifying the full path to the directory to convert to a placeholder.</para>
      <para>If this parameter is not specified or is an empty string, then this means the caller wants to designate rootPathName as the virtualization root. The provider only needs to do this one time, upon establishing a new virtualization instance.</para>
    </param>
    <param name="versionInfo">Optional version information for the target placeholder. The provider chooses what information to put in the <see cref="PRJ_PLACEHOLDER_VERSION_INFO" /> structure. If not specified, the placeholder gets zeros for its version information.</param>
    <param name="virtualizationInstanceID">A value that identifies the virtualization instance.</param>
    <returns>HRESULT_FROM_WIN32(ERROR_REPARSE_POINT_ENCOUNTERED) typically means the directory at targetPathName has a reparse point on it. HRESULT_FROM_WIN32(ERROR_DIRECTORY) typically means the targetPathName does not specify a directory.</returns>
  </member>
  <member name="Windows.PrjStartVirtualizing">
    <summary>Configures a ProjFS virtualization instance and starts it, making it available to service I/O and invoke callbacks on the provider.</summary>
    <param name="virtualizationRootPath">
      <para>Pointer to a null-terminated unicode string specifying the full path to the virtualization root directory.</para>
      <para>The provider must have called <see cref="PrjMarkDirectoryAsPlaceholder" /> passing the specified path as the rootPathName parameter and NULL as the targetPathName parameter before calling this routine. This only needs to be done once to designate the path as the virtualization root directory</para>
    </param>
    <param name="callbacks">Pointer to a <see cref="PRJ_CALLBACKS" /> structure that has been initialized with PrjCommandCallbacksInit and filled in with pointers to the provider's callback functions.</param>
    <param name="instanceContext">Pointer to context information defined by the provider for each instance. This parameter is optional and can be NULL. If it is specified, ProjFS will return it in the InstanceContext member of <see cref="PRJ_CALLBACK_DATA" /> when invoking provider callback routines.</param>
    <param name="options">An optional pointer to a <see cref="PRJ_STARTVIRTUALIZING_OPTIONS" />.</param>
    <param name="namespaceVirtualizationContext">On success returns an opaque handle to the ProjFS virtualization instance. The provider passes this value when calling functions that require a PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT as input.</param>
    <returns>The error, HRESULT_FROM_WIN32(ERROR_REPARSE_TAG_MISMATCH), indicates that virtualizationRootPath has not been configured as a virtualization root.</returns>
  </member>
  <member name="Windows.PrjStopVirtualizing">
    <summary>Stops a running ProjFS virtualization instance, making it unavailable to service I/O or involve callbacks on the provider.</summary>
    <param name="namespaceVirtualizationContext">An opaque handle for the virtualization instance.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjWriteFileData">
    <summary>Provides the data requested in an invocation of the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_file_data_cb">PRJ_GET_FILE_DATA_CB</a> callback.</summary>
    <param name="namespaceVirtualizationContext">
      <para>Opaque handle for the virtualization instance.</para>
      <para>If the provider is servicing a <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_file_data_cb">PRJ_GET_FILE_DATA_CB</a> callback, this must be the value from the VirtualizationInstanceHandle member of the callbackData passed to the provider in the callback.</para>
    </param>
    <param name="dataStreamId">
      <para>Identifier for the data stream to write to.</para>
      <para>If the provider is servicing a <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_file_data_cb">PRJ_GET_FILE_DATA_CB</a> callback, this must be the value from the DataStreamId member of the callbackData passed to the provider in the callback.</para>
    </param>
    <param name="buffer">Pointer to a buffer containing the data to write. The buffer must be at least as large as the value of the length parameter in bytes. The provider should use <see cref="PrjAllocateAlignedBuffer" /> to ensure that the buffer meets the storage device's alignment requirements.</param>
    <param name="byteOffset">Byte offset from the beginning of the file at which to write the data.</param>
    <param name="length">The number of bytes to write to the file.</param>
    <returns>HRESULT_FROM_WIN32(ERROR_OFFSET_ALIGNMENT_VIOLATION) indicates that the user's handle was opened for unbuffered I/O and byteOffset is not aligned to the sector size of the storage device.</returns>
  </member>
  <member name="Windows.PrjWritePlaceholderInfo">
    <summary>Sends file or directory metadata to ProjFS.</summary>
    <param name="namespaceVirtualizationContext">Opaque handle for the virtualization instance. This must be the value from the VirtualizationInstanceHandle member of the callbackData passed to the provider in the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback.</param>
    <param name="destinationFileName">
      <para>A null-terminated Unicode string specifying the path, relative to the virtualization root, to the file or directory for which to create a placeholder.</para>
      <para>This must be a match to the FilePathName member of the callbackData parameter passed to the provider in the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback. The provider should use the PrjFileNameCompare function to determine whether the two names match.</para>
      <para>For example, if the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback specifies “dir1\dir1\FILE.TXT” in callbackData-&gt;FilePathName, and the provider’s backing store contains a file called “File.txt” in the dir1\dir2 directory, and <see cref="PrjFileNameCompare" /> returns 0 when comparing the names “FILE.TXT” and “File.txt”, then the provider specifies “dir1\dir2\File.txt” as the value of this parameter.</para>
    </param>
    <param name="placeholderInfo">A pointer to the metadata for the file or directory.</param>
    <param name="placeholderInfoSize">Size in bytes of the buffer pointed to by placeholderInfo.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PrjWritePlaceholderInfo2">
    <summary>Sends file or directory metadata to ProjFS and allows the caller to specify extended information.</summary>
    <param name="namespaceVirtualizationContext">Opaque handle for the virtualization instance. This must be the value from the VirtualizationInstanceHandle member of the callbackData passed to the provider in the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback.</param>
    <param name="destinationFileName">
      <para>A null-terminated Unicode string specifying the path, relative to the virtualization root, to the file or directory for which to create a placeholder.</para>
      <para>This must be a match to the FilePathName member of the callbackData parameter passed to the provider in the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback. The provider should use the PrjFileNameCompare function to determine whether the two names match.</para>
      <para>For example, if the <a href="https://docs.microsoft.com//windows/desktop/api/projectedfslib/nc-projectedfslib-prj_get_placeholder_info_cb">PRJ_GET_PLACEHOLDER_INFO_CB</a> callback specifies “dir1\dir1\FILE.TXT” in callbackData-&gt;FilePathName, and the provider’s backing store contains a file called “File.txt” in the dir1\dir2 directory, and <see cref="PrjFileNameCompare" /> returns 0 when comparing the names “FILE.TXT” and “File.txt”, then the provider specifies “dir1\dir2\File.txt” as the value of this parameter.</para>
    </param>
    <param name="placeholderInfo">A pointer to the metadata for the file or directory.</param>
    <param name="placeholderInfoSize">Size in bytes of the buffer pointed to by placeholderInfo.</param>
    <param name="extendedInfo">A pointer to a <see cref="PRJ_EXTENDED_INFO" /> struct specifying extended information about the placeholder to be created.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
</doc>