<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AuditComputeEffectivePolicyBySid">
    <summary>The <b>AuditComputeEffectivePolicyBySid</b> function computes the effective audit policy for one or more subcategories for the specified security principal. The function computes effective audit policy by combining system audit policy with per-user policy.</summary>
    <param name="pSid">A pointer to the <see cref="SID" /> structure associated with the principal for which to compute effective audit policy. Per-user policy for group SIDs is not currently supported.</param>
    <param name="pSubCategoryGuids">A pointer to an array of <b>GUID</b> values that specify the subcategories for which to compute effective audit policy. For a list of defined subcategories, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/auditing-constants">Auditing Constants</a>.</param>
    <param name="dwPolicyCount">The number of elements in each of the <i>pSubCategoryGuids</i> and <i>ppAuditPolicy</i> arrays.</param>
    <param name="ppAuditPolicy">
      <para>A pointer to a single buffer that contains both an array of pointers to <see cref="AUDIT_POLICY_INFORMATION" /> structures and the structures themselves. The <b>AUDIT_POLICY_INFORMATION</b> structures specify the effective audit policy for the subcategories specified by the <i>pSubCategoryGuids</i> array.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87 (0x57)</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>No per-user audit policy exists for the principal specified by the <i>pSid</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditComputeEffectivePolicyByToken">
    <summary>The <b>AuditComputeEffectivePolicyByToken</b> function computes the effective audit policy for one or more subcategories for the security principal associated with the specified token. The function computes effective audit policy by combining system audit policy with per-user policy.</summary>
    <param name="hTokenHandle">A handle to the access token associated with the principal for which to compute effective audit policy. The token must have been opened with <b>TOKEN_QUERY</b> access. Per-user policy for group SIDs is not currently supported.</param>
    <param name="pSubCategoryGuids">A pointer to an array of <b>GUID</b> values that specify the subcategories for which to compute effective audit policy. For a list of defined subcategories, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/auditing-constants">Auditing Constants</a>.</param>
    <param name="dwPolicyCount">The number of elements in each of the <i>pSubCategoryGuids</i> and <i>ppAuditPolicy</i> arrays.</param>
    <param name="ppAuditPolicy">
      <para>A pointer to a single buffer that contains both an array of pointers to <see cref="AUDIT_POLICY_INFORMATION" /> structures and the structures themselves. The <b>AUDIT_POLICY_INFORMATION</b> structures specify the effective audit policy for the subcategories specified by the <i>pSubCategoryGuids</i> array.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2 (0x2)</term>
              </listheader>
            </list>
          </description>
          <description>No per-user audit policy exists for the principal specified by the <i>pSid</i> parameter.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditEnumerateCategories">
    <summary>The <b>AuditEnumerateCategories</b> function enumerates the available audit-policy categories.</summary>
    <param name="ppAuditCategoriesArray">
      <para>A pointer to a single buffer that contains both an array of pointers to <b>GUID</b> structures and the structures themselves. The <b>GUID</b> structures specify the audit-policy categories available on the computer.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <param name="pdwCountReturned">A pointer to the number of elements in the <i>ppAuditCategoriesArray</i> array.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditEnumeratePerUserPolicy">
    <summary>The <b>AuditEnumeratePerUserPolicy</b> function enumerates users for whom per-user auditing policy is specified.</summary>
    <param name="ppAuditSidArray">
      <para>A pointer to a single buffer that contains both an array of pointers to <see cref="POLICY_AUDIT_SID_ARRAY" /> structures and the structures themselves. The <b>POLICY_AUDIT_SID_ARRAY</b> structures specify the users for whom per-user audit policy is specified.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditEnumerateSubCategories">
    <summary>The <b>AuditEnumerateSubCategories</b> function enumerates the available audit-policy subcategories.</summary>
    <param name="pAuditCategoryGuid">The <b>GUID</b> of an audit-policy category for which subcategories are enumerated. If the value of the <i>bRetrieveAllSubCategories</i> parameter is <b>TRUE</b>, this parameter is ignored.</param>
    <param name="bRetrieveAllSubCategories">
      <b>TRUE</b> to enumerate all audit-policy subcategories; <b>FALSE</b> to enumerate only the subcategories of the audit-policy category specified by the <i>pAuditCategoryGuid</i> parameter.</param>
    <param name="ppAuditSubCategoriesArray">
      <para>A pointer to a single buffer that contains both an array of pointers to <b>GUID</b> structures and the structures themselves. The <b>GUID</b> structures specify the audit-policy subcategories available on the computer.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <param name="pdwCountReturned">A pointer to the number of audit-policy subcategories returned in the <i>ppAuditSubCategoriesArray</i> array.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditFree">
    <summary>The <b>AuditFree</b> function frees the memory allocated by audit functions for the specified buffer.</summary>
    <param name="Buffer">A pointer to the buffer to free.</param>
  </member>
  <member name="Windows.AuditLookupCategoryGuidFromCategoryId">
    <summary>The <b>AuditLookupCategoryGuidFromCategoryId</b> function retrieves a <b>GUID</b> structure that represents the specified audit-policy category.</summary>
    <param name="AuditCategoryId">An element of the <see cref="POLICY_AUDIT_EVENT_TYPE" /> enumeration that specifies an audit-policy category.</param>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that represents the audit-policy category specified by the <i>AuditCategoryId</i></param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryIdFromCategoryGuid">
    <summary>The <b>AuditLookupCategoryIdFromCategoryGuid</b> function retrieves an element of the <see cref="POLICY_AUDIT_EVENT_TYPE" /> enumeration that represents the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="pAuditCategoryId">A pointer to an element of the <see cref="POLICY_AUDIT_EVENT_TYPE" /> enumeration that represents the audit-policy category specified by the <i>pAuditCategoryGuid</i> parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryName">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryNameA">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryNameW">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryName">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryNameA">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupCategoryNameW">
    <summary>The <b>AuditLookupCategoryName</b> function retrieves the display name of the specified audit-policy category.</summary>
    <param name="pAuditCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy category.</param>
    <param name="ppszCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the <i>pAuditCategoryGuid</i> function.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryName">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryNameA">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryNameW">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryName">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryNameA">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditLookupSubCategoryNameW">
    <summary>The <b>AuditLookupSubCategoryName</b> function retrieves the display name of the specified audit-policy subcategory.</summary>
    <param name="pAuditSubCategoryGuid">A pointer to a <b>GUID</b> structure that specifies an audit-policy subcategory.</param>
    <param name="ppszSubCategoryName">
      <para>The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the <i>pAuditSubCategoryGuid</i> parameter.</para>
      <para>When you have finished using this string, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSacl">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSaclA">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSaclW">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSacl">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSaclA">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryGlobalSaclW">
    <summary>The <b>AuditQueryGlobalSacl</b> function retrieves a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either "File" or "Key", depending on whether the object is a file or registry. This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure that contains the SACL information. This should be freed later by calling the <see cref="LocalFree" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQueryPerUserPolicy">
    <summary>The <b>AuditQueryPerUserPolicy</b> function retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.</summary>
    <param name="pSid">A pointer to the <see cref="SID" /> structure associated with the principal for which to query audit policy. Per-user policy for group SIDs is not currently supported.</param>
    <param name="pSubCategoryGuids">A pointer to an array of <b>GUID</b> values that specify the subcategories for which to query audit policy. For a list of defined audit-policy subcategories, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/auditing-constants">Auditing Constants</a>.</param>
    <param name="dwPolicyCount">The number of elements in each of the <i>pSubCategoryGuids</i> and <i>ppAuditPolicy</i> arrays.</param>
    <param name="ppAuditPolicy">
      <para>A pointer to a single buffer that contains both an array of pointers to <see cref="AUDIT_POLICY_INFORMATION" /> structures and the structures themselves. The <b>AUDIT_POLICY_INFORMATION</b> structures specify the per-user audit policy for the subcategories specified by the <i>pSubCategoryGuids</i> array.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>No per-user audit policy exists for the principal specified by the <i>pSid</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQuerySecurity">
    <summary>The <b>AuditQuerySecurity</b> function retrieves <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> that delegates access to audit policy.</summary>
    <param name="SecurityInformation">A <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that specifies which parts of the security descriptor this function sets. Only <b>SACL_SECURITY_INFORMATION</b> and <b>DACL_SECURITY_INFORMATION</b> are supported. Any other values are ignored. If neither <b>SACL_SECURITY_INFORMATION</b> nor <b>DACL_SECURITY_INFORMATION</b> is specified, this function fails and returns <b>ERROR_INVALID_PARAMETER</b>.</param>
    <param name="ppSecurityDescriptor">The address of a pointer to a well-formed <see cref="SECURITY_DESCRIPTOR" /> structure that controls access to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Audit security object</a>.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditQuerySystemPolicy">
    <summary>The <b>AuditQuerySystemPolicy</b> function retrieves system audit policy for one or more audit-policy subcategories.</summary>
    <param name="pSubCategoryGuids">A pointer to an array of <b>GUID</b> values that specify the subcategories for which to query audit policy. For a list of defined audit-policy subcategories, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/auditing-constants">Auditing Constants</a>.</param>
    <param name="dwPolicyCount">The number of elements in each of the <i>pSubCategoryGuids</i> and <i>ppAuditPolicy</i> arrays.</param>
    <param name="ppAuditPolicy">
      <para>A pointer to a single buffer that contains both an array of pointers to <see cref="AUDIT_POLICY_INFORMATION" /> structures and the structures themselves. The <b>AUDIT_POLICY_INFORMATION</b> structures specify the system audit policy for the subcategories specified by the <i>pSubCategoryGuids</i> array.</para>
      <para>When you have finished using this buffer, free it by calling the <see cref="AuditFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>No per-user audit policy exists for the principal specified by the <i>pSid</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSacl">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSaclA">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSaclW">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSacl">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSaclA">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetGlobalSaclW">
    <summary>The <b>AuditSetGlobalSacl</b> function sets a global <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) that delegates access to the audit messages. Updating the global SACL requires the <b>SeSecurityPrivilege</b> which protects the global SACL from being updated by any user without administrator privileges.</summary>
    <param name="ObjectTypeName">A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to "File" and for setting the global SACL on registry, this should be set to "Key". This string appears in any audit message that the function generates.</param>
    <param name="Acl">A pointer to an <see cref="ACL" /> structure.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetPerUserPolicy">
    <summary>The <b>AuditSetPerUserPolicy</b> function sets per-user audit policy in one or more audit subcategories for the specified principal.</summary>
    <param name="pSid">A pointer to the <see cref="SID" /> structure associated with the principal for which to set audit policy. Per-user policy for group SIDs is not currently supported.</param>
    <param name="pAuditPolicy">
      <para>A pointer to an array of <see cref="AUDIT_POLICY_INFORMATION" /> structures. Each structure specifies per-user audit policy for one audit subcategory.</para>
      <para>The <b>AuditCategoryGuid</b> member of these structures is ignored.</para>
    </param>
    <param name="dwPolicyCount">The number of elements in the <i>pAuditPolicy</i> array.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_SUCH_USER</b>
                </term>
              </listheader>
              <listheader>
                <term>1317</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure specified by the <i>pSID</i> parameter is not associated with an existing user.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetSecurity">
    <summary>The <b>AuditSetSecurity</b> function sets a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> that delegates access to audit policy.</summary>
    <param name="SecurityInformation">A <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that specifies which parts of the security descriptor this function sets. Only <b>SACL_SECURITY_INFORMATION</b> and <b>DACL_SECURITY_INFORMATION</b> are supported. Any other values are ignored. If neither <b>SACL_SECURITY_INFORMATION</b> nor <b>DACL_SECURITY_INFORMATION</b> is specified, this function fails and returns <b>ERROR_INVALID_PARAMETER</b>.</param>
    <param name="pSecurityDescriptor">A pointer to a well-formed <see cref="SECURITY_DESCRIPTOR" /> structure that controls access to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Audit security object</a>. If this parameter is <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_PARAMETER</b>.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.AuditSetSystemPolicy">
    <summary>The <b>AuditSetSystemPolicy</b> function sets system audit policy for one or more audit-policy subcategories.</summary>
    <param name="pAuditPolicy">
      <para>A pointer to an array of <see cref="AUDIT_POLICY_INFORMATION" /> structures. Each structure specifies system audit policy for one audit-policy subcategory.</para>
      <para>The <b>AuditCategoryGuid</b> member of these structures is ignored.</para>
    </param>
    <param name="dwPolicyCount">The number of elements in the <i>pAuditPolicy</i> array.</param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />. <b>GetLastError</b> may return one of the following error codes defined in WinError.h.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the privilege or access rights necessary to call this function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LsaAddAccountRights">
    <summary>The <b>LsaAddAccountRights</b> function assigns one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> to an account. If the account does not exist, <b>LsaAddAccountRights</b> creates it.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. If the account identified by the <i>AccountSid</i> parameter does not exist, the handle must have the POLICY_CREATE_ACCOUNT access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="AccountSid">Pointer to the SID of the account to which the function assigns <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a>.</param>
    <param name="UserRights">Pointer to an array of<see cref="LSA_UNICODE_STRING" /> structures. Each structure contains the name of a privilege to add to the account. For a list of privilege names, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a>.</param>
    <param name="CountOfRights">Specifies the number of elements in the <i>UserRights</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PRIVILEGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the privilege names is not valid.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaCallAuthenticationPackage">
    <summary>
      <para>The <b>LsaCallAuthenticationPackage</b> function is used by a logon application to communicate with an authentication package.</para>
      <para>This function is typically used to access services provided by the authentication package.</para>
    </summary>
    <param name="LsaHandle">A handle obtained from a previous call to<see cref="LsaRegisterLogonProcess" /> or<see cref="LsaConnectUntrusted" />.</param>
    <param name="AuthenticationPackage">Supplies the identifier of the authentication package. This value is obtained by calling<see cref="LsaLookupAuthenticationPackage" />.</param>
    <param name="ProtocolSubmitBuffer">
      <para>An authentication package–specific message buffer passed to the authentication package.</para>
      <para>For information about the format and content of this buffer, see the documentation for the individual authentication package.</para>
    </param>
    <param name="SubmitBufferLength">Indicates the length, in bytes, of the <i>ProtocolSubmitBuffer</i> buffer.</param>
    <param name="ProtocolReturnBuffer">
      <para>A pointer that receives the address of the buffer returned by the authentication package.</para>
      <para>For information about the format and content of this buffer, see the documentation for the individual authentication package.</para>
      <para>This buffer is allocated by this function. When you have finished using this buffer, free the memory by calling the <see cref="LsaFreeReturnBuffer" /> function.</para>
    </param>
    <param name="ReturnBufferLength">A pointer to a <b>ULONG</b> that receives the length of the returned buffer, in bytes.</param>
    <param name="ProtocolStatus">If the function succeeds, this parameter receives an <b>NTSTATUS</b> code that indicates the completion status of the authentication package.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS. Check the <i>ProtocolStatus</i> parameter to obtain the status returned by the authentication package.</para>
      <para>If the function fails, the return value is an <b>NTSTATUS</b> code. The following are possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_QUOTA_EXCEEDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call could not be completed because the client's memory quota is not sufficient to allocate the return buffer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified authentication package is not recognized by the LSA.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PKINIT_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The Kerberos client received a KDC certificate that is not valid. For device logon, strict KDC validation is required, so the KDC must have certificates that use the "Kerberos Authentication" template or equivalent. Also the KDC certificate could be expired, revoked, or the client is under active attack of sending requests to the wrong server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PKINIT_CLIENT_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The Kerberos client is using a system certificate that is not valid. For device logon, there must be a DNS name. Also, the system certificate could be expired or the wrong one could be selected.</description>
        </listheader>
      </list> <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><para>The<see cref="LsaNtStatusToWinError" /> function converts an <b>NTSTATUS</b> code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaClose">
    <summary>The <b>LsaClose</b> function closes a handle to a Policy or <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="ObjectHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object returned by the<see cref="LsaOpenPolicy" /> function or to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object returned by the<see cref="LsaOpenTrustedDomainByName" /> function. Following the completion of this call, the handle is no longer valid.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaConnectUntrusted">
    <summary>The <b>LsaConnectUntrusted</b> function establishes an untrusted connection to the LSA server.</summary>
    <param name="LsaHandle">Pointer to a handle that receives the connection handle, which must be provided in future authentication services.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>The<see cref="LsaNtStatusToWinError" /> function converts an NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaCreateTrustedDomainEx">
    <summary>The <b>LsaCreateTrustedDomainEx</b> function establishes a new trusted domain by creating a new <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. For the object to be created, the caller must have permission to create children on the <b>System</b> container. For information about policy object handles, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainInformation">Pointer to a<see cref="TRUSTED_DOMAIN_INFORMATION_EX" /> structure that contains the name and SID of the new trusted domain.</param>
    <param name="AuthenticationInformation">Pointer to a<see cref="TRUSTED_DOMAIN_AUTH_INFORMATION" /> structure that contains authentication information for the new trusted domain.</param>
    <param name="DesiredAccess">An<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that specifies the accesses to be granted for the new trusted domain.</param>
    <param name="TrustedDomainHandle">
      <para>Receives the LSA policy handle of the remote trusted domain. You can pass this handle into LSA function calls to manage the LSA policy of the trusted domain.</para>
      <para>When your application no longer needs this handle, it should call<see cref="LsaClose" /> to delete the handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> code, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_DIRECTORY_SERVICE_REQUIRED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description> The target system (specified in the <i>TrustedDomainInformation</i> parameter) for the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object is not a domain controller.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_SID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified SID is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_UNSUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to determine whether the target system is a domain controller.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaDeleteTrustedDomain">
    <summary>The <b>LsaDeleteTrustedDomain</b> function removes a trusted domain from the list of trusted domains for a system and deletes the associated <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainSid">Pointer to the SID of the trusted domain to be removed.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaDeregisterLogonProcess">
    <summary>The <b>LsaDeregisterLogonProcess</b> function deletes the caller's logon application context and closes the connection to the LSA server.</summary>
    <param name="LsaHandle">Handle obtained from a<see cref="LsaRegisterLogonProcess" /> or<see cref="LsaConnectUntrusted" /> call.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>The<see cref="LsaNtStatusToWinError" /> function converts an NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaEnumerateAccountRights">
    <summary>The <b>LsaEnumerateAccountRights</b> function enumerates the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> assigned to an account.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="AccountSid">Pointer to the SID of the account for which to enumerate privileges.</param>
    <param name="UserRights">
      <para>Receives a pointer to an array of<see cref="LSA_UNICODE_STRING" /> structures. Each structure contains the name of a privilege held by the account. For a list of privilege names, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a></para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />.</para>
    </param>
    <param name="CountOfRights">Pointer to a variable that receives the number of privileges in the <i>UserRights</i> array.</param>
    <returns>
      <para>If at least one account right is found, the function succeeds and returns STATUS_SUCCESS.</para>
      <para>If no account rights are found or if the function fails for any other reason, the function returns an NTSTATUS code such as FILE_NOT_FOUND. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. Use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaEnumerateAccountsWithUserRight">
    <summary>The <b>LsaEnumerateAccountsWithUserRight</b> function returns the accounts in the database of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Local Security Authority</a> (LSA) <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object that hold a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privilege</a>. The accounts returned by this function hold the specified privilege directly through the user account, not as part of membership to a group.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have POLICY_LOOKUP_NAMES and POLICY_VIEW_LOCAL_INFORMATION user rights. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="UserRight">
      <para>Pointer to an<see cref="LSA_UNICODE_STRING" /> structure that specifies the name of a privilege. For a list of privileges, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a> and Account Rights Constants.</para>
      <para>If this parameter is <b>NULL</b>, the function enumerates all accounts in the LSA database of the system associated with the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</para>
    </param>
    <param name="Buffer">
      <para>Pointer to a variable that receives a pointer to an array of<see cref="LSA_ENUMERATION_INFORMATION" /> structures. The <b>Sid</b> member of each structure is a pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of an account that holds the specified privilege.</para>
      <para>When you no longer need the information, free the memory by passing the returned pointer to the <see cref="LsaFreeMemory" /> function.</para>
    </param>
    <param name="CountReturned">Pointer to a variable that receives the number of entries returned in the <i>EnumerationBuffer</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> code, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PRIVILEGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The privilege string specified was not a valid privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_MORE_ENTRIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There were no accounts with the specified privilege.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaEnumerateLogonSessions">
    <summary>The <b>LsaEnumerateLogonSessions</b> function retrieves the set of existing logon session identifiers (<see cref="LUIDs" />) and the number of sessions.</summary>
    <param name="LogonSessionCount">Pointer to a long integer that receives the number of elements returned in the array returned in <i>LogonSessionList</i> parameter.</param>
    <param name="LogonSessionList">Address of a pointer to a LUID. The pointer receives the first element of an array of logon session identifiers. The memory used by the array is allocated by the LSA. When the array is no longer needed, call the<see cref="LSAFreeReturnBuffer" /> function to free it.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code indicating the reason.</para>
    </returns>
  </member>
  <member name="Windows.LsaEnumerateTrustedDomains">
    <summary>
      <para>The <b>LsaEnumerateTrustedDomains</b> function retrieves the names and SIDs of domains trusted to authenticate logon <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">credentials</a>. <b>LsaEnumerateTrustedDomains</b> is intended for use on systems running Windows NT 4.0 or earlier versions of Windows NT. Use<see cref="DsEnumerateDomainTrusts" /> for any other trust enumeration purpose. Specifically, <b>LsaEnumerateTrustedDomains</b> can only be used if one or more of the following is true:</para>
      <list type="bullet">
        <item>
          <description>The calling system is running Windows NT 4.0 or an earlier version of Windows NT.</description>
        </item>
        <item>
          <description>The target system (specified using the <i>PolicyHandle</i> parameter), is a domain controller running Windows NT 4.0 or an earlier version.</description>
        </item>
        <item>
          <description>The calling system is running Windows NT 4.0 or earlier version and is not a domain controller, and the target system is a domain controller in the calling system's domain. The target system can be running any version of Windows NT, including Windows 2000 and Windows XP.</description>
        </item>
      </list>
    </summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_VIEW_LOCAL_INFORMATION access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="EnumerationContext">Pointer to an enumeration handle that enables you to make multiple calls to enumerate all the trusted domains. On the first call to <b>LsaEnumerateTrustedDomains</b>, <i>EnumerationContext</i> must point to a variable that has been initialized to zero. On subsequent calls to <b>LsaEnumerateTrustedDomains</b>, <i>EnumerationContext</i> must point to the enumeration handle returned by the previous call.</param>
    <param name="Buffer">
      <para>Receives a pointer to an array of<see cref="LSA_TRUST_INFORMATION" /> structures that contain the names and SIDs of one or more trusted domains.</para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />.</para>
    </param>
    <param name="PreferedMaximumLength">Specifies the preferred maximum size, in bytes, of the returned buffer. This information is approximate; the actual number of bytes returned may be greater than this value.</param>
    <param name="CountReturned">Pointer to a variable that receives the number of elements returned in the <i>Buffer</i> parameter.</param>
    <returns>
      <para>If the function is successful, the return value is one of the following NTSTATUS values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The enumeration has been successfully completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_MORE_ENTRIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call was successful, but there are more trusted domains to be enumerated. Call <see cref="LsaEnumerateTrustedDomains" /> again, passing the value returned in the <i>EnumerationContext</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_MORE_ENTRIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no more trusted domains to enumerate.</description>
        </listheader>
      </list> <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaFreeMemory">
    <summary>The <b>LsaFreeMemory</b> function frees memory allocated for an output buffer by an LSA function call. LSA functions that return variable-length output buffers always allocate the buffer on behalf of the caller. The caller must free this memory by passing the returned buffer pointer to <b>LsaFreeMemory</b> when the memory is no longer required.</summary>
    <param name="Buffer">Pointer to memory buffer that was allocated by an LSA function call. If <b>LsaFreeMemory</b> is successful, this buffer is freed.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_UNSUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Memory could not be freed because it was not allocated by an LSA function call.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaFreeReturnBuffer">
    <summary>The <b>LsaFreeReturnBuffer</b> function frees the memory used by a buffer previously allocated by the LSA.</summary>
    <param name="Buffer">Pointer to the buffer to be freed.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>The<see cref="LsaNtStatusToWinError" /> function converts an NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaGetLogonSessionData">
    <summary>
      <para>The <b>LsaGetLogonSessionData</b> function retrieves information about a specified logon session.</para>
      <para>To retrieve information about a logon session, the caller must be the owner of the session or a local system administrator.</para>
    </summary>
    <param name="LogonId">Specifies a pointer to a <b>LUID</b> that identifies the logon session whose information will be retrieved. For information about valid values for this parameter, see Remarks.</param>
    <param name="ppLogonSessionData">Address of a pointer to a<see cref="SECURITY_LOGON_SESSION_DATA" /> structure containing information on the logon session specified by <i>LogonId</i>. This structure is allocated by the LSA. When the information is no longer needed, call the<see cref="LsaFreeReturnBuffer" /> function to free the memory used by this structure.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an <b>NTSTATUS</b> code indicating the reason.</para>
    </returns>
  </member>
  <member name="Windows.LsaLogonUser">
    <summary>
      <para>The <b>LsaLogonUser</b> function authenticates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security principal's</a> logon data by using stored credentials information.</para>
      <para>If the authentication is successful, this function creates a new logon session and returns a user token.</para>
      <para>When a new ticket granting ticket (TGT) is obtained by using new certificate credentials, then all of the system's TGTs and service tickets are purged. Any user service tickets that are of a compound identity are also purged.</para>
    </summary>
    <param name="LsaHandle">
      <para>A handle obtained from a previous call to<see cref="LsaRegisterLogonProcess" />.</para>
      <para>The caller is required to have <b>SeTcbPrivilege</b> only if one or more of the following is true:</para>
      <list type="bullet">
        <item>
          <description>A Subauthentication package is used.</description>
        </item>
        <item>
          <description>
            <see cref="KERB_S4U_LOGON" /> is used, and the caller requests an impersonation token.</description>
        </item>
        <item>
          <description>The <i>LocalGroups</i> parameter is not <b>NULL</b>.</description>
        </item>
      </list> If <b>SeTcbPrivilege</b> is not required, call <see cref="LsaConnectUntrusted" /> to obtain the handle.</param>
    <param name="OriginName">A string that identifies the origin of the logon attempt. For more information, see Remarks.</param>
    <param name="LogonType">A value of the <see cref="SECURITY_LOGON_TYPE" /> enumeration that specifies the type of logon requested. If <i>LogonType</i> is Interactive or Batch, a primary token is generated to represent the new user. If <i>LogonType</i> is Network, an impersonation token is generated.</param>
    <param name="AuthenticationPackage">An identifier of the authentication package to use for the authentication. You can obtain this value by calling<see cref="LsaLookupAuthenticationPackage" />.</param>
    <param name="AuthenticationInformation">
      <para>A pointer to an input buffer that contains authentication information, such as user name and password. The format and content of this buffer are determined by the authentication package.</para>
      <para>This parameter can be one of the following input buffer structures for the MSV1_0 and Kerberos authentication packages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="MSV1_0_INTERACTIVE_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating an interactive user logon.<para>The <b>LogonDomainName</b>, <b>UserName</b>, and <b>Password</b> members of the <see cref="MSV1_0_INTERACTIVE_LOGON" /> structure must point to buffers in memory that are contiguous to the structure itself. The value of the <i>AuthenticationInformationLength</i> parameter must take into account the length of these buffers.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_INTERACTIVE_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating an interactive user logon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_TICKET_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user on initial network logon or disconnect.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_TICKET_UNLOCK_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user on ticket refresh, a variation of the normal workstation unlock logon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_CERTIFICATE_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user using an interactive smart card logon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_CERTIFICATE_S4U_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user using a service for user (S4U) logon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_CERTIFICATE_UNLOCK_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user to unlock a workstation that has been locked during an interactive smart card logon session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_SMARTCARD_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user smart card logon using LOGON32_PROVIDER_WINNT50 or LOGON32_PROVIDER_DEFAULT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_SMARTCARD_UNLOCK_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user to unlock a workstation that has been locked during a smart card logon session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="KERB_S4U_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user using S4U client requests. For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">constrained delegation</a>, a call to LsaLogonUser is not necessary if the client logged on using an LSA-mode authentication package. On Windows operating systems, these include <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/microsoft-kerberos">Kerberos</a>, <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/microsoft-ntlm">NTLM</a>, <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/secure-channel">Secure Channel</a>, and <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/microsoft-digest-ssp">Digest</a>. For this call to succeed, the following must be true:<list type="bullet"><item><description>The caller must be a domain account (this includes LOCAL_SYSTEM if the computer is a domain member).</description></item><item><description>If using a service account, the account must have <b>SeTcbPrivilege</b> set on the local computer to get an impersonation token. Otherwise, the identity token is used.</description></item><item><description>The caller must be a member of the <b>Pre-Windows 2000 Compatible Access</b> or have read access to the group memberships of the client. Membership in the Windows Authorization Access group guarantees read access to group membership of the client. For information about how to configure the Windows Authorization Access group, see the Microsoft Knowledge Base.</description></item></list>The <b>ClientUpn</b> and <b>ClientRealm</b> members of the <see cref="KERB_S4U_LOGON" /> structure must point to buffers in memory that are contiguous to the structure itself. The value of the <i>AuthenticationInformationLength</i> parameter must take into account the length of these buffers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="MSV1_0_LM20_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>Processing the second half of an NTLM 2.0 protocol logon. The first half of this type of logon is performed by calling <see cref="LsaCallAuthenticationPackage" /> with the <b>MsV1_0Lm20ChallengeRequest</b> message. For more information, see the description of <b>MsV1_0Lm20ChallengeRequest</b> in <see cref="MSV1_0_PROTOCOL_MESSAGE_TYPE" />.<para>This type of logon can use a subauthentication package.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <see cref="MSV1_0_SUBAUTH_LOGON" />
                  </b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>Authenticating a user with subauthentication.</description>
        </listheader>
      </list> <para>For more information about the buffer used by other authentication packages, see the documentation for those authentication packages.</para></param>
    <param name="AuthenticationInformationLength">The length, in bytes, of the <i>AuthenticationInformation</i> buffer.</param>
    <param name="LocalGroups">A list of additional group identifiers to add to the token of the authenticated user. These group identifiers will be added, along with the default group WORLD and the logon type group (Interactive, Batch, or Network), which are automatically included in every user token.</param>
    <param name="SourceContext">A <see cref="TOKEN_SOURCE" /> structure that identifies the source module—for example, the session manager—and the context that may be useful to that module. This information is included in the user token and can be retrieved by calling<see cref="GetTokenInformation" />.</param>
    <param name="ProfileBuffer">
      <para>A pointer to a void pointer that receives the address of an output buffer that contains authentication information, such as the logon shell and home directory.</para>
      <para>This parameter can be one of the following output buffer structures for the MSV1_0 and Kerberos authentication packages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSV1_0_INTERACTIVE_PROFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>An interactive user's logon profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KERB_TICKET_PROFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>Kerberos</term>
              </listheader>
            </list>
          </description>
          <description>Logon, disconnect, and ticket refresh authentication output.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSV1_0_LM20_LOGON</b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>Output when processing the second half of a NTLM 2.0 protocol logon.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSV1_0_LM20_LOGON_PROFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>MSV1_0</term>
              </listheader>
            </list>
          </description>
          <description>Output when using authentication with subauthentication.</description>
        </listheader>
      </list> <para>For more information about the buffer used by other authentication packages, see the documentation for that authentication package.</para><para>When this buffer is no longer needed, the calling application must free this buffer by calling the <see cref="LsaFreeReturnBuffer" /> function.</para></param>
    <param name="ProfileBufferLength">A pointer to a <b>ULONG</b> that receives the length, in bytes, of the returned profile buffer.</param>
    <param name="LogonId">A pointer to a buffer that receives an<see cref="LUID" /> that uniquely identifies the logon session. This <b>LUID</b> is assigned by the domain controller that authenticated the logon information.</param>
    <param name="Token">A pointer to a handle that receives the new user token created for this session. When you have finished using the token, release it by calling the <see cref="CloseHandle" /> function.</param>
    <param name="Quotas">When a primary token is returned, this parameter receives a<see cref="QUOTA_LIMITS" /> structure that contains the process quota limits assigned to the newly logged on user's initial process.</param>
    <param name="SubStatus">
      <para>If the logon failed due to account restrictions, this parameter receives information about why the logon failed. This value is set only if the account information of the user is valid and the logon is rejected.</para>
      <para>This parameter can be one of the following <i>SubStatus</i> values for the MSV1_0 authentication package.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_LOGON_HOURS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user account has time restrictions and cannot be used to log on at this time.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_WORKSTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user account has workstation restrictions and cannot be used to log on from the current workstation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PASSWORD_EXPIRED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user-account password has expired.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_ACCOUNT_DISABLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user account is currently disabled and cannot be used to log on.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> code, which can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_QUOTA_EXCEEDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller's memory quota is insufficient to allocate the output buffer returned by the authentication package.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_ACCOUNT_RESTRICTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user account and password are legitimate, but the user account has a restriction that prevents logon at this time. For more information, see the value stored in the <i>SubStatus</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_BAD_VALIDATION_CLASS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The authentication information provided is not recognized by the authentication package.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_LOGON_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The logon attempt failed. The reason for the failure is not specified, but typical reasons include misspelled user names and misspelled passwords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_LOGON_SERVERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No domain controllers are available to service the authentication request.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified authentication package is not recognized by the LSA.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PKINIT_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The Kerberos client received a KDC certificate that is not valid. For device logon, strict KDC validation is required, so the KDC must have certificates that use the "Kerberos Authentication" template or equivalent. Also, the KDC certificate could be expired, revoked, or the client is under active attack of sending requests to the wrong server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PKINIT_CLIENT_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The Kerberos client is using a system certificate that is not valid. For device logon, there must be a DNS name. Also, the system certificate could be expired or the wrong one could be selected.</description>
        </listheader>
      </list> <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><para>The<see cref="LsaNtStatusToWinError" /> function converts an <b>NTSTATUS</b> code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaLookupAuthenticationPackage">
    <summary>The <b>LsaLookupAuthenticationPackage</b> function obtains the unique identifier of an authentication package.</summary>
    <param name="LsaHandle">Handle obtained from a previous call to<see cref="LsaRegisterLogonProcess" /> or<see cref="LsaConnectUntrusted" />.</param>
    <param name="PackageName">
      <para>Pointer to an<see cref="LSA_STRING" /> structure that specifies the name of the authentication package. The package name must not exceed 127 bytes in length. The following table lists the names of the Microsoft-provided authentication packages.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSV1_0_PACKAGE_NAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>ANSI version of the MSV1_0 authentication package name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MICROSOFT_KERBEROS_NAME_A</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>ANSI version of the Kerberos authentication package name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NEGOSSP_NAME_A</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>ANSI version of the Negotiate authentication package name.</description>
        </listheader>
      </list>
    </param>
    <param name="AuthenticationPackage">Pointer to a <b>ULONG</b> that receives the authentication package identifier.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. The following are possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified authentication package is unknown to the LSA.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The authentication package name exceeds 127 bytes.</description>
        </listheader>
      </list> <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><para>The<see cref="LsaNtStatusToWinError" /> function converts an NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaLookupSids2">
    <summary>The <b>LsaLookupSids2</b> function looks up the names that correspond to an array of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifiers</a> (SIDs) and supports Internet provider identities. If <b>LsaLookupSids2</b> cannot find a name that corresponds to a SID, the function returns the SID in character form. You should use this function instead of the <see cref="LsaLookupSids" /> function.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. This handle must have the POLICY_LOOKUP_NAMES access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="LookupOptions">
      <para>Flags that modify the lookup behavior.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet SIDs from identity providers for connected accounts are disallowed. Connected accounts are those accounts which have a corresponding shadow account in the local SAM database connected to an online identity provider. For example, MicrosoftAccount is a connected account.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LSA_LOOKUP_PREFER_INTERNET_NAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description> Returns the internet names. Otherwise the NT4 style name (domain\username) is returned. The exception is if the Microsoft Account internet SID is specified, in which case the internet name is returned unless <b>LSA_LOOKUP_DISALLOW_NON_WINDOWS_INTERNET_SID</b> is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LSA_LOOKUP_RETURN_LOCAL_NAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Always returns local SAM account names even for Internet provider identities.</description>
        </listheader>
      </list>
    </param>
    <param name="Count">Specifies the number of SIDs in the <i>Sids</i> array. This is also the number of entries returned in the <i>Names</i> array. This value must be less than or equal to 20480.</param>
    <param name="Sids">Pointer to an array of SID pointers to look up. The SIDs can be well-known SIDs, user, group, or local group account SIDs, or domain SIDs.</param>
    <param name="ReferencedDomains">
      <para>Receives a pointer to a pointer to a <see cref="LSA_REFERENCED_DOMAIN_LIST" /> structure. The <b>Domains</b> member of this structure is an array that contains an entry for each domain in which a SID was found. The entry for each domain contains the SID and flat name of the domain. For Windows domains, the flat name is the NetBIOS name. For links with non–Windows domains, the flat name is the identifying name of that domain, or it is <b>NULL</b>.</para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />. This memory must be freed even when the function fails with the either of the error codes <b>STATUS_NONE_MAPPED</b> or <b>STATUS_SOME_NOT_MAPPED</b></para>
    </param>
    <param name="Names">
      <para>Receives a pointer to an array of<see cref="LSA_TRANSLATED_NAME" /> structures. Each entry in the <i>Names</i> array contains the name information for the corresponding entry in the <i>Sids</i> array. For account SIDs, the <b>Name</b> member of each structure contains the isolated name of the account. For domain SIDs, the <b>Name</b> member is not valid.</para>
      <para>The <b>DomainIndex</b> member of each entry in the <i>Names</i> array is the index of an entry in the <b>Domains</b> array returned in the <i>ReferencedDomains</i> parameter. The index identifies the <b>Domains</b> array for the domain in which the SID was found.</para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />. This memory must be freed even when the function fails with the either of the error codes <b>STATUS_NONE_MAPPED</b> or <b>STATUS_SOME_NOT_MAPPED</b></para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is one of the following <b>NTSTATUS</b> values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_SOME_NOT_MAPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Some of the SIDs could not be translated. This is an informational-level return value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All of the SIDs were found and successfully translated.</description>
        </listheader>
      </list> <para>If the function fails, the return value is an <b>NTSTATUS</b> code, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><list type="table"><listheader><description>Return code</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>STATUS_NONE_MAPPED</b></term></listheader></list></description><description>None of the SIDs were translated. This is an error-level return value.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>STATUS_TOO_MANY_SIDS</b></term></listheader><listheader></listheader></list></description><description>The Sids array parameter was too large.</description></listheader></list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaNtStatusToWinError">
    <summary>The <b>LsaNtStatusToWinError</b> function converts an NTSTATUS code returned by an LSA function to a Windows error code.</summary>
    <param name="Status">An NTSTATUS code returned by an LSA function call. This value will be converted to a<a href="https://docs.microsoft.com//windows/desktop/Debug/system-error-codes">System error code</a>.</param>
    <returns>The return value is the Windows error code that corresponds to the <i>Status</i> parameter. If there is no corresponding Windows error code, the return value is ERROR_MR_MID_NOT_FOUND.</returns>
  </member>
  <member name="Windows.LsaOpenPolicy">
    <summary>
      <para>The <b>LsaOpenPolicy</b> function opens a handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object on a local or remote system.</para>
      <para>You must run the process "As Administrator" so that the call doesn't fail with ERROR_ACCESS_DENIED.</para>
    </summary>
    <param name="SystemName">A pointer to an<see cref="LSA_UNICODE_STRING" /> structure that contains the name of the target system. The name can have the form "<i>ComputerName</i>" or "\\<i>ComputerName</i>". If this parameter is <b>NULL</b>, the function opens the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object on the local system.</param>
    <param name="ObjectAttributes">A pointer to an<see cref="LSA_OBJECT_ATTRIBUTES" /> structure that specifies the connection attributes. The structure members are not used; initialize them to <b>NULL</b> or zero.</param>
    <param name="DesiredAccess">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> that specifies the requested access rights. The function fails if the DACL of the target system does not allow the caller the requested access. To determine the access rights that you need, see the documentation for the LSA functions with which you want to use the policy handle.</param>
    <param name="PolicyHandle">
      <para>A pointer to an<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/lsa-handle">LSA_HANDLE</a> variable that receives a handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</para>
      <para>When you no longer need this handle, pass it to the<see cref="LsaClose" /> function to close it.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaOpenTrustedDomainByName">
    <summary>The <b>LsaOpenTrustedDomainByName</b> function opens the LSA policy handle of a remote trusted domain. You can pass this handle into LSA function calls in order to set or query the LSA policy of the remote machine.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. This is the policy handle of the local machine. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainName">Name of the trusted domain. This name can be either the flat name, or the Domain Name System (DNS) domain name.</param>
    <param name="DesiredAccess">An<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure that specifies the access permissions requested on the remote trusted domain object.</param>
    <param name="TrustedDomainHandle">
      <para>Pointer that receives the address of the LSA policy handle of the remote trusted domain. You can pass this handle into LSA function calls in order to query and manage the LSA policy of the remote machine.</para>
      <para>When your application no longer needs this handle, it should call<see cref="LsaClose" /> to delete the handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Caller does not have the appropriate access to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_OBJECT_NAME_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no Trusted Domain object in the target system's LSA Database having the specified name.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaQueryDomainInformationPolicy">
    <summary>The <b>LsaQueryDomainInformationPolicy</b> function retrieves domain information from the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object for the system.</param>
    <param name="InformationClass">
      <para>
        <see cref="POLICY_DOMAIN_INFORMATION_CLASS" /> enumeration that specifies the information to be returned from the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The following table shows the possible values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDomainEfsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The information is for <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">Encrypting File System</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDomainKerberosTicketInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The information is for a Kerberos ticket.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">Pointer to a buffer that receives the requested information.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INTERNAL_DB_CORRUPTION</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The policy database is corrupt. The returned policy information is not valid for the given class.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LsaQueryForestTrustInformation">
    <summary>The <b>LsaQueryForestTrustInformation</b> function retrieves forest trust information for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Local Security Authority</a> <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object for the system.</param>
    <param name="TrustedDomainName">Pointer to an <see cref="LSA_UNICODE_STRING" /> structure that contains the name of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object for which to retrieve forest trust information.</param>
    <param name="ForestTrustInfo">Pointer to an <see cref="LSA_FOREST_TRUST_INFORMATION" /> structure that returns the forest trust information for the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object specified by the <i>TrustedDomainName</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be one of the following values or one of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_DOMAIN_ROLE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The operation is legal only on the primary domain controller.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_DOMAIN_STATE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The operation is legal only on domain controllers in the root domain.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_DOMAIN</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The specified <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NOT_FOUND</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The specified <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object does not contain forest trust information.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LsaQueryInformationPolicy">
    <summary>The <b>LsaQueryInformationPolicy</b> function retrieves information about a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The required access rights for this handle depend on the value of the <i>InformationClass</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="InformationClass">
      <para>Specifies one of the following values from the<see cref="POLICY_INFORMATION_CLASS" /> enumeration type. The value indicates the type of information to retrieve.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyAuditEventsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the system's auditing rules. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_AUDIT_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_AUDIT_EVENTS_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyPrimaryDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the name and SID of the system's primary domain. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_LOCAL_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_PRIMARY_DOMAIN_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyAccountDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the name and SID of the system's account domain. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_LOCAL_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_ACCOUNT_DOMAIN_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyLsaServerRoleInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the role of an LSA server. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_LOCAL_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_LSA_SERVER_ROLE_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyModificationInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves information about the creation time and last modification of the LSA database. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_LOCAL_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_MODIFICATION_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDnsDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the Domain Name System (DNS) information about the primary domain associated with the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_VIEW_LOCAL_INFORMATION access right. The <i>Buffer</i> parameter receives a pointer to a <see cref="POLICY_DNS_DOMAIN_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">
      <para>Pointer to a variable that receives a pointer to a structure containing the requested information. The type of structure depends on the value of the <i>InformationClass</i> parameter.</para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />.</para>
    </param>
    <returns>
      <para>If the <b>LsaQueryInformationPolicy</b> function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaQueryTrustedDomainInfo">
    <summary>The <b>LsaQueryTrustedDomainInfo</b> function retrieves information about a trusted domain.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object of a domain controller that has a trust relationship with the domain identified by the <i>TrustedDomainSid</i> parameter. The handle must have the POLICY_VIEW_LOCAL_INFORMATION access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainSid">Pointer to the SID of the trusted domain to query.</param>
    <param name="InformationClass">
      <para>Specifies one of the following values from the<see cref="TRUSTED_INFORMATION_CLASS" /> enumeration type. The value indicates the type of information being requested.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainNameInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the name of the trusted domain. The <i>Buffer</i> parameter receives a pointer to a <see cref="TRUSTED_DOMAIN_NAME_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPosixOffsetInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the value used to generate Posix user and group identifiers for the trusted domain. The <i>Buffer</i> parameter receives a pointer to a <see cref="TRUSTED_POSIX_OFFSET_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPasswordInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the password for the trusted domain. The <i>Buffer</i> parameter receives a pointer to a <see cref="TRUSTED_PASSWORD_INFO" /> structure. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_GET_PRIVATE_INFORMATION access right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainInformationEx</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves extended information for the trusted domain. The <i>Buffer</i> parameter receives a pointer to a <see cref="TRUSTED_DOMAIN_INFORMATION_EX" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainInformationBasic</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainFullInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves complete information for the trusted domain. This information includes the Posix offset information, authentication information, and the extended information returned for the TrustedDomainInformationEx value. The <i>Buffer</i> parameter receives a pointer to a <see cref="TRUSTED_DOMAIN_FULL_INFORMATION" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">
      <para>A pointer to a buffer that receives a pointer to a structure that contains the requested information. The type of structure depends on the value of the <i>InformationClass</i> parameter.</para>
      <para>When you have finished using the information, free the returned pointer by passing it to<see cref="LsaFreeMemory" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> value that indicates the error. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> value to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaQueryTrustedDomainInfoByName">
    <summary>The <b>LsaQueryTrustedDomainInfoByName</b> function returns information about a trusted domain.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. This handle must have the POLICY_VIEW_LOCAL_INFORMATION access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainName">String that contains the name of the trusted domain. This can either be the domain name or the flat name.</param>
    <param name="InformationClass">
      <para>Specifies the type of information to retrieve. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainNameInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Name of the trusted domain.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPosixInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Posix offset of the trusted domain.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPasswordInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the password on the outbound side of the trust.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainInformationBasic</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not supported. 							</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainInformationEx</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Extended trust information, including the basic information and DNS domain name, and attributes about the trust.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainFullInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Full information, including the Posix offset and the authentication information.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">
      <para>Receives a pointer to the returned buffer that contains the requested information. The format and content of this buffer depend on the information class. For example, if <i>InformationClass</i> is set to TrustedDomainInformationEx, <i>Buffer</i> receives a pointer to a<see cref="TRUSTED_DOMAIN_INFORMATION_EX" /> structure. For more information, see<see cref="TRUSTED_INFORMATION_CLASS" />.</para>
      <para>When you have finished using the buffer, free it by calling the <see cref="LsaFreeMemory" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> value, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Caller does not have the appropriate access to complete the operation. For a list of the required access types, see the description of the <i>InformationClass</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INSUFFICIENT_ RESOURCES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient system resources, such as memory, to complete the call.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> value to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaRegisterLogonProcess">
    <summary>The <b>LsaRegisterLogonProcess</b> function establishes a connection to the LSA server and verifies that the caller is a logon application.</summary>
    <param name="LogonProcessName">
      <para>Pointer to an<see cref="LSA_STRING" /> structure identifying the logon application. This should be a printable name suitable for display to administrators. For example, the Windows logon application might use the name "User32LogonProcess". This name is used by the LSA during auditing. <b>LsaRegisterLogonProcess</b> does not check whether the name is already in use.</para>
      <para>This string must not exceed 127 bytes.</para>
    </param>
    <param name="LsaHandle">Pointer that receives a handle used in future authentication function calls.</param>
    <param name="SecurityMode">The value returned is not meaningful and should be ignored.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. The following are possible error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_PORT_CONNECTION_REFUSED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have the SeTcbPrivilege privilege, which is required to call this function. <para>You can set this privilege by calling<see cref="LsaAddAccountRights" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified logon process name exceeds 127 bytes.</description>
        </listheader>
      </list> <para>For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para><para>The<see cref="LsaNtStatusToWinError" /> function converts an NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaRegisterPolicyChangeNotification">
    <summary>The <b>LsaRegisterPolicyChangeNotification</b> function registers an event handle with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">local security authority</a> (LSA). This event handle is signaled whenever the indicated LSA policy is modified.</summary>
    <param name="InformationClass">
      <para>A<see cref="POLICY_NOTIFICATION_INFORMATION_CLASS" /> value that specifies the type of policy changes about which your application will be notified. Specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyAuditEventsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Auditing policy changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyAccountDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Account domain information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyServerRoleInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Server role changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDomainEfsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>EFS policy information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDomainKerberosTicketInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Kerberos ticket policy information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDnsDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Domain Name System (DNS) information, name, or SID of the system's primary domain changes.</description>
        </listheader>
      </list>
    </param>
    <param name="NotificationEventHandle">A handle to an event obtained by calling the<see cref="CreateEvent" /> function. The event can be either named or unnamed.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaRemoveAccountRights">
    <summary>The <b>LsaRemoveAccountRights</b> function removes one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> from an account. You can specify the privileges to be removed, or you can set a flag to remove all privileges. When you remove all privileges, the function deletes the account. If you specify privileges not held by the account, the function ignores them.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="AccountSid">Pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the account from which the privileges are removed.</param>
    <param name="AllRights">If <b>TRUE</b>, the function removes all privileges and deletes the account. In this case, the function ignores the <i>UserRights</i> parameter. If <b>FALSE</b>, the function removes the privileges specified by the <i>UserRights</i> parameter.</param>
    <param name="UserRights">Pointer to an array of<see cref="LSA_UNICODE_STRING" /> structures. Each structure contains the name of a privilege to be removed from the account. For a list of privilege names, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a>.</param>
    <param name="CountOfRights">Specifies the number of elements in the <i>UserRights</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be one of the following values or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_NO_SUCH_PRIVILEGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the privilege names is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates the <i>UserRights</i> parameter was <b>NULL</b> and the <i>AllRights</i> parameter was <b>FALSE</b>.</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaRetrievePrivateData">
    <summary>Do not use the LSA private data functions. Instead, use the <see cref="CryptProtectData" /> and <see cref="CryptUnprotectData" /> functions.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_GET_PRIVATE_INFORMATION access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="KeyName">
      <para>Pointer to an<see cref="LSA_UNICODE_STRING" /> structure that contains the name of the key under which the private data is stored.</para>
      <para>To create a specialized object, add one of the following prefixes to the key name.</para>
      <list type="table">
        <listheader>
          <description>Prefix</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>L$</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>For local objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>G$</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>For global objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>M$</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>For computer objects.</description>
        </listheader>
      </list> <para>If you are not creating one of these specialized types, you do not need to specify a key name prefix. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/private-data-object">Private Data Object</a>.</para></param>
    <param name="PrivateData">
      <para>Pointer to a variable that receives a pointer to an <see cref="LSA_UNICODE_STRING" /> structure that contains the private data.</para>
      <para>When you no longer need the information, pass the returned pointer to<see cref="LsaFreeMemory" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns STATUS_SUCCESS.</para>
      <para>If the function fails, it returns an <b>NTSTATUS</b> value, which can be the following value or one of the<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_OBJECT_NAME_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No private data is stored under the name specified by the <i>KeyName</i> parameter. 							</description>
        </listheader>
      </list> <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the <b>NTSTATUS</b> value to a Windows error code.</para></returns>
  </member>
  <member name="Windows.LsaSetDomainInformationPolicy">
    <summary>The <b>LsaSetDomainInformationPolicy</b> function sets domain information to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object for the system.</param>
    <param name="InformationClass">
      <para>
        <see cref="POLICY_DOMAIN_INFORMATION_CLASS" /> enumeration that specifies the information to be set to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The following table shows the possible values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDomainEfsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The information is for <a href="https://docs.microsoft.com//windows/desktop/SecGloss/e-gly">Encrypting File System</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDomainKerberosTicketInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The information is for a Kerberos ticket.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">Pointer to a buffer that contains the information to set to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INTERNAL_DB_CORRUPTION</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The policy database is corrupt. The returned policy information is not valid for the given class.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LsaSetForestTrustInformation">
    <summary>The <b>LsaSetForestTrustInformation</b> function sets the forest trust information for a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">Local Security Authority</a> <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object for the system.</param>
    <param name="TrustedDomainName">Pointer to an <see cref="LSA_UNICODE_STRING" /> structure that contains the name of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object to which to set the forest trust information specified by the <i>ForestTrustInfo</i> parameter.</param>
    <param name="ForestTrustInfo">Pointer to an <see cref="LSA_FOREST_TRUST_INFORMATION" /> structure that contains the forest trust information to set to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object specified by the <i>TrustedDomainName</i> parameter.</param>
    <param name="CheckOnly">Boolean value that specifies whether changes to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object are persisted. If this value is <b>TRUE</b>, this function will check for collisions with the specified parameters but will not set the forest trust information specified by the <i>ForestTrustInfo</i> parameter to the <b>TrustedDomain</b> object specified by the <i>TrustedDomainName</i> parameter. If this value is <b>FALSE</b>, the forest trust information will be set to the <b>TrustedDomain</b> object.</param>
    <param name="CollisionInfo">Pointer to a pointer to an <see cref="LSA_FOREST_TRUST_COLLISION_INFORMATION" /> structure that returns information about any collisions that occurred.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code, which can be one of the following values or one of the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_DOMAIN_STATE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The operation is legal only on domain controllers in the root domain.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_INVALID_DOMAIN_ROLE</b>
                </term>
              </listheader>
              <listheader></listheader>
            </list>
          </description>
          <description>The operation is legal only on the primary domain controller.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LsaSetInformationPolicy">
    <summary>The <b>LsaSetInformationPolicy</b> function modifies information in a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The required access rights for this handle depend on the value of the <i>InformationClass</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="InformationClass">
      <para>Specifies one of the following values from the<see cref="POLICY_INFORMATION_CLASS" /> enumeration type. The value indicates the type of information to set.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyAuditEventsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the system's auditing rules. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_SET_AUDIT_REQUIREMENTS access right. The <i>Buffer</i> parameter must be a pointer to a <see cref="POLICY_AUDIT_EVENTS_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyPrimaryDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the name and SID of the system's primary domain. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_TRUST_ADMIN access right. The <i>Buffer</i> parameter must be a pointer to a <see cref="POLICY_PRIMARY_DOMAIN_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyAccountDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the name and SID of the system's account domain. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_TRUST_ADMIN access right. The <i>Buffer</i> parameter must be a pointer to a <see cref="POLICY_ACCOUNT_DOMAIN_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyDnsDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets Domain Name System (DNS) information about the primary domain associated with the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_TRUST_ADMIN access right. The <i>Buffer</i> parameter must be a pointer to a <see cref="POLICY_DNS_DOMAIN_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyLsaServerRoleInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the role of an LSA server. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_SERVER_ADMIN access right. The <i>Buffer</i> parameter must be a pointer to a <see cref="POLICY_LSA_SERVER_ROLE_INFO" /> structure.<para>Changing a server's role from primary to backup has no effect (although the function returns STATUS_SUCCESS). Changing a server's role from backup to primary requires extensive network operations and may be slow.</para></description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">Pointer to a structure containing the information to set. The type of structure depends on the value of the <i>InformationClass</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaSetTrustedDomainInfoByName">
    <summary>The <b>LsaSetTrustedDomainInfoByName</b> function sets values for a<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of the trusted domain object determines whether the caller's changes are accepted. For information about policy object handles, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainName">Name of the trusted domain to set values for. This can either be the domain name or the flat name.</param>
    <param name="InformationClass">
      <para>Specifies the type of information to set. Specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPosixInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Posix offset of the trusted domain.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainInformationEx</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Extended trust information, including the basic information and DNS domain name, and attributes about the trust.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainAuthInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Authentication information for the trust, including authentication information for both the inbound and outbound side of the trust (if it exists).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainFullInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Full information, including the Posix offset and the authentication information.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">Pointer to a structure that contains the information to set. The type of structure depends on the value of the <i>InformationClass</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see the "LSA Policy Function Return Values" section of <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">Security Management Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaSetTrustedDomainInformation">
    <summary>The <b>LsaSetTrustedDomainInformation</b> function modifies a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object's information about a trusted domain.</summary>
    <param name="PolicyHandle">A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object of a domain controller. The required user rights for this handle depend on the value of the <i>InformationClass</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="TrustedDomainSid">Pointer to the SID of the trusted domain whose information is modified. If the <i>InformationClass</i> parameter is set to TrustedDomainNameInformation, this parameter must point to the SID of the domain to add to the list of trusted domains.</param>
    <param name="InformationClass">
      <para>Specifies one of the following values from the<see cref="TRUSTED_INFORMATION_CLASS" /> enumeration type. The value indicates the type of information being set.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedDomainNameInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the specified domain is not in the list of trusted domains, the <b>LsaSetTrustedDomainInformation</b> function adds it. The <i>TrustedDomainSid</i> parameter must be the SID of the domain to add. The <i>Buffer</i> parameter must be a pointer to a <see cref="TRUSTED_DOMAIN_NAME_INFO" /> structure containing the name of the domain to add. <para>If the specified domain is already in the list of trusted domains, the function fails.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPosixOffsetInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the value used to generate Posix user and group identifiers. The <i>Buffer</i> parameter must be a pointer to a <see cref="TRUSTED_POSIX_OFFSET_INFO" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TrustedPasswordInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the password for the trusted domain. The <i>Buffer</i> parameter must be a pointer to a <see cref="TRUSTED_PASSWORD_INFO" /> structure containing the old and new passwords for the specified domain. The handle passed in the <i>PolicyHandle</i> parameter must have the POLICY_CREATE_SECRET access right. The old password string can be <b>NULL</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="Buffer">Pointer to a structure containing the information to set. The type of structure depends on the value of the <i>InformationClass</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaStorePrivateData">
    <summary>Do not use the LSA private data functions. Instead, use the <see cref="CryptProtectData" /> and <see cref="CryptUnprotectData" /> functions.</summary>
    <param name="PolicyHandle">A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_CREATE_SECRET access right if this is the first time data is being stored under the key specified by the <i>KeyName</i> parameter. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</param>
    <param name="KeyName">Pointer to an<see cref="LSA_UNICODE_STRING" /> structure containing the name of the key under which the private data is stored.</param>
    <param name="PrivateData">
      <para>Pointer to an <see cref="LSA_UNICODE_STRING" /> structure containing the private data to store. The function encrypts this data before storing it.</para>
      <para>If this parameter is <b>NULL</b>, the function deletes any private data stored under the key and deletes the key. Subsequent attempts to retrieve data from the key will return the STATUS_OBJECT_NAME_NOT_FOUND error code.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
  <member name="Windows.LsaUnregisterPolicyChangeNotification">
    <summary>The <b>LsaUnregisterPolicyChangeNotification</b> function disables a previously registered notification event.</summary>
    <param name="InformationClass">
      <para>A<see cref="POLICY_NOTIFICATION_INFORMATION_CLASS" /> value that specifies the policy changes that your application will stop receiving notifications for. Specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyAuditEventsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Auditing policy changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyAccountDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Account domain information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyServerRoleInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Server role changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDomainEfsInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>EFS policy information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDomainKerberosTicketInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Kerberos ticket policy information changes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PolicyNotifyDnsDomainInformation</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Domain Name System (DNS) information, name, or SID of the system's primary domain changes.</description>
        </listheader>
      </list>
    </param>
    <param name="NotificationEventHandle">A handle to the notification event to unregister.</param>
    <returns>
      <para>If the function succeeds, the return value is STATUS_SUCCESS.</para>
      <para>If the function fails, the return value is an NTSTATUS code. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>.</para>
      <para>You can use the<see cref="LsaNtStatusToWinError" /> function to convert the NTSTATUS code to a Windows error code.</para>
    </returns>
  </member>
</doc>