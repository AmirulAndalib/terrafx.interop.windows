<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AbortDoc">
    <summary>The <b>AbortDoc</b> function stops the current print job and erases everything drawn since the last call to the <see cref="StartDoc" /> function.</summary>
    <param name="hdc">Handle to the device context for the print job.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero.</para>
      <para>If the function fails, the return value is SP_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.AbortPath">
    <summary>The <b>AbortPath</b> function closes and discards any paths in the specified device context.</summary>
    <param name="hdc">Handle to the device context from which a path will be discarded.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.AddFontMemResourceEx">
    <summary>The <b>AddFontMemResourceEx</b> function adds the font resource from a memory image to the system.</summary>
    <param name="pFileView">A pointer to a font resource.</param>
    <param name="cjSize">The number of bytes in the font resource that is pointed to by <i>pbFont</i>.</param>
    <param name="pvResrved">Reserved. Must be 0.</param>
    <param name="pNumFonts">A pointer to a variable that specifies the number of fonts installed.</param>
    <returns>If the function succeeds, the return value specifies the handle to the font added. This handle uniquely identifies the fonts that were installed on the system. If the function fails, the return value is zero. No extended error information is available.</returns>
  </member>
  <member name="Windows.AddFontResource">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceA">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceW">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceEx">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceExA">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceExW">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceEx">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceExA">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceExW">
    <summary>The <b>AddFontResourceEx</b> function adds the font resource from the specified file to the system. Fonts added with the <b>AddFontResourceEx</b> function can be marked as private and not enumerable.</summary>
    <param name="name">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, point <i>lpszFileName</i> to a string with the file names separated by a | --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <param name="fl">
      <para>The characteristics of the font to be added to the system. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_PRIVATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that only the process that called the <b>AddFontResourceEx</b> function can use this font. When the font name matches a public font, the private font will be chosen. When the process terminates, the system will remove all fonts installed by the process with the <b>AddFontResourceEx</b> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FR_NOT_ENUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that no process, including the process that called the <b>AddFontResourceEx</b> function, can enumerate this font.</description>
        </listheader>
      </list>
    </param>
    <param name="res">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResource">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceA">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AddFontResourceW">
    <summary>
      <para>The <b>AddFontResource</b> function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.</para>
      <para>To mark a font as private or not enumerable, use the <see cref="AddFontResourceEx" /> function.</para>
    </summary>
    <param name="unnamedParam1">
      <para>A pointer to a null-terminated character string that contains a valid font file name. This parameter can specify any of the following files.</para>
      <list type="table">
        <listheader>
          <description>File Extension</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fon</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fnt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw bitmap font file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raw TrueType file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.ttc</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>East Asian Windows: TrueType font collection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.fot</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>TrueType resource file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.otf</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>PostScript OpenType font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.mmm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfb</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font bits file. It is used with a .pfm file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>.pfm</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Type 1 font metrics file. It is used with a .pfb file.</description>
        </listheader>
      </list> <para>To add a font whose information comes from several resource files, have <i>lpszFileName</i> point to a string with the file names separated by a "|" --for example, abcxxxxx.pfm | abcxxxxx.pfb.</para></param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of fonts added.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.AlphaBlend">
    <summary>The <b>AlphaBlend</b> function displays bitmaps that have transparent or semitransparent pixels.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xoriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yoriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="wDest">The width, in logical units, of the destination rectangle.</param>
    <param name="hDest">The height, in logical units, of the destination rectangle.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xoriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="yoriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="wSrc">The width, in logical units, of the source rectangle.</param>
    <param name="hSrc">The height, in logical units, of the source rectangle.</param>
    <param name="ftn">The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap, and format information for the source bitmap. The source and destination blend functions are currently limited to AC_SRC_OVER. See the <see cref="BLENDFUNCTION" /> and <see cref="EMRALPHABLEND" /> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.AngleArc">
    <summary>The <b>AngleArc</b> function draws a line segment and an arc. The line segment is drawn from the current position to the beginning of the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is defined by the given start and sweep angles.</summary>
    <param name="hdc">Handle to a device context.</param>
    <param name="x">Specifies the x-coordinate, in logical units, of the center of the circle.</param>
    <param name="y">Specifies the y-coordinate, in logical units, of the center of the circle.</param>
    <param name="r">Specifies the radius, in logical units, of the circle. This value must be positive.</param>
    <param name="StartAngle">Specifies the start angle, in degrees, relative to the x-axis.</param>
    <param name="SweepAngle">Specifies the sweep angle, in degrees, relative to the starting angle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.AnimatePalette">
    <summary>The <b>AnimatePalette</b> function replaces entries in the specified logical palette.</summary>
    <param name="hPal">A handle to the logical palette.</param>
    <param name="iStartIndex">The first logical palette entry to be replaced.</param>
    <param name="cEntries">The number of entries to be replaced.</param>
    <param name="ppe">A pointer to the first member in an array of <a href="https://docs.microsoft.com//previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures used to replace the current entries.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.Arc">
    <summary>The <b>Arc</b> function draws an elliptical arc.</summary>
    <param name="hdc">A handle to the device context where drawing takes place.</param>
    <param name="x1">The x-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
    <param name="y1">The y-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
    <param name="x2">The x-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
    <param name="y2">The y-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
    <param name="x3">The x-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc.</param>
    <param name="y3">The y-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc.</param>
    <param name="x4">The x-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc.</param>
    <param name="y4">The y-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc.</param>
    <returns>
      <para>If the arc is drawn, the return value is nonzero.</para>
      <para>If the arc is not drawn, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ArcTo">
    <summary>The <b>ArcTo</b> function draws an elliptical arc.</summary>
    <param name="hdc">A handle to the device context where drawing takes place.</param>
    <param name="left">The x-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
    <param name="top">The y-coordinate, in logical units, of the upper-left corner of the bounding rectangle.</param>
    <param name="right">The x-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
    <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the bounding rectangle.</param>
    <param name="xr1">The x-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc.</param>
    <param name="yr1">The y-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc.</param>
    <param name="xr2">The x-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc.</param>
    <param name="yr2">The y-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.BeginPath">
    <summary>The <b>BeginPath</b> function opens a path bracket in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.BitBlt">
    <summary>The <b>BitBlt</b> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.</summary>
    <param name="hdc">A handle to the destination device context.</param>
    <param name="x">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="y">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="cx">The width, in logical units, of the source and destination rectangles.</param>
    <param name="cy">The height, in logical units, of the source and the destination rectangles.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="x1">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="y1">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="rop">
      <para>A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color.</para>
      <para>The following list shows some common raster operation codes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLACKNESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CAPTUREBLT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes any windows that are layered on top of your window in the resulting image. By default, the image only contains your window. Note that this generally cannot be used for printing device contexts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DSTINVERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inverts the destination rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MERGECOPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges the colors of the source rectangle with the brush currently selected in <i>hdcDest</i>, by using the Boolean AND operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MERGEPAINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NOMIRRORBITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents the bitmap from being mirrored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NOTSRCCOPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the inverted source rectangle to the destination.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NOTSRCERASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATCOPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the brush currently selected in <i>hdcDest</i>, into the destination bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATINVERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the brush currently selected in <i>hdcDest</i>, with the colors of the destination rectangle by using the Boolean XOR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATPAINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the brush currently selected in <i>hdcDest</i>, with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SRCAND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the source and destination rectangles by using the Boolean AND operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SRCCOPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the source rectangle directly to the destination rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SRCERASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SRCINVERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the source and destination rectangles by using the Boolean XOR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SRCPAINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the source and destination rectangles by using the Boolean OR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WHITENESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CancelDC">
    <summary>The <b>CancelDC</b> function cancels any pending operation on the specified device context (DC).</summary>
    <param name="hdc">A handle to the DC.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CheckColorsInGamut">
    <summary>The <b>CheckColorsInGamut</b> function determines whether a specified set of RGB triples lies in the output <a href="https://docs.microsoft.com//windows/win32/wcs/g">gamut</a> of a specified device. The RGB triples are interpreted in the input logical color space.</summary>
    <param name="hdc">Handle to the device context whose output gamut to be checked.</param>
    <param name="lpRGBTriple">Pointer to an array of RGB triples to check.</param>
    <param name="dlpBuffer">Pointer to the buffer in which the results are to be placed. This buffer must be at least as large as <i>nCount</i> bytes.</param>
    <param name="nCount">The number of elements in the array of triples.</param>
    <returns>
      <para>If this function succeeds, the return value is a nonzero value.</para>
      <para>If this function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ChoosePixelFormat">
    <summary>The <b>ChoosePixelFormat</b> function attempts to match an appropriate pixel format supported by a device context to a given pixel format specification.</summary>
    <param name="hdc">Specifies the device context that the function examines to determine the best match for the pixel format descriptor pointed to by <i>ppfd</i>.</param>
    <param name="ppfd">
      <para>Pointer to a <see cref="PIXELFORMATDESCRIPTOR" /> structure that specifies the requested pixel format. In this context, the members of the <b>PIXELFORMATDESCRIPTOR</b> structure that <i>ppfd</i> points to are used as follows:</para>
      <list type="table">
        <listheader>
          <description>
            <i>nSize</i>
          </description>
          <description>Specifies the size of the <see cref="PIXELFORMATDESCRIPTOR" /> data structure. Set this member to <code>sizeof(PIXELFORMATDESCRIPTOR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <i>nVersion</i>
          </description>
          <description>Specifies the version number of the <see cref="PIXELFORMATDESCRIPTOR" /> data structure. Set this member to 1.</description>
        </listheader>
        <listheader>
          <description>
            <i>dwFlags</i>
          </description>
          <description>A set of bit flags that specify properties of the pixel buffer. You can combine the following bit flag constants by using bitwise-OR. If any of the following flags are set, the <b>ChoosePixelFormat</b> function attempts to match pixel formats that also have that flag or flags set. Otherwise, <b>ChoosePixelFormat</b> ignores that flag in the pixel formats: <b>PFD_DRAW_TO_WINDOW</b>, <b>PFD_DRAW_TO_BITMAP</b>, <b>PFD_SUPPORT_GDI</b>, <b>PFD_SUPPORT_OPENGL</b> If any of the following flags are set, <b>ChoosePixelFormat</b> attempts to match pixel formats that also have that flag or flags set. Otherwise, it attempts to match pixel formats without that flag set: <b>PFD_DOUBLEBUFFER PFD_STEREO</b> If the following flag is set, the function ignores the <b>PFD_DOUBLEBUFFER</b> flag in the pixel formats: <b>PFD_DOUBLEBUFFER_DONTCARE</b> If the following flag is set, the function ignores the <b>PFD_STEREO</b> flag in the pixel formats: <b>PFD_STEREO_DONTCARE</b></description>
        </listheader>
        <listheader>
          <description>
            <i>iPixelType</i>
          </description>
          <description>Specifies the type of pixel format for the function to consider: <b>PFD_TYPE_RGBA</b>, <b>PFD_TYPE_COLORINDEX</b></description>
        </listheader>
        <listheader>
          <description>
            <i>cColorBits</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>cRedBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cRedShift</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cGreenBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cGreenShift</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cBlueBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cBlueShift</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAlphaBits</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAlphaShift</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAccumBits</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAccumRedBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAccumGreenBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAccumBlueBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAccumAlphaBits</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>cDepthBits</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>cStencilBits</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>cAuxBuffers</i>
          </description>
          <description>Zero or greater.</description>
        </listheader>
        <listheader>
          <description>
            <i>iLayerType</i>
          </description>
          <description>Specifies one of the following layer type values: <b>PFD_MAIN_PLANE</b>, <b>PFD_OVERLAY_PLANE</b>, <b>PFD_UNDERLAY_PLANE</b></description>
        </listheader>
        <listheader>
          <description>
            <i>bReserved</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>dwLayerMask</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>dwVisibleMask</i>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <i>dwDamageMask</i>
          </description>
          <description>Not used.</description>
        </listheader>
      </list> </param>
    <returns>
      <para>If the function succeeds, the return value is a pixel format index (one-based) that is the closest match to the given pixel format descriptor.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.Chord">
    <summary>The <b>Chord</b> function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). The chord is outlined by using the current pen and filled by using the current brush.</summary>
    <param name="hdc">A handle to the device context in which the chord appears.</param>
    <param name="x1">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="y1">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="x2">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <param name="y2">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <param name="x3">The x-coordinate, in logical coordinates, of the endpoint of the radial defining the beginning of the chord.</param>
    <param name="y3">The y-coordinate, in logical coordinates, of the endpoint of the radial defining the beginning of the chord.</param>
    <param name="x4">The x-coordinate, in logical coordinates, of the endpoint of the radial defining the end of the chord.</param>
    <param name="y4">The y-coordinate, in logical coordinates, of the endpoint of the radial defining the end of the chord.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CloseEnhMetaFile">
    <summary>The <b>CloseEnhMetaFile</b> function closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile.</summary>
    <param name="hdc">Handle to an enhanced-metafile device context.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to an enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CloseFigure">
    <summary>The <b>CloseFigure</b> function closes an open figure in a path.</summary>
    <param name="hdc">Handle to the device context in which the figure will be closed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CloseMetaFile">
    <summary>
      <para>The <b>CloseMetaFile</b> function closes a metafile device context and returns a handle that identifies a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CloseEnhMetaFile" />.</div>
    </summary>
    <param name="hdc">Handle to a metafile device context used to create a Windows-format metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CMYK">
    <summary>The <b>CMYK</b> macro creates a CMYK color value by combining the specified cyan, magenta, yellow, and black values.</summary>
    <param name="c">The cyan value for the color to be created.</param>
    <param name="m">The magenta value for the color to be created.</param>
    <param name="y">The yellow value for the color to be created.</param>
    <param name="k">The black value for the color to be created.</param>
  </member>
  <member name="Windows.ColorCorrectPalette">
    <summary>The <b>ColorCorrectPalette</b> function corrects the entries of a palette using the WCS 1.0 parameters in the specified device context.</summary>
    <param name="hdc">Specifies a device context whose WCS parameters to use.</param>
    <param name="hPal">Specifies the handle to the palette to be color corrected.</param>
    <param name="deFirst">Specifies the first entry in the palette to be color corrected.</param>
    <param name="num">Specifies the number of entries to color correct.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.ColorMatchToTarget">
    <summary>The <b>ColorMatchToTarget</b> function enables you to preview colors as they would appear on the target device.</summary>
    <param name="hdc">Specifies the device context for previewing, generally the screen.</param>
    <param name="hdcTarget">Specifies the target device context, generally a printer.</param>
    <param name="action">
      <para>A constant that can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CS_ENABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Map the colors to the target device's color gamut. This enables color proofing. All subsequent draw commands to the DC will render colors as they would appear on the target device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CS_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disable color proofing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CS_DELETE_TRANSFORM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If color management is enabled for the target profile, disable it and delete the concatenated transform.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.CombineRgn">
    <summary>The <b>CombineRgn</b> function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode.</summary>
    <param name="hrgnDst">A handle to a new region with dimensions defined by combining two other regions. (This region must exist before <b>CombineRgn</b> is called.)</param>
    <param name="hrgnSrc1">A handle to the first of two regions to be combined.</param>
    <param name="hrgnSrc2">A handle to the second of two regions to be combined.</param>
    <param name="iMode">
      <para>A mode indicating how the two regions will be combined. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_AND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates the intersection of the two combined regions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_COPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates a copy of the region identified by <i>hrgnSrc1</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_DIFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the parts of <i>hrgnSrc1</i> that are not part of <i>hrgnSrc2</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_OR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates the union of two combined regions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_XOR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Creates the union of two combined regions except for any overlapping areas.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value specifies the type of the resulting region. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is more than a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No region is created.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CombineTransform">
    <summary>The <b>CombineTransform</b> function concatenates two world-space to page-space transformations.</summary>
    <param name="lpxfOut">A pointer to an <see cref="XFORM" /> structure that receives the combined transformation.</param>
    <param name="lpxf1">A pointer to an <see cref="XFORM" /> structure that specifies the first transformation.</param>
    <param name="lpxf2">A pointer to an <see cref="XFORM" /> structure that specifies the second transformation.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFile">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFileA">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFileW">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFile">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFileA">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyEnhMetaFileW">
    <summary>The <b>CopyEnhMetaFile</b> function copies the contents of an enhanced-format metafile to a specified file.</summary>
    <param name="hEnh">A handle to the enhanced metafile to be copied.</param>
    <param name="lpFileName">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFile">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFileA">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFileW">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFile">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFileA">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CopyMetaFileW">
    <summary>
      <para>The <b>CopyMetaFile</b> function copies the content of a Windows-format metafile to the specified file.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CopyEnhMetaFile" />.</div>
    </summary>
    <param name="unnamedParam1">A handle to the source Windows-format metafile.</param>
    <param name="unnamedParam2">A pointer to the name of the destination file. If this parameter is <b>NULL</b>, the source metafile is copied to memory.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the copy of the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateBitmap">
    <summary>The <b>CreateBitmap</b> function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).</summary>
    <param name="nWidth">The bitmap width, in pixels.</param>
    <param name="nHeight">The bitmap height, in pixels.</param>
    <param name="nPlanes">The number of color planes used by the device.</param>
    <param name="nBitCount">The number of bits required to identify the color of a single pixel.</param>
    <param name="lpBits">
      <para>A pointer to an array of color data used to set the colors in a rectangle of pixels. Each scan line in the rectangle must be word aligned (scan lines that are not word aligned must be padded with zeros). The buffer size expected, <i>cj</i>, can be calculated using the formula:</para>
      <code>cj = (((nWidth * nPlanes * nBitCount + 15) &gt;&gt; 4) &lt;&lt; 1) * nHeight;</code>
      <para>If this parameter is <b>NULL</b>, then the contents of the new bitmap are undefined.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a bitmap.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
      <para>This function can return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The calculated size of the bitmap is less than zero.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateBitmapIndirect">
    <summary>The <b>CreateBitmapIndirect</b> function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).</summary>
    <param name="pbm">A pointer to a <see cref="BITMAP" /> structure that contains information about the bitmap. If an application sets the <b>bmWidth</b> or <b>bmHeight</b> members to zero, <b>CreateBitmapIndirect</b> returns the handle to a 1-by-1 pixel, monochrome bitmap.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the bitmap.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The bitmap is too big for memory to be allocated.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateBrushIndirect">
    <summary>The <b>CreateBrushIndirect</b> function creates a logical brush that has the specified style, color, and pattern.</summary>
    <param name="plbrush">A pointer to a <see cref="LOGBRUSH" /> structure that contains information about the brush.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpace">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpaceA">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpaceW">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpace">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpaceA">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateColorSpaceW">
    <summary>The <b>CreateColorSpace</b> function creates a logical <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="lplcs">Pointer to the <see cref="LOGCOLORSPACE" /> data structure.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle that identifies a color space.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateCompatibleBitmap">
    <summary>The <b>CreateCompatibleBitmap</b> function creates a bitmap compatible with the device that is associated with the specified device context.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="cx">The bitmap width, in pixels.</param>
    <param name="cy">The bitmap height, in pixels.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the compatible bitmap (DDB).</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateCompatibleDC">
    <summary>The <b>CreateCompatibleDC</b> function creates a memory device context (DC) compatible with the specified device.</summary>
    <param name="hdc">A handle to an existing DC. If this handle is <b>NULL</b>, the function creates a memory DC compatible with the application's current screen.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a memory DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDC">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDCA">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDCW">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDC">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDCA">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDCW">
    <summary>The <b>CreateDC</b> function creates a device context (DC) for a device using the specified name.</summary>
    <param name="pwszDriver">A pointer to a null-terminated character string that specifies either DISPLAY or the name of a specific display device. For printing, we recommend that you pass <b>NULL</b> to <i>lpszDriver</i> because GDI ignores <i>lpszDriver</i> for printer devices.</param>
    <param name="pwszDevice">
      <para>A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</para>
      <para>To obtain valid names for displays, call <see cref="EnumDisplayDevices" />.</para>
      <para>If <i>lpszDriver</i> is DISPLAY or the device name of a specific display device, then <i>lpszDevice</i> must be <b>NULL</b> or that same device name. If <i>lpszDevice</i> is <b>NULL</b>, then a DC is created for the primary display device.</para>
      <para>If there are multiple monitors on the system, calling <code>CreateDC(TEXT("DISPLAY"),NULL,NULL,NULL)</code> will create a DC covering all the monitors.</para>
    </param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">
      <para>A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>pdm</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</para>
      <para>If <i>lpszDriver</i> is DISPLAY, <i>pdm</i> must be <b>NULL</b>; GDI then uses the display device's current <see cref="DEVMODE" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a DC for the specified device.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDIBitmap">
    <summary>The <b>CreateDIBitmap</b> function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="pbmih">
      <para>A pointer to a bitmap information header structure, <see cref="BITMAPV5HEADER" />.</para>
      <para>If <i>fdwInit</i> is CBM_INIT, the function uses the bitmap information header structure to obtain the desired width and height of the bitmap as well as other information. Note that a positive value for the height indicates a bottom-up DIB while a negative value for the height indicates a top-down DIB. Calling <b>CreateDIBitmap</b> with <i>fdwInit</i> as CBM_INIT is equivalent to calling the <see cref="CreateCompatibleBitmap" /> function to create a DDB in the format of the device and then calling the <see cref="SetDIBits" /> function to translate the DIB bits to the DDB.</para>
    </param>
    <param name="flInit">
      <para>Specifies how the system initializes the bitmap bits. The following value is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CBM_INIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, the system uses the data pointed to by the <i>lpbInit</i> and <i>lpbmi</i> parameters to initialize the bitmap bits.<para>If this flag is clear, the data pointed to by those parameters is not used.</para></description>
        </listheader>
      </list> <para>If <i>fdwInit</i> is zero, the system does not initialize the bitmap bits.</para></param>
    <param name="pjBits">A pointer to an array of bytes containing the initial bitmap data. The format of the data depends on the <b>biBitCount</b> member of the <see cref="BITMAPINFO" /> structure to which the <i>lpbmi</i> parameter points.</param>
    <param name="pbmi">A pointer to a <see cref="BITMAPINFO" /> structure that describes the dimensions and color format of the array pointed to by the <i>lpbInit</i> parameter.</param>
    <param name="iUsage">
      <para>Specifies whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure was initialized and, if so, whether <b>bmiColors</b> contains explicit red, green, blue (RGB) values or palette indexes. The <i>fuUsage</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which the bitmap is to be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and contains literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the compatible bitmap.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDIBPatternBrush">
    <summary>
      <para>The <b>CreateDIBPatternBrush</b> function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB). The brush can subsequently be selected into any device context that is associated with a device that supports raster operations.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="CreateDIBPatternBrushPt" /> function.</div>
    </summary>
    <param name="h">A handle to a global memory object containing a packed DIB, which consists of a <see cref="BITMAPINFO" /> structure immediately followed by an array of bytes defining the pixels of the bitmap.</param>
    <param name="iUsage">
      <para>Specifies whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure is initialized and, if so, whether this member contains explicit red, green, blue (RGB) values or indexes into a logical palette. The <i>fuColorSpec</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which the brush is to be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and contains literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDIBPatternBrushPt">
    <summary>The <b>CreateDIBPatternBrushPt</b> function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB).</summary>
    <param name="lpPackedDIB">A pointer to a packed DIB consisting of a <see cref="BITMAPINFO" /> structure immediately followed by an array of bytes defining the pixels of the bitmap.</param>
    <param name="iUsage">
      <para>Specifies whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure contains a valid color table and, if so, whether the entries in this color table contain explicit red, green, blue (RGB) values or palette indexes. The <i>iUsage</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and consists of an array of 16-bit indexes into the logical palette of the device context into which the brush is to be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A color table is provided and contains literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateDIBSection">
    <summary>The <b>CreateDIBSection</b> function creates a DIB that applications can write to directly. The function gives you a pointer to the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the bitmap, or you can let the system allocate the memory for the bitmap.</summary>
    <param name="hdc">A handle to a device context. If the value of <i>iUsage</i> is DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors.</param>
    <param name="pbmi">A pointer to a <see cref="BITMAPINFO" /> structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.</param>
    <param name="usage">
      <para>The type of data contained in the <b>bmiColors</b> array member of the <see cref="BITMAPINFO" /> structure pointed to by <i>pbmi</i> (either logical palette indexes or literal RGB values). The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>bmiColors</b> member is an array of 16-bit indexes into the logical palette of the device context specified by <i>hdc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="BITMAPINFO" /> structure contains an array of literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <param name="ppvBits">A pointer to a variable that receives a pointer to the location of the DIB bit values.</param>
    <param name="hSection">
      <para>A handle to a file-mapping object that the function will use to create the DIB. This parameter can be <b>NULL</b>.</para>
      <para>If <i>hSection</i> is not <b>NULL</b>, it must be a handle to a file-mapping object created by calling the <see cref="CreateFileMapping" /> function with the PAGE_READWRITE or PAGE_WRITECOPY flag. Read-only DIB sections are not supported. Handles created by other means will cause <b>CreateDIBSection</b> to fail.</para>
      <para>If <i>hSection</i> is not <b>NULL</b>, the <b>CreateDIBSection</b> function locates the bitmap bit values at offset <i>dwOffset</i> in the file-mapping object referred to by <i>hSection</i>. An application can later retrieve the <i>hSection</i> handle by calling the <see cref="GetObject" /> function with the <b>HBITMAP</b> returned by <b>CreateDIBSection</b>.</para>
      <para>If <i>hSection</i> is <b>NULL</b>, the system allocates memory for the DIB. In this case, the <b>CreateDIBSection</b> function ignores the <i>dwOffset</i> parameter. An application cannot later obtain a handle to this memory. The <b>dshSection</b> member of the <see cref="DIBSECTION" /> structure filled in by calling the <see cref="GetObject" /> function will be <b>NULL</b>.</para>
    </param>
    <param name="offset">The offset from the beginning of the file-mapping object referenced by <i>hSection</i> where storage for the bitmap bit values is to begin. This value is ignored if <i>hSection</i> is <b>NULL</b>. The bitmap bit values are aligned on doubleword boundaries, so <i>dwOffset</i> must be a multiple of the size of a <b>DWORD</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created DIB, and *<i>ppvBits</i> points to the bitmap bit values.</para>
      <para>If the function fails, the return value is <b>NULL</b>, and *<i>ppvBits</i> is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>
        <see cref="GetLastError" /> can return the following value:</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateDiscardableBitmap">
    <summary>
      <para>The <b>CreateDiscardableBitmap</b> function creates a discardable bitmap that is compatible with the specified device. The bitmap has the same bits-per-pixel format and the same color palette as the device. An application can select this bitmap as the current bitmap for a memory device that is compatible with the specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="CreateCompatibleBitmap" /> function.</div>
    </summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="cx">The width, in pixels, of the bitmap.</param>
    <param name="cy">The height, in pixels, of the bitmap.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the compatible bitmap (DDB).</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEllipticRgn">
    <summary>The <b>CreateEllipticRgn</b> function creates an elliptical region.</summary>
    <param name="x1">Specifies the x-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse.</param>
    <param name="y1">Specifies the y-coordinate in logical units, of the upper-left corner of the bounding rectangle of the ellipse.</param>
    <param name="x2">Specifies the x-coordinate in logical units, of the lower-right corner of the bounding rectangle of the ellipse.</param>
    <param name="y2">Specifies the y-coordinate in logical units, of the lower-right corner of the bounding rectangle of the ellipse.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEllipticRgnIndirect">
    <summary>The <b>CreateEllipticRgnIndirect</b> function creates an elliptical region.</summary>
    <param name="lprect">Pointer to a <see cref="RECT" /> structure that contains the coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFile">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFileA">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFileW">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFile">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFileA">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateEnhMetaFileW">
    <summary>The <b>CreateEnhMetaFile</b> function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.</summary>
    <param name="hdc">A handle to a reference device for the enhanced metafile. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <param name="lpFilename">A pointer to the file name for the enhanced metafile to be created. If this parameter is <b>NULL</b>, the enhanced metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteEnhMetaFile" /> function.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions (in .01-millimeter units) of the picture to be stored in the enhanced metafile.</param>
    <param name="lpDesc">A pointer to a string that specifies the name of the application that created the picture, as well as the picture's title. This parameter can be <b>NULL</b>; for more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFont">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontA">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontW">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirect">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectA">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectW">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectEx">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectExA">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectExW">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectEx">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectExA">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectExW">
    <summary>The <b>CreateFontIndirectEx</b> function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="unnamedParam1">
      <para>Pointer to an <see cref="ENUMLOGFONTEXDV" /> structure that defines the characteristics of a multiple master font.</para>
      <para>Note, this function ignores the <b>elfDesignVector</b> member in <see cref="ENUMLOGFONTEXDV" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the new <see cref="ENUMLOGFONTEXDV" /> structure.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirect">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectA">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontIndirectW">
    <summary>The <b>CreateFontIndirect</b> function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.</summary>
    <param name="lplf">A pointer to a <see cref="LOGFONT" /> structure that defines the characteristics of the logical font.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFont">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontA">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateFontW">
    <summary>The <b>CreateFont</b> function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.</summary>
    <param name="cHeight">
      <para>The height, in logical units, of the font's character cell or character. The character height value (also known as the em height) is the character cell height value minus the internal-leading value. The font mapper interprets the value specified in <i>nHeight</i> in the following manner.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&gt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches it against the cell height of the available fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper uses a default height value when it searches for a match.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>&lt; 0</term>
              </listheader>
            </list>
          </description>
          <description>The font mapper transforms this value into device units and matches its absolute value against the character height of the available fonts.</description>
        </listheader>
      </list> <para>For all height comparisons, the font mapper looks for the largest font that does not exceed the requested size.</para><para>This mapping occurs when the font is used for the first time.</para><para>For the MM_TEXT mapping mode, you can use the following formula to specify a height for a font with a specified point size:</para><code>nHeight = -MulDiv(PointSize, GetDeviceCaps(hDC, LOGPIXELSY), 72);</code></param>
    <param name="cWidth">The average width, in logical units, of characters in the requested font. If this value is zero, the font mapper chooses a closest match value. The closest match value is determined by comparing the absolute values of the difference between the current device's aspect ratio and the digitized aspect ratio of available fonts.</param>
    <param name="cEscapement">
      <para>The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.</para>
      <para>When the graphics mode is set to GM_ADVANCED, you can specify the escapement angle of the string independently of the orientation angle of the string's characters.</para>
      <para>When the graphics mode is set to GM_COMPATIBLE, <i>nEscapement</i> specifies both the escapement and orientation. You should set <i>nEscapement</i> and <i>nOrientation</i> to the same value.</para>
    </param>
    <param name="cOrientation">The angle, in tenths of degrees, between each character's base line and the x-axis of the device.</param>
    <param name="cWeight">
      <para>The weight of the font in the range 0 through 1000. For example, 400 is normal and 700 is bold. If this value is zero, a default weight is used.</para>
      <para>The following values are defined for convenience.</para>
      <list type="table">
        <listheader>
          <description>Weight</description>
          <description>Value</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DONTCARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>0</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_THIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>100</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRALIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>200</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_LIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>300</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_REGULAR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>400</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_MEDIUM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>500</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_SEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_DEMIBOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>600</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>700</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_EXTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_ULTRABOLD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>800</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_HEAVY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FW_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>900</description>
        </listheader>
      </list>
    </param>
    <param name="bItalic">Specifies an italic font if set to <b>TRUE</b>.</param>
    <param name="bUnderline">Specifies an underlined font if set to <b>TRUE</b>.</param>
    <param name="bStrikeOut">A strikeout font if set to <b>TRUE</b>.</param>
    <param name="iCharSet">
      <para>The character set. The following values are predefined:</para>
      <list type="bullet">
        <item>
          <description>ANSI_CHARSET</description>
        </item>
        <item>
          <description>BALTIC_CHARSET</description>
        </item>
        <item>
          <description>CHINESEBIG5_CHARSET</description>
        </item>
        <item>
          <description>DEFAULT_CHARSET</description>
        </item>
        <item>
          <description>EASTEUROPE_CHARSET</description>
        </item>
        <item>
          <description>GB2312_CHARSET</description>
        </item>
        <item>
          <description>GREEK_CHARSET</description>
        </item>
        <item>
          <description>HANGUL_CHARSET</description>
        </item>
        <item>
          <description>MAC_CHARSET</description>
        </item>
        <item>
          <description>OEM_CHARSET</description>
        </item>
        <item>
          <description>RUSSIAN_CHARSET</description>
        </item>
        <item>
          <description>SHIFTJIS_CHARSET</description>
        </item>
        <item>
          <description>SYMBOL_CHARSET</description>
        </item>
        <item>
          <description>TURKISH_CHARSET</description>
        </item>
        <item>
          <description>VIETNAMESE_CHARSET</description>
        </item>
      </list>Korean language edition of Windows: <list type="bullet"><item><description>JOHAB_CHARSET</description></item></list>Middle East language edition of Windows: <list type="bullet"><item><description>ARABIC_CHARSET</description></item><item><description>HEBREW_CHARSET</description></item></list>Thai language edition of Windows: <list type="bullet"><item><description>THAI_CHARSET</description></item></list>The OEM_CHARSET value specifies a character set that is operating-system dependent.<para>DEFAULT_CHARSET is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI_CHARSET.</para><para>Fonts with other character sets may exist in the operating system. If an application uses a font with an unknown character set, it should not attempt to translate or interpret strings that are rendered with that font.</para><para>To ensure consistent results when creating a font, do not specify OEM_CHARSET or DEFAULT_CHARSET. If you specify a typeface name in the <i>lpszFace</i> parameter, make sure that the <i>fdwCharSet</i> value matches the character set of the typeface specified in <i>lpszFace</i>.</para></param>
    <param name="iOutPrecision">
      <para>The output precision. The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The default font mapper behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_DEVICE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_OUTLINE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value instructs the font mapper to choose from TrueType and other outline-based fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_PS_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only PostScript fonts. If there are no PostScript fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_RASTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STRING_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when raster fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_ONLY_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OUT_TT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name.</description>
        </listheader>
      </list> <para>Applications can use the OUT_DEVICE_PRECIS, OUT_RASTER_PRECIS, OUT_TT_PRECIS, and OUT_PS_ONLY_PRECIS values to control how the font mapper chooses a font when the operating system contains more than one font with a specified name. For example, if an operating system contains a font named Symbol in raster and TrueType form, specifying OUT_TT_PRECIS forces the font mapper to choose the TrueType version. Specifying OUT_TT_ONLY_PRECIS forces the font mapper to choose a TrueType font, even if it must substitute a TrueType font of another name.</para></param>
    <param name="iClipPrecision">
      <para>The clipping precision. The clipping precision defines how to clip characters that are partially outside the clipping region. It can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_CHARACTER_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DEFAULT_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies default clipping behavior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows XP SP1: Turns off font association for the font. Note that this flag is not guaranteed to have any effect on any platform after Windows Server 2003.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_EMBEDDED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You must specify this flag to use an embedded read-only font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_LH_ANGLES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.<para>If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.</para><para>For more information about the orientation of coordinate systems, see the description of the <i>nOrientation</i> parameter</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_MASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_DFA_OVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off font association for the font. This is identical to CLIP_DFA_DISABLE, but it can have problems in some situations; the recommended flag to use is CLIP_DFA_DISABLE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_STROKE_PRECIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumerated.<para>For compatibility, this value is always returned when enumerating fonts.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIP_TT_ALWAYS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not used.</description>
        </listheader>
      </list>
    </param>
    <param name="iQuality">
      <para>The output quality. The output quality defines how carefully GDI must attempt to match the logical-font attributes to those of an actual physical font. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLEARTYPE_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, text is rendered (when possible) using ClearType antialiasing method. See Remarks for more information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font does not matter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAFT_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Appearance of the font is less important than when the PROOF_QUALITY value is used. For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NONANTIALIASED_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Font is never antialiased, that is, font smoothing is not done.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PROOF_QUALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Character quality of the font is more important than exact matching of the logical-font attributes. For GDI raster fonts, scaling is disabled and the font closest in size is chosen. Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance. Bold, italic, underline, and strikeout fonts are synthesized, if necessary.</description>
        </listheader>
      </list> <para>If the output quality is DEFAULT_QUALITY, DRAFT_QUALITY, or PROOF_QUALITY, then the font is antialiased if the SPI_GETFONTSMOOTHING system parameter is <b>TRUE</b>. Users can control this system parameter from the Control Panel. (The precise wording of the setting in the Control panel depends on the version of Windows, but it will be words to the effect of "Smooth edges of screen fonts".)</para></param>
    <param name="iPitchAndFamily">
      <para>The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:</para>
      <list type="bullet">
        <item>
          <description>DEFAULT_PITCH</description>
        </item>
        <item>
          <description>FIXED_PITCH</description>
        </item>
        <item>
          <description>VARIABLE_PITCH</description>
        </item>
      </list>The four high-order bits specify the font family and can be one of the following values.<list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DECORATIVE</b></term></listheader></list></description><description>Novelty fonts. Old English is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_DONTCARE</b></term></listheader></list></description><description>Use default font.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_MODERN</b></term></listheader></list></description><description>Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_ROMAN</b></term></listheader></list></description><description>Fonts with variable stroke width and with serifs. MS Serif is an example.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SCRIPT</b></term></listheader></list></description><description>Fonts designed to look like handwriting. Script and Cursive are examples.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>FF_SWISS</b></term></listheader></list></description><description>Fonts with variable stroke width and without serifs. MS?Sans Serif is an example.</description></listheader></list> <para>An application can specify a value for the <i>fdwPitchAndFamily</i> parameter by using the Boolean OR operator to join a pitch constant with a family constant.</para><para>Font families describe the look of a font in a general way. They are intended for specifying fonts when the exact typeface requested is not available.</para></param>
    <param name="pszFaceName">
      <para>A pointer to a null-terminated string that specifies the typeface name of the font. The length of this string must not exceed 32 characters, including the terminating null character. The <see cref="EnumFontFamilies" /> function can be used to enumerate the typeface names of all currently available fonts. For more information, see the Remarks.</para>
      <para>If <i>lpszFace</i> is <b>NULL</b> or empty string, GDI uses the first font that matches the other specified attributes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical font.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateHalftonePalette">
    <summary>The <b>CreateHalftonePalette</b> function creates a halftone palette for the specified device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical halftone palette.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CreateHatchBrush">
    <summary>The <b>CreateHatchBrush</b> function creates a logical brush that has the specified hatch pattern and color.</summary>
    <param name="iHatch">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/hatch-brush">hatch style of the brush</a>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_BDIAGONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>45-degree upward left-to-right hatch</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_CROSS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Horizontal and vertical crosshatch</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_DIAGCROSS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>45-degree crosshatch</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_FDIAGONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>45-degree downward left-to-right hatch</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_HORIZONTAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Horizontal hatch</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HS_VERTICAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Vertical hatch</description>
        </listheader>
      </list>
    </param>
    <param name="color">The foreground color of the brush that is used for the hatches. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateIC">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateICA">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateICW">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateIC">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateICA">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateICW">
    <summary>The <b>CreateIC</b> function creates an information context for the specified device. The information context provides a fast way to get information about the device without creating a device context (DC). However, GDI drawing functions cannot accept a handle to an information context.</summary>
    <param name="pszDriver">A pointer to a null-terminated character string that specifies the name of the device driver (for example, Epson).</param>
    <param name="pszDevice">A pointer to a null-terminated character string that specifies the name of the specific output device being used, as shown by the Print Manager (for example, Epson FX-80). It is not the printer model name. The <i>lpszDevice</i> parameter must be used.</param>
    <param name="pszPort">This parameter is ignored and should be set to <b>NULL</b>. It is provided only for compatibility with 16-bit Windows.</param>
    <param name="pdm">A pointer to a <see cref="DEVMODE" /> structure containing device-specific initialization data for the device driver. The <a href="https://docs.microsoft.com//windows/desktop/printdocs/documentproperties">DocumentProperties</a> function retrieves this structure filled in for a specified device. The <i>lpdvmInit</i> parameter must be <b>NULL</b> if the device driver is to use the default initialization (if any) specified by the user.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to an information context.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFile">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFileA">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFileW">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFile">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFileA">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateMetaFileW">
    <summary>
      <para>The <b>CreateMetaFile</b> function creates a device context for a Windows-format metafile.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="CreateEnhMetaFile" />.</div>
    </summary>
    <param name="pszFile">A pointer to the file name for the Windows-format metafile to be created. If this parameter is <b>NULL</b>, the Windows-format metafile is memory based and its contents are lost when it is deleted by using the <see cref="DeleteMetaFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context for the Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePalette">
    <summary>The <b>CreatePalette</b> function creates a logical palette.</summary>
    <param name="plpal">A pointer to a <see cref="LOGPALETTE" /> structure that contains information about the colors in the logical palette.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a logical palette.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePatternBrush">
    <summary>The <b>CreatePatternBrush</b> function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the <b>CreateDIBSection</b> function, or it can be a device-dependent bitmap.</summary>
    <param name="hbm">A handle to the bitmap to be used to create the logical brush.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePen">
    <summary>The <b>CreatePen</b> function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves.</summary>
    <param name="iStyle">
      <para>The pen style. It can be any one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_SOLID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is solid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_DASH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is dashed. This style is valid only when the pen width is one or less in device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_DOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is dotted. This style is valid only when the pen width is one or less in device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_DASHDOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen has alternating dashes and dots. This style is valid only when the pen width is one or less in device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_DASHDOTDOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen has alternating dashes and double dots. This style is valid only when the pen width is one or less in device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_NULL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is invisible.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_INSIDEFRAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to geometric pens.</description>
        </listheader>
      </list>
    </param>
    <param name="cWidth">
      <para>The width of the pen, in logical units. If <i>nWidth</i> is zero, the pen is a single pixel wide, regardless of the current transformation.</para>
      <para>
        <b>CreatePen</b> returns a pen with the specified width but with the PS_SOLID style if you specify a width greater than one for the following styles: PS_DASH, PS_DOT, PS_DASHDOT, PS_DASHDOTDOT.</para>
    </param>
    <param name="color">A color reference for the pen color. To generate a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> structure, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle that identifies a logical pen.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePenIndirect">
    <summary>The <b>CreatePenIndirect</b> function creates a logical cosmetic pen that has the style, width, and color specified in a structure.</summary>
    <param name="plpen">Pointer to a <see cref="LOGPEN" /> structure that specifies the pen's style, width, and color.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle that identifies a logical cosmetic pen.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePolygonRgn">
    <summary>The <b>CreatePolygonRgn</b> function creates a polygonal region.</summary>
    <param name="pptl">A pointer to an array of <see cref="POINT" /> structures that define the vertices of the polygon in logical units. The polygon is presumed closed. Each vertex can be specified only once.</param>
    <param name="cPoint">The number of points in the array.</param>
    <param name="iMode">
      <para>The fill mode used to determine which pixels are in the region. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ALTERNATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects winding mode (fills any region with a nonzero winding value).</description>
        </listheader>
      </list> <para>For more information about these modes, see the <see cref="SetPolyFillMode" /> function.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreatePolyPolygonRgn">
    <summary>The <b>CreatePolyPolygonRgn</b> function creates a region consisting of a series of polygons. The polygons can overlap.</summary>
    <param name="pptl">A pointer to an array of <see cref="POINT" /> structures that define the vertices of the polygons in logical units. The polygons are specified consecutively. Each polygon is presumed closed and each vertex is specified only once.</param>
    <param name="pc">A pointer to an array of integers, each of which specifies the number of points in one of the polygons in the array pointed to by <i>lppt</i>.</param>
    <param name="cPoly">The total number of integers in the array pointed to by <i>lpPolyCounts</i>.</param>
    <param name="iMode">
      <para>The fill mode used to determine which pixels are in the region. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ALTERNATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects winding mode (fills any region with a nonzero winding value).</description>
        </listheader>
      </list> <para>For more information about these modes, see the <see cref="SetPolyFillMode" /> function.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CreateRectRgn">
    <summary>The <b>CreateRectRgn</b> function creates a rectangular region.</summary>
    <param name="x1">Specifies the x-coordinate of the upper-left corner of the region in logical units.</param>
    <param name="y1">Specifies the y-coordinate of the upper-left corner of the region in logical units.</param>
    <param name="x2">Specifies the x-coordinate of the lower-right corner of the region in logical units.</param>
    <param name="y2">Specifies the y-coordinate of the lower-right corner of the region in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateRectRgnIndirect">
    <summary>The <b>CreateRectRgnIndirect</b> function creates a rectangular region.</summary>
    <param name="lprect">Pointer to a <see cref="RECT" /> structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateRoundRectRgn">
    <summary>The <b>CreateRoundRectRgn</b> function creates a rectangular region with rounded corners.</summary>
    <param name="x1">Specifies the x-coordinate of the upper-left corner of the region in device units.</param>
    <param name="y1">Specifies the y-coordinate of the upper-left corner of the region in device units.</param>
    <param name="x2">Specifies the x-coordinate of the lower-right corner of the region in device units.</param>
    <param name="y2">Specifies the y-coordinate of the lower-right corner of the region in device units.</param>
    <param name="w">Specifies the width of the ellipse used to create the rounded corners in device units.</param>
    <param name="h">Specifies the height of the ellipse used to create the rounded corners in device units.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.CreateSolidBrush">
    <summary>The <b>CreateSolidBrush</b> function creates a logical brush that has the specified solid color.</summary>
    <param name="color">The color of the brush. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a logical brush.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.DeleteColorSpace">
    <summary>The <b>DeleteColorSpace</b> function removes and destroys a specified <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a>.</summary>
    <param name="hcs">Specifies the handle to a color space to delete.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.DeleteDC">
    <summary>The <b>DeleteDC</b> function deletes the specified device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DeleteEnhMetaFile">
    <summary>The <b>DeleteEnhMetaFile</b> function deletes an enhanced-format metafile or an enhanced-format metafile handle.</summary>
    <param name="hmf">A handle to an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DeleteEnhMetaFileW">
    <summary>The <b>DeleteEnhMetaFile</b> function deletes an enhanced-format metafile or an enhanced-format metafile handle.</summary>
    <param name="hmf">A handle to an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DeleteMetaFile">
    <summary>
      <para>The <b>DeleteMetaFile</b> function deletes a Windows-format metafile or Windows-format metafile handle.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="DeleteEnhMetaFile" />.</div>
    </summary>
    <param name="hmf">A handle to a Windows-format metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DeleteObject">
    <summary>The <b>DeleteObject</b> function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
    <param name="ho">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DeleteObjectW">
    <summary>The <b>DeleteObject</b> function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
    <param name="ho">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DescribePixelFormat">
    <summary>The <b>DescribePixelFormat</b> function obtains information about the pixel format identified by <i>iPixelFormat</i> of the device associated with <i>hdc</i>. The function sets the members of the <see cref="PIXELFORMATDESCRIPTOR" /> structure pointed to by <i>ppfd</i> with that pixel format data.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="iPixelFormat">Index that specifies the pixel format. The pixel formats that a device context supports are identified by positive one-based integer indexes.</param>
    <param name="nBytes">The size, in bytes, of the structure pointed to by <i>ppfd</i>. The <b>DescribePixelFormat</b> function stores no more than <i>nBytes</i> bytes of data to that structure. Set this value to <b>sizeof</b>(<b>PIXELFORMATDESCRIPTOR</b>).</param>
    <param name="ppfd">Pointer to a <b>PIXELFORMATDESCRIPTOR</b> structure whose members the function sets with pixel format data. The function stores the number of bytes copied to the structure in the structure's <b>nSize</b> member. If, upon entry, <i>ppfd</i> is <b>NULL</b>, the function writes no data to the structure. This is useful when you only want to obtain the maximum pixel format index of a device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the maximum pixel format index of the device context. In addition, the function sets the members of the <b>PIXELFORMATDESCRIPTOR</b> structure pointed to by <i>ppfd</i> according to the specified pixel format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilities">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilitiesA">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilitiesW">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilities">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilitiesA">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DeviceCapabilitiesW">
    <summary>The <b>DeviceCapabilities</b> function retrieves the capabilities of a printer driver.</summary>
    <param name="pDevice">A pointer to a null-terminated string that contains the name of the printer. Note that this is the name of the printer, not of the printer driver.</param>
    <param name="pPort">A pointer to a null-terminated string that contains the name of the port to which the device is connected, such as LPT1.</param>
    <param name="fwCapability">
      <para>The capabilities to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the printer's paper bins. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 24 characters long and contains the name of a paper bin. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 24 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of bin entries required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BINS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of available paper bins. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sources for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmDefaultSource</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLLATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports collating, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COLORDEVICE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports color printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_COPIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of copies the device can print.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DRIVER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the version number of the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_DUPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports duplex printing, the return value is 1; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ENUMRESOLUTIONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of the resolutions supported by the printer. The <i>pOutput</i> buffer receives an array of <b>LONG</b> values. For each supported resolution, the array contains a pair of <b>LONG</b> values that specify the x and y dimensions of the resolution, in dots per inch. The return value indicates the number of supported resolutions. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the number of supported resolutions.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_EXTRA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the number of bytes required for the device-specific portion of the <see cref="DEVMODE" /> structure for the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FIELDS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmFields</b> member of the printer driver's <see cref="DEVMODE" /> structure. The <b>dmFields</b> member indicates which members in the device-independent portion of the structure are supported by the printer driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_FILEDEPENDENCIES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of any additional files that need to be loaded when a driver is installed. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a file. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the maximum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the maximum <b>dmPaperWidth</b> value, and the HIWORD contains the maximum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIAREADY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the paper forms that are currently available for use. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPENAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the names of the supported media types. The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a supported media type. The return value indicates the number of entries in the array. The strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of media type names required.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MEDIATYPES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported media types. The <i>pOutput</i> buffer receives an array of DWORD values that indicate the supported media types. The return value indicates the number of entries in the array. For a list of possible array values, see the description of the <b>dmMediaType</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_MINEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the minimum paper size that the <b>dmPaperLength</b> and <b>dmPaperWidth</b> members of the printer driver's <see cref="DEVMODE" /> structure can specify. The LOWORD of the return value contains the minimum <b>dmPaperWidth</b> value, and the HIWORD contains the minimum <b>dmPaperLength</b> value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ORIENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the relationship between portrait and landscape orientations for a device, in terms of the number of degrees that portrait orientation is rotated counterclockwise to produce landscape orientation. The return value can be one of the following:<list type="table"><listheader><term>0</term></listheader><listheader><description>No landscape orientation.</description></listheader><listheader><term>90</term></listheader><listheader><description>Portrait is rotated 90 degrees to produce landscape.</description></listheader><listheader><term>270</term></listheader><listheader><description>Portrait is rotated 270 degrees to produce landscape.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_NUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an array of integers that indicate that printer's ability to print multiple document pages per printed page. The <i>pOutput</i> buffer receives an array of <b>DWORD</b> values. Each value represents a supported number of document pages per printed page. The return value indicates the number of entries in the array. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERNAMES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper names (for example, Letter or Legal). The <i>pOutput</i> buffer receives an array of string buffers. Each string buffer is 64 characters long and contains the name of a paper form. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 64 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value is the number of paper forms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of supported paper sizes. The <i>pOutput</i> buffer receives an array of <b>WORD</b> values that indicate the available paper sizes for the printer. The return value indicates the number of entries in the array. For a list of the possible array values, see the description of the <b>dmPaperSize</b> member of the <see cref="DEVMODE" /> structure. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PAPERSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the dimensions, in tenths of a millimeter, of each supported paper size. The <i>pOutput</i> buffer receives an array of <see cref="POINT" /> structures. Each structure contains the width (x-dimension) and length (y-dimension) of a paper size as if the paper were in the <b>DMORIENT_PORTRAIT</b> orientation. The return value indicates the number of entries in the array.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PERSONALITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a list of printer description languages supported by the printer. The <i>pOutput</i> buffer receives an array of string buffers. Each buffer is 32 characters long and contains the name of a printer description language. The return value indicates the number of entries in the array. The name strings are null-terminated unless the name is 32 characters long. If <i>pOutput</i> is <b>NULL</b>, the return value indicates the required number of array entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTERMEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is the amount of available printer memory, in kilobytes. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate. The value returned for <b>DC_PRINTRATEUNIT</b> indicates the units of the <b>DC_PRINTRATE</b> value. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEPPM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value indicates the printer's print rate, in pages per minute. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PRINTRATEUNIT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The return value is one of the following values that indicate the print rate units for the value returned for the <b>DC_PRINTRATE</b> flag. The <i>pOutput</i> parameter is not used.<list type="table"><listheader><term><b>PRINTRATEUNIT_CPS</b></term></listheader><listheader><description>Characters per second.</description></listheader><listheader><term><b>PRINTRATEUNIT_IPM</b></term></listheader><listheader><description>Inches per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_LPM</b></term></listheader><listheader><description>Lines per minute.</description></listheader><listheader><term><b>PRINTRATEUNIT_PPM</b></term></listheader><listheader><description>Pages per minute.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the <b>dmSize</b> member of the printer driver's <see cref="DEVMODE" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_STAPLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the printer supports stapling, the return value is a nonzero value; otherwise, the return value is zero. The <i>pOutput</i> parameter is not used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TRUETYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the abilities of the driver to use TrueType fonts. For <b>DC_TRUETYPE</b>, the <i>pOutput</i> parameter should be <b>NULL</b>. The return value can be one or more of the following:<list type="table"><listheader><term><b>DCTT_BITMAP</b></term></listheader><listheader><description>Device can print TrueType fonts as graphics.</description></listheader><listheader><term><b>DCTT_DOWNLOAD</b></term></listheader><listheader><description>Device can download TrueType fonts.</description></listheader><listheader><term><b>DCTT_SUBDEV</b></term></listheader><listheader><description>Device can substitute device fonts for TrueType fonts.</description></listheader></list></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the specification version to which the printer driver conforms.</description>
        </listheader>
      </list>
    </param>
    <param name="pOutput">A pointer to an array. The format of the array depends on the setting of the <i>fwCapability</i> parameter. See each capability above to find out what is returned if <i>pOutput</i> is <b>NULL</b>.</param>
    <param name="pDevMode">A pointer to a <see cref="DEVMODE" /> structure. If this parameter is <b>NULL</b>, <b>DeviceCapabilities</b> retrieves the current default initialization values for the specified printer driver. Otherwise, the function retrieves the values contained in the structure to which <i>pDevMode</i> points.</param>
    <returns>
      <para>If the function succeeds, the return value depends on the setting of the <i>fwCapability</i> parameter. A return value of zero generally indicates that, while the function completed successfully, there was some type of failure, such as a capability that is not supported. For more details, see the descriptions for the <i>fwCapability</i> values.</para>
      <para>If the function returns -1, this may mean either that the capability is not supported or there was a general function failure.</para>
    </returns>
  </member>
  <member name="Windows.DPtoLP">
    <summary>The <b>DPtoLP</b> function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppt">A pointer to an array of <see cref="POINT" /> structures. The x- and y-coordinates contained in each <b>POINT</b> structure will be transformed.</param>
    <param name="c">The number of points in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawEscape">
    <summary>The <b>DrawEscape</b> function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI).</summary>
    <param name="hdc">A handle to the DC for the specified video display.</param>
    <param name="iEscape">The escape function to be performed.</param>
    <param name="cjIn">The number of bytes of data pointed to by the <i>lpszInData</i> parameter.</param>
    <param name="lpIn">A pointer to the input structure required for the specified escape.</param>
    <returns>
      <para>If the function is successful, the return value is greater than zero except for the QUERYESCSUPPORT draw escape, which checks for implementation only.</para>
      <para>If the escape is not implemented, the return value is zero.</para>
      <para>If an error occurred, the return value is less than zero.</para>
    </returns>
  </member>
  <member name="Windows.Ellipse">
    <summary>The <b>Ellipse</b> function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EndDoc">
    <summary>The <b>EndDoc</b> function ends a print job.</summary>
    <param name="hdc">Handle to the device context for the print job.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.EndPage">
    <summary>The <b>EndPage</b> function notifies the device that the application has finished writing to a page. This function is typically used to direct the device driver to advance to a new page.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.EndPath">
    <summary>The <b>EndPath</b> function closes a path bracket and selects the path defined by the bracket into the specified device context.</summary>
    <param name="hdc">A handle to the device context into which the new path is selected.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumEnhMetaFile">
    <summary>The <b>EnumEnhMetaFile</b> function enumerates the records within an enhanced-format metafile by retrieving each record and passing it to the specified callback function. The application-supplied callback function processes each record as required. The enumeration continues until the last record is processed or when the callback function returns zero.</summary>
    <param name="hdc">A handle to a device context. This handle is passed to the callback function.</param>
    <param name="hmf">A handle to an enhanced metafile.</param>
    <param name="proc">A pointer to the application-supplied callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162606(v=vs.85)">EnhMetaFileProc</a> function.</param>
    <param name="param">A pointer to optional callback-function data.</param>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that specifies the coordinates, in logical units, of the picture's upper-left and lower-right corners.</param>
    <returns>
      <para>If the callback function successfully enumerates all the records in the enhanced metafile, the return value is nonzero.</para>
      <para>If the callback function does not successfully enumerate all the records in the enhanced metafile, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumFontFamilies">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesA">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesW">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesEx">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesExA">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesExW">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesEx">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesExA">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesExW">
    <summary>The <b>EnumFontFamiliesEx</b> function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the <see cref="LOGFONT" /> structure. <b>EnumFontFamiliesEx</b> enumerates fonts based on typeface name, character set, or both.</summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">
      <para>A pointer to a <see cref="LOGFONT" /> structure that contains information about the fonts to enumerate. The function examines the following members.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <b>lfCharSet</b>
          </description>
          <description>If set to DEFAULT_CHARSET, the function enumerates all uniquely-named fonts in all character sets. (If there are two fonts with the same name, only one is enumerated.) If set to a valid character set value, the function enumerates only fonts in the specified character set.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfFaceName</b>
          </description>
          <description>If set to an empty string, the function enumerates one font in each available typeface name. If set to a valid typeface name, the function enumerates all fonts with the specified name.</description>
        </listheader>
        <listheader>
          <description>
            <b>lfPitchAndFamily</b>
          </description>
          <description>Must be set to zero for all language versions of the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="lpProc">A pointer to the application defined callback function. For more information, see the <a href="https://docs.microsoft.com//previous-versions/dd162618(v=vs.85)">EnumFontFamExProc</a> function.</param>
    <param name="lParam">An application defined value. The function passes this value to the callback function along with font information.</param>
    <param name="dwFlags">This parameter is not used and must be zero.</param>
    <returns>The return value is the last value returned by the callback function. This value depends on which font families are available for the specified device.</returns>
  </member>
  <member name="Windows.EnumFontFamilies">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesA">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFontFamiliesW">
    <summary>
      <para>The <b>EnumFontFamilies</b> function enumerates the fonts in a specified font family that are available on a specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the family name of the desired fonts. If <i>lpszFamily</i> is <b>NULL</b>, <b>EnumFontFamilies</b> selects and enumerates one font of each available type family.</param>
    <param name="lpProc">A pointer to the application defined callback function. For information, see <a href="https://docs.microsoft.com//previous-versions/dd162621(v=vs.85)">EnumFontFamProc</a>.</param>
    <param name="lParam">A pointer to application-supplied data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is implementation specific.</returns>
  </member>
  <member name="Windows.EnumFonts">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumFontsA">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumFontsW">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumFonts">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumFontsA">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumFontsW">
    <summary>
      <para>The <b>EnumFonts</b> function enumerates the fonts available on a specified device. For each font with the specified typeface name, the <b>EnumFonts</b> function retrieves information about that font and passes it to the application defined callback function. This callback function can process the font information as desired. Enumeration continues until there are no more fonts or the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="EnumFontFamiliesEx" /> function.</div>
    </summary>
    <param name="hdc">A handle to the device context from which to enumerate the fonts.</param>
    <param name="lpLogfont">A pointer to a null-terminated string that specifies the typeface name of the desired fonts. If <i>lpFaceName</i> is <b>NULL</b>, <b>EnumFonts</b> randomly selects and enumerates one font of each available typeface.</param>
    <param name="lpProc">A pointer to the application definedcallback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162623(v=vs.85)">EnumFontsProc</a>.</param>
    <param name="lParam">A pointer to any application-defined data. The data is passed to the callback function along with the font information.</param>
    <returns>The return value is the last value returned by the callback function. Its meaning is defined by the application.</returns>
  </member>
  <member name="Windows.EnumICMProfiles">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumICMProfilesA">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumICMProfilesW">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumICMProfiles">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumICMProfilesA">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumICMProfilesW">
    <summary>The <b>EnumICMProfiles</b> function enumerates the different output color profiles that the system supports for a given device context.</summary>
    <param name="hdc">Specifies the device context.</param>
    <param name="proc">Specifies the procedure instance address of a callback function defined by the application. (See <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-icmenumproca">EnumICMProfilesProcCallback</a>.)</param>
    <param name="param">Data supplied by the application that is passed to the callback function along with the color profile information.</param>
    <returns>This function returns zero if the application interrupted the enumeration. The return value is -1 if there are no color profiles to enumerate. Otherwise, the return value is the last value returned by the callback function.</returns>
  </member>
  <member name="Windows.EnumMetaFile">
    <summary>
      <para>The <b>EnumMetaFile</b> function enumerates the records within a Windows-format metafile by retrieving each record and passing it to the specified callback function. The application-supplied callback function processes each record as required. The enumeration continues until the last record is processed or when the callback function returns zero.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="EnumEnhMetaFile" />.</div>
    </summary>
    <param name="hdc">Handle to a device context. This handle is passed to the callback function.</param>
    <param name="hmf">Handle to a Windows-format metafile.</param>
    <param name="proc">Pointer to an application-supplied callback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/dd162630(v=vs.85)">EnumMetaFileProc</a>.</param>
    <param name="param">Pointer to optional data.</param>
    <returns>
      <para>If the callback function successfully enumerates all the records in the Windows-format metafile, the return value is nonzero.</para>
      <para>If the callback function does not successfully enumerate all the records in the Windows-format metafile, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumObjects">
    <summary>The <b>EnumObjects</b> function enumerates the pens or brushes available for the specified device context (DC). This function calls the application-defined callback function once for each available object, supplying data describing that object. <b>EnumObjects</b> continues calling the callback function until the callback function returns zero or until all of the objects have been enumerated.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="nType">The object type. This parameter can be OBJ_BRUSH or OBJ_PEN.</param>
    <param name="lpFunc">A pointer to the application-defined callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//previous-versions/dd162686(v=vs.85)">EnumObjectsProc</a> function.</param>
    <param name="lParam">A pointer to the application-defined data. The data is passed to the callback function along with the object information.</param>
    <returns>
      <para>If the function succeeds, the return value is the last value returned by the callback function. Its meaning is user-defined.</para>
      <para>If the objects cannot be enumerated (for example, there are too many objects), the function returns zero without calling the callback function.</para>
    </returns>
  </member>
  <member name="Windows.EqualRgn">
    <summary>The <b>EqualRgn</b> function checks the two specified regions to determine whether they are identical. The function considers two regions identical if they are equal in size and shape.</summary>
    <param name="hrgn1">Handle to a region.</param>
    <param name="hrgn2">Handle to a region.</param>
    <returns>
      <para>If the two regions are equal, the return value is nonzero.</para>
      <para>If the two regions are not equal, the return value is zero. A return value of ERROR means at least one of the region handles is invalid.</para>
    </returns>
  </member>
  <member name="Windows.Escape">
    <summary>The <b>Escape</b> function enables an application to access the system-defined device capabilities that are not available through GDI. Escape calls made by an application are translated and sent to the driver.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iEscape">The escape function to be performed. This parameter must be one of the predefined escape values listed in Remarks. Use the <see cref="ExtEscape" /> function if your application defines a private escape value.</param>
    <param name="cjIn">The number of bytes of data pointed to by the <i>lpvInData</i> parameter. This can be 0.</param>
    <param name="pvIn">A pointer to the input structure required for the specified escape.</param>
    <param name="pvOut">A pointer to the structure that receives output from this escape. This parameter should be <b>NULL</b> if no data is returned.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero, except with the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ff686811(v=vs.85)">QUERYESCSUPPORT</a> printer escape, which checks for implementation only. If the escape is not implemented, the return value is zero.</para>
      <para>If the function fails, the return value is a system error code.</para>
    </returns>
  </member>
  <member name="Windows.ExcludeClipRect">
    <summary>The <b>ExcludeClipRect</b> function creates a new clipping region that consists of the existing clipping region minus the specified rectangle.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
    <param name="top">The y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
    <param name="right">The x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
    <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
    <returns>
      <para>The return value specifies the new clipping region's complexity; it can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No region was created.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ExtCreatePen">
    <summary>The <b>ExtCreatePen</b> function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes.</summary>
    <param name="iPenStyle">
      <para>A combination of type, style, end cap, and join attributes. The values from each category are combined by using the bitwise OR operator ( | ).</para>
      <para>The pen type can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_GEOMETRIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is geometric.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PS_COSMETIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The pen is cosmetic.</description>
        </listheader>
      </list> <para>The pen style can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_ALTERNATE</b></term></listheader></list></description><description>The pen sets every other pixel. (This style is applicable only for cosmetic pens.)</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_SOLID</b></term></listheader></list></description><description>The pen is solid.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_DASH</b></term></listheader></list></description><description>The pen is dashed.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_DOT</b></term></listheader></list></description><description>The pen is dotted.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_DASHDOT</b></term></listheader></list></description><description>The pen has alternating dashes and dots.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_DASHDOTDOT</b></term></listheader></list></description><description>The pen has alternating dashes and double dots.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_NULL</b></term></listheader></list></description><description>The pen is invisible.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_USERSTYLE</b></term></listheader></list></description><description>The pen uses a styling array supplied by the user.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_INSIDEFRAME</b></term></listheader></list></description><description>The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to geometric pens.</description></listheader></list> <para>The end cap is only specified for geometric pens. The end cap can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_ENDCAP_ROUND</b></term></listheader></list></description><description>End caps are round.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_ENDCAP_SQUARE</b></term></listheader></list></description><description>End caps are square.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_ENDCAP_FLAT</b></term></listheader></list></description><description>End caps are flat.</description></listheader></list> <para>The join is only specified for geometric pens. The join can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_JOIN_BEVEL</b></term></listheader></list></description><description>Joins are beveled.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_JOIN_MITER</b></term></listheader></list></description><description>Joins are mitered when they are within the current limit set by the <see cref="SetMiterLimit" /> function. If it exceeds this limit, the join is beveled.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PS_JOIN_ROUND</b></term></listheader></list></description><description>Joins are round.</description></listheader></list></param>
    <param name="cWidth">The width of the pen. If the <i>dwPenStyle</i> parameter is PS_GEOMETRIC, the width is given in logical units. If <i>dwPenStyle</i> is PS_COSMETIC, the width must be set to 1.</param>
    <param name="plbrush">A pointer to a <see cref="LOGBRUSH" /> structure. If <i>dwPenStyle</i> is PS_COSMETIC, the <b>lbColor</b> member specifies the color of the pen and the <b>lpStyle</b> member must be set to BS_SOLID. If <i>dwPenStyle</i> is PS_GEOMETRIC, all members must be used to specify the brush attributes of the pen.</param>
    <param name="cStyle">
      <para>The length, in <b>DWORD</b> units, of the <i>lpStyle</i> array. This value must be zero if <i>dwPenStyle</i> is not PS_USERSTYLE.</para>
      <para>The style count is limited to 16.</para>
    </param>
    <param name="pstyle">
      <para>A pointer to an array. The first value specifies the length of the first dash in a user-defined style, the second value specifies the length of the first space, and so on. This pointer must be <b>NULL</b> if <i>dwPenStyle</i> is not PS_USERSTYLE.</para>
      <para>If the <i>lpStyle</i> array is exceeded during line drawing, the pointer is reset to the beginning of the array. When this happens and <i>dwStyleCount</i> is an even number, the pattern of dashes and spaces repeats. However, if <i>dwStyleCount</i> is odd, the pattern reverses when the pointer is reset -- the first element of <i>lpStyle</i> now refers to spaces, the second refers to dashes, and so forth.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle that identifies a logical pen.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtCreateRegion">
    <summary>The <b>ExtCreateRegion</b> function creates a region from the specified region and transformation data.</summary>
    <param name="lpx">A pointer to an <see cref="XFORM" /> structure that defines the transformation to be performed on the region. If this pointer is <b>NULL</b>, the identity transformation is used.</param>
    <param name="nCount">The number of bytes pointed to by <i>lpRgnData</i>.</param>
    <param name="lpData">A pointer to a <see cref="RGNDATA" /> structure that contains the region data in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the region.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtEscape">
    <summary>The <b>ExtEscape</b> function enables an application to access device capabilities that are not available through GDI.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iEscape">
      <para>The escape function to be performed. It can be one of the following or it can be an application-defined escape function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd183421(v=vs.85)">CHECKJPEGFORMAT</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks whether the printer supports a JPEG image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd183424(v=vs.85)">CHECKPNGFORMAT</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Checks whether the printer supports a PNG image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162495(v=vs.85)">DRAWPATTERNRECT</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws a white, gray-scale, or black rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd144954(v=vs.85)">GET_PS_FEATURESETTING</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gets information on a specified feature setting for a PostScript driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd144931(v=vs.85)">GETTECHNOLOGY</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reports on whether or not the driver is a Postscript driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162776(v=vs.85)">PASSTHROUGH</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Allows the application to send data directly to a printer. Supported in compatibility mode and GDI-centric mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162828(v=vs.85)">POSTSCRIPT_DATA</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Allows the application to send data directly to a printer. Supported only in compatibility mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162829(v=vs.85)">POSTSCRIPT_IDENTIFY</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets a PostScript driver to GDI-centric or PostScript-centric mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162830(v=vs.85)">POSTSCRIPT_INJECTION</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inserts a block of raw data in a PostScript job stream.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd162831(v=vs.85)">POSTSCRIPT_PASSTHROUGH</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sends data directly to a PostScript printer driver. Supported in compatibility mode and PostScript-centric mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QUERYESCSUPPORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a particular escape is implemented by the device driver.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd145110(v=vs.85)">SPCLPASSTHROUGH2</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables applications to include private procedures and other resources at the document level-save context.</description>
        </listheader>
      </list>
    </param>
    <param name="cjInput">The number of bytes of data pointed to by the <i>lpszInData</i> parameter.</param>
    <param name="lpInData">A pointer to the input structure required for the specified escape. See also Remarks.</param>
    <param name="cjOutput">The number of bytes of data pointed to by the <i>lpszOutData</i> parameter.</param>
    <param name="lpOutData">A pointer to the structure that receives output from this escape. This parameter must not be <b>NULL</b> if <b>ExtEscape</b> is called as a query function. If no data is to be returned in this structure, set <i>cbOutput</i> to 0. See also Remarks.</param>
    <returns>The return value specifies the outcome of the function. It is greater than zero if the function is successful, except for the QUERYESCSUPPORT printer escape, which checks for implementation only. The return value is zero if the escape is not implemented. A return value less than zero indicates an error.</returns>
  </member>
  <member name="Windows.ExtFloodFill">
    <summary>The <b>ExtFloodFill</b> function fills an area of the display surface with the current brush.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="x">The x-coordinate, in logical units, of the point where filling is to start.</param>
    <param name="y">The y-coordinate, in logical units, of the point where filling is to start.</param>
    <param name="color">The color of the boundary or of the area to be filled. The interpretation of <i>color</i> depends on the value of the <i>fuFillType</i> parameter. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <param name="type">
      <para>The type of fill operation to be performed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FLOODFILLBORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The fill area is bounded by the color specified by the <i>color</i> parameter. This style is identical to the filling performed by the <see cref="FloodFill" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FLOODFILLSURFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The fill area is defined by the color that is specified by <i>color</i>. Filling continues outward in all directions as long as the color is encountered. This style is useful for filling areas with multicolored boundaries.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtSelectClipRgn">
    <summary>The <b>ExtSelectClipRgn</b> function combines the specified region with the current clipping region using the specified mode.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hrgn">A handle to the region to be selected. This handle must not be <b>NULL</b> unless the RGN_COPY mode is specified.</param>
    <param name="mode">
      <para>The operation to be performed. It must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_AND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region combines the overlapping areas of the current clipping region and the region identified by <i>hrgn</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_COPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region is a copy of the region identified by <i>hrgn</i>. This is identical to <see cref="SelectClipRgn" />. If the region identified by <i>hrgn</i> is <b>NULL</b>, the new clipping region is the default clipping region (the default clipping region is a null region).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_DIFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region combines the areas of the current clipping region with those areas excluded from the region identified by <i>hrgn</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_OR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region combines the current clipping region and the region identified by <i>hrgn</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_XOR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region combines the current clipping region and the region identified by <i>hrgn</i> but excludes any overlapping areas.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value specifies the new clipping region's complexity; it can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ExtTextOut">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtTextOutA">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtTextOutW">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtTextOut">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtTextOutA">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ExtTextOutW">
    <summary>The <b>ExtTextOut</b> function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the string.</param>
    <param name="options">
      <para>Specifies how to use the application-defined rectangle. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_CLIPPED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The text will be clipped to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>lpString</i> array refers to an array returned from <see cref="GetCharacterPlacement" /> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for bitmap and vector fonts to indicate that no further language processing is necessary and GDI should process the string directly. Note that all glyph indexes are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.<para>For ExtTextOutW, the glyph indexes are saved to a metafile. However, to display the correct characters the metafile must be played back using the same font. For ExtTextOutA, the glyph indexes are not saved.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_IGNORELANGUAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved for system use. If an application sets this flag, it loses international scripting support and in some cases it may display no text at all.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use European digits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>To display numbers, use digits appropriate to the locale.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current background color should be used to fill the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_PDY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this is set, the array pointed to by <i>lpDx</i> contains pairs of values. The first value of each pair is, as usual, the distance between origins of adjacent character cells, but the second value is the displacement along the vertical direction of the font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ETO_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left-to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <see cref="SetTextAlign" />. This value is preserved for backward compatibility.</description>
        </listheader>
      </list> <para>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</para></param>
    <param name="lprect">A pointer to an optional <see cref="RECT" /> structure that specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
    <param name="lpString">A pointer to a string that specifies the text to be drawn. The string does not need to be zero-terminated, since <i>cbCount</i> specifies the length of the string.</param>
    <param name="c">
      <para>The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</para>
      <para>This value may not exceed 8192.</para>
    </param>
    <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of adjacent character cells. For example, lpDx[<i>i</i>] logical units separate the origins of character cell <i>i</i> and character cell <i>i</i> + 1.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero. However, if the ANSI version of <b>ExtTextOut</b> is called with ETO_GLYPH_INDEX, the function returns <b>TRUE</b> even though the function does nothing.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FillPath">
    <summary>The <b>FillPath</b> function closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode.</summary>
    <param name="hdc">A handle to a device context that contains a valid path.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FillRgn">
    <summary>The <b>FillRgn</b> function fills a region by using the specified brush.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="hrgn">Handle to the region to be filled. The region's coordinates are presumed to be in logical units.</param>
    <param name="hbr">Handle to the brush to be used to fill the region.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FlattenPath">
    <summary>The <b>FlattenPath</b> function transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines.</summary>
    <param name="hdc">A handle to a DC that contains a valid path.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FloodFill">
    <summary>
      <para>The <b>FloodFill</b> function fills an area of the display surface with the current brush. The area is assumed to be bounded as specified by the <i>color</i> parameter.</para>
      <div>
        <b>Note</b>  The <b>FloodFill</b> function is included only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="ExtFloodFill" /> function with FLOODFILLBORDER specified.</div>
    </summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="x">The x-coordinate, in logical units, of the point where filling is to start.</param>
    <param name="y">The y-coordinate, in logical units, of the point where filling is to start.</param>
    <param name="color">The color of the boundary or the area to be filled. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FrameRgn">
    <summary>The <b>FrameRgn</b> function draws a border around the specified region by using the specified brush.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="hrgn">Handle to the region to be enclosed in a border. The region's coordinates are presumed to be in logical units.</param>
    <param name="hbr">Handle to the brush to be used to draw the border.</param>
    <param name="w">Specifies the width, in logical units, of vertical brush strokes.</param>
    <param name="h">Specifies the height, in logical units, of horizontal brush strokes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GdiAlphaBlend">
    <summary>The <b>GdiAlphaBlend</b> function displays bitmaps that have transparent or semitransparent pixels.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xoriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yoriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="wDest">The width, in logical units, of the destination rectangle.</param>
    <param name="hDest">The height, in logical units, of the destination rectangle.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xoriginSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="yoriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="wSrc">The width, in logical units, of the source rectangle.</param>
    <param name="hSrc">The height, in logical units, of the source rectangle.</param>
    <param name="ftn">The alpha-blending function for source and destination bitmaps, a global alpha value to be applied to the entire source bitmap, and format information for the source bitmap. The source and destination blend functions are currently limited to AC_SRC_OVER. See the <see cref="BLENDFUNCTION" /> and <see cref="EMRALPHABLEND" /> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
      <para>This function can return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GdiComment">
    <summary>The <b>GdiComment</b> function copies a comment from a buffer into a specified enhanced-format metafile.</summary>
    <param name="hdc">A handle to an enhanced-metafile device context.</param>
    <param name="nSize">The length of the comment buffer, in bytes.</param>
    <param name="lpData">A pointer to the buffer that contains the comment.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GdiFlush">
    <summary>The <b>GdiFlush</b> function flushes the calling thread's current batch.</summary>
    <returns>
      <para>If all functions in the current batch succeed, the return value is nonzero.</para>
      <para>If not all functions in the current batch succeed, the return value is zero, indicating that at least one function returned an error.</para>
    </returns>
  </member>
  <member name="Windows.GdiGetBatchLimit">
    <summary>The <b>GdiGetBatchLimit</b> function returns the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded.</summary>
    <returns>
      <para>If the function succeeds, the return value is the batch limit.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GdiGradientFill">
    <summary>The <b>GdiGradientFill</b> function fills rectangle and triangle structures.</summary>
    <param name="hdc">A handle to the destination device context.</param>
    <param name="pVertex">A pointer to an array of <see cref="TRIVERTEX" /> structures that each define a triangle vertex.</param>
    <param name="nVertex">The number of vertices in <i>pVertex</i>.</param>
    <param name="pMesh">An array of <see cref="GRADIENT_TRIANGLE" /> structures in triangle mode, or an array of <see cref="GRADIENT_RECT" /> structures in rectangle mode.</param>
    <param name="nCount">The number of elements (triangles or rectangles) in <i>pMesh</i>.</param>
    <param name="ulMode">
      <para>The gradient fill mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_RECT_H</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the <see cref="TRIVERTEX" /> structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_RECT_V</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the <see cref="TRIVERTEX" /> structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_TRIANGLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, an array of <see cref="TRIVERTEX" /> structures is passed to GDI along with a list of array indexes that describe separate triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24- and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GdiSetBatchLimit">
    <summary>The <b>GdiSetBatchLimit</b> function sets the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded.</summary>
    <param name="dw">Specifies the batch limit to be set. A value of 0 sets the default limit. A value of 1 disables batching.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous batch limit.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GdiTransparentBlt">
    <summary>
      <para>The <b>GdiTransparentBlt</b> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.</para>
      <div>
        <b>Note</b>  This function is the same as <see cref="TransparentBlt" />.</div>
    </summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xoriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yoriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="wDest">The width, in logical units, of the destination rectangle.</param>
    <param name="hDest">The height, in logical units, of the destination rectangle.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xoriginSrc">The x-coordinate, in logical units, of the source rectangle.</param>
    <param name="yoriginSrc">The y-coordinate, in logical units, of the source rectangle.</param>
    <param name="wSrc">The width, in logical units, of the source rectangle.</param>
    <param name="hSrc">The height, in logical units, of the source rectangle.</param>
    <param name="crTransparent">The RGB color in the source bitmap to treat as transparent.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetArcDirection">
    <summary>The <b>GetArcDirection</b> function retrieves the current arc direction for the specified device context. Arc and rectangle functions use the arc direction.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>The return value specifies the current arc direction; it can be any one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>AD_COUNTERCLOCKWISE</description>
          <description>Arcs and rectangles are drawn counterclockwise.</description>
        </listheader>
        <listheader>
          <description>AD_CLOCKWISE</description>
          <description>Arcs and rectangles are drawn clockwise.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetAspectRatioFilterEx">
    <summary>The <b>GetAspectRatioFilterEx</b> function retrieves the setting for the current aspect-ratio filter.</summary>
    <param name="hdc">Handle to a device context.</param>
    <param name="lpsize">Pointer to a <see cref="SIZE" /> structure that receives the current aspect-ratio filter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetBitmapBits">
    <summary>
      <para>The <b>GetBitmapBits</b> function copies the bitmap bits of a specified device-dependent bitmap into a buffer.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="GetDIBits" /> function.</div>
    </summary>
    <param name="hbit">A handle to the device-dependent bitmap.</param>
    <param name="cb">The number of bytes to copy from the bitmap into the buffer.</param>
    <param name="lpvBits">A pointer to a buffer to receive the bitmap bits. The bits are stored as an array of byte values.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of bytes copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetBitmapDimensionEx">
    <summary>The <b>GetBitmapDimensionEx</b> function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been set by the <see cref="SetBitmapDimensionEx" /> function.</summary>
    <param name="hbit">A handle to a compatible bitmap (DDB).</param>
    <param name="lpsize">A pointer to a <see cref="SIZE" /> structure to receive the bitmap dimensions. For more information, see Remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetBkColor">
    <summary>The <b>GetBkColor</b> function returns the current background color for the specified device context.</summary>
    <param name="hdc">Handle to the device context whose background color is to be returned.</param>
    <returns>
      <para>If the function succeeds, the return value is a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value for the current background color.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.GetBkMode">
    <summary>The <b>GetBkMode</b> function returns the current background mix mode for a specified device context. The background mix mode of a device context affects text, hatched brushes, and pen styles that are not solid lines.</summary>
    <param name="hdc">Handle to the device context whose background mode is to be returned.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the current background mix mode, either OPAQUE or TRANSPARENT.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetBoundsRect">
    <summary>
      <para>The <b>GetBoundsRect</b> function obtains the current accumulated bounding rectangle for a specified device context.</para>
      <para>The system maintains an accumulated bounding rectangle for each application. An application can retrieve and set this rectangle.</para>
    </summary>
    <param name="hdc">A handle to the device context whose bounding rectangle the function will return.</param>
    <param name="lprect">A pointer to the <see cref="RECT" /> structure that will receive the current bounding rectangle. The application's rectangle is returned in logical coordinates, and the bounding rectangle is returned in screen coordinates.</param>
    <param name="flags">
      <para>Specifies how the <b>GetBoundsRect</b> function will behave. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCB_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Clears the bounding rectangle after returning it. If this flag is not set, the bounding rectangle will not be cleared.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value specifies the state of the accumulated bounding rectangle; it can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>0</description>
          <description>An error occurred. The specified device context handle is invalid.</description>
        </listheader>
        <listheader>
          <description>DCB_DISABLE</description>
          <description>Boundary accumulation is off.</description>
        </listheader>
        <listheader>
          <description>DCB_ENABLE</description>
          <description>Boundary accumulation is on.</description>
        </listheader>
        <listheader>
          <description>DCB_RESET</description>
          <description>The bounding rectangle is empty.</description>
        </listheader>
        <listheader>
          <description>DCB_SET</description>
          <description>The bounding rectangle is not empty.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetBrushOrgEx">
    <summary>The <b>GetBrushOrgEx</b> function retrieves the current brush origin for the specified device context. This function replaces the <b>GetBrushOrg</b> function.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure that receives the brush origin, in device coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetBValue">
    <summary>The <b>GetBValue</b> macro retrieves an intensity value for the blue component of a red, green, blue (RGB) value.</summary>
    <param name="rgb">Specifies an RGB color value.</param>
  </member>
  <member name="Windows.GetCharABCWidths">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsA">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsW">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloat">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloatA">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloatW">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloat">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloatA">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsFloatW">
    <summary>The <b>GetCharABCWidthsFloat</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="iFirst">Specifies the code point of the first character in the group of consecutive characters where the ABC widths are seeked.</param>
    <param name="iLast">Specifies the code point of the last character in the group of consecutive characters where the ABC widths are seeked. This range is inclusive. An error is returned if the specified last character precedes the specified first character.</param>
    <param name="lpABC">Pointer to an array of <see cref="ABCFLOAT" /> structures that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsI">
    <summary>The <b>GetCharABCWidthsI</b> function retrieves the widths, in logical units, of consecutive glyph indices in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="giFirst">The first glyph index in the group of consecutive glyph indices from the current font. This parameter is only used if the <i>pgi</i> parameter is <b>NULL</b>.</param>
    <param name="cgi">The number of glyph indices.</param>
    <param name="pgi">A pointer to an array that contains glyph indices. If this parameter is <b>NULL</b>, the <i>giFirst</i> parameter is used instead. The <i>cgi</i> parameter specifies the number of glyph indices in this array.</param>
    <param name="pabc">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are glyph indices specified by the <i>cgi</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidths">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsA">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharABCWidthsW">
    <summary>The <b>GetCharABCWidths</b> function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
    <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
    <param name="lpABC">A pointer to an array of <see cref="ABC" /> structures that receives the character widths, in logical units. This array must contain at least as many <b>ABC</b> structures as there are characters in the range specified by the <i>uFirstChar</i> and <i>uLastChar</i> parameters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacement">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacementA">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacementW">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <a href="https://docs.microsoft.com//previous-versions/ms960831(v%3dmsdn.10)">GetStringTypeEx</a> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacement">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacementA">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharacterPlacementW">
    <summary>
      <para>The <b>GetCharacterPlacement</b> function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering. The type of information returned depends on the <i>dwFlags</i> parameter and is based on the currently selected font in the specified display context. The function copies the information to the specified <see cref="GCP_RESULTS" /> structure or to one or more arrays specified by the structure.</para>
      <para>Although this function was once adequate for working with character strings, a need to work with an increasing number of languages and scripts has rendered it obsolete. It has been superseded by the functionality of the Uniscribe module. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/uniscribe">Uniscribe</a>.</para>
      <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para>
      <para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the character string to process. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="nCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nMexExtent">The maximum extent (in logical units) to which the string is processed. Characters that, if processed, would exceed this extent are ignored. Computations for any required ordering or glyph arrays apply only to the included characters. This parameter is used only if the GCP_MAXEXTENT value is specified in the <i>dwFlags</i> parameter. As the function processes the input string, each character and its extent is added to the output, extent, and other arrays only if the total extent has not yet exceeded the maximum. Once the limit is reached, processing will stop.</param>
    <param name="lpResults">A pointer to a <see cref="GCP_RESULTS" /> structure that receives the results of the function.</param>
    <param name="dwFlags">
      <para>Specifies how to process the string into the required arrays. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_CLASSIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the <i>lpClass</i> array contains preset classifications for characters. The classifications may be the same as on output. If the particular classification for a character is not known, the corresponding location in the array must be set to zero. for more information about the classifications, see GCP_RESULTS. This is useful only if <see cref="GetFontLanguageInfo" /> returned the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DIACRITIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines how diacritics in the string are handled. If this value is not set, diacritics are treated as zero-width characters. For example, a Hebrew string may contain diacritics, but you may not want to display them.<para>Use <see cref="GetFontLanguageInfo" /> to determine whether a font supports diacritics. If it does, you can use or not use the GCP_DIACRITIC flag in the call to <b>GetCharacterPlacement</b>, depending on the needs of your application.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_DISPLAYZWG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For languages that need reordering or different glyph shapes depending on the positions of the characters within a word, nondisplayable characters often appear in the code page. For example, in the Hebrew code page, there are Left-To-Right and Right-To-Left markers, to help determine the final positioning of characters within the output strings. Normally these are not displayed and are removed from the <i>lpGlyphs</i> and <i>lpDx</i> arrays. You can use the GCP_DISPLAYZWG flag to display these characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_GLYPHSHAPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that some or all characters in the string are to be displayed using shapes other than the standard shapes defined in the currently selected font for the current code page. Some languages, such as Arabic, cannot support glyph creation unless this value is specified. As a general rule, if <see cref="GetFontLanguageInfo" /> returns this value for a string, this value must be used with <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_JUSTIFY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adjusts the extents in the <i>lpDx</i> array so that the string length is the same as <i>nMaxExtent</i>. GCP_JUSTIFY may only be used in conjunction with GCP_MAXEXTENT.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_KASHIDA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use Kashidas as well as, or instead of, adjusted extents to modify the length of the string so that it is equal to the value specified by <i>nMaxExtent</i>. In the <i>lpDx</i> array, a Kashida is indicated by a negative justification index. GCP_KASHIDA may be used only in conjunction with GCP_JUSTIFY and only if the font (and language) support Kashidas. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports Kashidas.<para>Using Kashidas to justify the string can result in the number of glyphs required being greater than the number of characters in the input string. Because of this, when Kashidas are used, the application cannot assume that setting the arrays to be the size of the input string will be sufficient. (The maximum possible will be approximately dxPageWidth/dxAveCharWidth, where dxPageWidth is the width of the document and dxAveCharWidth is the average character width as returned from a <see cref="GetTextMetrics" /> call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_KASHIDA flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_LIGATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use ligations wherever characters ligate. A ligation occurs where one glyph is used for two or more characters. For example, the letters a and e can ligate to ?. For this to be used, however, both the language support and the font must support the required glyphs (the example will not be processed by default in English).<para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports ligation. If it does and a specific maximum is required for the number of characters that will ligate, set the number in the first element of the <b>lpGlyphs</b> array. If normal ligation is required, set this value to zero. If GCP_LIGATE is not specified, no ligation will take place. See GCP_RESULTS for more information.</para><para>If the GCP_REORDER value is usually required for the character set but is not specified, the output will be meaningless unless the string being passed in is already in visual ordering (that is, the result that gets put into lpGcpResults-&gt;lpOutString in one call to <b>GetCharacterPlacement</b> is the input string of a second call).</para><para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_LIGATE flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_MAXEXTENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Compute extents of the string only as long as the resulting extent, in logical units, does not exceed the values specified by the <i>nMaxExtent</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NEUTRALOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of neutrals and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICOVERRIDE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Certain languages only. Override the normal handling of numerics and treat them as strong characters that match the strings reading order. Useful only with the GCP_REORDER flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLATIN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use standard Latin glyphs for numbers and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_NUMERICSLOCAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Arabic/Thai only. Use local glyphs for numeric characters and override the system default. To determine if this option is available in the language of the font, use <see cref="GetStringTypeEx" /> to see if the language supports more than one number format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_REORDER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reorder the string. Use for languages that are not SBCS and left-to-right reading order. If this value is not specified, the string is assumed to be in display order already.<para>If this flag is set for Semitic languages and the <b>lpClass</b> array is used, the first two elements of the array are used to specify the reading order beyond the bounds of the string. GCP_CLASS_PREBOUNDRTL and GCP_CLASS_PREBOUNDLTR can be used to set the order. If no preset order is required, set the values to zero. These values can be combined with other values if the GCPCLASSIN flag is set.</para><para>If the GCP_REORDER value is not specified, the <i>lpString</i> parameter is taken to be visual ordered for languages where this is used, and the <i>lpOutString</i> and <i>lpOrder</i> fields are ignored.</para><para>Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports reordering.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_SYMSWAPOFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Semitic languages only. Specifies that swappable characters are not reset. For example, in a right-to-left string, the '(' and ')' are not reversed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCP_USEKERNING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use kerning pairs in the font (if any) when creating the widths arrays. Use <see cref="GetFontLanguageInfo" /> to determine whether the current font supports kerning pairs.<para>Note that just because <see cref="GetFontLanguageInfo" /> returns the GCP_USEKERNING flag does not mean that it has to be used in the call to <b>GetCharacterPlacement</b>, just that the option is available. Most TrueType fonts have a kerning table, but you do not have to use it.</para></description>
        </listheader>
      </list> <para>It is recommended that an application use the <see cref="GetFontLanguageInfo" /> function to determine whether the GCP_DIACRITIC, GCP_DBCS, GCP_USEKERNING, GCP_LIGATE, GCP_REORDER, GCP_GLYPHSHAPE, and GCP_KASHIDA values are valid for the currently selected font. If not valid, <b>GetCharacterPlacement</b> ignores the value.</para><para>The GCP_NODIACRITICS value is no longer defined and should not be used.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the width and height of the string in logical units. The width is the low-order word and the height is the high-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32A">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32W">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32A">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth32W">
    <summary>The <b>GetCharWidth32</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthA">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthW">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloat">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloatA">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloatW">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloat">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloatA">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthFloatW">
    <summary>The <b>GetCharWidthFloat</b> function retrieves the fractional widths of consecutive characters in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The code point of the first character in the group of consecutive characters.</param>
    <param name="iLast">The code point of the last character in the group of consecutive characters.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthI">
    <summary>The <b>GetCharWidthI</b> function retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range from the current font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="giFirst">The first glyph index in the group of consecutive glyph indices.</param>
    <param name="cgi">The number of glyph indices.</param>
    <param name="pgi">A pointer to an array of glyph indices. If this parameter is not <b>NULL</b>, it is used instead of the <i>giFirst</i> parameter.</param>
    <param name="piWidths">A pointer to a buffer that receives the widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidth">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthA">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCharWidthW">
    <summary>
      <para>The <b>GetCharWidth</b> function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetCharWidth32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iFirst">The first character in the group of consecutive characters.</param>
    <param name="iLast">The last character in the group of consecutive characters, which must not precede the specified first character.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the character widths, in logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetClipBox">
    <summary>The <b>GetClipBox</b> function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device. The visible area is defined by the current clipping region or clip path, as well as any overlapping windows.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lprect">A pointer to a <see cref="RECT" /> structure that is to receive the rectangle dimensions, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the clipping box's complexity and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred.</description>
        </listheader>
      </list> <para><b>GetClipBox</b> returns logical coordinates based on the given device context.</para></returns>
  </member>
  <member name="Windows.GetClipRgn">
    <summary>The <b>GetClipRgn</b> function retrieves a handle identifying the current application-defined clipping region for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hrgn">A handle to an existing region before the function is called. After the function returns, this parameter is a handle to a copy of the current clipping region.</param>
    <returns>If the function succeeds and there is no clipping region for the given device context, the return value is zero. If the function succeeds and there is a clipping region for the given device context, the return value is 1. If an error occurs, the return value is -1.</returns>
  </member>
  <member name="Windows.GetColorAdjustment">
    <summary>The <b>GetColorAdjustment</b> function retrieves the color adjustment values for the specified device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpca">A pointer to a <see cref="COLORADJUSTMENT" /> structure that receives the color adjustment values.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetColorSpace">
    <summary>The <b>GetColorSpace</b> function retrieves the handle to the input <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> from a specified device context.</summary>
    <param name="hdc">Specifies a device context that is to have its input color space handle retrieved.</param>
    <returns>
      <para>If the function succeeds, the return value is the current input color space handle.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetCurrentObject">
    <summary>The <b>GetCurrentObject</b> function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC).</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="type">
      <para>The object type to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current selected bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current selected brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_COLORSPACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current color space.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current selected font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_PAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current selected palette.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJ_PEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns the current selected pen.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the specified object.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetCurrentPositionEx">
    <summary>The <b>GetCurrentPositionEx</b> function retrieves the current position in logical coordinates.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure that receives the logical coordinates of the current position.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetCValue">
    <summary>The <b>GetCValue</b> macro retrieves the cyan color value from a CMYK color value.</summary>
    <param name="cmyk">CMYK color value from which the cyan color value will be retrieved.</param>
  </member>
  <member name="Windows.GetDCBrushColor">
    <summary>The <b>GetDCBrushColor</b> function retrieves the current brush color for the specified device context (DC).</summary>
    <param name="hdc">A handle to the DC whose brush color is to be returned.</param>
    <returns>
      <para>If the function succeeds, the return value is the <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value for the current DC brush color.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.GetDCOrgEx">
    <summary>The <b>GetDCOrgEx</b> function retrieves the final translation origin for a specified device context (DC). The final translation origin specifies an offset that the system uses to translate device coordinates into client coordinates (for coordinates in an application's window).</summary>
    <param name="hdc">A handle to the DC whose final translation origin is to be retrieved.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure that receives the final translation origin, in device coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetDCPenColor">
    <summary>The <b>GetDCPenColor</b> function retrieves the current pen color for the specified device context (DC).</summary>
    <param name="hdc">A handle to the DC whose brush color is to be returned.</param>
    <returns>
      <para>If the function succeeds, the return value is a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value for the current DC pen color.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceCaps">
    <summary>The <b>GetDeviceCaps</b> function retrieves device-specific information for the specified device.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="index">
      <para>The item to be returned. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Index</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRIVERVERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The device driver version.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TECHNOLOGY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Device technology. It can be any one of the following values.<list type="table"><listheader><description>DT_PLOTTER</description><description>Vector plotter</description></listheader><listheader><description>DT_RASDISPLAY</description><description>Raster display</description></listheader><listheader><description>DT_RASPRINTER</description><description>Raster printer</description></listheader><listheader><description>DT_RASCAMERA</description><description>Raster camera</description></listheader><listheader><description>DT_CHARSTREAM</description><description>Character stream</description></listheader><listheader><description>DT_METAFILE</description><description>Metafile</description></listheader><listheader><description>DT_DISPFILE</description><description>Display file</description></listheader></list> <para>If the <i>hdc</i> parameter is a handle to the DC of an enhanced metafile, the device technology is that of the referenced device as specified to the <see cref="CreateEnhMetaFile" /> function. To determine whether it is an enhanced metafile DC, use the <see cref="GetObjectType" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HORZSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Width, in millimeters, of the physical screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VERTSIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Height, in millimeters, of the physical screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HORZRES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Width, in pixels, of the screen; or for printers, the width, in pixels, of the printable area of the page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VERTRES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Height, in raster lines, of the screen; or for printers, the height, in pixels, of the printable area of the page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOGPIXELSX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of pixels per logical inch along the screen width. In a system with multiple display monitors, this value is the same for all monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOGPIXELSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of pixels per logical inch along the screen height. In a system with multiple display monitors, this value is the same for all monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BITSPIXEL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of adjacent color bits for each pixel.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PLANES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of color planes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NUMBRUSHES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of device-specific brushes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NUMPENS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of device-specific pens.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NUMFONTS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of device-specific fonts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NUMCOLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of entries in the device's color table, if the device has a color depth of no more than 8 bits per pixel. For devices with greater color depths, -1 is returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ASPECTX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Relative width of a device pixel used for line drawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ASPECTY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Relative height of a device pixel used for line drawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ASPECTXY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal width of the device pixel used for line drawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PDEVICESIZE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLIPCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Flag that indicates the clipping capabilities of the device. If the device can clip to a rectangle, it is 1. Otherwise, it is 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIZEPALETTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of entries in the system palette. This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index and is available only if the driver is compatible with 16-bit Windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NUMRESERVED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Number of reserved entries in the system palette. This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index and is available only if the driver is compatible with 16-bit Windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COLORRES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Actual color resolution of the device, in bits per pixel. This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index and is available only if the driver is compatible with 16-bit Windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PHYSICALWIDTH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For printing devices: the width of the physical page, in device units. For example, a printer set to print at 600 dpi on 8.5-x11-inch paper has a physical width value of 5100 device units. Note that the physical page is almost always greater than the printable area of the page, and never smaller.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PHYSICALHEIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For printing devices: the height of the physical page, in device units. For example, a printer set to print at 600 dpi on 8.5-by-11-inch paper has a physical height value of 6600 device units. Note that the physical page is almost always greater than the printable area of the page, and never smaller.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PHYSICALOFFSETX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For printing devices: the distance from the left edge of the physical page to the left edge of the printable area, in device units. For example, a printer set to print at 600 dpi on 8.5-by-11-inch paper, that cannot print on the leftmost 0.25-inch of paper, has a horizontal physical offset of 150 device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PHYSICALOFFSETY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For printing devices: the distance from the top edge of the physical page to the top edge of the printable area, in device units. For example, a printer set to print at 600 dpi on 8.5-by-11-inch paper, that cannot print on the topmost 0.5-inch of paper, has a vertical physical offset of 300 device units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VREFRESH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For display devices: the current vertical refresh rate of the device, in cycles per second (Hz).<para>A vertical refresh rate value of 0 or 1 represents the display hardware's default refresh rate. This default rate is typically set by switches on a display card or computer motherboard, or by a configuration program that does not use display functions such as <see cref="ChangeDisplaySettings" />.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SCALINGFACTORX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Scaling factor for the x-axis of the printer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SCALINGFACTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Scaling factor for the y-axis of the printer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLTALIGNMENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Preferred horizontal drawing alignment, expressed as a multiple of pixels. For best drawing performance, windows should be horizontally aligned to a multiple of this value. A value of zero indicates that the device is accelerated, and any alignment may be used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SHADEBLENDCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the shading and blending capabilities of the device. See Remarks for further comments.<list type="table"><listheader><description>SB_CONST_ALPHA</description><description>Handles the <b>SourceConstantAlpha</b> member of the <see cref="BLENDFUNCTION" /> structure, which is referenced by the blendFunction parameter of the <see cref="AlphaBlend" /> function.</description></listheader><listheader><description>SB_GRAD_RECT</description><description>Capable of doing <see cref="GradientFill" /> rectangles.</description></listheader><listheader><description>SB_GRAD_TRI</description><description>Capable of doing <see cref="GradientFill" /> triangles.</description></listheader><listheader><description>SB_NONE</description><description>Device does not support any of these capabilities.</description></listheader><listheader><description>SB_PIXEL_ALPHA</description><description>Capable of handling per-pixel alpha in <see cref="AlphaBlend" />.</description></listheader><listheader><description>SB_PREMULT_ALPHA</description><description>Capable of handling premultiplied alpha in <see cref="AlphaBlend" />.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RASTERCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the raster capabilities of the device, as shown in the following table.<list type="table"><listheader><description>RC_BANDING</description><description>Requires banding support.</description></listheader><listheader><description>RC_BITBLT</description><description>Capable of transferring bitmaps.</description></listheader><listheader><description>RC_BITMAP64</description><description>Capable of supporting bitmaps larger than 64 KB.</description></listheader><listheader><description>RC_DI_BITMAP</description><description>Capable of supporting the <see cref="SetDIBits" /> and <see cref="GetDIBits" /> functions.</description></listheader><listheader><description>RC_DIBTODEV</description><description>Capable of supporting the <see cref="SetDIBitsToDevice" /> function.</description></listheader><listheader><description>RC_FLOODFILL</description><description>Capable of performing flood fills.</description></listheader><listheader><description>RC_PALETTE</description><description>Specifies a palette-based device.</description></listheader><listheader><description>RC_SCALING</description><description>Capable of scaling.</description></listheader><listheader><description>RC_STRETCHBLT</description><description>Capable of performing the <see cref="StretchBlt" /> function.</description></listheader><listheader><description>RC_STRETCHDIB</description><description>Capable of performing the <see cref="StretchDIBits" /> function.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CURVECAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the curve capabilities of the device, as shown in the following table.<list type="table"><listheader><description>CC_NONE</description><description>Device does not support curves.</description></listheader><listheader><description>CC_CHORD</description><description>Device can draw chord arcs.</description></listheader><listheader><description>CC_CIRCLES</description><description>Device can draw circles.</description></listheader><listheader><description>CC_ELLIPSES</description><description>Device can draw ellipses.</description></listheader><listheader><description>CC_INTERIORS</description><description>Device can draw interiors.</description></listheader><listheader><description>CC_PIE</description><description>Device can draw pie wedges.</description></listheader><listheader><description>CC_ROUNDRECT</description><description>Device can draw rounded rectangles.</description></listheader><listheader><description>CC_STYLED</description><description>Device can draw styled borders.</description></listheader><listheader><description>CC_WIDE</description><description>Device can draw wide borders.</description></listheader><listheader><description>CC_WIDESTYLED</description><description>Device can draw borders that are wide and styled.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LINECAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the line capabilities of the device, as shown in the following table:<list type="table"><listheader><description>LC_NONE</description><description>Device does not support lines.</description></listheader><listheader><description>LC_INTERIORS</description><description>Device can draw interiors.</description></listheader><listheader><description>LC_MARKER</description><description>Device can draw a marker.</description></listheader><listheader><description>LC_POLYLINE</description><description>Device can draw a polyline.</description></listheader><listheader><description>LC_POLYMARKER</description><description>Device can draw multiple markers.</description></listheader><listheader><description>LC_STYLED</description><description>Device can draw styled lines.</description></listheader><listheader><description>LC_WIDE</description><description>Device can draw wide lines.</description></listheader><listheader><description>LC_WIDESTYLED</description><description>Device can draw lines that are wide and styled.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>POLYGONALCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the polygon capabilities of the device, as shown in the following table.<list type="table"><listheader><description>PC_NONE</description><description>Device does not support polygons.</description></listheader><listheader><description>PC_INTERIORS</description><description>Device can draw interiors.</description></listheader><listheader><description>PC_POLYGON</description><description>Device can draw alternate-fill polygons.</description></listheader><listheader><description>PC_RECTANGLE</description><description>Device can draw rectangles.</description></listheader><listheader><description>PC_SCANLINE</description><description>Device can draw a single scanline.</description></listheader><listheader><description>PC_STYLED</description><description>Device can draw styled borders.</description></listheader><listheader><description>PC_WIDE</description><description>Device can draw wide borders.</description></listheader><listheader><description>PC_WIDESTYLED</description><description>Device can draw borders that are wide and styled.</description></listheader><listheader><description>PC_WINDPOLYGON</description><description>Device can draw winding-fill polygons.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TEXTCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the text capabilities of the device, as shown in the following table.<list type="table"><listheader><description>TC_OP_CHARACTER</description><description>Device is capable of character output precision.</description></listheader><listheader><description>TC_OP_STROKE</description><description>Device is capable of stroke output precision.</description></listheader><listheader><description>TC_CP_STROKE</description><description>Device is capable of stroke clip precision.</description></listheader><listheader><description>TC_CR_90</description><description>Device is capable of 90-degree character rotation.</description></listheader><listheader><description>TC_CR_ANY</description><description>Device is capable of any character rotation.</description></listheader><listheader><description>TC_SF_X_YINDEP</description><description>Device can scale independently in the x- and y-directions.</description></listheader><listheader><description>TC_SA_DOUBLE</description><description>Device is capable of doubled character for scaling.</description></listheader><listheader><description>TC_SA_INTEGER</description><description>Device uses integer multiples only for character scaling.</description></listheader><listheader><description>TC_SA_CONTIN</description><description>Device uses any multiples for exact character scaling.</description></listheader><listheader><description>TC_EA_DOUBLE</description><description>Device can draw double-weight characters.</description></listheader><listheader><description>TC_IA_ABLE</description><description>Device can italicize.</description></listheader><listheader><description>TC_UA_ABLE</description><description>Device can underline.</description></listheader><listheader><description>TC_SO_ABLE</description><description>Device can draw strikeouts.</description></listheader><listheader><description>TC_RA_ABLE</description><description>Device can draw raster fonts.</description></listheader><listheader><description>TC_VA_ABLE</description><description>Device can draw vector fonts.</description></listheader><listheader><description>TC_RESERVED</description><description>Reserved; must be zero.</description></listheader><listheader><description>TC_SCROLLBLT</description><description>Device cannot scroll using a bit-block transfer. Note that this meaning may be the opposite of what you expect.</description></listheader></list> </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COLORMGMTCAPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Value that indicates the color management capabilities of the device.<list type="table"><listheader><description>CM_CMYK_COLOR</description><description>Device can accept CMYK color space ICC color profile.</description></listheader><listheader><description>CM_DEVICE_ICM</description><description>Device can perform ICM on either the device driver or the device itself.</description></listheader><listheader><description>CM_GAMMA_RAMP</description><description>Device supports <see cref="GetDeviceGammaRamp" /> and <see cref="SetDeviceGammaRamp" /></description></listheader><listheader><description>CM_NONE</description><description>Device does not support ICM.</description></listheader></list> </description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value specifies the value of the desired item.</para>
      <para>When <i>nIndex</i> is BITSPIXEL and the device has 15bpp or 16bpp, the return value is 16.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceGammaRamp">
    <summary>
      <para>The <b>GetDeviceGammaRamp</b> function gets the <a href="https://docs.microsoft.com//windows/win32/wcs/g">gamma ramp</a> on direct color display boards having drivers that support downloadable gamma ramps in hardware.</para>
      <blockquote>[!IMPORTANT] We strongly recommend that you don't use this API. Use of this API is subject to major limitations. See <see cref="SetDeviceGammaRamp" /> for more information.</blockquote>
    </summary>
    <param name="hdc">Specifies the device context of the direct color display board in question.</param>
    <param name="lpRamp">Points to a buffer where the function can place the current gamma ramp of the color display board. The gamma ramp is specified in three arrays of 256 <b>WORD</b> elements each, which contain the mapping between RGB values in the frame buffer and digital-analog-converter (DAC) values. The sequence of the arrays is red, green, blue.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetDIBColorTable">
    <summary>The <b>GetDIBColorTable</b> function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context.</summary>
    <param name="hdc">A handle to a device context. A DIB section bitmap must be selected into this device context.</param>
    <param name="iStart">A zero-based color table index that specifies the first color table entry to retrieve.</param>
    <param name="cEntries">The number of color table entries to retrieve.</param>
    <param name="prgbq">A pointer to a buffer that receives an array of <see cref="RGBQUAD" /> data structures containing color information from the DIB color table. The buffer must be large enough to contain as many <b>RGBQUAD</b> data structures as the value of <i>cEntries</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of color table entries that the function retrieves.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetDIBits">
    <summary>The <b>GetDIBits</b> function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hbm">A handle to the bitmap. This must be a compatible bitmap (DDB).</param>
    <param name="start">The first scan line to retrieve.</param>
    <param name="cLines">The number of scan lines to retrieve.</param>
    <param name="lpvBits">A pointer to a buffer to receive the bitmap data. If this parameter is <b>NULL</b>, the function passes the dimensions and format of the bitmap to the <see cref="BITMAPINFO" /> structure pointed to by the <i>lpbmi</i> parameter.</param>
    <param name="lpbmi">A pointer to a <see cref="BITMAPINFO" /> structure that specifies the desired format for the DIB data.</param>
    <param name="usage">
      <para>The format of the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure. It must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table should consist of an array of 16-bit indexes into the current logical palette.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table should consist of literal red, green, blue (RGB) values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the <i>lpvBits</i> parameter is non-<b>NULL</b> and the function succeeds, the return value is the number of scan lines copied from the bitmap.</para>
      <para>If the <i>lpvBits</i> parameter is <b>NULL</b> and <b>GetDIBits</b> successfully fills the <see cref="BITMAPINFO" /> structure, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>This function can return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFile">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileA">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileW">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileBits">
    <summary>The <b>GetEnhMetaFileBits</b> function retrieves the contents of the specified enhanced-format metafile and copies them into a buffer.</summary>
    <param name="hEMF">A handle to the enhanced metafile.</param>
    <param name="nSize">The size, in bytes, of the buffer to receive the data.</param>
    <param name="lpData">A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If <i>lpbBuffer</i> is <b>NULL</b>, the function returns the size necessary to hold the data.</param>
    <returns>
      <para>If the function succeeds and the buffer pointer is <b>NULL</b>, the return value is the size of the enhanced metafile, in bytes.</para>
      <para>If the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescription">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescriptionA">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescriptionW">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescription">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescriptionA">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileDescriptionW">
    <summary>The <b>GetEnhMetaFileDescription</b> function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cchBuffer">The size, in characters, of the buffer to receive the data. Only this many characters will be copied.</param>
    <param name="lpDescription">A pointer to a buffer that receives the optional text description.</param>
    <returns>
      <para>If the optional text description exists and the buffer pointer is <b>NULL</b>, the return value is the length of the text string, in characters.</para>
      <para>If the optional text description exists and the buffer pointer is a valid pointer, the return value is the number of characters copied into the buffer.</para>
      <para>If the optional text description does not exist, the return value is zero.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileHeader">
    <summary>The <b>GetEnhMetaFileHeader</b> function retrieves the record containing the header for the specified enhanced-format metafile.</summary>
    <param name="hemf">A handle to the enhanced metafile for which the header is to be retrieved.</param>
    <param name="nSize">The size, in bytes, of the buffer to receive the data. Only this many bytes will be copied.</param>
    <param name="lpEnhMetaHeader">A pointer to an <see cref="ENHMETAHEADER" /> structure that receives the header record. If this parameter is <b>NULL</b>, the function returns the size of the header record.</param>
    <returns>If the function succeeds and the structure pointer is <b>NULL</b>, the return value is the size of the record that contains the header; if the structure pointer is a valid pointer, the return value is the number of bytes copied. Otherwise, it is zero.</returns>
  </member>
  <member name="Windows.GetEnhMetaFilePaletteEntries">
    <summary>The <b>GetEnhMetaFilePaletteEntries</b> function retrieves optional palette entries from the specified enhanced metafile.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="nNumEntries">The number of entries to be retrieved from the optional palette.</param>
    <param name="lpPaletteEntries">A pointer to an array of <a href="https://docs.microsoft.com//previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures that receives the palette colors. The array must contain at least as many structures as there are entries specified by the <i>cEntries</i> parameter.</param>
    <returns>If the array pointer is <b>NULL</b> and the enhanced metafile contains an optional palette, the return value is the number of entries in the enhanced metafile's palette; if the array pointer is a valid pointer and the enhanced metafile contains an optional palette, the return value is the number of entries copied; if the metafile does not contain an optional palette, the return value is zero. Otherwise, the return value is GDI_ERROR.</returns>
  </member>
  <member name="Windows.GetEnhMetaFilePixelFormat">
    <summary>The <b>GetEnhMetaFilePixelFormat</b> function retrieves pixel format information for an enhanced metafile.</summary>
    <param name="hemf">Identifies the enhanced metafile.</param>
    <param name="cbBuffer">Specifies the size, in bytes, of the buffer into which the pixel format information is copied.</param>
    <param name="ppfd">Pointer to a <see cref="PIXELFORMATDESCRIPTOR" /> structure that contains the logical pixel format specification. The metafile uses this structure to record the logical pixel format specification.</param>
    <returns>
      <para>If the function succeeds and finds a pixel format, the return value is the size of the metafile's pixel format.</para>
      <para>If no pixel format is present, the return value is zero.</para>
      <para>If an error occurs and the function fails, the return value is GDI_ERROR. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFile">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileA">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetEnhMetaFileW">
    <summary>The <b>GetEnhMetaFile</b> function creates a handle that identifies the enhanced-format metafile stored in the specified file.</summary>
    <param name="lpName">A pointer to a null-terminated string that specifies the name of an enhanced metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetFontData">
    <summary>The <b>GetFontData</b> function retrieves font metric data for a TrueType font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="dwTable">The name of a font metric table from which the font data is to be retrieved. This parameter can identify one of the metric tables documented in the TrueType Font Files specification published by Microsoft Corporation. If this parameter is zero, the information is retrieved starting at the beginning of the file for TrueType font files or from the beginning of the data for the currently selected font for TrueType Collection files. To retrieve the data from the beginning of the file for TrueType Collection files specify 'ttcf' (0x66637474).</param>
    <param name="dwOffset">The offset from the beginning of the font metric table to the location where the function should begin retrieving information. If this parameter is zero, the information is retrieved starting at the beginning of the table specified by the <i>dwTable</i> parameter. If this value is greater than or equal to the size of the table, an error occurs.</param>
    <param name="pvBuffer">A pointer to a buffer that receives the font information. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the font data.</param>
    <param name="cjBuffer">The length, in bytes, of the information to be retrieved. If this parameter is zero, <b>GetFontData</b> returns the size of the data specified in the <i>dwTable</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of bytes returned.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetFontLanguageInfo">
    <summary>The <b>GetFontLanguageInfo</b> function returns information about the currently selected font for the specified display context. Applications typically use this information and the <see cref="GetCharacterPlacement" /> function to prepare a character string for display.</summary>
    <param name="hdc">Handle to a display device context.</param>
    <returns>
      <para>The return value identifies characteristics of the currently selected font. The function returns 0 if the font is "normalized" and can be treated as a simple Latin font; it returns GCP_ERROR if an error occurs. Otherwise, the function returns a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>GCP_DBCS</description>
          <description>The character set is DBCS.</description>
        </listheader>
        <listheader>
          <description>GCP_DIACRITIC</description>
          <description>The font/language contains diacritic glyphs.</description>
        </listheader>
        <listheader>
          <description>FLI_GLYPHS</description>
          <description>The font contains extra glyphs not normally accessible using the code page. Use <see cref="GetCharacterPlacement" /> to access the glyphs. This value is for information only and is not intended to be passed to <b>GetCharacterPlacement</b>.</description>
        </listheader>
        <listheader>
          <description>GCP_GLYPHSHAPE</description>
          <description>The font/language contains multiple glyphs per code point or per code point combination (supports shaping and/or ligation), and the font contains advanced glyph tables to provide extra glyphs for the extra shapes. If this value is specified, the <b>lpGlyphs</b> array must be used with the <see cref="GetCharacterPlacement" /> function and the ETO_GLYPHINDEX value must be passed to the <see cref="ExtTextOut" /> function when the string is drawn.</description>
        </listheader>
        <listheader>
          <description>GCP_KASHIDA</description>
          <description>The font/ language permits Kashidas.</description>
        </listheader>
        <listheader>
          <description>GCP_LIGATE</description>
          <description>The font/language contains ligation glyphs which can be substituted for specific character combinations.</description>
        </listheader>
        <listheader>
          <description>GCP_USEKERNING</description>
          <description>The font contains a kerning table which can be used to provide better spacing between the characters and glyphs.</description>
        </listheader>
        <listheader>
          <description>GCP_REORDER</description>
          <description>The language requires reordering for display for example, Hebrew or Arabic.</description>
        </listheader>
      </list> <para>The return value, when masked with FLI_MASK, can be passed directly to the <see cref="GetCharacterPlacement" /> function.</para></returns>
  </member>
  <member name="Windows.GetFontUnicodeRanges">
    <summary>The <b>GetFontUnicodeRanges</b> function returns information about which Unicode characters are supported by a font. The information is returned as a <see cref="GLYPHSET" /> structure.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpgs">A pointer to a <see cref="GLYPHSET" /> structure that receives the glyph set information. If this parameter is <b>NULL</b>, the function returns the size of the <b>GLYPHSET</b> structure required to store the information.</param>
    <returns>
      <para>If the function succeeds, it returns number of bytes written to the GLYPHSET structure or, if the <i>lpgs</i> parameter is <b>NULL</b>, it returns the size of the GLYPHSET structure required to store the information.</para>
      <para>If the function fails, it returns zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndices">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndicesA">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndicesW">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndices">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndicesA">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphIndicesW">
    <summary>The <b>GetGlyphIndices</b> function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpstr">A pointer to the string to be converted.</param>
    <param name="c">The length of both the <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpstr</i> and the size (in WORDs) of the buffer pointed to by <i>pgi</i>.</param>
    <param name="pgi">This buffer must be of dimension c. On successful return, contains an array of glyph indices corresponding to the characters in the string.</param>
    <param name="fl">
      <para>Specifies how glyphs should be handled if they are not supported. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGI_MARK_NONEXISTING_GLYPHS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Marks unsupported glyphs with the hexadecimal value 0xffff.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the number of bytes (for the ANSI function) or WORDs (for the Unicode function) converted.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutline">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutlineA">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutlineW">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutline">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutlineA">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGlyphOutlineW">
    <summary>The <b>GetGlyphOutline</b> function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="uChar">The character for which data is to be returned.</param>
    <param name="fuFormat">
      <para>The format of the data that the function retrieves. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BEZIER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data as a cubic Bézier spline (not in quadratic spline format).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the glyph bitmap. For information about memory allocation, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GLYPH_INDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uChar</i> parameter is a TrueType Glyph Index rather than a character code. See the <see cref="ExtTextOut" /> function for additional remarks on Glyph Indexing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY2_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains five levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY4_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 17 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_GRAY8_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves a glyph bitmap that contains 65 levels of gray.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_METRICS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only retrieves the <see cref="GLYPHMETRICS" /> structure specified by <i>lpgm</i>. The <i>lpvBuffer</i> is ignored. This value affects the meaning of the function's return value upon failure; see the Return Values section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_NATIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function retrieves the curve data points in the rasterizer's native format and uses the font's design units.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GGO_UNHINTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function only returns unhinted outlines. This flag only works in conjunction with GGO_BEZIER and GGO_NATIVE.</description>
        </listheader>
      </list> <para>Note that, for the GGO_GRAYn_BITMAP values, the function retrieves a glyph bitmap that contains n^2+1 (n squared plus one) levels of gray.</para></param>
    <param name="lpgm">A pointer to the <see cref="GLYPHMETRICS" /> structure describing the placement of the glyph in the character cell.</param>
    <param name="cjBuffer">The size, in bytes, of the buffer (*<i>lpvBuffer</i>) where the function is to copy information about the outline character. If this value is zero, the function returns the required size of the buffer.</param>
    <param name="pvBuffer">A pointer to the buffer that receives information about the outline character. If this value is <b>NULL</b>, the function returns the required size of the buffer.</param>
    <param name="lpmat2">A pointer to a <see cref="MAT2" /> structure specifying a transformation matrix for the character.</param>
    <returns>
      <para>If GGO_BITMAP, GGO_GRAY2_BITMAP, GGO_GRAY4_BITMAP, GGO_GRAY8_BITMAP, or GGO_NATIVE is specified and the function succeeds, the return value is greater than zero; otherwise, the return value is GDI_ERROR. If one of these flags is specified and the buffer size or address is zero, the return value specifies the required buffer size, in bytes.</para>
      <para>If GGO_METRICS is specified and the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.GetGraphicsMode">
    <summary>The <b>GetGraphicsMode</b> function retrieves the current graphics mode for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the current graphics mode. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>GM_COMPATIBLE</description>
          <description>The current graphics mode is the compatible graphics mode, a mode that is compatible with 16-bit Windows. In this graphics mode, an application cannot set or modify the world transformation for the specified device context. The compatible graphics mode is the default graphics mode.</description>
        </listheader>
        <listheader>
          <description>GM_ADVANCED</description>
          <description>The current graphics mode is the advanced graphics mode, a mode that allows world transformations. In this graphics mode, an application can set or modify the world transformation for the specified device context.</description>
        </listheader>
      </list> <para>Otherwise, the return value is zero.</para></returns>
  </member>
  <member name="Windows.GetGValue">
    <summary>The <b>GetGValue</b> macro retrieves an intensity value for the green component of a red, green, blue (RGB) value.</summary>
    <param name="rgb">Specifies an RGB color value.</param>
  </member>
  <member name="Windows.GetICMProfile">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetICMProfileA">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetICMProfileW">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetICMProfile">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetICMProfileA">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetICMProfileW">
    <summary>The <b>GetICMProfile</b> function retrieves the file name of the current output color profile for a specified device context.</summary>
    <param name="hdc">Specifies a device context from which to retrieve the color profile.</param>
    <param name="pBufSize">Pointer to a <b>DWORD</b> that contains the size of the buffer pointed to by <i>lpszFilename</i>. For the ANSI version of this function, the size is in bytes. For the Unicode version, the size is in WCHARs. If this function is successful, on return this parameter contains the size of the buffer actually used. However, if the buffer is not large enough, this function returns <b>FALSE</b>. In this case, the <b>GetLastError()</b> function returns ERROR_INSUFFICIENT_BUFFER and the <b>DWORD</b> pointed to by this parameter contains the size needed for the <i>lpszFilename</i> buffer.</param>
    <param name="pszFilename">Points to the buffer that receives the path name of the profile.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>. It also returns <b>TRUE</b> if the <i>lpszFilename</i> parameter is <b>NULL</b> and the size required for the buffer is copied into <i>lpcbName.</i></para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairs">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairsA">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairsW">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairs">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairsA">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKerningPairsW">
    <summary>The <b>GetKerningPairs</b> function retrieves the character-kerning pairs for the currently selected font for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="nPairs">The number of pairs in the <i>lpkrnpair</i> array. If the font has more than <i>nNumPairs</i> kerning pairs, the function returns an error.</param>
    <param name="lpKernPair">A pointer to an array of <see cref="KERNINGPAIR" /> structures that receives the kerning pairs. The array must contain at least as many structures as specified by the <i>nNumPairs</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of kerning pairs for the font.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of kerning pairs returned.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKValue">
    <summary>The <b>GetKValue</b> macro retrieves the black color value from a CMYK color value.</summary>
    <param name="cmyk">CMYK color value from which the black color value will be retrieved.</param>
  </member>
  <member name="Windows.GetLayout">
    <summary>The <b>GetLayout</b> function returns the layout of a device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, it returns the layout flags for the current device context.</para>
      <para>If the function fails, it returns GDI_ERROR. For extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpace">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpaceA">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpaceW">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpace">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpaceA">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetLogColorSpaceW">
    <summary>The <b>GetLogColorSpace</b> function retrieves the <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> definition identified by a specified handle.</summary>
    <param name="hColorSpace">Specifies the handle to a color space.</param>
    <param name="lpBuffer">Points to a buffer to receive the <see cref="LOGCOLORSPACE" /> structure.</param>
    <param name="nSize">Specifies the maximum size of the buffer.</param>
    <returns>
      <para>If this function succeeds, the return value is TRUE.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetMapMode">
    <summary>The <b>GetMapMode</b> function retrieves the current mapping mode.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the mapping mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMetaFileBitsEx">
    <summary>
      <para>The <b>GetMetaFileBitsEx</b> function retrieves the contents of a Windows-format metafile and copies them into the specified buffer.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="GetEnhMetaFileBits" />.</div>
    </summary>
    <param name="hMF">A handle to a Windows-format metafile.</param>
    <param name="cbBuffer">The size, in bytes, of the buffer to receive the data.</param>
    <param name="lpData">A pointer to a buffer that receives the metafile data. The buffer must be sufficiently large to contain the data. If <i>lpvData</i> is <b>NULL</b>, the function returns the number of bytes required to hold the data.</param>
    <returns>
      <para>If the function succeeds and the buffer pointer is <b>NULL</b>, the return value is the number of bytes required for the buffer; if the function succeeds and the buffer pointer is a valid pointer, the return value is the number of bytes copied.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMetaRgn">
    <summary>The <b>GetMetaRgn</b> function retrieves the current metaregion for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hrgn">A handle to an existing region before the function is called. After the function returns, this parameter is a handle to a copy of the current metaregion.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMiterLimit">
    <summary>The <b>GetMiterLimit</b> function retrieves the miter limit for the specified device context.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="plimit">Pointer to a floating-point value that receives the current miter limit.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMValue">
    <summary>The <b>GetMValue</b> macro retrieves the magenta color value from a CMYK color value.</summary>
    <param name="cmyk">CMYK color value from which the magenta color value will be retrieved.</param>
  </member>
  <member name="Windows.GetNearestColor">
    <summary>The <b>GetNearestColor</b> function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="color">A color value that identifies a requested color. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a color from the system palette that corresponds to the given color value.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.GetNearestPaletteIndex">
    <summary>The <b>GetNearestPaletteIndex</b> function retrieves the index for the entry in the specified logical palette most closely matching a specified color value.</summary>
    <param name="h">A handle to a logical palette.</param>
    <param name="color">A color to be matched. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is the index of an entry in a logical palette.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.GetObject">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="h">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="c">The number of bytes of information to be written to the buffer.</param>
    <param name="pv">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectA">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="h">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="c">The number of bytes of information to be written to the buffer.</param>
    <param name="pv">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectW">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="h">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="c">The number of bytes of information to be written to the buffer.</param>
    <param name="pv">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObject">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectA">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectW">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectType">
    <summary>The <b>GetObjectType</b> retrieves the type of the specified object.</summary>
    <param name="h">A handle to the graphics object.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the object. This value can be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>OBJ_BITMAP</description>
          <description>Bitmap</description>
        </listheader>
        <listheader>
          <description>OBJ_BRUSH</description>
          <description>Brush</description>
        </listheader>
        <listheader>
          <description>OBJ_COLORSPACE</description>
          <description>Color space</description>
        </listheader>
        <listheader>
          <description>OBJ_DC</description>
          <description>Device context</description>
        </listheader>
        <listheader>
          <description>OBJ_ENHMETADC</description>
          <description>Enhanced metafile DC</description>
        </listheader>
        <listheader>
          <description>OBJ_ENHMETAFILE</description>
          <description>Enhanced metafile</description>
        </listheader>
        <listheader>
          <description>OBJ_EXTPEN</description>
          <description>Extended pen</description>
        </listheader>
        <listheader>
          <description>OBJ_FONT</description>
          <description>Font</description>
        </listheader>
        <listheader>
          <description>OBJ_MEMDC</description>
          <description>Memory DC</description>
        </listheader>
        <listheader>
          <description>OBJ_METAFILE</description>
          <description>Metafile</description>
        </listheader>
        <listheader>
          <description>OBJ_METADC</description>
          <description>Metafile DC</description>
        </listheader>
        <listheader>
          <description>OBJ_PAL</description>
          <description>Palette</description>
        </listheader>
        <listheader>
          <description>OBJ_PEN</description>
          <description>Pen</description>
        </listheader>
        <listheader>
          <description>OBJ_REGION</description>
          <description>Region</description>
        </listheader>
      </list> <para>If the function fails, the return value is zero.</para></returns>
  </member>
  <member name="Windows.GetObject">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectA">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetObjectW">
    <summary>The <b>GetObject</b> function retrieves information for the specified graphics object.</summary>
    <param name="hgdiobj">A handle to the graphics object of interest. This can be a handle to one of the following: a logical bitmap, a brush, a font, a palette, a pen, or a device independent bitmap created by calling the <see cref="CreateDIBSection" /> function.</param>
    <param name="cbBuffer">The number of bytes of information to be written to the buffer.</param>
    <param name="lpvObject">
      <para>A pointer to a buffer that receives the information about the specified graphics object.</para>
      <para>The following table shows the type of information the buffer receives for each type of graphics object you can specify with <i>hgdiobj</i>.</para>
      <list type="table">
        <listheader>
          <description>Object type</description>
          <description>Data written to buffer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="BITMAP" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBITMAP</b> returned from a call to <see cref="CreateDIBSection" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="DIBSECTION" />, if <i>cbBuffer</i> is set to<code> sizeof (DIBSECTION)</code>, or <see cref="BITMAP" />, if <i>cbBuffer</i> is set to <code>sizeof (BITMAP)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPALETTE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A <b>WORD</b> count of the number of entries in the logical palette</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b> returned from a call to <see cref="ExtCreatePen" /></b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="EXTLOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HPEN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGPEN" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HBRUSH</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGBRUSH" />
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>HFONT</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="LOGFONT" />
          </description>
        </listheader>
      </list> <para>If the <i>lpvObject</i> parameter is <b>NULL</b>, the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object.</para><para>The address of <i>lpvObject</i> must be on a 4-byte boundary; otherwise, <b>GetObject</b> fails.</para></param>
    <returns>
      <para>If the function succeeds, and <i>lpvObject</i> is a valid pointer, the return value is the number of bytes stored into the buffer.</para>
      <para>If the function succeeds, and <i>lpvObject</i> is <b>NULL</b>, the return value is the number of bytes required to hold the information the function would store into the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetrics">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetricsA">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetricsW">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetrics">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetricsA">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetOutlineTextMetricsW">
    <summary>The <b>GetOutlineTextMetrics</b> function retrieves text metrics for TrueType fonts.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="cjCopy">The size, in bytes, of the array that receives the text metrics.</param>
    <param name="potm">A pointer to an <see cref="OUTLINETEXTMETRIC" /> structure. If this parameter is <b>NULL</b>, the function returns the size of the buffer required for the retrieved metric data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero or the size of the required buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetPaletteEntries">
    <summary>The <b>GetPaletteEntries</b> function retrieves a specified range of palette entries from the given logical palette.</summary>
    <param name="hpal">A handle to the logical palette.</param>
    <param name="iStart">The first entry in the logical palette to be retrieved.</param>
    <param name="cEntries">The number of entries in the logical palette to be retrieved.</param>
    <param name="pPalEntries">A pointer to an array of <a href="https://docs.microsoft.com//previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures to receive the palette entries. The array must contain at least as many structures as specified by the <i>nEntries</i> parameter.</param>
    <returns>
      <para>If the function succeeds and the handle to the logical palette is a valid pointer (not <b>NULL</b>), the return value is the number of entries retrieved from the logical palette. If the function succeeds and handle to the logical palette is <b>NULL</b>, the return value is the number of entries in the given palette.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetPath">
    <summary>The <b>GetPath</b> function retrieves the coordinates defining the endpoints of lines and the control points of curves found in the path that is selected into the specified device context.</summary>
    <param name="hdc">A handle to a device context that contains a closed path.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that receives the line endpoints and curve control points, in logical coordinates.</param>
    <param name="aj">
      <para>A pointer to an array of bytes that receives the vertex types. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_MOVETO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the corresponding point in the <i>lpPoints</i> parameter starts a disjoint figure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_LINETO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the previous point and the corresponding point in <i>lpPoints</i> are the endpoints of a line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_BEZIERTO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the corresponding point in <i>lpPoints</i> is a control point or ending point for a Bézier curve.<para>PT_BEZIERTO values always occur in sets of three. The point in the path immediately preceding them defines the starting point for the Bézier curve. The first two PT_BEZIERTO points are the control points, and the third PT_BEZIERTO point is the ending (if hard-coded) point.</para></description>
        </listheader>
      </list> <para>A PT_LINETO or PT_BEZIERTO value may be combined with the following value (by using the bitwise operator OR) to indicate that the corresponding point is the last point in a figure and the figure should be closed.</para><list type="table"><listheader><description>Flag</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PT_CLOSEFIGURE</b></term></listheader></list></description><description>Specifies that the figure is automatically closed after the corresponding line or curve is drawn. The figure is closed by drawing a line from the line or curve endpoint to the point corresponding to the last PT_MOVETO.</description></listheader></list></param>
    <param name="cpt">The total number of <see cref="POINT" /> structures that can be stored in the array pointed to by <i>lpPoints</i>. This value must be the same as the number of bytes that can be placed in the array pointed to by <i>lpTypes</i>.</param>
    <returns>If the <i>nSize</i> parameter is nonzero, the return value is the number of points enumerated. If <i>nSize</i> is 0, the return value is the total number of points in the path (and <b>GetPath</b> writes nothing to the buffers). If <i>nSize</i> is nonzero and is less than the number of points in the path, the return value is 1.</returns>
  </member>
  <member name="Windows.GetPixel">
    <summary>The <b>GetPixel</b> function retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.</summary>
    <param name="hdc">A handle to the <a href="https://docs.microsoft.com//windows/win32/gdi/device-contexts">device context</a>.</param>
    <param name="x">The x-coordinate, in logical units, of the pixel to be examined.</param>
    <param name="y">The y-coordinate, in logical units, of the pixel to be examined.</param>
    <returns>The return value is the <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that specifies the RGB of the pixel. If the pixel is outside of the current clipping region, the return value is CLR_INVALID (0xFFFFFFFF defined in Wingdi.h).</returns>
  </member>
  <member name="Windows.GetPixelFormat">
    <summary>The <b>GetPixelFormat</b> function obtains the index of the currently selected pixel format of the specified device context.</summary>
    <param name="hdc">Specifies the device context of the currently selected pixel format index returned by the function.</param>
    <returns>
      <para>If the function succeeds, the return value is the currently selected pixel format index of the specified device context. This is a positive, one-based index value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPolyFillMode">
    <summary>The <b>GetPolyFillMode</b> function retrieves the current polygon fill mode.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the polygon fill mode, which can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>ALTERNATE</description>
          <description>Selects alternate mode (fills area between odd-numbered and even-numbered polygon sides on each scan line).</description>
        </listheader>
        <listheader>
          <description>WINDING</description>
          <description>Selects winding mode (fills any region with a nonzero winding value).</description>
        </listheader>
      </list> <para>If an error occurs, the return value is zero.</para></returns>
  </member>
  <member name="Windows.GetRandomRgn">
    <summary>The <b>GetRandomRgn</b> function copies the system clipping region of a specified device context to a specific region.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hrgn">A handle to a region. Before the function is called, this identifies an existing region. After the function returns, this identifies a copy of the current system region. The old region identified by <i>hrgn</i> is overwritten.</param>
    <param name="i">This parameter must be SYSRGN.</param>
    <returns>If the function succeeds, the return value is 1. If the function fails, the return value is -1. If the region to be retrieved is <b>NULL</b>, the return value is 0. If the function fails or the region to be retrieved is <b>NULL</b>, <i>hrgn</i> is not initialized.</returns>
  </member>
  <member name="Windows.GetRasterizerCaps">
    <summary>The <b>GetRasterizerCaps</b> function returns flags indicating whether TrueType fonts are installed in the system.</summary>
    <param name="lpraststat">A pointer to a <see cref="RASTERIZER_STATUS" /> structure that receives information about the rasterizer.</param>
    <param name="cjBytes">The number of bytes to be copied into the structure pointed to by the <i>lprs</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetRegionData">
    <summary>The <b>GetRegionData</b> function fills the specified buffer with data describing a region. This data includes the dimensions of the rectangles that make up the region.</summary>
    <param name="hrgn">A handle to the region.</param>
    <param name="nCount">The size, in bytes, of the <i>lpRgnData</i> buffer.</param>
    <param name="lpRgnData">A pointer to a <see cref="RGNDATA" /> structure that receives the information. The dimensions of the region are in logical units. If this parameter is <b>NULL</b>, the return value contains the number of bytes needed for the region data.</param>
    <returns>
      <para>If the function succeeds and <i>dwCount</i> specifies an adequate number of bytes, the return value is always <i>dwCount</i>. If <i>dwCount</i> is too small or the function fails, the return value is 0. If <i>lpRgnData</i> is <b>NULL</b>, the return value is the required number of bytes.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetRgnBox">
    <summary>The <b>GetRgnBox</b> function retrieves the bounding rectangle of the specified region.</summary>
    <param name="hrgn">A handle to the region.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that receives the bounding rectangle in logical units.</param>
    <returns>
      <para>The return value specifies the region's complexity. It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>Region is more than a single rectangle.</description>
        </listheader>
      </list> <para>If the <i>hrgn</i> parameter does not identify a valid region, the return value is zero.</para></returns>
  </member>
  <member name="Windows.GetROP2">
    <summary>The <b>GetROP2</b> function retrieves the foreground mix mode of the specified device context. The mix mode specifies how the pen or interior color and the color already on the screen are combined to yield a new color.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the foreground mix mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetRValue">
    <summary>The <b>GetRValue</b> macro retrieves an intensity value for the red component of a red, green, blue (RGB) value.</summary>
    <param name="rgb">Specifies an RGB color value.</param>
  </member>
  <member name="Windows.GetStockObject">
    <summary>The <b>GetStockObject</b> function retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
    <param name="i">
      <para>The type of stock object. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLACK_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Black brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DKGRAY_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Dark gray brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Solid color brush. The default color is white. The color can be changed by using the <see cref="SetDCBrushColor" /> function. For more information, see the Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRAY_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Gray brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HOLLOW_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Hollow brush (equivalent to NULL_BRUSH).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LTGRAY_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Light gray brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Null brush (equivalent to HOLLOW_BRUSH).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WHITE_BRUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>White brush.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLACK_PEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Black pen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_PEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Solid pen color. The default color is black. The color can be changed by using the <see cref="SetDCPenColor" /> function. For more information, see the Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULL_PEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Null pen. The null pen draws nothing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WHITE_PEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>White pen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANSI_FIXED_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows fixed-pitch (monospace) system font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ANSI_VAR_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows variable-pitch (proportional space) system font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_DEFAULT_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Device-dependent font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_GUI_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Default font for user interface objects such as menus and dialog boxes. It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section.<para>The default font is Tahoma.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OEM_FIXED_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYSTEM_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>System font. By default, the system uses the system font to draw menus, dialog box controls, and text. It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows; for more information, see the remarks section. <para>The default system font is Tahoma.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYSTEM_FIXED_FONT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fixed-pitch (monospace) system font. This stock object is provided only for compatibility with 16-bit Windows versions earlier than 3.0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEFAULT_PALETTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Default palette. This palette consists of the static colors in the system palette.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the requested logical object.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetStretchBltMode">
    <summary>The <b>GetStretchBltMode</b> function retrieves the current stretching mode. The stretching mode defines how color data is added to or removed from bitmaps that are stretched or compressed when the <see cref="StretchBlt" /> function is called.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the current stretching mode. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>BLACKONWHITE</description>
          <description>Performs a Boolean AND operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.</description>
        </listheader>
        <listheader>
          <description>COLORONCOLOR</description>
          <description>Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.</description>
        </listheader>
        <listheader>
          <description>HALFTONE</description>
          <description>Maps pixels from the source rectangle into blocks of pixels in the destination rectangle. The average color over the destination block of pixels approximates the color of the source pixels.</description>
        </listheader>
        <listheader>
          <description>STRETCH_ANDSCANS</description>
          <description>Same as BLACKONWHITE.</description>
        </listheader>
        <listheader>
          <description>STRETCH_DELETESCANS</description>
          <description>Same as COLORONCOLOR.</description>
        </listheader>
        <listheader>
          <description>STRETCH_HALFTONE</description>
          <description>Same as HALFTONE.</description>
        </listheader>
        <listheader>
          <description>STRETCH_ORSCANS</description>
          <description>Same as WHITEONBLACK.</description>
        </listheader>
        <listheader>
          <description>WHITEONBLACK</description>
          <description>Performs a Boolean OR operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.</description>
        </listheader>
      </list> <para>If the function fails, the return value is zero.</para></returns>
  </member>
  <member name="Windows.GetSystemPaletteEntries">
    <summary>The <b>GetSystemPaletteEntries</b> function retrieves a range of palette entries from the system palette that is associated with the specified device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iStart">The first entry to be retrieved from the system palette.</param>
    <param name="cEntries">The number of entries to be retrieved from the system palette.</param>
    <param name="pPalEntries">A pointer to an array of <a href="https://docs.microsoft.com//previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures to receive the palette entries. The array must contain at least as many structures as specified by the <i>cEntries</i> parameter. If this parameter is <b>NULL</b>, the function returns the total number of entries in the palette.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of entries retrieved from the palette.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetSystemPaletteUse">
    <summary>The <b>GetSystemPaletteUse</b> function retrieves the current state of the system (physical) palette for the specified device context (DC).</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the current state of the system palette. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>SYSPAL_NOSTATIC</description>
          <description>The system palette contains no static colors except black and white.</description>
        </listheader>
        <listheader>
          <description>SYSPAL_STATIC</description>
          <description>The system palette contains static colors that will not change when an application realizes its logical palette.</description>
        </listheader>
        <listheader>
          <description>SYSPAL_ERROR</description>
          <description>The given device context is invalid or does not support a color palette.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTextCharacterExtra">
    <summary>The <b>GetTextCharacterExtra</b> function retrieves the current intercharacter spacing for the specified device context.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the current intercharacter spacing, in logical coordinates.</para>
      <para>If the function fails, the return value is 0x8000000.</para>
    </returns>
  </member>
  <member name="Windows.GetTextCharset">
    <summary>
      <para>Retrieves a character set identifier for the font that is currently selected into a specified device context.</para>
      <div>
        <b>Note</b>  A call to this function is equivalent to a call to <see cref="GetTextCharsetInfo" /> passing <b>NULL</b> for the data buffer.</div>
    </summary>
    <param name="hdc">Handle to a device context. The function obtains a character set identifier for the font that is selected into this device context.</param>
    <returns>
      <para>If successful, returns a value identifying the character set of the font that is currently selected into the specified device context. The following character set identifiers are defined:</para>
      <para>If the function fails, it returns DEFAULT_CHARSET.</para>
    </returns>
  </member>
  <member name="Windows.GetTextCharsetInfo">
    <summary>Retrieves information about the character set of the font that is currently selected into a specified device context.</summary>
    <param name="hdc">Handle to a device context. The function obtains information about the font that is selected into this device context.</param>
    <param name="lpSig">
      <para>Pointer to a <see cref="FONTSIGNATURE" /> data structure that receives font-signature information.</para>
      <para>If a TrueType font is currently selected into the device context, the <see cref="FONTSIGNATURE" /> structure receives information that identifies the code page and Unicode subranges for which the font provides glyphs.</para>
      <para>If a font other than TrueType is currently selected into the device context, the <see cref="FONTSIGNATURE" /> structure receives zeros. In this case, the application should use the <see cref="TranslateCharsetInfo" /> function to obtain generic font-signature information for the character set.</para>
      <para>The <i>lpSig</i> parameter specifies <b>NULL</b> if the application does not require the <see cref="FONTSIGNATURE" /> information. In this case, the application can also call the <see cref="GetTextCharset" /> function, which is equivalent to calling <b>GetTextCharsetInfo</b> with <i>lpSig</i> set to <b>NULL</b>.</para>
    </param>
    <param name="dwFlags">Reserved; must be set to 0.</param>
    <returns>
      <para>If successful, returns a value identifying the character set of the font currently selected into the specified device context. The following character set identifiers are defined:</para>
      <para>If the function fails, the return value is DEFAULT_CHARSET.</para>
    </returns>
  </member>
  <member name="Windows.GetTextColor">
    <summary>The <b>GetTextColor</b> function retrieves the current text color for the specified device context.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is the current text color as a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value.</para>
      <para>If the function fails, the return value is CLR_INVALID. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPoint">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPointA">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPointW">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPointI">
    <summary>The <b>GetTextExtentExPointI</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpwszString">A pointer to an array of glyph indices for which extents are to be retrieved.</param>
    <param name="cwchString">The number of glyphs in the array pointed to by the <i>pgiIn</i> parameter.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">A pointer to an array of integers that receives partial glyph extents. Each element in the array gives the distance, in logical units, between the beginning of the glyph indices array and one of the glyphs that fits in the space specified by the <i>nMaxExtent</i> parameter. Although this array should have at least as many elements as glyph indices specified by the <i>cgi</i> parameter, the function fills the array with extents only for as many glyph indices as are specified by the <i>lpnFit</i> parameter. If <i>lpnFit</i> is <b>NULL</b>, the function does not compute partial string widths.</param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the glyph indices array, in logical units. This value cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPoint">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPointA">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentExPointW">
    <summary>The <b>GetTextExtentExPoint</b> function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters. (A text extent is the distance between the beginning of the space and a character that will fit in the space.) This information is useful for word-wrapping calculations.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpszString">A pointer to the null-terminated string for which extents are to be retrieved.</param>
    <param name="cchString">The number of characters in the string pointed to by the <i>lpszStr</i> parameter. For an ANSI call it specifies the string length in bytes and for a Unicode it specifies the string length in WORDs. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nMaxExtent">The maximum allowable width, in logical units, of the formatted string.</param>
    <param name="lpnFit">A pointer to an integer that receives a count of the maximum number of characters that will fit in the space specified by the <i>nMaxExtent</i> parameter. When the <i>lpnFit</i> parameter is <b>NULL</b>, the <i>nMaxExtent</i> parameter is ignored.</param>
    <param name="lpnDx">
      <para>A pointer to an array of integers that receives partial string extents. Each element in the array gives the distance, in logical units, between the beginning of the string and one of the characters that fits in the space specified by the <i>nMaxExtent</i> parameter. This array must have at least as many elements as characters specified by the <i>cchString</i> parameter because the entire array is used internally. The function fills the array with valid extents for as many characters as are specified by the <i>lpnFit</i> parameter. Any values in the rest of the array should be ignored. If <i>alpDx</i> is <b>NULL</b>, the function does not compute partial string widths.</para>
      <para>For complex scripts, where a sequence of characters may be represented by any number of glyphs, the values in the <i>alpDx</i> array up to the number specified by the <i>lpnFit</i> parameter match one-to-one with code points. Again, you should ignore the rest of the values in the <i>alpDx</i> array.</para>
    </param>
    <param name="lpSize">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32A">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32W">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32A">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint32W">
    <summary>The <b>GetTextExtentPoint32</b> function computes the width and height of the specified string of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a buffer that specifies the text string. The string does not need to be null-terminated, because the <i>c</i> parameter specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="psizl">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPointA">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPointW">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPointI">
    <summary>The <b>GetTextExtentPointI</b> function computes the width and height of the specified array of glyph indices.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="pgiIn">Pointer to array of glyph indices.</param>
    <param name="cgi">Specifies the number of glyph indices.</param>
    <param name="psize">Pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPoint">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPointA">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextExtentPointW">
    <summary>
      <para>The <b>GetTextExtentPoint</b> function computes the width and height of the specified string of text.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should call the <see cref="GetTextExtentPoint32" /> function, which provides more accurate results.</div>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to the string that specifies the text. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the dimensions of the string, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFace">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFaceA">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFaceW">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFace">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFaceA">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextFaceW">
    <summary>The <b>GetTextFace</b> function retrieves the typeface name of the font that is selected into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="c">The length of the buffer pointed to by <i>lpFaceName</i>. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="lpName">A pointer to the buffer that receives the typeface name. If this parameter is <b>NULL</b>, the function returns the number of characters in the name, including the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetrics">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsA">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsW">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetrics">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsA">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsW">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetrics">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsA">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetTextMetricsW">
    <summary>The <b>GetTextMetrics</b> function fills the specified buffer with the metrics for the currently selected font.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lptm">A pointer to the <see cref="TEXTMETRIC" /> structure that receives the text metrics.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetViewportExtEx">
    <summary>The <b>GetViewportExtEx</b> function retrieves the x-extent and y-extent of the current viewport for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpsize">A pointer to a <see cref="SIZE" /> structure that receives the x- and y-extents, in device units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetViewportOrgEx">
    <summary>The <b>GetViewportOrgEx</b> function retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppoint">A pointer to a <see cref="POINT" /> structure that receives the coordinates of the origin, in device units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowExtEx">
    <summary>This function retrieves the x-extent and y-extent of the window for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpsize">A pointer to a <see cref="SIZE" /> structure that receives the x- and y-extents in page-space units, that is, logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowOrgEx">
    <summary>The <b>GetWindowOrgEx</b> function retrieves the x-coordinates and y-coordinates of the window origin for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppoint">A pointer to a <see cref="POINT" /> structure that receives the coordinates, in logical units, of the window origin.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetWinMetaFileBits">
    <summary>The <b>GetWinMetaFileBits</b> function converts the enhanced-format records from a metafile into Windows-format records and stores the converted records in the specified buffer.</summary>
    <param name="hemf">A handle to the enhanced metafile.</param>
    <param name="cbData16">The size, in bytes, of the buffer into which the converted records are to be copied.</param>
    <param name="pData16">A pointer to the buffer that receives the converted records. If <i>lpbBuffer</i> is <b>NULL</b>, <b>GetWinMetaFileBits</b> returns the number of bytes required to store the converted metafile records.</param>
    <param name="iMapMode">The mapping mode to use in the converted metafile.</param>
    <param name="hdcRef">A handle to the reference device context.</param>
    <returns>
      <para>If the function succeeds and the buffer pointer is <b>NULL</b>, the return value is the number of bytes required to store the converted records; if the function succeeds and the buffer pointer is a valid pointer, the return value is the size of the metafile data in bytes.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetWorldTransform">
    <summary>The <b>GetWorldTransform</b> function retrieves the current world-space to page-space transformation.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpxf">A pointer to an <see cref="XFORM" /> structure that receives the current world-space to page-space transformation.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetYValue">
    <summary>The <b>GetYValue</b> macro retrieves the yellow color value from a CMYK color value.</summary>
    <param name="cmyk">CMYK color value from which the yellow color value will be retrieved.</param>
  </member>
  <member name="Windows.GradientFill">
    <summary>The <b>GradientFill</b> function fills rectangle and triangle structures.</summary>
    <param name="hdc">A handle to the destination device context.</param>
    <param name="pVertex">A pointer to an array of <see cref="TRIVERTEX" /> structures that each define a vertex.</param>
    <param name="nVertex">The number of vertices in <i>pVertex</i>.</param>
    <param name="pMesh">An array of <see cref="GRADIENT_TRIANGLE" /> structures in triangle mode, or an array of <see cref="GRADIENT_RECT" /> structures in rectangle mode.</param>
    <param name="nMesh">The number of elements (triangles or rectangles) in <i>pMesh</i>.</param>
    <param name="ulMode">
      <para>The gradient fill mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_RECT_H</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the <see cref="TRIVERTEX" /> structure) for the left and right edges. GDI interpolates the color from the left to right edge and fills the interior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_RECT_V</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, two endpoints describe a rectangle. The rectangle is defined to have a constant color (specified by the <see cref="TRIVERTEX" /> structure) for the top and bottom edges. GDI interpolates the color from the top to bottom edge and fills the interior.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GRADIENT_FILL_TRIANGLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>In this mode, an array of <see cref="TRIVERTEX" /> structures is passed to GDI along with a list of array indexes that describe separate triangles. GDI performs linear interpolation between triangle vertices and fills the interior. Drawing is done directly in 24- and 32-bpp modes. Dithering is performed in 16-, 8-, 4-, and 1-bpp mode.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.IntersectClipRect">
    <summary>The <b>IntersectClipRect</b> function creates a new clipping region from the intersection of the current clipping region and the specified rectangle.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
    <param name="top">The y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
    <param name="right">The x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
    <param name="bottom">The y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
    <returns>
      <para>The return value specifies the new clipping region's type and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred. (The current clipping region is unaffected.)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InvertRgn">
    <summary>The <b>InvertRgn</b> function inverts the colors in the specified region.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="hrgn">Handle to the region for which colors are inverted. The region's coordinates are presumed to be logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.LineDDA">
    <summary>The <b>LineDDA</b> function determines which pixels should be highlighted for a line defined by the specified starting and ending points.</summary>
    <param name="xStart">Specifies the x-coordinate, in logical units, of the line's starting point.</param>
    <param name="yStart">Specifies the y-coordinate, in logical units, of the line's starting point.</param>
    <param name="xEnd">Specifies the x-coordinate, in logical units, of the line's ending point.</param>
    <param name="yEnd">Specifies the y-coordinate, in logical units, of the line's ending point.</param>
    <param name="lpProc">Pointer to an application-defined callback function. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-lineddaproc">LineDDAProc</a> callback function.</param>
    <param name="data">Pointer to the application-defined data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.LineTo">
    <summary>The <b>LineTo</b> function draws a line from the current position up to, but not including, the specified point.</summary>
    <param name="hdc">Handle to a device context.</param>
    <param name="x">Specifies the x-coordinate, in logical units, of the line's ending point.</param>
    <param name="y">Specifies the y-coordinate, in logical units, of the line's ending point.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.LPtoDP">
    <summary>The <b>LPtoDP</b> function converts logical coordinates into device coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lppt">A pointer to an array of <see cref="POINT" /> structures. The x-coordinates and y-coordinates contained in each of the <b>POINT</b> structures will be transformed.</param>
    <param name="c">The number of points in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.MAKEPOINTS">
    <summary>The <b>MAKEPOINTS</b> macro converts a value that contains the x- and y-coordinates of a point into a <see cref="POINTS" /> structure.</summary>
    <param name="l">The coordinates of a point. The x-coordinate is in the low-order word, and the y-coordinate is in the high-order word.</param>
  </member>
  <member name="Windows.MAKEROP4">
    <summary>The <b>MAKEROP4</b> macro creates a quaternary raster operation code for use with the <see cref="MaskBlt" /> function. The macro takes two ternary raster operation codes as input, one for the foreground and one for the background, and packs their Boolean operation indexes into the high-order word of a 32-bit value. The low-order word of this value will be ignored.</summary>
    <param name="fore">The foreground ternary raster operation code.</param>
    <param name="back">The background ternary raster operation code.</param>
  </member>
  <member name="Windows.MaskBlt">
    <summary>The <b>MaskBlt</b> function combines the color data for the source and destination bitmaps using the specified mask and raster operation.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="width">The width, in logical units, of the destination rectangle and source bitmap.</param>
    <param name="height">The height, in logical units, of the destination rectangle and source bitmap.</param>
    <param name="hdcSrc">A handle to the device context from which the bitmap is to be copied. It must be zero if the <i>dwRop</i> parameter specifies a raster operation that does not include a source.</param>
    <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source bitmap.</param>
    <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source bitmap.</param>
    <param name="hbmMask">A handle to the monochrome mask bitmap combined with the color bitmap in the source device context.</param>
    <param name="xMask">The horizontal pixel offset for the mask bitmap specified by the <i>hbmMask</i> parameter.</param>
    <param name="yMask">The vertical pixel offset for the mask bitmap specified by the <i>hbmMask</i> parameter.</param>
    <param name="rop">
      <para>The foreground and background ternary raster operation codes (ROPs) that the function uses to control the combination of source and destination data. The background raster operation code is stored in the high-order byte of the high-order word of this value; the foreground raster operation code is stored in the low-order byte of the high-order word of this value; the low-order word of this value is ignored, and should be zero. The macro <see cref="MAKEROP4" /> creates such combinations of foreground and background raster operation codes.</para>
      <para>For a discussion of foreground and background in the context of this function, see the following Remarks section.</para>
      <para>For a list of common raster operation codes (ROPs), see the <see cref="BitBlt" /> function. Note that the CAPTUREBLT ROP generally cannot be used for printing device contexts.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ModifyWorldTransform">
    <summary>The <b>ModifyWorldTransform</b> function changes the world transformation for a device context using the specified mode.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpxf">A pointer to an <see cref="XFORM" /> structure used to modify the world transformation for the given device context.</param>
    <param name="mode">
      <para>Specifies how the transformation data modifies the current world transformation. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWT_IDENTITY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Resets the current world transformation by using the identity matrix. If this mode is specified, the <see cref="XFORM" /> structure pointed to by <i>lpXform</i> is ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWT_LEFTMULTIPLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiplies the current transformation by the data in the <see cref="XFORM" /> structure. (The data in the <b>XFORM</b> structure becomes the left multiplicand, and the data for the current transformation becomes the right multiplicand.)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWT_RIGHTMULTIPLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Multiplies the current transformation by the data in the <see cref="XFORM" /> structure. (The data in the <b>XFORM</b> structure becomes the right multiplicand, and the data for the current transformation becomes the left multiplicand.)</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.MoveToEx">
    <summary>The <b>MoveToEx</b> function updates the current position to the specified point and optionally returns the previous position.</summary>
    <param name="hdc">Handle to a device context.</param>
    <param name="x">Specifies the x-coordinate, in logical units, of the new position, in logical units.</param>
    <param name="y">Specifies the y-coordinate, in logical units, of the new position, in logical units.</param>
    <param name="lppt">Pointer to a <see cref="POINT" /> structure that receives the previous current position. If this parameter is a <b>NULL</b> pointer, the previous position is not returned.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.OffsetClipRgn">
    <summary>The <b>OffsetClipRgn</b> function moves the clipping region of a device context by the specified offsets.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The number of logical units to move left or right.</param>
    <param name="y">The number of logical units to move up or down.</param>
    <returns>
      <para>The return value specifies the new region's complexity and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred. (The current clipping region is unaffected.)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.OffsetRgn">
    <summary>The <b>OffsetRgn</b> function moves a region by the specified offsets.</summary>
    <param name="hrgn">Handle to the region to be moved.</param>
    <param name="x">Specifies the number of logical units to move left or right.</param>
    <param name="y">Specifies the number of logical units to move up or down.</param>
    <returns>
      <para>The return value specifies the new region's complexity. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>ERROR</description>
          <description>An error occurred; region is unaffected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.OffsetViewportOrgEx">
    <summary>The <b>OffsetViewportOrgEx</b> function modifies the viewport origin for a device context using the specified horizontal and vertical offsets.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The horizontal offset, in device units.</param>
    <param name="y">The vertical offset, in device units.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure. The previous viewport origin, in device units, is placed in this structure. If <i>lpPoint</i> is <b>NULL</b>, the previous viewport origin is not returned.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.OffsetWindowOrgEx">
    <summary>The <b>OffsetWindowOrgEx</b> function modifies the window origin for a device context using the specified horizontal and vertical offsets.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The horizontal offset, in logical units.</param>
    <param name="y">The vertical offset, in logical units.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure. The logical coordinates of the previous window origin are placed in this structure. If <i>lpPoint</i> is <b>NULL</b>, the previous origin is not returned.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PaintRgn">
    <summary>The <b>PaintRgn</b> function paints the specified region by using the brush currently selected into the device context.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="hrgn">Handle to the region to be filled. The region's coordinates are presumed to be logical coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PALETTEINDEX">
    <summary>The <b>PALETTEINDEX</b> macro accepts an index to a logical-color palette entry and returns a palette-entry specifier consisting of a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that specifies the color associated with the given index. An application using a logical palette can pass this specifier, instead of an explicit red, green, blue (RGB) value, to GDI functions that expect a color. This allows the function to use the color in the specified palette entry.</summary>
    <param name="i">An index to the palette entry containing the color to be used for a graphics operation.</param>
  </member>
  <member name="Windows.PALETTERGB">
    <summary>The <b>PALETTERGB</b> macro accepts three values that represent the relative intensities of red, green, and blue and returns a palette-relative red, green, blue (RGB) specifier consisting of 2 in the high-order byte and an RGB value in the three low-order bytes. An application using a color palette can pass this specifier, instead of an explicit RGB value, to functions that expect a color.</summary>
    <param name="r">The intensity of the red color field.</param>
    <param name="g">The intensity of the green color field.</param>
    <param name="b">The intensity of the blue color field.</param>
  </member>
  <member name="Windows.PatBlt">
    <summary>The <b>PatBlt</b> function paints the specified rectangle using the brush that is currently selected into the specified device context. The brush color and the surface color or colors are combined by using the specified raster operation.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical units, of the upper-left corner of the rectangle to be filled.</param>
    <param name="y">The y-coordinate, in logical units, of the upper-left corner of the rectangle to be filled.</param>
    <param name="w">The width, in logical units, of the rectangle.</param>
    <param name="h">The height, in logical units, of the rectangle.</param>
    <param name="rop">
      <para>The raster operation code. This code can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATCOPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the specified pattern into the destination bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATINVERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Combines the colors of the specified pattern with the colors of the destination rectangle by using the Boolean XOR operator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DSTINVERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Inverts the destination rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLACKNESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WHITENESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PathToRegion">
    <summary>The <b>PathToRegion</b> function creates a region from the path that is selected into the specified device context. The resulting region uses device coordinates.</summary>
    <param name="hdc">Handle to a device context that contains a closed path.</param>
    <returns>
      <para>If the function succeeds, the return value identifies a valid region.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.Pie">
    <summary>The <b>Pie</b> function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by using the current pen and filled by using the current brush.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the bounding rectangle.</param>
    <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the bounding rectangle.</param>
    <param name="xr1">The x-coordinate, in logical coordinates, of the endpoint of the first radial.</param>
    <param name="yr1">The y-coordinate, in logical coordinates, of the endpoint of the first radial.</param>
    <param name="xr2">The x-coordinate, in logical coordinates, of the endpoint of the second radial.</param>
    <param name="yr2">The y-coordinate, in logical coordinates, of the endpoint of the second radial.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PlayEnhMetaFile">
    <summary>The <b>PlayEnhMetaFile</b> function displays the picture stored in the specified enhanced-format metafile.</summary>
    <param name="hdc">A handle to the device context for the output device on which the picture will appear.</param>
    <param name="hmf">A handle to the enhanced metafile.</param>
    <param name="lprect">A pointer to a <see cref="RECT" /> structure that contains the coordinates of the bounding rectangle used to display the picture. The coordinates are specified in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PlayEnhMetaFileRecord">
    <summary>The <b>PlayEnhMetaFileRecord</b> function plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record.</summary>
    <param name="hdc">A handle to the device context passed to the <see cref="EnumEnhMetaFile" /> function.</param>
    <param name="pht">A pointer to a table of handles to GDI objects used when playing the metafile. The first entry in this table contains the enhanced-metafile handle.</param>
    <param name="pmr">A pointer to the enhanced-metafile record to be played.</param>
    <param name="cht">The number of handles in the handle table.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PlayMetaFile">
    <summary>
      <para>The <b>PlayMetaFile</b> function displays the picture stored in the given Windows-format metafile on the specified device.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="PlayEnhMetaFile" />.</div>
    </summary>
    <param name="hdc">Handle to a device context.</param>
    <param name="hmf">Handle to a Windows-format metafile.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PlayMetaFileRecord">
    <summary>
      <para>The <b>PlayMetaFileRecord</b> function plays a Windows-format metafile record by executing the graphics device interface (GDI) function contained within that record.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="PlayEnhMetaFileRecord" />.</div>
    </summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="lpHandleTable">A pointer to a <see cref="HANDLETABLE" /> structure representing the table of handles to GDI objects used when playing the metafile.</param>
    <param name="lpMR">A pointer to the Windows-format metafile record.</param>
    <param name="noObjs">The number of handles in the handle table.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PlgBlt">
    <summary>The <b>PlgBlt</b> function performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the destination device context. If the given bitmask handle identifies a valid monochrome bitmap, the function uses this bitmap to mask the bits of color data from the source rectangle.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="lpPoint">A pointer to an array of three points in logical space that identify three corners of the destination parallelogram. The upper-left corner of the source rectangle is mapped to the first point in this array, the upper-right corner to the second point in this array, and the lower-left corner to the third point. The lower-right corner of the source rectangle is mapped to the implicit fourth point in the parallelogram.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="width">The width, in logical units, of the source rectangle.</param>
    <param name="height">The height, in logical units, of the source rectangle.</param>
    <param name="hbmMask">A handle to an optional monochrome bitmap that is used to mask the colors of the source rectangle.</param>
    <param name="xMask">The x-coordinate, in logical units, of the upper-left corner of the monochrome bitmap.</param>
    <param name="yMask">The y-coordinate, in logical units, of the upper-left corner of the monochrome bitmap.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyBezier">
    <summary>The <b>PolyBezier</b> function draws one or more Bézier curves.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that contain the endpoints and control points of the curve(s), in logical units.</param>
    <param name="cpt">The number of points in the <i>lppt</i> array. This value must be one more than three times the number of curves to be drawn, because each Bézier curve requires two control points and an endpoint, and the initial curve requires an additional starting point.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyBezierTo">
    <summary>The <b>PolyBezierTo</b> function draws one or more Bézier curves.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that contains the endpoints and control points, in logical units.</param>
    <param name="cpt">The number of points in the <i>lppt</i> array. This value must be three times the number of curves to be drawn because each Bézier curve requires two control points and an ending point.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyDraw">
    <summary>The <b>PolyDraw</b> function draws a set of line segments and Bézier curves.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that contains the endpoints for each line segment and the endpoints and control points for each Bézier curve, in logical units.</param>
    <param name="aj">
      <para>A pointer to an array that specifies how each point in the <i>lppt</i> array is used. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Type</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_MOVETO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that this point starts a disjoint figure. This point becomes the new current position.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_LINETO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that a line is to be drawn from the current position to this point, which then becomes the new current position.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PT_BEZIERTO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that this point is a control point or ending point for a Bézier curve.<para>PT_BEZIERTO types always occur in sets of three. The current position defines the starting point for the Bézier curve. The first two PT_BEZIERTO points are the control points, and the third PT_BEZIERTO point is the ending point. The ending point becomes the new current position. If there are not three consecutive PT_BEZIERTO points, an error results.</para></description>
        </listheader>
      </list> <para>A PT_LINETO or PT_BEZIERTO type can be combined with the following value by using the bitwise operator OR to indicate that the corresponding point is the last point in a figure and the figure is closed.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PT_CLOSEFIGURE</b></term></listheader></list></description><description>Specifies that the figure is automatically closed after the PT_LINETO or PT_BEZIERTO type for this point is done. A line is drawn from this point to the most recent PT_MOVETO or <see cref="MoveToEx" /> point.<para>This value is combined with the PT_LINETO type for a line, or with the PT_BEZIERTO type of the ending point for a Bézier curve, by using the bitwise operator OR.</para><para>The current position is set to the ending point of the closing line.</para></description></listheader></list></param>
    <param name="cpt">The total number of points in the <i>lppt</i> array, the same as the number of bytes in the <i>lpbTypes</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.Polygon">
    <summary>The <b>Polygon</b> function draws a polygon consisting of two or more vertices connected by straight lines. The polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that specify the vertices of the polygon, in logical coordinates.</param>
    <param name="cpt">The number of vertices in the array. This value must be greater than or equal to 2.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.Polyline">
    <summary>The <b>Polyline</b> function draws a series of line segments by connecting the points in the specified array.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures, in logical units.</param>
    <param name="cpt">The number of points in the array. This number must be greater than or equal to two.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolylineTo">
    <summary>The <b>PolylineTo</b> function draws one or more straight lines.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that contains the vertices of the line, in logical units.</param>
    <param name="cpt">The number of points in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyPolygon">
    <summary>The <b>PolyPolygon</b> function draws a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode. The polygons drawn by this function can overlap.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that define the vertices of the polygons, in logical coordinates. The polygons are specified consecutively. Each polygon is closed automatically by drawing a line from the last vertex to the first. Each vertex should be specified once.</param>
    <param name="asz">A pointer to an array of integers, each of which specifies the number of points in the corresponding polygon. Each integer must be greater than or equal to 2.</param>
    <param name="csz">The total number of polygons.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyPolyline">
    <summary>The <b>PolyPolyline</b> function draws multiple series of connected line segments.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="apt">A pointer to an array of <see cref="POINT" /> structures that contains the vertices of the polylines, in logical units. The polylines are specified consecutively.</param>
    <param name="asz">A pointer to an array of variables specifying the number of points in the <i>lppt</i> array for the corresponding polyline. Each entry must be greater than or equal to two.</param>
    <param name="csz">The total number of entries in the <i>lpdwPolyPoints</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOut">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOutA">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOutW">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOut">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOutA">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PolyTextOutW">
    <summary>The <b>PolyTextOut</b> function draws several strings using the font and text colors currently selected in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="ppt">A pointer to an array of <see cref="POLYTEXT" /> structures describing the strings to be drawn. The array contains one structure for each string to be drawn.</param>
    <param name="nstrings">The number of <see cref="POLYTEXT" /> structures in the <i>pptxt</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PtInRegion">
    <summary>The <b>PtInRegion</b> function determines whether the specified point is inside the specified region.</summary>
    <param name="hrgn">Handle to the region to be examined.</param>
    <param name="x">Specifies the x-coordinate of the point in logical units.</param>
    <param name="y">Specifies the y-coordinate of the point in logical units.</param>
    <returns>
      <para>If the specified point is in the region, the return value is nonzero.</para>
      <para>If the specified point is not in the region, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PtVisible">
    <summary>The <b>PtVisible</b> function determines whether the specified point is within the clipping region of a device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical units, of the point.</param>
    <param name="y">The y-coordinate, in logical units, of the point.</param>
    <returns>
      <para>If the specified point is within the clipping region of the device context, the return value is <b>TRUE</b>(1).</para>
      <para>If the specified point is not within the clipping region of the device context, the return value is <b>FALSE</b>(0).</para>
      <para>If the <b>HDC</b> is not valid, the return value is (BOOL)-1.</para>
    </returns>
  </member>
  <member name="Windows.RealizePalette">
    <summary>The <b>RealizePalette</b> function maps palette entries from the current logical palette to the system palette.</summary>
    <param name="hdc">A handle to the device context into which a logical palette has been selected.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of entries in the logical palette mapped to the system palette.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.Rectangle">
    <summary>The <b>Rectangle</b> function draws a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
    <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
    <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
    <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RectInRegion">
    <summary>The <b>RectInRegion</b> function determines whether any part of the specified rectangle is within the boundaries of a region.</summary>
    <param name="hrgn">Handle to the region.</param>
    <param name="lprect">Pointer to a <see cref="RECT" /> structure containing the coordinates of the rectangle in logical units. The lower and right edges of the rectangle are not included.</param>
    <returns>
      <para>If any part of the specified rectangle lies within the boundaries of the region, the return value is nonzero.</para>
      <para>If no part of the specified rectangle lies within the boundaries of the region, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RectVisible">
    <summary>The <b>RectVisible</b> function determines whether any part of the specified rectangle lies within the clipping region of a device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lprect">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the specified rectangle.</param>
    <returns>
      <para>If the current transform does not have a rotation and the rectangle lies within the clipping region, the return value is <b>TRUE</b> (1).</para>
      <para>If the current transform does not have a rotation and the rectangle does not lie within the clipping region, the return value is <b>FALSE</b> (0).</para>
      <para>If the current transform has a rotation and the rectangle lies within the clipping region, the return value is 2.</para>
      <para>If the current transform has a rotation and the rectangle does not lie within the clipping region, the return value is 1.</para>
      <para>All other return values are considered error codes. If the any parameter is not valid, the return value is undefined.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontMemResourceEx">
    <summary>The <b>RemoveFontMemResourceEx</b> function removes the fonts added from a memory image file.</summary>
    <param name="h">A handle to the font-resource. This handle is returned by the <see cref="AddFontMemResourceEx" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResource">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceA">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceW">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceEx">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceExA">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceExW">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceEx">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceExA">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceExW">
    <summary>The <b>RemoveFontResourceEx</b> function removes the fonts in the specified file from the system font table.</summary>
    <param name="name">A pointer to a null-terminated string that names a font resource file.</param>
    <param name="fl">The characteristics of the font to be removed from the system. In order for the font to be removed, the flags used must be the same as when the font was added with the <see cref="AddFontResourceEx" /> function. See the <b>AddFontResourceEx</b> function for more information.</param>
    <param name="pdv">Reserved. Must be zero.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. No extended error information is available.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResource">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceA">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveFontResourceW">
    <summary>
      <para>The <b>RemoveFontResource</b> function removes the fonts in the specified file from the system font table.</para>
      <para>If the font was added using the <see cref="AddFontResourceEx" /> function, you must use the <see cref="RemoveFontResourceEx" /> function.</para>
    </summary>
    <param name="lpFileName">A pointer to a null-terminated string that names a font resource file.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ResetDC">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResetDCA">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResetDCW">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResetDC">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResetDCA">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResetDCW">
    <summary>The <b>ResetDC</b> function updates the specified printer or plotter device context (DC) using the specified information.</summary>
    <param name="hdc">A handle to the DC to update.</param>
    <param name="lpdm">A pointer to a <see cref="DEVMODE" /> structure containing information about the new DC.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the original DC.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ResizePalette">
    <summary>The <b>ResizePalette</b> function increases or decreases the size of a logical palette based on the specified value.</summary>
    <param name="hpal">A handle to the palette to be changed.</param>
    <param name="n">
      <para>The number of entries in the palette after it has been resized.</para>
      <para>The number of entries is limited to 1024.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RestoreDC">
    <summary>The <b>RestoreDC</b> function restores a device context (DC) to the specified state. The DC is restored by popping state information off a stack created by earlier calls to the <see cref="SaveDC" /> function.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="nSavedDC">The saved state to be restored. If this parameter is positive, <i>nSavedDC</i> represents a specific instance of the state to be restored. If this parameter is negative, <i>nSavedDC</i> represents an instance relative to the current state. For example, -1 restores the most recently saved state.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RGB">
    <summary>The <b>RGB</b> macro selects a red, green, blue (RGB) color based on the arguments supplied and the color capabilities of the output device.</summary>
    <param name="r">The intensity of the red color.</param>
    <param name="g">The intensity of the green color.</param>
    <param name="b">The intensity of the blue color.</param>
  </member>
  <member name="Windows.RoundRect">
    <summary>The <b>RoundRect</b> function draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="left">The x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
    <param name="top">The y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
    <param name="right">The x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
    <param name="bottom">The y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
    <param name="width">The width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
    <param name="height">The height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SaveDC">
    <summary>The <b>SaveDC</b> function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack.</summary>
    <param name="hdc">A handle to the DC whose state is to be saved.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the saved state.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ScaleViewportExtEx">
    <summary>The <b>ScaleViewportExtEx</b> function modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="xn">The amount by which to multiply the current horizontal extent.</param>
    <param name="dx">The amount by which to divide the current horizontal extent.</param>
    <param name="yn">The amount by which to multiply the current vertical extent.</param>
    <param name="yd">The amount by which to divide the current vertical extent.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the previous viewport extents, in device units. If <i>lpSize</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ScaleWindowExtEx">
    <summary>The <b>ScaleWindowExtEx</b> function modifies the window for a device context using the ratios formed by the specified multiplicands and divisors.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="xn">The amount by which to multiply the current horizontal extent.</param>
    <param name="xd">The amount by which to divide the current horizontal extent.</param>
    <param name="yn">The amount by which to multiply the current vertical extent.</param>
    <param name="yd">The amount by which to divide the current vertical extent.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the previous window extents, in logical units. If <i>lpSize</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SelectClipPath">
    <summary>The <b>SelectClipPath</b> function selects the current path as a clipping region for a device context, combining the new region with any existing clipping region using the specified mode.</summary>
    <param name="hdc">A handle to the device context of the path.</param>
    <param name="mode">
      <para>The way to use the path. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_AND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region includes the intersection (overlapping areas) of the current clipping region and the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_COPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region is the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_DIFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region includes the areas of the current clipping region with those of the current path excluded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_OR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region includes the union (combined areas) of the current clipping region and the current path.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RGN_XOR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The new clipping region includes the union of the current clipping region and the current path but without the overlapping areas.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SelectClipRgn">
    <summary>The <b>SelectClipRgn</b> function selects a region as the current clipping region for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hrgn">A handle to the region to be selected.</param>
    <returns>
      <para>The return value specifies the region's complexity and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred. (The previous clipping region is unaffected.)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SelectObject">
    <summary>The <b>SelectObject</b> function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="h">
      <para>A handle to the object to be selected. The specified object must have been created by using one of the following functions.</para>
      <list type="table">
        <listheader>
          <description>Object</description>
          <description>Functions</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Bitmap</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <para>
              <see cref="CreateBitmap" />, <see cref="CreateBitmapIndirect" />, <see cref="CreateCompatibleBitmap" />, <see cref="CreateDIBitmap" />, <see cref="CreateDIBSection" /></para>
            <para>Bitmaps can only be selected into memory DC's. A single bitmap cannot be selected into more than one DC at the same time.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Brush</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CreateBrushIndirect" />, <see cref="CreateDIBPatternBrush" />, <see cref="CreateDIBPatternBrushPt" />, <see cref="CreateHatchBrush" />, <see cref="CreatePatternBrush" />, <see cref="CreateSolidBrush" /></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Font</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CreateFont" />, <see cref="CreateFontIndirect" /></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Pen</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CreatePen" />, <see cref="CreatePenIndirect" /></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Region</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CombineRgn" />, <see cref="CreateEllipticRgn" />, <see cref="CreateEllipticRgnIndirect" />, <see cref="CreatePolygonRgn" />, <see cref="CreateRectRgn" />, <see cref="CreateRectRgnIndirect" /></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced. If the selected object is a region and the function succeeds, the return value is one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>Region consists of a single rectangle.</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>Region consists of more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>Region is empty.</description>
        </listheader>
      </list> <para>If an error occurs and the selected object is not a region, the return value is <b>NULL</b>. Otherwise, it is HGDI_ERROR.</para></returns>
  </member>
  <member name="Windows.SelectPalette">
    <summary>The <b>SelectPalette</b> function selects the specified logical palette into a device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="hPal">A handle to the logical palette to be selected.</param>
    <param name="bForceBkgd">
      <para>Specifies whether the logical palette is forced to be a background palette. If this value is <b>TRUE</b>, the <see cref="RealizePalette" /> function causes the logical palette to be mapped to the colors already in the physical palette in the best possible way. This is always done, even if the window for which the palette is realized belongs to a thread without active focus.</para>
      <para>If this value is <b>FALSE</b>, <see cref="RealizePalette" /> causes the logical palette to be copied into the device palette when the application is in the foreground. (If the <i>hdc</i> parameter is a memory device context, this parameter is ignored.)</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the device context's previous logical palette.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetAbortProc">
    <summary>The <b>SetAbortProc</b> function sets the application-defined abort function that allows a print job to be canceled during spooling.</summary>
    <param name="hdc">Handle to the device context for the print job.</param>
    <param name="proc">Pointer to the application-defined abort function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/wingdi/nc-wingdi-abortproc">AbortProc</a> callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero.</para>
      <para>If the function fails, the return value is SP_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.SetArcDirection">
    <summary>The <b>SetArcDirection</b> sets the drawing direction to be used for arc and rectangle functions.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="dir">
      <para>The new arc direction. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AD_COUNTERCLOCKWISE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Figures drawn counterclockwise.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AD_CLOCKWISE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Figures drawn clockwise.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the old arc direction.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetBitmapBits">
    <summary>
      <para>The <b>SetBitmapBits</b> function sets the bits of color data for a bitmap to the specified values.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="SetDIBits" /> function.</div>
    </summary>
    <param name="hbm">A handle to the bitmap to be set. This must be a compatible bitmap (DDB).</param>
    <param name="cb">The number of bytes pointed to by the <i>lpBits</i> parameter.</param>
    <param name="pvBits">A pointer to an array of bytes that contain color data for the specified bitmap.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of bytes used in setting the bitmap bits.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetBitmapDimensionEx">
    <summary>The <b>SetBitmapDimensionEx</b> function assigns preferred dimensions to a bitmap. These dimensions can be used by applications; however, they are not used by the system.</summary>
    <param name="hbm">A handle to the bitmap. The bitmap cannot be a DIB-section bitmap.</param>
    <param name="w">The width, in 0.1-millimeter units, of the bitmap.</param>
    <param name="h">The height, in 0.1-millimeter units, of the bitmap.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure to receive the previous dimensions of the bitmap. This pointer can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetBkColor">
    <summary>The <b>SetBkColor</b> function sets the current background color to the specified color value, or to the nearest physical color if the device cannot represent the specified color value.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="color">The new background color. To make a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the previous background color as a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.SetBkMode">
    <summary>The <b>SetBkMode</b> function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="mode">
      <para>The background mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OPAQUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Background is filled with the current background color before the text, hatched brush, or pen is drawn.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRANSPARENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Background remains untouched.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the previous background mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetBoundsRect">
    <summary>The <b>SetBoundsRect</b> function controls the accumulation of bounding rectangle information for the specified device context. The system can maintain a bounding rectangle for all drawing operations. An application can examine and set this rectangle. The drawing boundaries are useful for invalidating bitmap caches.</summary>
    <param name="hdc">A handle to the device context for which to accumulate bounding rectangles.</param>
    <param name="lprect">A pointer to a <see cref="RECT" /> structure used to set the bounding rectangle. Rectangle dimensions are in logical coordinates. This parameter can be <b>NULL</b>.</param>
    <param name="flags">
      <para>Specifies how the new rectangle will be combined with the accumulated rectangle. This parameter can be one of more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCB_ACCUMULATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Adds the rectangle specified by the <i>lprcBounds</i> parameter to the bounding rectangle (using a rectangle union operation). Using both DCB_RESET and DCB_ACCUMULATE sets the bounding rectangle to the rectangle specified by the <i>lprcBounds</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCB_DISABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off boundary accumulation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCB_ENABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns on boundary accumulation, which is disabled by default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCB_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Clears the bounding rectangle.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the previous state of the bounding rectangle. This state can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DCB_DISABLE</description>
          <description>Boundary accumulation is off.</description>
        </listheader>
        <listheader>
          <description>DCB_ENABLE</description>
          <description>Boundary accumulation is on. DCB_ENABLE and DCB_DISABLE are mutually exclusive.</description>
        </listheader>
        <listheader>
          <description>DCB_RESET</description>
          <description>Bounding rectangle is empty.</description>
        </listheader>
        <listheader>
          <description>DCB_SET</description>
          <description>Bounding rectangle is not empty. DCB_SET and DCB_RESET are mutually exclusive.</description>
        </listheader>
      </list> <para>If the function fails, the return value is zero.</para></returns>
  </member>
  <member name="Windows.SetBrushOrgEx">
    <summary>The <b>SetBrushOrgEx</b> function sets the brush origin that GDI assigns to the next brush an application selects into the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in device units, of the new brush origin. If this value is greater than the brush width, its value is reduced using the modulus operator (<i>nXOrg</i><b>mod</b> brush width).</param>
    <param name="y">The y-coordinate, in device units, of the new brush origin. If this value is greater than the brush height, its value is reduced using the modulus operator (<i>nYOrg</i><b>mod</b> brush height).</param>
    <param name="lppt">
      <para>A pointer to a <see cref="POINT" /> structure that receives the previous brush origin.</para>
      <para>This parameter can be <b>NULL</b> if the previous brush origin is not required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetColorAdjustment">
    <summary>The <b>SetColorAdjustment</b> function sets the color adjustment values for a device context (DC) using the specified values.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpca">A pointer to a <see cref="COLORADJUSTMENT" /> structure containing the color adjustment values.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetColorSpace">
    <summary>The <b>SetColorSpace</b> function defines the input <a href="https://docs.microsoft.com//windows/win32/wcs/c#color-space">color space</a> for a given device context.</summary>
    <param name="hdc">Specifies the handle to a device context.</param>
    <param name="hcs">Identifies handle to the color space to set.</param>
    <returns>
      <para>If this function succeeds, the return value is a handle to the <i>hColorSpace</i> being replaced.</para>
      <para>If this function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetDCBrushColor">
    <summary>
      <b>SetDCBrushColor</b> function sets the current device context (DC) brush color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="color">The new brush color.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the previous DC brush color as a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.SetDCPenColor">
    <summary>
      <b>SetDCPenColor</b> function sets the current device context (DC) pen color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="color">The new pen color.</param>
    <returns>If the function succeeds, the return value specifies the previous DC pen color as a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value. If the function fails, the return value is CLR_INVALID.</returns>
  </member>
  <member name="Windows.SetDeviceGammaRamp">
    <summary>
      <para>The <b>SetDeviceGammaRamp</b> function sets the <a href="https://docs.microsoft.com//windows/win32/wcs/g">gamma ramp</a> on direct color display boards having drivers that support downloadable gamma ramps in hardware.</para>
      <blockquote>
        <para>[!IMPORTANT] We strongly recommend that you don't use this API. Use of this API is subject to major limitations:</para>
        <list type="bullet">
          <item>
            <description>
              <b>SetDeviceGammaRamp</b> implements heuristics to check whether a provided ramp will result in an unreadable screen. If a ramp violates those heuristics, then the function fails silently (that is, it returns <b>TRUE</b>, but it doesn't set your ramp). For that reason, you can't expect to use this function to set <i>just any arbitrary</i> gamma ramp. In particular, the heuristics prevent ramps that would result in nearly all pixels approaching a single value (such as fullscreen black/white) as this may prevent a user from recovering the screen.</description>
          </item>
          <item>
            <description>Because of the function's global nature, any other application on the system could, at any time, overwrite any ramp that you've set. In some cases the operating system itself may reserve the use of this function, causing any existing ramp to be overwritten. The gamma ramp is also reset on most display events (connecting/disconnecting a monitor, resolution changes, etc.). So you can't be certain that any ramp you set is in effect.</description>
          </item>
          <item>
            <description>This API has undefined behavior in HDR modes.</description>
          </item>
          <item>
            <description>This API has undefined interaction with both built-in and third-party color calibration solutions.</description>
          </item>
        </list>
        <para>For color calibration, we recommend that you create an International Color Consortium (ICC) profile, and let the OS apply the profile. For advanced original equipment manufacturer (OEM) scenarios, there's a device driver model that you can use to customize color calibration more directly. See the <a href="https://docs.microsoft.com//windows/win32/wcs/windows-color-system">Windows Color System</a> for information on managing color profiles.</para>
        <para>For blue light filtering, Windows now provides built-in support called <a href="https://support.microsoft.com/help/4027563/windows-10-set-your-display-for-night-time">Night Light</a>. We recommend directing users to this feature.</para>
        <para>For color adaptation (for example, adjusting color calibration based on ambient light sensors), Windows now provides built-in support, which we recommend for use by OEMs.</para>
        <para>For custom filter effects, there are a variety of built-in accessibility <a href="https://support.microsoft.com/help/4344736/windows-10-use-color-filters">color filters</a> to help with a range of cases.</para>
      </blockquote>
    </summary>
    <param name="hdc">Specifies the device context of the direct color display board in question.</param>
    <param name="lpRamp">Pointer to a buffer containing the gamma ramp to be set. The gamma ramp is specified in three arrays of 256 <b>WORD</b> elements each, which contain the mapping between RGB values in the frame buffer and digital-analog-converter (<i>DAC</i> ) values. The sequence of the arrays is red, green, blue. The RGB values must be stored in the most significant bits of each WORD to increase DAC independence.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetDIBColorTable">
    <summary>The <b>SetDIBColorTable</b> function sets RGB (red, green, blue) color values in a range of entries in the color table of the DIB that is currently selected into a specified device context.</summary>
    <param name="hdc">A device context. A DIB must be selected into this device context.</param>
    <param name="iStart">A zero-based color table index that specifies the first color table entry to set.</param>
    <param name="cEntries">The number of color table entries to set.</param>
    <param name="prgbq">A pointer to an array of <see cref="RGBQUAD" /> structures containing new color information for the DIB's color table.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of color table entries that the function sets.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetDIBits">
    <summary>The <b>SetDIBits</b> function sets the pixels in a compatible bitmap (DDB) using the color data found in the specified DIB.</summary>
    <param name="hdc">A handle to a device context.</param>
    <param name="hbm">A handle to the compatible bitmap (DDB) that is to be altered using the color data from the specified DIB.</param>
    <param name="start">The starting scan line for the device-independent color data in the array pointed to by the <i>lpvBits</i> parameter.</param>
    <param name="cLines">The number of scan lines found in the array containing device-independent color data.</param>
    <param name="lpBits">A pointer to the DIB color data, stored as an array of bytes. The format of the bitmap values depends on the <b>biBitCount</b> member of the <see cref="BITMAPINFO" /> structure pointed to by the <i>lpbmi</i> parameter.</param>
    <param name="lpbmi">A pointer to a <see cref="BITMAPINFO" /> structure that contains information about the DIB.</param>
    <param name="ColorUse">
      <para>Indicates whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure was provided and, if so, whether <b>bmiColors</b> contains explicit red, green, blue (RGB) values or palette indexes. The <i>fuColorUse</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table consists of an array of 16-bit indexes into the logical palette of the device context identified by the <i>hdc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table is provided and contains literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of scan lines copied.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>This can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetDIBitsToDevice">
    <summary>The <b>SetDIBitsToDevice</b> function sets the pixels in the specified rectangle on the device that is associated with the destination device context using color data from a DIB, JPEG, or PNG image.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="w">The width, in logical units, of the image.</param>
    <param name="h">The height, in logical units, of the image.</param>
    <param name="xSrc">The x-coordinate, in logical units, of the lower-left corner of the image.</param>
    <param name="ySrc">The y-coordinate, in logical units, of the lower-left corner of the image.</param>
    <param name="StartScan">The starting scan line in the image.</param>
    <param name="cLines">The number of DIB scan lines contained in the array pointed to by the <i>lpvBits</i> parameter.</param>
    <param name="lpvBits">A pointer to the color data stored as an array of bytes. For more information, see the following Remarks section.</param>
    <param name="lpbmi">A pointer to a <see cref="BITMAPINFO" /> structure that contains information about the DIB.</param>
    <param name="ColorUse">
      <para>Indicates whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure contains explicit red, green, blue (RGB) values or indexes into a palette. For more information, see the following Remarks section.</para>
      <para>The <i>fuColorUse</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table consists of an array of 16-bit indexes into the currently selected logical palette.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table contains literal RGB values.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of scan lines set.</para>
      <para>If zero scan lines are set (such as when <i>dwHeight</i> is 0) or the function fails, the function returns zero.</para>
      <para>If the driver cannot support the JPEG or PNG file image passed to <b>SetDIBitsToDevice</b>, the function will fail and return GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a bitmap, and then pass the bitmap to <b>SetDIBitsToDevice</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetEnhMetaFileBits">
    <summary>The <b>SetEnhMetaFileBits</b> function creates a memory-based enhanced-format metafile from the specified data.</summary>
    <param name="nSize">Specifies the size, in bytes, of the data provided.</param>
    <param name="pb">Pointer to a buffer that contains enhanced-metafile data. (It is assumed that the data in the buffer was obtained by calling the <see cref="GetEnhMetaFileBits" /> function.)</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a memory-based enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetGraphicsMode">
    <summary>The <b>SetGraphicsMode</b> function sets the graphics mode for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iMode">
      <para>The graphics mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GM_COMPATIBLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the graphics mode that is compatible with 16-bit Windows. This is the default mode. If this value is specified, the application can only modify the world-to-device transform by calling functions that set window and viewport extents and origins, but not by using <see cref="SetWorldTransform" /> or <see cref="ModifyWorldTransform" />; calls to those functions will fail. Examples of functions that set window and viewport extents and origins are <see cref="SetViewportExtEx" /> and <see cref="SetWindowExtEx" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GM_ADVANCED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the advanced graphics mode that allows world transformations. This value must be specified if the application will set or modify the world transformation for the specified device context. In this mode all graphics, including text output, fully conform to the world-to-device transformation specified in the device context.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the old graphics mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetICMMode">
    <summary>The <b>SetICMMode</b> function causes Image Color Management to be enabled, disabled, or queried on a given device context (DC).</summary>
    <param name="hdc">Identifies handle to the device context.</param>
    <param name="mode">
      <para>Turns on and off image color management. This parameter can take one of the following constant values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns on color management. Turns off old-style color correction of halftones.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_OFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off color management. Turns on old-style color correction of halftones.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Queries the current state of color management.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DONE_OUTSIDEDC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off color management inside DC. Under Windows 2000, also turns off old-style color correction of halftones. Not supported under Windows 95.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is a nonzero value.</para>
      <para>If this function fails, the return value is zero.</para>
      <para>If ICM_QUERY is specified and the function succeeds, the nonzero value returned is ICM_ON or ICM_OFF to indicate the current mode.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfile">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfileA">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfileW">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfile">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfileA">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetICMProfileW">
    <summary>The <b>SetICMProfile</b> function sets a specified color profile as the output profile for a specified device context (DC).</summary>
    <param name="hdc">Specifies a device context in which to set the color profile.</param>
    <param name="lpFileName">Specifies the path name of the color profile to be set.</param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetLayout">
    <summary>The <b>SetLayout</b> function changes the layout of a device context (DC).</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="l">
      <para>The DC layout. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LAYOUT_BITMAPORIENTATIONPRESERVED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables any reflection during <see cref="BitBlt" /> and <see cref="StretchBlt" /> operations.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LAYOUT_RTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the default horizontal layout to be right to left.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns the previous layout of the DC.</para>
      <para>If the function fails, it returns GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.SetMapMode">
    <summary>The <b>SetMapMode</b> function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="iMode">
      <para>The new mapping mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_ANISOTROPIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Logical units are mapped to arbitrary units with arbitrarily scaled axes. Use the <see cref="SetWindowExtEx" /> and <see cref="SetViewportExtEx" /> functions to specify the units, orientation, and scaling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_HIENGLISH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_HIMETRIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_ISOTROPIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Logical units are mapped to arbitrary units with equally scaled axes; that is, one unit along the x-axis is equal to one unit along the y-axis. Use the <see cref="SetWindowExtEx" /> and <see cref="SetViewportExtEx" /> functions to specify the units and the orientation of the axes. Graphics device interface (GDI) makes adjustments as necessary to ensure the x and y units remain the same size (When the window extent is set, the viewport will be adjusted to keep the units isotropic).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_LOENGLISH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_LOMETRIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MM_TWIPS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Each logical unit is mapped to one twentieth of a printer's point (1/1440 inch, also called a twip). Positive x is to the right; positive y is up.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value identifies the previous mapping mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetMapperFlags">
    <summary>The <b>SetMapperFlags</b> function alters the algorithm the font mapper uses when it maps logical fonts to physical fonts.</summary>
    <param name="hdc">A handle to the device context that contains the font-mapper flag.</param>
    <param name="flags">Specifies whether the font mapper should attempt to match a font's aspect ratio to the current device's aspect ratio. If bit zero is set, the mapper selects only matching fonts.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the font-mapper flag.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.SetMetaFileBitsEx">
    <summary>
      <para>The <b>SetMetaFileBitsEx</b> function creates a memory-based Windows-format metafile from the supplied data.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with Windows-format metafiles. Enhanced-format metafiles provide superior functionality and are recommended for new applications. The corresponding function for an enhanced-format metafile is <see cref="SetEnhMetaFileBits" />.</div>
    </summary>
    <param name="cbBuffer">Specifies the size, in bytes, of the Windows-format metafile.</param>
    <param name="lpData">Pointer to a buffer that contains the Windows-format metafile. (It is assumed that the data was obtained by using the <see cref="GetMetaFileBitsEx" /> function.)</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a memory-based Windows-format metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetMetaRgn">
    <summary>The <b>SetMetaRgn</b> function intersects the current clipping region for the specified device context with the current metaregion and saves the combined region as the new metaregion for the specified device context. The clipping region is reset to a null region.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>The return value specifies the new clipping region's complexity and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred. (The previous clipping region is unaffected.)</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetMiterLimit">
    <summary>The <b>SetMiterLimit</b> function sets the limit for the length of miter joins for the specified device context.</summary>
    <param name="hdc">Handle to the device context.</param>
    <param name="limit">Specifies the new miter limit for the device context.</param>
    <param name="old">Pointer to a floating-point value that receives the previous miter limit. If this parameter is <b>NULL</b>, the previous miter limit is not returned.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetPaletteEntries">
    <summary>The <b>SetPaletteEntries</b> function sets RGB (red, green, blue) color values and flags in a range of entries in a logical palette.</summary>
    <param name="hpal">A handle to the logical palette.</param>
    <param name="iStart">The first logical-palette entry to be set.</param>
    <param name="cEntries">The number of logical-palette entries to be set.</param>
    <param name="pPalEntries">A pointer to the first member of an array of <a href="https://docs.microsoft.com//previous-versions/dd162769(v=vs.85)">PALETTEENTRY</a> structures containing the RGB values and flags.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of entries that were set in the logical palette.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetPixel">
    <summary>The <b>SetPixel</b> function sets the pixel at the specified coordinates to the specified color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical units, of the point to be set.</param>
    <param name="y">The y-coordinate, in logical units, of the point to be set.</param>
    <param name="color">The color to be used to paint the point. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is the RGB value that the function sets the pixel to. This value may differ from the color specified by <i>crColor</i>; that occurs when an exact match for the specified color cannot be found.</para>
      <para>If the function fails, the return value is -1.</para>
      <para>This can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetPixelFormat">
    <summary>The <b>SetPixelFormat</b> function sets the pixel format of the specified device context to the format specified by the <i>iPixelFormat</i> index.</summary>
    <param name="hdc">Specifies the device context whose pixel format the function attempts to set.</param>
    <param name="format">Index that identifies the pixel format to set. The various pixel formats supported by a device context are identified by one-based indexes.</param>
    <param name="ppfd">Pointer to a <see cref="PIXELFORMATDESCRIPTOR" /> structure that contains the logical pixel format specification. The system's metafile component uses this structure to record the logical pixel format specification. The structure has no other effect upon the behavior of the <b>SetPixelFormat</b> function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPixelV">
    <summary>The <b>SetPixelV</b> function sets the pixel at the specified coordinates to the closest approximation of the specified color. The point must be in the clipping region and the visible part of the device surface.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical units, of the point to be set.</param>
    <param name="y">The y-coordinate, in logical units, of the point to be set.</param>
    <param name="color">The color to be used to paint the point. To create a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value, use the <see cref="RGB" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetPolyFillMode">
    <summary>The <b>SetPolyFillMode</b> function sets the polygon fill mode for functions that fill polygons.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="mode">
      <para>The new fill mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ALTERNATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects alternate mode (fills the area between odd-numbered and even-numbered polygon sides on each scan line).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Selects winding mode (fills any region with a nonzero winding value).</description>
        </listheader>
      </list>
    </param>
    <returns>The return value specifies the previous filling mode. If an error occurs, the return value is zero.</returns>
  </member>
  <member name="Windows.SetRectRgn">
    <summary>The <b>SetRectRgn</b> function converts a region into a rectangular region with the specified coordinates.</summary>
    <param name="hrgn">Handle to the region.</param>
    <param name="left">Specifies the x-coordinate of the upper-left corner of the rectangular region in logical units.</param>
    <param name="top">Specifies the y-coordinate of the upper-left corner of the rectangular region in logical units.</param>
    <param name="right">Specifies the x-coordinate of the lower-right corner of the rectangular region in logical units.</param>
    <param name="bottom">Specifies the y-coordinate of the lower-right corner of the rectangular region in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetROP2">
    <summary>The <b>SetROP2</b> function sets the current foreground mix mode. GDI uses the foreground mix mode to combine pens and interiors of filled objects with the colors already on the screen. The foreground mix mode defines how colors from the brush or pen and the colors in the existing image are to be combined.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="rop2">
      <para>The mix mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Mix mode</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_BLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is always 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_COPYPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the pen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MASKNOTPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the colors common to both the screen and the inverse of the pen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MASKPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the colors common to both the pen and the screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MASKPENNOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the colors common to both the pen and the inverse of the screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MERGENOTPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the screen color and the inverse of the pen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MERGEPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the pen color and the screen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_MERGEPENNOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the pen color and the inverse of the screen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel remains unchanged.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the inverse of the screen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOTCOPYPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the inverse of the pen color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOTMASKPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the inverse of the R2_MASKPEN color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOTMERGEPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the inverse of the R2_MERGEPEN color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_NOTXORPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is the inverse of the R2_XORPEN color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_WHITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is always 1.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>R2_XORPEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pixel is a combination of the colors in the pen and in the screen, but not in both.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the previous mix mode.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetStretchBltMode">
    <summary>The <b>SetStretchBltMode</b> function sets the bitmap stretching mode in the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="mode">
      <para>The stretching mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BLACKONWHITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs a Boolean AND operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COLORONCOLOR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HALFTONE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Maps pixels from the source rectangle into blocks of pixels in the destination rectangle. The average color over the destination block of pixels approximates the color of the source pixels.<para>After setting the HALFTONE stretching mode, an application must call the <see cref="SetBrushOrgEx" /> function to set the brush origin. If it fails to do so, brush misalignment occurs.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRETCH_ANDSCANS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as BLACKONWHITE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRETCH_DELETESCANS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as COLORONCOLOR.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRETCH_HALFTONE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as HALFTONE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRETCH_ORSCANS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Same as WHITEONBLACK.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WHITEONBLACK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Performs a Boolean OR operation using the color values for the eliminated and existing pixels. If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the previous stretching mode.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>This function can return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the input parameters is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetSystemPaletteUse">
    <summary>The <b>SetSystemPaletteUse</b> function allows an application to specify whether the system palette contains 2 or 20 static colors. The default system palette contains 20 static colors. (Static colors cannot be changed when an application realizes a logical palette.)</summary>
    <param name="hdc">A handle to the device context. This device context must refer to a device that supports color palettes.</param>
    <param name="use">
      <para>The new use of the system palette. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYSPAL_NOSTATIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system palette contains two static colors (black and white).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYSPAL_NOSTATIC256</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system palette contains no static colors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYSPAL_STATIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system palette contains static colors that will not change when an application realizes its logical palette.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the previous system palette. It can be either SYSPAL_NOSTATIC, SYSPAL_NOSTATIC256, or SYSPAL_STATIC.</para>
      <para>If the function fails, the return value is SYSPAL_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.SetTextAlign">
    <summary>The <b>SetTextAlign</b> function sets the text-alignment flags for the specified device context.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="align">
      <para>The text alignment by using a mask of the values in the following list. Only one flag can be chosen from those that affect horizontal and vertical alignment. In addition, only one of the two flags that alter the current position can be chosen.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_BASELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be on the base line of the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be on the bottom edge of the bounding rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be on the top edge of the bounding rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be aligned horizontally with the center of the bounding rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be on the left edge of the bounding rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The reference point will be on the right edge of the bounding rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_NOUPDATECP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current position is not updated after each text output call. The reference point is passed to the text output function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Middle East language edition of Windows:</b> The text is laid out in right to left reading order, as opposed to the default left to right order. This applies only when the font selected into the device context is either Hebrew or Arabic.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TA_UPDATECP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current position is updated after each text output call. The current position is used as the reference point.</description>
        </listheader>
      </list> <para>When the current font has a vertical default base line, as with Kanji, the following values must be used instead of TA_BASELINE and TA_CENTER.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VTA_BASELINE</b></term></listheader></list></description><description>The reference point will be on the base line of the text.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VTA_CENTER</b></term></listheader></list></description><description>The reference point will be aligned vertically with the center of the bounding rectangle.</description></listheader></list> <para>The default values are TA_LEFT, TA_TOP, and TA_NOUPDATECP.</para></param>
    <returns>
      <para>If the function succeeds, the return value is the previous text-alignment setting.</para>
      <para>If the function fails, the return value is GDI_ERROR.</para>
    </returns>
  </member>
  <member name="Windows.SetTextCharacterExtra">
    <summary>The <b>SetTextCharacterExtra</b> function sets the intercharacter spacing. Intercharacter spacing is added to each character, including break characters, when the system writes a line of text.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="extra">The amount of extra space, in logical units, to be added to each character. If the current mapping mode is not MM_TEXT, the <i>nCharExtra</i> parameter is transformed and rounded to the nearest pixel.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous intercharacter spacing.</para>
      <para>If the function fails, the return value is 0x80000000.</para>
    </returns>
  </member>
  <member name="Windows.SetTextColor">
    <summary>The <b>SetTextColor</b> function sets the text color for the specified device context to the specified color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="color">The color of the text.</param>
    <returns>
      <para>If the function succeeds, the return value is a color reference for the previous text color as a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value.</para>
      <para>If the function fails, the return value is CLR_INVALID.</para>
    </returns>
  </member>
  <member name="Windows.SetTextJustification">
    <summary>The <b>SetTextJustification</b> function specifies the amount of space the system should add to the break characters in a string of text. The space is added when an application calls the <see cref="TextOut" /> or <see cref="ExtTextOut" /> functions.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="extra">The total extra space, in logical units, to be added to the line of text. If the current mapping mode is not MM_TEXT, the value identified by the <i>nBreakExtra</i> parameter is transformed and rounded to the nearest pixel.</param>
    <param name="count">The number of break characters in the line.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetViewportExtEx">
    <summary>The <b>SetViewportExtEx</b> function sets the horizontal and vertical extents of the viewport for a device context by using the specified values.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The horizontal extent, in device units, of the viewport.</param>
    <param name="y">The vertical extent, in device units, of the viewport.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the previous viewport extents, in device units. If <i>lpSize</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetViewportOrgEx">
    <summary>The <b>SetViewportOrgEx</b> function specifies which device point maps to the window origin (0,0).</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in device units, of the new viewport origin.</param>
    <param name="y">The y-coordinate, in device units, of the new viewport origin.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure that receives the previous viewport origin, in device coordinates. If <i>lpPoint</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowExtEx">
    <summary>The <b>SetWindowExtEx</b> function sets the horizontal and vertical extents of the window for a device context by using the specified values.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The window's horizontal extent in logical units.</param>
    <param name="y">The window's vertical extent in logical units.</param>
    <param name="lpsz">A pointer to a <see cref="SIZE" /> structure that receives the previous window extents, in logical units. If <i>lpSize</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowOrgEx">
    <summary>The <b>SetWindowOrgEx</b> function specifies which window point maps to the viewport origin (0,0).</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical units, of the new window origin.</param>
    <param name="y">The y-coordinate, in logical units, of the new window origin.</param>
    <param name="lppt">A pointer to a <see cref="POINT" /> structure that receives the previous origin of the window, in logical units. If <i>lpPoint</i> is <b>NULL</b>, this parameter is not used.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetWinMetaFileBits">
    <summary>The <b>SetWinMetaFileBits</b> function converts a metafile from the older Windows format to the new enhanced format and stores the new metafile in memory.</summary>
    <param name="nSize">The size, in bytes, of the buffer that contains the Windows-format metafile.</param>
    <param name="lpMeta16Data">A pointer to a buffer that contains the Windows-format metafile data. (It is assumed that the data was obtained by using the <see cref="GetMetaFileBitsEx" /> or <see cref="GetWinMetaFileBits" /> function.)</param>
    <param name="hdcRef">A handle to a reference device context.</param>
    <param name="lpMFP">A pointer to a <see cref="METAFILEPICT" /> structure that contains the suggested size of the metafile picture and the mapping mode that was used when the picture was created.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a memory-based enhanced metafile.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetWorldTransform">
    <summary>The <b>SetWorldTransform</b> function sets a two-dimensional linear transformation between world space and page space for the specified device context. This transformation can be used to scale, rotate, shear, or translate graphics output.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpxf">A pointer to an <see cref="XFORM" /> structure that contains the transformation data.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDoc">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDocA">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDocW">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDoc">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDocA">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartDocW">
    <summary>The <b>StartDoc</b> function starts a print job.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <param name="lpdi">A pointer to a <see cref="DOCINFO" /> structure containing the name of the document file and the name of the output file.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero. This value is the print job identifier for the document.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StartPage">
    <summary>The <b>StartPage</b> function prepares the printer driver to accept data.</summary>
    <param name="hdc">A handle to the device context for the print job.</param>
    <returns>
      <para>If the function succeeds, the return value is greater than zero.</para>
      <para>If the function fails, the return value is less than or equal to zero.</para>
    </returns>
  </member>
  <member name="Windows.StretchBlt">
    <summary>The <b>StretchBlt</b> function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary. The system stretches or compresses the bitmap according to the stretching mode currently set in the destination device context.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="wDest">The width, in logical units, of the destination rectangle.</param>
    <param name="hDest">The height, in logical units, of the destination rectangle.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="ySrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
    <param name="wSrc">The width, in logical units, of the source rectangle.</param>
    <param name="hSrc">The height, in logical units, of the source rectangle.</param>
    <param name="rop">
      <para>The raster operation to be performed. Raster operation codes define how the system combines colors in output operations that involve a brush, a source bitmap, and a destination bitmap.</para>
      <para>See <see cref="BitBlt" /> for a list of common raster operation codes (ROPs). Note that the CAPTUREBLT ROP generally cannot be used for printing device contexts.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.StretchDIBits">
    <summary>The <b>StretchDIBits</b> function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns by using the specified raster operation.</summary>
    <param name="hdc">A handle to the destination device context.</param>
    <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="DestWidth">The width, in logical units, of the destination rectangle.</param>
    <param name="DestHeight">The height, in logical units, of the destination rectangle.</param>
    <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
    <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
    <param name="SrcWidth">The width, in pixels, of the source rectangle in the image.</param>
    <param name="SrcHeight">The height, in pixels, of the source rectangle in the image.</param>
    <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes. For more information, see the Remarks section.</param>
    <param name="lpbmi">A pointer to a <see cref="BITMAPINFO" /> structure that contains information about the DIB.</param>
    <param name="iUsage">
      <para>Specifies whether the <b>bmiColors</b> member of the <see cref="BITMAPINFO" /> structure was provided and, if so, whether <b>bmiColors</b> contains explicit red, green, blue (RGB) values or indexes. The <i>iUsage</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_PAL_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The array contains 16-bit indexes into the logical palette of the source device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DIB_RGB_COLORS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The color table contains literal RGB values.</description>
        </listheader>
      </list> <para>For more information, see the Remarks section.</para></param>
    <param name="rop">A raster-operation code that specifies how the source pixels, the destination device context's current brush, and the destination pixels are to be combined to form the new image. For a list of some common raster operation codes, see <see cref="BitBlt" />.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.</para>
      <para>If the function fails, or no scan lines are copied, the return value is 0.</para>
      <para>If the driver cannot support the JPEG or PNG file image passed to <b>StretchDIBits</b>, the function will fail and return GDI_ERROR. If failure does occur, the application must fall back on its own JPEG or PNG support to decompress the image into a bitmap, and then pass the bitmap to <b>StretchDIBits</b>.</para>
    </returns>
  </member>
  <member name="Windows.StrokeAndFillPath">
    <summary>The <b>StrokeAndFillPath</b> function closes any open figures in a path, strokes the outline of the path by using the current pen, and fills its interior by using the current brush.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.StrokePath">
    <summary>The <b>StrokePath</b> function renders the specified path by using the current pen.</summary>
    <param name="hdc">Handle to a device context that contains the completed path.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SwapBuffers">
    <summary>The <b>SwapBuffers</b> function exchanges the front and back buffers if the current pixel format for the window referenced by the specified device context includes a back buffer.</summary>
    <param name="unnamedParam1">Specifies a device context. If the current pixel format for the window referenced by this device context includes a back buffer, the function exchanges the front and back buffers.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TextOut">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TextOutA">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TextOutW">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TextOut">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TextOutA">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TextOutW">
    <summary>The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string.</param>
    <param name="lpString">A pointer to the string to be drawn. The string does not need to be zero-terminated, because <i>cchString</i> specifies the length of the string.</param>
    <param name="c">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TranslateCharsetInfo">
    <summary>Translates character set information and sets all members of a destination structure to appropriate values.</summary>
    <param name="lpSrc">Pointer to the <b>fsCsb</b> member of a <see cref="FONTSIGNATURE" /> structure if <i>dwFlags</i> is set to TCI_SRCFONTSIG. Otherwise, this parameter is set to a DWORD value indicating the source.</param>
    <param name="lpCs">Pointer to a <see cref="CHARSETINFO" /> structure that receives the translated character set information.</param>
    <param name="dwFlags">
      <para>Flags specifying how to perform the translation. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TCI_SRCCHARSET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source contains the character set value in the low word, and 0 in the high word.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TCI_SRCCODEPAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source is a code page identifier in the low word and 0 in the high word.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TCI_SRCFONTSIG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source is the code page bitfield portion of a <see cref="FONTSIGNATURE" /> structure. On input this should have only one Windows code-page bit set, either for an ANSI code page value or for a common ANSI and OEM value (for OEM values, bits 32-63 must be clear). On output, this has only one bit set.<para>If the TCI_SRCFONTSIG value is given, the <i>lpSrc</i> parameter must be the address of the code-page bitfield. If any other TCI_ value is given, the <i>lpSrc</i> parameter must be a value not an address.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TCI_SRCLOCALE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Windows 2000:</b> Source is the locale identifier (LCID) or language identifier of the keyboard layout. If it is a language identifier, the value is in the low word.</description>
        </listheader>
      </list>
    </param>
    <returns>Returns a nonzero value if successful, or 0 otherwise. To get extended error information, the application can call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.TransparentBlt">
    <summary>The <b>TransparentBlt</b> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.</summary>
    <param name="hdcDest">A handle to the destination device context.</param>
    <param name="xoriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="yoriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
    <param name="wDest">The width, in logical units, of the destination rectangle.</param>
    <param name="hDest">The height, in logical units, of the destination rectangle.</param>
    <param name="hdcSrc">A handle to the source device context.</param>
    <param name="xoriginSrc">The x-coordinate, in logical units, of the source rectangle.</param>
    <param name="yoriginSrc">The y-coordinate, in logical units, of the source rectangle.</param>
    <param name="wSrc">The width, in logical units, of the source rectangle.</param>
    <param name="hSrc">The height, in logical units, of the source rectangle.</param>
    <param name="crTransparent">The RGB color in the source bitmap to treat as transparent.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UnrealizeObject">
    <summary>The <b>UnrealizeObject</b> function resets the origin of a brush or resets a logical palette. If the <i>hgdiobj</i> parameter is a handle to a brush, <b>UnrealizeObject</b> directs the system to reset the origin of the brush the next time it is selected. If the <i>hgdiobj</i> parameter is a handle to a logical palette, <b>UnrealizeObject</b> directs the system to realize the palette as though it had not previously been realized. The next time the application calls the <see cref="RealizePalette" /> function for the specified palette, the system completely remaps the logical palette to the system palette.</summary>
    <param name="hgdiobj">A handle to the logical palette to be reset.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.UpdateColors">
    <summary>The <b>UpdateColors</b> function updates the client area of the specified device context by remapping the current colors in the client area to the currently realized logical palette.</summary>
    <param name="hdc">A handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKey">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKeyA">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKeyW">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKey">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKeyA">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.UpdateICMRegKeyW">
    <summary>
      <para>
        <i>(Obsolete; retained for backward compatibility)</i>
      </para>
      <para>The <b>UpdateICMRegKey</b> function manages color profiles and Color Management Modules in the system.</para>
    </summary>
    <param name="reserved">Reserved, must be set to zero.</param>
    <param name="lpszCMID">Points to a string that specifies the ICC profile identifier for the color management DLL to use with the profile.</param>
    <param name="lpszFileName">Points to a fully qualified ICC color profile file name or to a <b>DEVMODE</b> structure.</param>
    <param name="command">
      <para>Specifies a function to execute. It can have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_ADDPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Installs the ICC profile in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_DELETEPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uninstalls the ICC profile from the system, but does not delete the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether the profile is already installed in the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_SETDEFAULTPROFILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Makes the profile first among equals.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_REGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Registers a CMM in the system. The <i>pszFileName</i> parameter points to a fully qualified path for the CMM DLL. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_UNREGISTERICMATCHER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unregisters the CMM from the system. The <i>lpszCMID</i> parameter points to a <b>DWORD</b> identifying the CMM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ICM_QUERYMATCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines whether a profile exists based on the <b>DEVMODE</b> structure pointed to by the <i>pszFileName</i> parameter.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If this function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.wglCopyContext">
    <summary>The <b>wglCopyContext</b> function copies selected groups of rendering states from one OpenGL rendering context to another.</summary>
    <param name="unnamedParam1">Specifies the source OpenGL rendering context whose state information is to be copied.</param>
    <param name="unnamedParam2">Specifies the destination OpenGL rendering context to which state information is to be copied.</param>
    <param name="unnamedParam3">Specifies which groups of the <i>hglrcSrc</i> rendering state are to be copied to <i>hglrcDst</i>. It contains the bitwise-OR of the same symbolic names that are passed to the <b>glPushAttrib</b> function. You can use GL_ALL_ATTRIB_BITS to copy all the rendering state information.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wglCreateContext">
    <summary>The <b>wglCreateContext</b> function creates a new OpenGL rendering context, which is suitable for drawing on the device referenced by <i>hdc</i>. The rendering context has the same pixel format as the device context.</summary>
    <param name="unnamedParam1">Typically named <code>handleToDeviceContext</code>. Handle to a device context for which the function creates a suitable OpenGL rendering context.</param>
    <returns>
      <para>If the function succeeds, the return value is a valid handle to an OpenGL rendering context.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglCreateLayerContext">
    <summary>The <b>wglCreateLayerContext</b> function creates a new OpenGL rendering context for drawing to a specified layer plane on a device context.</summary>
    <param name="unnamedParam1">Specifies the device context for a new rendering context.</param>
    <param name="unnamedParam2">Specifies the layer plane to which you want to bind a rendering context. The value 0 identifies the main plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to an OpenGL rendering context.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglDeleteContext">
    <summary>The <b>wglDeleteContext</b> function deletes a specified OpenGL rendering context.</summary>
    <param name="unnamedParam1">Handle to an OpenGL rendering context that the function will delete.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglDescribeLayerPlane">
    <summary>The <b>wglDescribeLayerPlane</b> function obtains information about the layer planes of a given pixel format.</summary>
    <param name="unnamedParam1">Specifies the device context of a window whose layer planes are to be described.</param>
    <param name="unnamedParam2">Specifies which layer planes of a pixel format are being described.</param>
    <param name="unnamedParam3">Specifies the overlay or underlay plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure.</param>
    <param name="unnamedParam4">Specifies the size, in bytes, of the structure pointed to by <i>plpd</i>. The <b>wglDescribeLayerPlane</b> function stores layer plane data in a <see cref="LAYERPLANEDESCRIPTOR" /> structure, and stores no more than <i>nBytes</i> of data. Set the value of <i>nBytes</i> to the size of <b>LAYERPLANEDESCRIPTOR</b>.</param>
    <param name="unnamedParam5">Points to a <b>LAYERPLANEDESCRIPTOR</b> structure. The <b>wglDescribeLayerPlane</b> function sets the value of the structure's data members. The function stores the number of bytes of data copied to the structure in the <b>nSize</b> member.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>. In addition, the <b>wglDescribeLayerPlane</b> function sets the members of the <b>LAYERPLANEDESCRIPTOR</b> structure pointed to by <i>plpd</i> according to the specified layer plane (<i>iLayerPlane</i> ) of the specified pixel format (<i>iPixelFormat</i> ).</para>
      <para>If the function fails, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.wglGetCurrentContext">
    <summary>The <b>wglGetCurrentContext</b> function obtains a handle to the current OpenGL rendering context of the calling thread.</summary>
    <returns>If the calling thread has a current OpenGL rendering context, <b>wglGetCurrentContext</b> returns a handle to that rendering context. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.wglGetCurrentDC">
    <summary>The <b>wglGetCurrentDC</b> function obtains a handle to the device context that is associated with the current OpenGL rendering context of the calling thread.</summary>
    <returns>If the calling thread has a current OpenGL rendering context, the function returns a handle to the device context associated with that rendering context by means of the <b>wglMakeCurrent</b> function. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.wglGetLayerPaletteEntries">
    <summary>Retrieves the palette entries from a given color-index layer plane for a specified device context.</summary>
    <param name="unnamedParam1">The device context of a window whose layer planes are to be described.</param>
    <param name="unnamedParam2">The overlay or underlay plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure.</param>
    <param name="unnamedParam3">The first palette entry to be retrieved.</param>
    <param name="unnamedParam4">The number of palette entries to be retrieved.</param>
    <param name="unnamedParam5">An array of structures that contain palette RGB color values. The array must contain at least as many structures as specified by <i>cEntries</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of entries that were set in the palette in the specified layer plane of the window.</para>
      <para>If the function fails or when no pixel format is selected, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglGetProcAddress">
    <summary>The <b>wglGetProcAddress</b> function returns the address of an OpenGL extension function for use with the current OpenGL rendering context.</summary>
    <param name="unnamedParam1">Points to a <b>null</b>-terminated string that is the name of the extension function. The name of the extension function must be identical to a corresponding function implemented by OpenGL.</param>
    <returns>
      <para>When the function succeeds, the return value is the address of the extension function.</para>
      <para>When no current rendering context exists or the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglMakeCurrent">
    <summary>The <b>wglMakeCurrent</b> function makes a specified OpenGL rendering context the calling thread's current rendering context. All subsequent OpenGL calls made by the thread are drawn on the device identified by <i>hdc</i>. You can also use <b>wglMakeCurrent</b> to change the calling thread's current rendering context so it's no longer current.</summary>
    <param name="unnamedParam1">Handle to a device context. Subsequent OpenGL calls made by the calling thread are drawn on the device identified by <i>hdc</i>.</param>
    <param name="unnamedParam2">
      <para>Handle to an OpenGL rendering context that the function sets as the calling thread's rendering context.</para>
      <para>If <i>hglrc</i> is <b>NULL</b>, the function makes the calling thread's current rendering context no longer current, and releases the device context that is used by the rendering context. In this case, <i>hdc</i> is ignored.</para>
    </param>
    <returns>When the <b>wglMakeCurrent</b> function succeeds, the return value is <b>TRUE</b>; otherwise the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wglRealizeLayerPalette">
    <summary>The <b>wglRealizeLayerPalette</b> function maps palette entries from a given color-index layer plane into the physical palette or initializes the palette of an RGBA layer plane.</summary>
    <param name="unnamedParam1">Specifies the device context of a window whose layer plane palette is to be realized into the physical palette.</param>
    <param name="unnamedParam2">Specifies the overlay or underlay plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure.</param>
    <param name="unnamedParam3">Indicates whether the palette is to be realized into the physical palette. When <i>bRealize</i> is <b>TRUE</b>, the palette entries are mapped into the physical palette where available. When <i>bRealize</i> is <b>FALSE</b>, the palette entries for the layer plane of the window are no longer needed and might be released for use by another foreground window.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>, even if <i>bRealize</i> is <b>TRUE</b> and the physical palette is not available. If the function fails or when no pixel format is selected, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wglSetLayerPaletteEntries">
    <summary>Sets the palette entries in a given color-index layer plane for a specified device context.</summary>
    <param name="unnamedParam1">The device context of a window whose layer palette is to be set.</param>
    <param name="unnamedParam2">An overlay or underlay plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure.</param>
    <param name="unnamedParam3">The first palette entry to be set.</param>
    <param name="unnamedParam4">The number of palette entries to be set.</param>
    <param name="unnamedParam5">A pointer to the first member of an array of <i>cEntries</i> structures that contain RGB color information.</param>
    <returns>If the function succeeds, the return value is the number of entries that were set in the palette in the specified layer plane of the window. If the function fails or no pixel format is selected, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wglShareLists">
    <summary>The <b>wglShareLists</b> function enables multiple OpenGL rendering contexts to share a single display-list space.</summary>
    <param name="unnamedParam1">Specifies the OpenGL rendering context with which to share display lists.</param>
    <param name="unnamedParam2">Specifies the OpenGL rendering context to share display lists with <i>hglrc1</i>. The <i>hglrc2</i> parameter should not contain any existing display lists when <b>wglShareLists</b> is called.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and the display lists are not shared. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglSwapLayerBuffers">
    <summary>The <b>wglSwapLayerBuffers</b> function swaps the front and back buffers in the overlay, underlay, and main planes of the window referenced by a specified device context.</summary>
    <param name="unnamedParam1">Specifies the device context of a window whose layer plane palette is to be realized into the physical palette.</param>
    <param name="unnamedParam2">
      <para>Specifies the overlay, underlay, and main planes whose front and back buffers are to be swapped. The <b>bReserved</b> member of the <see cref="PIXELFORMATDESCRIPTOR" /> structure specifies the number of overlay and underlay planes. The <i>fuPlanes</i> parameter is a bitwise combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WGL_SWAP_MAIN_PLANE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Swaps the front and back buffers of the main plane.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WGL_SWAP_OVERLAYi</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Swaps the front and back buffers of the overlay plane <i>i</i>, where <i>i</i> is an integer between 1 and 15. WGL_SWAP_OVERLAY1 identifies the first overlay plane over the main plane, WGL_SWAP_OVERLAY2 identifies the second overlay plane over the first overlay plane, and so on.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WGL_SWAP_UNDERLAYi</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Swaps the front and back buffers of the underlay plane <i>i</i>, where <i>i</i> is an integer between 1 and 15. WGL_SWAP_UNDERLAY1 identifies the first underlay plane under the main plane, WGL_SWAP_UNDERLAY2 identifies the second underlay plane under the first underlay plane, and so on.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wglUseFontBitmaps">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontBitmapsA">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontBitmapsW">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontBitmaps">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontBitmapsA">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontBitmapsW">
    <summary>
      <para>The <b>wglUseFontBitmaps</b> function creates a set of bitmap display lists for use in the current OpenGL rendering context. The set of bitmap display lists is based on the glyphs in the currently selected font in the device context. You can then use bitmaps to draw characters in an OpenGL image.</para>
      <para>The <b>wglUseFontBitmaps</b> function creates <i>count</i> display lists, one for each of a run of <i>count</i> glyphs that begins with the first glyph in the <i>hdc</i> parameter's selected fonts.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.</param>
    <param name="unnamedParam2">Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists. The function creates <i>count</i> display lists, one for each glyph in the run.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlines">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlinesA">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlinesW">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlines">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlinesA">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wglUseFontOutlinesW">
    <summary>
      <para>The <b>wglUseFontOutlines</b> function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context. The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
      <para>The run of glyphs begins with thefirstglyph of the font of the specified device context. The em square size of the font, the notional grid size of the original font outline from which the font is fitted, is mapped to 1.0 in the x- and y-coordinates in the display lists. The extrusion parameter sets how much depth the font has in the z direction.</para>
      <para>Thelpgmfparameter returns a <see cref="GLYPHMETRICSFLOAT" /> structure that contains information about the placement and orientation of each glyph in a character cell.</para>
    </summary>
    <param name="unnamedParam1">Specifies the device context with the desired outline font. The outline font of <i>hdc</i> is used to create the display lists in the current rendering context.</param>
    <param name="unnamedParam2">Specifies the first of the set of glyphs that form the font outline display lists.</param>
    <param name="unnamedParam3">Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. The <b>wglUseFontOutlines</b> function creates <i>count</i> display lists, one display list for each glyph in a set of glyphs.</param>
    <param name="unnamedParam4">Specifies a starting display list.</param>
    <param name="unnamedParam5">Specifies the maximum chordal deviation from the original outlines. When deviation is zero, the chordal deviation is equivalent to one design unit of the original font. The value of <i>deviation</i> must be equal to or greater than 0.</param>
    <param name="unnamedParam6">Specifies how much a font is extruded in the negative <i>z</i> direction. The value must be equal to or greater than 0. When <i>extrusion</i> is 0, the display lists are not extruded.</param>
    <param name="unnamedParam7">Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. When <i>format</i> is WGL_FONT_LINES, the <b>wglUseFontOutlines</b> function creates fonts with line segments. When <i>format</i> is WGL_FONT_POLYGONS, <b>wglUseFontOutlines</b> creates fonts with polygons.</param>
    <param name="unnamedParam8">Points to an array of <i>count</i><see cref="GLYPHMETRICSFLOAT" /> structures that is to receive the metrics of the glyphs. When <i>lpgmf</i> is <b>NULL</b>, no glyph metrics are returned.</param>
    <returns>
      <para>When the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>When the function fails, the return value is <b>FALSE</b> and no display lists are generated. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.WidenPath">
    <summary>The <b>WidenPath</b> function redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the given device context.</summary>
    <param name="hdc">A handle to a device context that contains a closed path.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
</doc>