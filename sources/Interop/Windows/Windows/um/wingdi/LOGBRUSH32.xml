<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="LOGBRUSH32">
    <summary>The <b>LOGBRUSH32</b> structure defines the style, color, and pattern of a physical brush. It is similar to <see cref="LOGBRUSH" />, but it is used to maintain compatibility between 32-bit platforms and 64-bit platforms when we record the metafile record on one platform and then play it on another. Thus, it is only used in <see cref="EMRCREATEBRUSHINDIRECT" />. If the code will only be on one platform, <b>LOGBRUSH</b> is sufficient.</summary>
  </member>
  <member name="LOGBRUSH32.lbStyle">
    <summary>
      <para>The brush style. The <b>lbStyle</b> member must be one of the following styles.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>BS_DIBPATTERN</description>
          <description>A pattern brush defined by a device-independent bitmap (DIB) specification. If <b>lbStyle</b> is BS_DIBPATTERN, the <b>lbHatch</b> member contains a handle to a packed DIB. For more information, see discussion in <b>lbHatch</b>.</description>
        </listheader>
        <listheader>
          <description>BS_DIBPATTERN8X8</description>
          <description>Same as BS_DIBPATTERN.</description>
        </listheader>
        <listheader>
          <description>BS_DIBPATTERNPT</description>
          <description>A pattern brush defined by a device-independent bitmap (DIB) specification. If <b>lbStyle</b> is BS_DIBPATTERNPT, the <b>lbHatch</b> member contains a pointer to a packed DIB. For more information, see discussion in <b>lbHatch</b>.</description>
        </listheader>
        <listheader>
          <description>BS_HATCHED</description>
          <description>Hatched brush.</description>
        </listheader>
        <listheader>
          <description>BS_HOLLOW</description>
          <description>Hollow brush.</description>
        </listheader>
        <listheader>
          <description>BS_NULL</description>
          <description>Same as BS_HOLLOW.</description>
        </listheader>
        <listheader>
          <description>BS_PATTERN</description>
          <description>Pattern brush defined by a memory bitmap.</description>
        </listheader>
        <listheader>
          <description>BS_PATTERN8X8</description>
          <description>Same as BS_PATTERN.</description>
        </listheader>
        <listheader>
          <description>BS_SOLID</description>
          <description>Solid brush.</description>
        </listheader>
      </list>
    </summary>
  </member>
  <member name="LOGBRUSH32.lbColor">
    <summary>
      <para>The color in which the brush is to be drawn. If <b>lbStyle</b> is the BS_HOLLOW or BS_PATTERN style, <b>lbColor</b> is ignored.</para>
      <para>If <b>lbStyle</b> is BS_DIBPATTERN or BS_DIBPATTERNPT, the low-order word of <b>lbColor</b> specifies whether the <b>bmiColors</b> members of the <see cref="BITMAPINFO" /> structure contain explicit red, green, blue (RGB) values or indexes into the currently realized logical palette. The <b>lbColor</b> member must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DIB_PAL_COLORS</description>
          <description>The color table consists of an array of 16-bit indexes into the currently realized logical palette.</description>
        </listheader>
        <listheader>
          <description>DIB_RGB_COLORS</description>
          <description>The color table contains literal RGB values.</description>
        </listheader>
      </list> <para>If <b>lbStyle</b> is BS_HATCHED or BS_SOLID, <b>lbColor</b> is a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> color value. To create a <b>COLORREF</b> color value, use the <see cref="RGB" /> macro.</para></summary>
  </member>
  <member name="LOGBRUSH32.lbHatch">
    <summary>
      <para>A hatch style. The meaning depends on the brush style defined by <b>lbStyle</b>.</para>
      <para>If <b>lbStyle</b> is BS_DIBPATTERN, the <b>lbHatch</b> member contains a handle to a packed DIB. To obtain this handle, an application calls the <see cref="GlobalAlloc" /> function with GMEM_MOVEABLE (or <see cref="LocalAlloc" /> with LMEM_MOVEABLE) to allocate a block of memory and then fills the memory with the packed DIB. A packed DIB consists of a <see cref="BITMAPINFO" /> structure immediately followed by the array of bytes that define the pixels of the bitmap.</para>
      <para>If <b>lbStyle</b> is BS_DIBPATTERNPT, the <b>lbHatch</b> member contains a pointer to a packed DIB. The pointer derives from the memory block created by <see cref="LocalAlloc" /> with LMEM_FIXED set or by <see cref="GlobalAlloc" /> with GMEM_FIXED set, or it is the pointer returned by a call like <see cref="LocalLock" /> (handle_to_the_dib). A packed DIB consists of a <see cref="BITMAPINFO" /> structure immediately followed by the array of bytes that define the pixels of the bitmap.</para>
      <para>If <b>lbStyle</b> is BS_HATCHED, the <b>lbHatch</b> member specifies the orientation of the lines used to create the hatch. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>HS_BDIAGONAL</description>
          <description>A 45-degree upward, left-to-right hatch</description>
        </listheader>
        <listheader>
          <description>HS_CROSS</description>
          <description>Horizontal and vertical cross-hatch</description>
        </listheader>
        <listheader>
          <description>HS_DIAGCROSS</description>
          <description>45-degree crosshatch</description>
        </listheader>
        <listheader>
          <description>HS_FDIAGONAL</description>
          <description>A 45-degree downward, left-to-right hatch</description>
        </listheader>
        <listheader>
          <description>HS_HORIZONTAL</description>
          <description>Horizontal hatch</description>
        </listheader>
        <listheader>
          <description>HS_VERTICAL</description>
          <description>Vertical hatch</description>
        </listheader>
      </list> <para>If <b>lbStyle</b> is BS_PATTERN, <b>lbHatch</b> is a handle to the bitmap that defines the pattern. The bitmap cannot be a DIB section bitmap, which is created by the <see cref="CreateDIBSection" /> function.</para><para>If <b>lbStyle</b> is BS_SOLID or BS_HOLLOW, <b>lbHatch</b> is ignored.</para></summary>
  </member>
</doc>