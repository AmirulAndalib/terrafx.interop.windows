<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AddIPAddress">
    <summary>The<b>AddIPAddress</b> function adds the specified IPv4 address to the specified adapter.</summary>
    <param name="Address">The IPv4 address to add to the adapter, in the form of an <see cref="IPAddr" /> structure.</param>
    <param name="IpMask">The subnet mask for the IPv4 address specified in the <i>Address</i> parameter. The <b>IPMask</b> parameter uses the same format as an <see cref="IPAddr" /> structure.</param>
    <param name="IfIndex">The index of the adapter on which to add the IPv4 address.</param>
    <param name="NTEContext">A pointer to a <b>ULONG</b> variable. On successful return, this parameter points to the Net Table Entry (NTE) context for the IPv4 address that was added. The caller can later use this context in a call to the <see cref="DeleteIPAddress" /> function.</param>
    <param name="NTEInstance">A pointer to a <b>ULONG</b> variable. On successful return, this parameter points to the NTE instance for the IPv4 address that was added.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_DEV_NOT_EXIST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The adapter specified by the <i>IfIndex</i> parameter does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_DUP_DOMAINNAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 address to add that is specified in the <i>Address</i> parameter already exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A general failure. This error is returned for some values specified in the <i>Address</i> parameter, such as an IPv4 address normally considered to be a broadcast addresses.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_HANDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The user attempting to make the function call is not an administrator.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the parameters is invalid. This error is returned if the <i>NTEContext</i> or <i>NTEInstance</i> parameters are <b>NULL</b>. This error is also returned when the IP address specified in the <i>Address</i> parameter is inconsistent with the interface index specified in the <i>IfIndex</i> parameter (for example, a loopback address on a non-loopback interface).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function call is not supported on the version of Windows on which it was run.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CancelIfTimestampConfigChange">
    <summary>This function is reserved for system use, and you should not call it from your code.</summary>
    <param name="NotificationHandle">Reserved.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.CancelIPChangeNotify">
    <summary>The <b>CancelIPChangeNotify</b> function cancels notification of IPv4 address and route changes previously requested with successful calls to the <see cref="NotifyAddrChange" /> or <see cref="NotifyRouteChange" /> functions.</summary>
    <param name="notifyOverlapped">A pointer to the <see cref="OVERLAPPED" /> structure used in the previous call to <see cref="NotifyAddrChange" /> or <see cref="NotifyRouteChange" />.</param>
  </member>
  <member name="Windows.CaptureInterfaceHardwareCrossTimestamp">
    <summary>
      <para>Retrieves cross timestamp info for a network adapter.</para>
      <para>For more info, and code examples, see <a href="https://docs.microsoft.com//windows/win32/iphlp/packet-timestamping">Packet timestamping</a>.</para>
      <blockquote>[!IMPORTANT] On Windows 10, version 2004 (10.0; Build 19041) and earlier, this function is reserved for system use, and you should not call it from your code. On later versions, this function <i>is</i> supported.</blockquote>
    </summary>
    <param name="InterfaceLuid">The network locally unique identifier (LUID) of the network adapter from which a cross timestamp is to be retrieved.</param>
    <param name="CrossTimestamp">The timestamp is returned by the network adapter in the form of an <see cref="INTERFACE_HARDWARE_CROSSTIMESTAMP" /> object.</param>
    <returns>A <b>DWORD</b> return code indicating success or failure.</returns>
  </member>
  <member name="Windows.CreateIpForwardEntry">
    <summary>The<b>CreateIpForwardEntry</b> function creates a route in the local computer's IPv4 routing table.</summary>
    <param name="pRoute">A pointer to a<see cref="MIB_IPFORWARDROW" /> structure that specifies the information for the new route. The caller must specify values for all members of this structure. The caller must specify <b>MIB_IPPROTO_NETMGMT</b> for the <b>dwForwardProto</b> member of<b>MIB_IPFORWARDROW</b>.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>pRoute</i> parameter is <b>NULL</b>, the <b>dwForwardProto</b> member of <see cref="MIB_IPFORWARDROW" /> was not set to <b>MIB_IPPROTO_NETMGMT</b>, the <b>dwForwardMask</b> member of the <b>PMIB_IPFORWARDROW</b> structure is not a valid IPv4 subnet mask, or one of the other members of the <b>MIB_IPFORWARDROW</b> structure is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateIpNetEntry">
    <summary>The<b>CreateIpNetEntry</b> function creates an Address Resolution Protocol (ARP) entry in the ARP table on the local computer.</summary>
    <param name="pArpEntry">A pointer to a<see cref="MIB_IPNETROW" /> structure that specifies information for the new entry. The caller must specify values for all members of this structure.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>pArpEntry</i> parameter is <b>NULL</b>, the <b>dwPhysAddrLen</b> member of <see cref="MIB_IPNETROW" /> is set to zero or a value greater than 8, the <b>&gt;dwAddr</b> member of the <b>MIB_IPNETROW</b> structure is invalid, or one of the other members of the <b>MIB_IPNETROW</b> structure is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreatePersistentTcpPortReservation">
    <summary>The<b>CreatePersistentTcpPortReservation</b> function creates a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.</summary>
    <param name="StartPort">The starting TCP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of TCP port numbers to reserve.</param>
    <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. <para>This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters. This error is also returned if the <i>NumberOfPorts</i> parameter is too large a block of ports depending on the <i>StartPort</i> parameter that the allocable block of ports would exceed the maximum port that can be allocated.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHARING_VIOLATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process cannot access the file because it is being used by another process. This error is returned if a TCP port in the block of TCP ports specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters is already being used. This error is also returned if a persistent reservation for a block of TCP ports specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters matches or overlaps a persistent reservation for a block of TCP ports that was already created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreatePersistentUdpPortReservation">
    <summary>The<b>CreatePersistentUdpPortReservation</b> function creates a persistent UDP port reservation for a consecutive block of UDP ports on the local computer.</summary>
    <param name="StartPort">The starting UDP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of UDP port numbers to reserve.</param>
    <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. <para>This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters. This error is also returned if the <i>NumberOfPorts</i> parameter is too large a block of ports depending on the <i>StartPort</i> parameter that the allocable block of ports would exceed the maximum port that can be allocated.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SHARING_VIOLATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process cannot access the file because it is being used by another process. This error is returned if a UDP port in the block of UDP ports specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters is already being used. This error is also returned if a persistent reservation for a block of UDP ports specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters matches or overlaps a persistent reservation for a block of UDP ports that was already created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateProxyArpEntry">
    <summary>The <b>CreateProxyArpEnry</b> function creates a Proxy Address Resolution Protocol (PARP) entry on the local computer for the specified IPv4 address.</summary>
    <param name="dwAddress">The IPv4 address for which this computer acts as a proxy.</param>
    <param name="dwMask">The subnet mask for the IPv4 address specified in <i>dwAddress</i>.</param>
    <param name="dwIfIndex">The index of the interface on which to proxy ARP for the IPv4 address identified by <i>dwAddress</i>. In other words, when an ARP request for <i>dwAddress</i> is received on this interface, the local computer responds with the physical address of this interface. If this interface is of a type that does not support ARP, such as PPP, then the call fails.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>dwAddress</i> parameter is <b>zero</b> or an invalid value, one of the other parameters is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DeleteIPAddress">
    <summary>The<b>DeleteIPAddress</b> function deletes an IP address previously added using<see cref="AddIPAddress" />.</summary>
    <param name="NTEContext">The Net Table Entry (NTE) context for the IP address. This context was returned by the previous call to<see cref="AddIPAddress" />.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DeleteIpForwardEntry">
    <summary>The<b>DeleteIpForwardEntry</b> function deletes an existing route in the local computer's IPv4 routing table.</summary>
    <param name="pRoute">A pointer to an<see cref="MIB_IPFORWARDROW" /> structure. This structure specifies information that identifies the route to delete. The caller must specify values for the <b>dwForwardIfIndex</b>, <b>dwForwardDest</b>, <b>dwForwardMask</b>, <b>dwForwardNextHop</b>, and <b>dwForwardProto</b> members of the structure.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the routine is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <b>pRoute</b> parameter is <b>NULL</b>, the <b>dwForwardMask</b> member of the <see cref="PMIB_IPFORWARDROW" /> structure is not a valid IPv4 subnet mask, the <b>dwForwardIfIndex</b> member is <b>NULL</b>, or one of the other members of the <b>MIB_IPFORWARDROW</b> structure is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b> ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>pRoute</b> parameter points to a route entry that does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>(other)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function may return other error codes.</description>
        </listheader>
      </list> <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para></returns>
  </member>
  <member name="Windows.DeleteIpNetEntry">
    <summary>The<b>DeleteIpNetEntry</b> function deletes an ARP entry from the ARP table on the local computer.</summary>
    <param name="pArpEntry">A pointer to a<see cref="MIB_IPNETROW" /> structure. The information in this structure specifies the entry to delete. The caller must specify values for at least the <b>dwIndex</b> and <b>dwAddr</b> members of this structure.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>pArpEntry</i> parameter is <b>NULL</b> or a member in the <see cref="MIB_IPNETROW" /> structure pointed to by the <i>pArpEntry</i> parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DeletePersistentTcpPortReservation">
    <summary>The<b>DeletePersistentTcpPortReservation</b> function deletes a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.</summary>
    <param name="StartPort">The starting TCP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of TCP port numbers to delete.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element was not found. This error is returned if persistent port block specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DeletePersistentUdpPortReservation">
    <summary>The<b>DeletePersistentUdpPortReservation</b> function deletes a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.</summary>
    <param name="StartPort">The starting UDP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of UDP port numbers to delete.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element was not found. This error is returned if persistent port block specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DeleteProxyArpEntry">
    <summary>The<b>DeleteProxyArpEntry</b> function deletes the PARP entry on the local computer specified by the <i>dwAddress</i> and <i>dwIfIndex</i> parameters.</summary>
    <param name="dwAddress">The IPv4 address for which this computer is acting as a proxy.</param>
    <param name="dwMask">The subnet mask for the IPv4 address specified in the <i>dwAddress</i> parameter.</param>
    <param name="dwIfIndex">The index of the interface on which this computer is supporting proxy ARP for the IP address specified by the <i>dwAddress</i> parameter.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DisableMediaSense">
    <summary>The <b>DisableMediaSense</b> function disables the media sensing capability of the TCP/IP stack on a local computer.</summary>
    <param name="pHandle">
      <para>A pointer to a variable that is used to store a handle. If the <i>pOverlapped</i> parameter is not <b>NULL</b>, this variable will be used internally to store a handle required to call the IP driver and disable the media sensing capability.</para>
      <para>An application should not use the value pointed to by this variable. This handle is for internal use and should not be closed.</para>
    </param>
    <param name="pOverLapped">A pointer to an<see cref="OVERLAPPED" /> structure. Except for the <b>hEvent</b> member, all members of this structure must be set to zero. The <b>hEvent</b> member requires a handle to a valid event object. Use the<see cref="CreateEvent" /> function to create this event object.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if an <i>pOverlapped</i> parameter is a bad pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_IO_PENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation is in progress. This value is returned by a successful asynchronous call to <see cref="DisableMediaSense" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_OPEN_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The handle pointed to by the <i>pHandle</i> parameter was invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.EnableRouter">
    <summary>The<b>EnableRouter</b> function turns on IPv4 forwarding on the local computer.<b>EnableRouter</b> also increments a reference count that tracks the number of requests to enable IPv4 forwarding.</summary>
    <param name="pHandle">A pointer to a handle. This parameter is currently unused.</param>
    <param name="pOverlapped">A pointer to an<see cref="OVERLAPPED" /> structure. Except for the <b>hEvent</b> member, all members of this structure should be set to zero. The <b>hEvent</b> member should contain a handle to a valid event object. Use the<see cref="CreateEvent" /> function to create this event object.</param>
    <returns>
      <para>If the <b>EnableRouter</b> function succeeds, the return value is ERROR_IO_PENDING.</para>
      <para>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned if the <i>pOverlapped</i> parameter is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FlushIpNetTable">
    <summary>The<b>FlushIpNetTable</b> function deletes all ARP entries for the specified interface from the ARP table on the local computer.</summary>
    <param name="dwIfIndex">The index of the interface for which to delete all ARP entries.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>dwIfIndex</i> parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetAdapterIndex">
    <summary>The<b>GetAdapterIndex</b> function obtains the index of an adapter, given its name.</summary>
    <param name="AdapterName">A pointer to a Unicode string that specifies the name of the adapter.</param>
    <param name="IfIndex">A pointer to a <b>ULONG</b> variable that points to the index of the adapter.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.GetAdapterOrderMap">
    <summary>The <b>GetAdapterOrderMap</b> function obtains an adapter order map that indicates priority for interfaces on the local computer.</summary>
    <returns>Returns an <see cref="IP_ADAPTER_ORDER_MAP" /> structure filled with adapter priority information. See the <b>IP_ADAPTER_ORDER_MAP</b> structure for more information.</returns>
  </member>
  <member name="Windows.GetAdaptersAddresses">
    <summary>The<b>GetAdaptersAddresses</b> function retrieves the addresses associated with the adapters on the local computer.</summary>
    <param name="Family">
      <para>The address family of the addresses to retrieve. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_UNSPEC</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Return both IPv4 and IPv6 addresses associated with adapters with IPv4 or IPv6 enabled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Return only IPv4 addresses associated with adapters with IPv4 enabled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
              <listheader>
                <term>23</term>
              </listheader>
            </list>
          </description>
          <description>Return only IPv6 addresses associated with adapters with IPv6 enabled.</description>
        </listheader>
      </list>
    </param>
    <param name="Flags">
      <para>The type of addresses to retrieve. The possible values are defined in the <i>Iptypes.h</i> header file. Note that the <i>Iptypes.h</i> header file is automatically included in <i>Iphlpapi.h</i>, and should never be used directly.</para>
      <para>This parameter is a combination of the following values. If this parameter is zero, then unicast, anycast, and multicast IP addresses will be returned.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_SKIP_UNICAST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Do not return unicast addresses.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_SKIP_ANYCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Do not return IPv6 anycast addresses.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_SKIP_MULTICAST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Do not return multicast addresses.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_SKIP_DNS_SERVER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Do not return addresses of DNS servers.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_PREFIX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Return a list of IP address prefixes on this adapter. When this flag is set, IP address prefixes are returned for both IPv6 and IPv4 addresses. <para>This flag is supported on Windows XP with SP1 and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_SKIP_FRIENDLY_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Do not return the adapter friendly name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_WINS_INFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Return addresses of Windows Internet Name Service (WINS) servers. <para>This flag is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_GATEWAYS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Return the addresses of default gateways. <para>This flag is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_ALL_INTERFACES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Return addresses for all NDIS interfaces. <para>This flag is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_ALL_COMPARTMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Return addresses in all routing compartments. <para>This flag is not currently supported and reserved for future use.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Return the adapter addresses sorted in tunnel binding order. This flag is supported on Windows Vista and later.</description>
        </listheader>
      </list>
    </param>
    <param name="Reserved">This parameter is not currently used, but is reserved for future system use. The calling application should pass <b>NULL</b> for this parameter.</param>
    <param name="AdapterAddresses">A pointer to a buffer that contains a linked list of <see cref="IP_ADAPTER_ADDRESSES" /> structures on successful return.</param>
    <param name="SizePointer">A pointer to a variable that specifies the size of the buffer pointed to by <i>AdapterAddresses</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b> (defined to the same value as <b>NO_ERROR</b>).</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ADDRESS_NOT_ASSOCIATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An address has not yet been associated with the network endpoint. DHCP lease information was available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUFFER_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer size indicated by the <i>SizePointer</i> parameter is too small to hold the adapter information or the <i>AdapterAddresses</i> parameter is <b>NULL</b>. The <i>SizePointer</i> parameter returned points to the required size of the buffer to hold the adapter information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned for any of the following conditions: the <i>SizePointer</i> parameter is <b>NULL</b>, the <i>Address</i> parameter is not <b>AF_INET</b>, <b>AF_INET6</b>, or <b>AF_UNSPEC</b>, or the address information for the parameters requested is greater than <b>ULONG_MAX</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory resources are available to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No addresses were found for the requested parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetAdaptersInfo">
    <summary>
      <para>The<b>GetAdaptersInfo</b> function retrieves adapter information for the local computer.</para>
      <para>
        <b>On Windows XP and later:  </b>Use the <see cref="GetAdaptersAddresses" /> function instead of <b>GetAdaptersInfo</b>.</para>
    </summary>
    <param name="AdapterInfo">A pointer to a buffer that receives a linked list of<see cref="IP_ADAPTER_INFO" /> structures.</param>
    <param name="SizePointer">A pointer to a <b>ULONG</b> variable that specifies the size of the buffer pointed to by the <i>pAdapterInfo</i> parameter. If this size is insufficient to hold the adapter information,<b>GetAdaptersInfo</b> fills in this variable with the required size, and returns an error code of <b>ERROR_BUFFER_OVERFLOW</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b> (defined to the same value as <b>NO_ERROR</b>).</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUFFER_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer to receive the adapter information is too small. This value is returned if the buffer size indicated by the <i>pOutBufLen</i> parameter is too small to hold the adapter information or the <i>pAdapterInfo</i> parameter was a <b>NULL</b> pointer. When this error code is returned, the <i>pOutBufLen</i> parameter points to the required buffer size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid adapter information was retrieved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned if the <i>pOutBufLen</i> parameter is a <b>NULL</b> pointer, or the calling process does not have read/write access to the memory pointed to by <i>pOutBufLen</i> or the calling process does not have write access to the memory pointed to by the <i>pAdapterInfo</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No adapter information exists for the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="GetAdaptersInfo" /> function is not supported by the operating system running on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetBestInterface">
    <summary>The<b>GetBestInterface</b> function retrieves the index of the interface that has the best route to the specified IPv4 address.</summary>
    <param name="dwDestAddr">The destination IPv4 address for which to retrieve the interface that has the best route, in the form of an <see cref="IPAddr" /> structure.</param>
    <param name="pdwBestIfIndex">A pointer to a <b>DWORD</b> variable that receives the index of the interface that has the best route to the IPv4 address specified by <i>dwDestAddr</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_CAN_NOT_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation could not be completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pdwBestIfIndex</i> parameter or if the <i>pdwBestIfIndex</i> points to memory that cannot be written.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if no IPv4 stack is on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetBestInterfaceEx">
    <summary>The<b>GetBestInterfaceEx</b> function retrieves the index of the interface that has the best route to the specified IPv4 or IPv6 address.</summary>
    <param name="pDestAddr">The destination IPv6 or IPv4 address for which to retrieve the interface with the best route, in the form of a <a href="https://docs.microsoft.com//windows/desktop/WinSock/sockaddr-2">sockaddr</a> structure.</param>
    <param name="pdwBestIfIndex">A pointer to the index of the interface with the best route to the IPv6 or IPv4 address specified by <i>pDestAddr</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_CAN_NOT_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation could not be completed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pdwBestIfIndex</i> parameter or if the <i>pDestAddr</i> or <i>pdwBestIfIndex</i> parameters point to memory that cannot be accessed. This error can also be returned if the <i>pdwBestIfIndex</i> parameter points to memory that can't be written to.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if no IPv4 stack is on the local computer and an IPv4 address was specified in the <i>pDestAddr</i> parameter or no IPv6 stack is on the local computer and an IPv6 address was specified in the <i>pDestAddr</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetBestRoute">
    <summary>The<b>GetBestRoute</b> function retrieves the best route to the specified destination IP address.</summary>
    <param name="dwDestAddr">Destination IP address for which to obtain the best route.</param>
    <param name="dwSourceAddr">
      <para>Source IP address. This IP address corresponds to an interface on the local computer. If multiple best routes to the destination address exist, the function selects the route that uses this interface.</para>
      <para>This parameter is optional. The caller may specify zero for this parameter.</para>
    </param>
    <param name="pBestRoute">Pointer to a<see cref="MIB_IPFORWARDROW" /> structure containing the best route for the IP address specified by <i>dwDestAddr</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.GetFriendlyIfIndex">
    <summary>The<b>GetFriendlyIfIndex</b> function takes an interface index and returns a backward-compatible interface index, that is, an index that uses only the lower 24 bits.</summary>
    <param name="IfIndex">The interface index from which the backward-compatible or "friendly" interface index is derived.</param>
    <returns>A backward-compatible interface index that uses only the lower 24 bits.</returns>
  </member>
  <member name="Windows.GetIcmpStatistics">
    <summary>The<b>GetIcmpStatistics</b> function retrieves the Internet Control Message Protocol (ICMP) for IPv4 statistics for the local computer.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_ICMP" /> structure that receives the ICMP statistics for the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b>, or <see cref="GetIcmpStatistics" /> is unable to write to the memory pointed to by the <i>pStats</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIcmpStatisticsEx">
    <summary>The <b>GetIcmpStatisticsEx</b> function retrieves Internet Control Message Protocol (ICMP) statistics for the local computer. The <b>GetIcmpStatisticsEx</b> function is capable of retrieving IPv6 ICMP statistics.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_ICMP_EX" /> structure that contains ICMP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve ICMP statistics. Must be one of the following:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>dwFamily</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIfEntry">
    <summary>The<b>GetIfEntry</b> function retrieves information for the specified interface on the local computer.</summary>
    <param name="pIfRow">A pointer to a<see cref="MIB_IFROW" /> structure that, on successful return, receives information for an interface on the local computer. On input, set the <b>dwIndex</b> member of <b>MIB_IFROW</b> to the index of the interface for which to retrieve information. The value for the <b>dwIndex</b> must be retrieved by a previous call to the <see cref="GetIfTable" />, <see cref="GetIfTable2" />, or <see cref="GetIfTable2Ex" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_CAN_NOT_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request could not be completed. This is an internal error.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The data is invalid. This error is returned if the network interface index specified by the <b>dwIndex</b> member of the <see cref="MIB_IFROW" /> structure pointed to by the <i>pIfRow</i> parameter is not a valid interface index on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pIfRow</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified interface could not be found. This error is returned if the network interface index specified by the <b>dwIndex</b> member of the <see cref="MIB_IFROW" /> structure pointed to by the <i>pIfRow</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if IPv4 is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIfTable">
    <summary>The<b>GetIfTable</b> function retrieves the MIB-II interface table.</summary>
    <param name="pIfTable">A pointer to a buffer that receives the interface table as a<see cref="MIB_IFTABLE" /> structure.</param>
    <param name="pdwSize">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>pIfTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned interface table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="bOrder">A Boolean value that specifies whether the returned interface table should be sorted in ascending order by interface index. If this parameter is <b>TRUE</b>, the table is sorted.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pIfTable</i> parameter is not large enough. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetIfTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetInterfaceActiveTimestampCapabilities">
    <summary>
      <para>Retrieves the currently enabled timestamp capabilities of a network adapter.</para>
      <para>For more info, and code examples, see <a href="https://docs.microsoft.com//windows/win32/iphlp/packet-timestamping">Packet timestamping</a>.</para>
    </summary>
    <param name="InterfaceLuid">The network locally unique identifier (LUID) of the network adapter for which currently enabled timestamp capabilities are to be retrieved.</param>
    <param name="TimestampCapabilites">If the function succeeds, then <i>TimestampCapabilites</i> returns a structure that describes the currently enabled timestamp capabilities.</param>
    <returns>If the function succeeds, then it returns <b>NO_ERROR</b>. If the network card corresponding to <i>InterfaceLuid</i> isn't timestamp-aware, then the function returns <b>ERROR_NOT_SUPPORTED</b>. If the network card driver advertises an unsupported timestamp configuration, then the function returns <b>ERROR_BAD_DRIVER</b>.</returns>
  </member>
  <member name="Windows.GetInterfaceCurrentTimestampCapabilities">
    <summary>This function is reserved for system use, and you should not call it from your code.</summary>
    <param name="InterfaceLuid">Reserved.</param>
    <param name="TimestampCapabilites">Reserved.</param>
    <returns>Reserved.</returns>
  </member>
  <member name="Windows.GetInterfaceHardwareTimestampCapabilities">
    <summary>This function is reserved for system use, and you should not call it from your code.</summary>
    <param name="InterfaceLuid">Reserved.</param>
    <param name="TimestampCapabilites">Reserved.</param>
    <returns>Reserved.</returns>
  </member>
  <member name="Windows.GetInterfaceInfo">
    <summary>The<b>GetInterfaceInfo</b> function obtains the list of the network interface adapters with IPv4 enabled on the local system.</summary>
    <param name="pIfTable">A pointer to a buffer that specifies an<see cref="IP_INTERFACE_INFO" /> structure that receives the list of adapters. This buffer must be allocated by the caller.</param>
    <param name="dwOutBufLen">A pointer to a <b>DWORD</b> variable that specifies the size of the buffer pointed to by <i>pIfTable</i> parameter to receive the <see cref="IP_INTERFACE_INFO" /> structure. If this size is insufficient to hold the IPv4 interface information,<b>GetInterfaceInfo</b> fills in this variable with the required size, and returns an error code of <b>ERROR_INSUFFICIENT_BUFFER</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>NO_ERROR</b>.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer to receive the IPv4 adapter information is too small. This value is returned if the <i>dwOutBufLen</i> parameter indicates that the buffer pointed to by the <i>pIfTable</i> parameter is too small to retrieve the IPv4 interface information. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>dwOutBufLen</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if the <i>dwOutBufLen</i> parameter is <b>NULL</b>, or <see cref="GetInterfaceInfo" /> is unable to write to the memory pointed to by the <i>dwOutBufLen</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There are no network adapters enabled for IPv4 on the local system. This value is also returned if all network adapters on the local system are disabled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetInterfaceSupportedTimestampCapabilities">
    <summary>
      <para>Retrieves the supported timestamp capabilities of a network adapter.</para>
      <para>For more info, and code examples, see <a href="https://docs.microsoft.com//windows/win32/iphlp/packet-timestamping">Packet timestamping</a>.</para>
    </summary>
    <param name="InterfaceLuid">The network locally unique identifier (LUID) of the network adapter for which supported timestamp capabilities are to be retrieved.</param>
    <param name="TimestampCapabilites">If the function succeeds, then <i>TimestampCapabilites</i> returns a structure that describes the supported timestamp capabilities.</param>
    <returns>If the function succeeds, then it returns <b>NO_ERROR</b>. If the network card corresponding to <i>InterfaceLuid</i> isn't timestamp-aware, then the function returns <b>ERROR_NOT_SUPPORTED</b>.</returns>
  </member>
  <member name="Windows.GetIpAddrTable">
    <summary>The<b>GetIpAddrTable</b> function retrieves the interface–to–IPv4 address mapping table.</summary>
    <param name="pIpAddrTable">A pointer to a buffer that receives the interface–to–IPv4 address mapping table as a<see cref="MIB_IPADDRTABLE" /> structure.</param>
    <param name="pdwSize">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>pIpAddrTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned mapping table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="bOrder">If this parameter is <b>TRUE</b>, then the returned mapping table is sorted in ascending order by IPv4 address. The sorting is performed in network byte order. For example, 10.0.0.255 comes immediately before 10.0.1.0.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pIpAddrTable</i> parameter is not large enough. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetIpAddrTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIpErrorString">
    <summary>The <b>GetIpErrorString</b> function retrieves an IP Helper error string.</summary>
    <param name="ErrorCode">The error code to be retrieved. The possible values for this parameter are defined in the <i>Ipexport.h</i> header file.</param>
    <param name="Buffer">A pointer to the buffer that contains the error code string if the function returns with NO_ERROR.</param>
    <param name="Size">A pointer to a <b>DWORD</b> that specifies the length, in characters, of the buffer pointed to by <i>Buffer</i> parameter, excluding the terminating null (i.e. the size of Buffer in characters, minus one).</param>
    <returns>
      <para>Returns NO_ERROR upon success.</para>
      <para>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.GetIpForwardTable">
    <summary>The<b>GetIpForwardTable</b> function retrieves the IPv4 routing table.</summary>
    <param name="pIpForwardTable">A pointer to a buffer that receives the IPv4 routing table as a<see cref="MIB_IPFORWARDTABLE" /> structure.</param>
    <param name="pdwSize">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>pIpForwardTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned routing table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="bOrder">
      <para>A Boolean value that specifies whether the returned table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in the order of:</para>
      <list type="number">
        <item>
          <description>Destination address</description>
        </item>
        <item>
          <description>Protocol that generated the route</description>
        </item>
        <item>
          <description>Multipath routing policy</description>
        </item>
        <item>
          <description>Next-hop address</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>NO_ERROR</b> (zero).</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pIpForwardTable</i> parameter is not large enough. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetIpForwardTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No data is available. This error is returned if there are no routes present on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system. This error is returned if there is no IP stack installed on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIpNetTable">
    <summary>The<b>GetIpNetTable</b> function retrieves the IPv4 to physical address mapping table.</summary>
    <param name="IpNetTable">A pointer to a buffer that receives the IPv4 to physical address mapping table as a<see cref="MIB_IPNETTABLE" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>pIpNetTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned mapping table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="Order">A Boolean value that specifies whether the returned mapping table should be sorted in ascending order by IP address. If this parameter is <b>TRUE</b>, the table is sorted.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR or ERROR_NO_DATA.</para>
      <para>If the function fails or does not return any data, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pIpNetTable</i> parameter is not large enough. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if the <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetIpNetTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no data to return. The IPv4 to physical address mapping table is empty. This return value indicates that the call to the <see cref="GetIpNetTable" /> function succeeded, but there was no data to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIpStatistics">
    <summary>The<b>GetIpStatistics</b> function retrieves the IP statistics for the current computer.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_IPSTATS" /> structure that receives the IP statistics for the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b>, or <see cref="GetIpStatistics" /> is unable to write to the memory pointed to by the <i>pStats</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIpStatisticsEx">
    <summary>The<b>GetIpStatisticsEx</b> function retrieves the Internet Protocol (IP) statistics for the current computer. The<b>GetIpStatisticsEx</b> function differs from the<see cref="GetIpStatistics" /> function in that<b>GetIpStatisticsEx</b> also supports the Internet Protocol version 6 (IPv6) protocol family.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_IPSTATS" /> structure that receives the IP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>dwFamily</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetNetworkParams">
    <summary>The<b>GetNetworkParams</b> function retrieves network parameters for the local computer.</summary>
    <param name="pFixedInfo">A pointer to a buffer that contains a <see cref="FIXED_INFO" /> structure that receives the network parameters for the local computer, if the function was successful. This buffer must be allocated by the caller prior to calling the <b>GetNetworkParams</b> function.</param>
    <param name="pOutBufLen">A pointer to a <b>ULONG</b> variable that specifies the size of the<see cref="FIXED_INFO" /> structure. If this size is insufficient to hold the information,<b>GetNetworkParams</b> fills in this variable with the required size, and returns an error code of <b>ERROR_BUFFER_OVERFLOW</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>ERROR_SUCCESS</b>.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUFFER_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer to receive the network parameter information is too small. This value is returned if the <i>pOutBufLen</i> parameter is too small to hold the network parameter information or the <i>pFixedInfo</i> parameter was a <b>NULL</b> pointer. When this error code is returned, the <i>pOutBufLen</i> parameter points to the required buffer size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if the <i>pOutBufLen</i> parameter is a <b>NULL</b> pointer, the calling process does not have read/write access to the memory pointed to by <i>pOutBufLen</i>, or the calling process does not have write access to the memory pointed to by the <i>pFixedInfo</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NO_DATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No network parameter information exists for the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>GetNetworkParams</b> function is not supported by the operating system running on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetNumberOfInterfaces">
    <summary>The<b>GetNumberOfInterfaces</b> functions retrieves the number of interfaces on the local computer.</summary>
    <param name="pdwNumIf">Pointer to a <b>DWORD</b> variable that receives the number of interfaces on the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.GetOwnerModuleFromTcp6Entry">
    <summary>The <b>GetOwnerModuleFromTcp6Entry</b> function retrieves data about the module that issued the context bind for a specific IPv6 TCP endpoint in a MIB table row.</summary>
    <param name="pTcpEntry">A pointer to a <see cref="MIB_TCP6ROW_OWNER_MODULE" /> structure that contains the IPv6 TCP endpoint entry used to obtain the owner module.</param>
    <param name="Class">
      <para>A <see cref="TCPIP_OWNER_MODULE_INFO_CLASS" /> enumeration value that indicates the type of data to obtain regarding the owner module. The <b>TCPIP_OWNER_MODULE_INFO_CLASS</b> enumeration is defined in the <i>Iprtrmib.h</i> header file.</para>
      <para>This parameter must be set to <b>TCPIP_OWNER_MODULE_INFO_BASIC</b>.</para>
    </param>
    <param name="pBuffer">
      <para>A pointer to a buffer that contains a <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" /> structure with the owner module data. The type of data returned in this buffer is indicated by the value of the <i>Class</i> parameter.</para>
      <para>The following structures are used for the data in <i>Buffer</i> when <i>Class</i> is set to the corresponding value.</para>
      <list type="table">
        <listheader>
          <description>
            <i>Class</i> enumeration value</description>
          <description>
            <i>Buffer</i> data format</description>
        </listheader>
        <listheader>
          <description>TCPIP_OWNER_MODULE_BASIC_INFO</description>
          <description>
            <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" />
          </description>
        </listheader>
      </list>
    </param>
    <param name="pdwSize">The estimated size of the structure returned in <i>Buffer</i>, in bytes. If this value is set too small, <b>ERROR_INSUFFICIENT_BUFFER</b> is returned by this function, and this field will contain the correct structure size.</param>
    <returns>
      <para>If the function call is successful, the value <b>NO_ERROR</b> is returned.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient space was allocated for the table. The size of the table is returned in the <i>pdwSize</i> parameter, and must be used in a subsequent call to this function in order to successfully retrieve the table.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is incorrect. This value is returned if either of the <i>pTcpEntry</i> or <i>pdwSize</i> parameters are <b>NULL</b>. This value is also returned if the <i>Class</i> parameter is not equal to <b>TCPIP_OWNER_MODULE_INFO_BASIC</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory is available to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element was not found. This value is returned if the <b>dwOwningPid</b> member of the <see cref="MIB_TCP6ROW_OWNER_MODULE" /> pointed to by the <i>pTcpEntry</i> parameter was zero or could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PARTIAL_COPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only part of a request was completed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetOwnerModuleFromTcpEntry">
    <summary>The <b>GetOwnerModuleFromTcpEntry</b> function retrieves data about the module that issued the context bind for a specific IPv4 TCP endpoint in a MIB table row.</summary>
    <param name="pTcpEntry">A pointer to a <see cref="MIB_TCPROW_OWNER_MODULE" /> structure that contains the IPv4 TCP endpoint entry used to obtain the owner module.</param>
    <param name="Class">
      <para>A <see cref="TCPIP_OWNER_MODULE_INFO_CLASS" /> enumeration value that indicates the type of data to obtain regarding the owner module. The <b>TCPIP_OWNER_MODULE_INFO_CLASS</b> enumeration is defined in the <i>Iprtrmib.h</i> header file.</para>
      <para>This parameter must be set to <b>TCPIP_OWNER_MODULE_INFO_BASIC</b>.</para>
    </param>
    <param name="pBuffer">
      <para>A pointer a buffer that contains a <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" /> structure with the owner module data. The type of data returned in this buffer is indicated by the value of the <i>Class</i> parameter.</para>
      <para>The following structures are used for the data in <i>Buffer</i> when <i>Class</i> is set to the corresponding value.</para>
      <list type="table">
        <listheader>
          <description>
            <i>Class</i> enumeration value</description>
          <description>
            <i>Buffer</i> data format</description>
        </listheader>
        <listheader>
          <description>TCPIP_OWNER_MODULE_BASIC_INFO</description>
          <description>
            <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" />
          </description>
        </listheader>
      </list>
    </param>
    <param name="pdwSize">The estimated size, in bytes, of the structure returned in <i>Buffer</i>. If this value is set too small, <b>ERROR_INSUFFICIENT_BUFFER</b> is returned by this function, and this field will contain the correct size of the buffer. The size required is the size of the corresponding structure plus an additional number of bytes equal to the length of data pointed to in the structure (for example, the name and path strings).</param>
    <returns>
      <para>If the function call is successful, the value <b>NO_ERROR</b> is returned.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient space was allocated for the table. The size of the table is returned in the <i>pdwSize</i> parameter, and must be used in a subsequent call to this function in order to successfully retrieve the table.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A parameter is incorrect. This value is returned if either of the <i>pTcpEntry</i> or <i>pdwSize</i> parameters are <b>NULL</b>. This value is also returned if the <i>Class</i> parameter is not equal to <b>TCPIP_OWNER_MODULE_INFO_BASIC</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_ENOUGH_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not enough memory is available to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A element was no found. This value is returned if the <b>dwOwningPid</b> member of the <see cref="MIB_TCPROW_OWNER_MODULE" /> structure pointed to by the <i>pTcpEntry</i> parameter was zero or could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PARTIAL_COPY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only part of a request was completed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetOwnerModuleFromUdp6Entry">
    <summary>The <b>GetOwnerModuleFromUdp6Entry</b> function retrieves data about the module that issued the context bind for a specific IPv6 UDP endpoint in a MIB table row.</summary>
    <param name="pUdpEntry">A pointer to a <see cref="MIB_UDP6ROW_OWNER_MODULE" /> structure that contains the IPv6 UDP endpoint entry used to obtain the owner module.</param>
    <param name="Class">
      <see cref="TCPIP_OWNER_MODULE_INFO_CLASS" /> enumeration value that indicates the type of data to obtain regarding the owner module.</param>
    <param name="pBuffer">
      <para>The buffer that contains a <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" /> structure with the owner module data. The type of data returned in this buffer is indicated by the value of the <i>Class</i> parameter.</para>
      <para>The following structures are used for the data in <i>Buffer</i> when <i>Class</i> is set to the corresponding value.</para>
      <list type="table">
        <listheader>
          <description>
            <i>Class</i> enumeration value</description>
          <description>
            <i>Buffer</i> data format</description>
        </listheader>
        <listheader>
          <description>TCPIP_OWNER_MODULE_BASIC_INFO</description>
          <description>
            <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" />
          </description>
        </listheader>
      </list>
    </param>
    <param name="pdwSize">The estimated size, in bytes, of the structure returned in <i>Buffer</i>. If this value is set too small, <b>ERROR_INSUFFICIENT_BUFFER</b> is returned by this function, and this field will contain the correct size of the structure.</param>
    <returns>
      <para>If the call is successful, the value <b>NO_ERROR</b> is returned. Otherwise, the following error is returned.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An insufficient amount of space was allocated for the table. The size of the table is returned in the <i>pdwSize</i> parameter, and must be used in a subsequent call to this function in order to successfully retrieve the table.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetOwnerModuleFromUdpEntry">
    <summary>The <b>GetOwnerModuleFromUdpEntry</b> function retrieves data about the module that issued the context bind for a specific IPv4 UDP endpoint in a MIB table row.</summary>
    <param name="pUdpEntry">A pointer to a <see cref="MIB_UDPROW_OWNER_MODULE" /> structure that contains the IPv4 UDP endpoint entry used to obtain the owner module.</param>
    <param name="Class">A <see cref="TCPIP_OWNER_MODULE_INFO_CLASS" /> enumeration value that indicates the type of data to obtain regarding the owner module.</param>
    <param name="pBuffer">
      <para>The buffer that contains a <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" /> structure with the owner module data. The type of data returned in this buffer is indicated by the value of the <i>Class</i> parameter.</para>
      <para>The following structures are used for the data in <i>Buffer</i> when <i>Class</i> is set to the corresponding value.</para>
      <list type="table">
        <listheader>
          <description>
            <i>Class</i> enumeration value</description>
          <description>
            <i>Buffer</i> data format</description>
        </listheader>
        <listheader>
          <description>TCPIP_OWNER_MODULE_BASIC_INFO</description>
          <description>
            <see cref="TCPIP_OWNER_MODULE_BASIC_INFO" />
          </description>
        </listheader>
      </list>
    </param>
    <param name="pdwSize">The estimated size, in bytes, of the structure returned in <i>Buffer</i>. If this value is set too small, <b>ERROR_INSUFFICIENT_BUFFER</b> is returned by this function, and this field will contain the correct structure size.</param>
    <returns>
      <para>If the call is successful, the value <b>NO_ERROR</b> is returned. Otherwise, the following error is returned.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient space was allocated for the table. The size of the table is returned in the <i>pdwSize</i> parameter, and must be used in a subsequent call to this function in order to successfully retrieve the table.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPerAdapterInfo">
    <summary>The<b>GetPerAdapterInfo</b> function retrieves information about the adapter corresponding to the specified interface.</summary>
    <param name="IfIndex">Index of an interface. The <b>GetPerAdapterInfo</b> function retrieves information for the adapter corresponding to this interface.</param>
    <param name="pPerAdapterInfo">Pointer to an<see cref="IP_PER_ADAPTER_INFO" /> structure that receives information about the adapter.</param>
    <param name="pOutBufLen">Pointer to a <b>ULONG</b> variable that specifies the size of the<see cref="IP_PER_ADAPTER_INFO" /> structure. If this size is insufficient to hold the information,<b>GetPerAdapterInfo</b> fills in this variable with the required size, and returns an error code of ERROR_BUFFER_OVERFLOW.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUFFER_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer size indicated by the <i>pOutBufLen</i> parameter is too small to hold the adapter information. The <i>pOutBufLen</i> parameter points to the required size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pOutBufLen</i> parameter is <b>NULL</b>, or the calling process does not have read/write access to the memory pointed to by <i>pOutBufLen</i>, or the calling process does not have write access to the memory pointed to by the <i>pAdapterInfo</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="GetPerAdapterInfo" /> is not supported by the operating system running on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list> </returns>
  </member>
  <member name="Windows.GetPerTcp6ConnectionEStats">
    <summary>The<b>GetPerTcp6ConnectionEStats</b> function retrieves extended statistics for an IPv6 TCP connection.</summary>
    <param name="Row">A pointer to a <see cref="MIB_TCP6ROW" /> structure for an IPv6 TCP connection.</param>
    <param name="EstatsType">
      <para>The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned in the <i>Rw</i>, <i>Rod</i>, and <i>Ros</i> parameters if the call is successful.</para>
      <para>This parameter can be one of the values from the <see cref="TCP_ESTATS_TYPE" /> enumeration type defined in the <i>Tcpestats.h</i> header file.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSynOpts</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests SYN exchange information for a TCP connection.<para>Only read-only static information is available for this enumeration value.</para><para>If the <i>Ros</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Ros</i> parameter should contain a <see cref="TCP_ESTATS_SYN_OPTS_ROS_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsData</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended data transfer information for a TCP connection. <para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_DATA_RW_v0" /> structure.</para><para>If extended data transfer information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_DATA_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSndCong</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests sender congestion for a TCP connection. <para>All three types of information (read-only static, read-only dynamic, and read/write information) are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_RW_v0" /> structure.</para><para>If the <i>Ros</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Ros</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_ROS_v0" /> structure.</para><para>If sender congestion information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsPath</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended path measurement information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_PATH_RW_v0" /> structure.</para><para>If extended path measurement information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_PATH_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSendBuff</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended output-queuing information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_SEND_BUFF_RW_v0" /> structure.</para><para>If extended output-queuing information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_SEND_BUFF_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended local-receiver information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_REC_RW_v0" /> structure.</para><para>If extended local-receiver information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_REC_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsObsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended remote-receiver information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_OBS_REC_RW_v0" /> structure.</para><para>If extended remote-receiver information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_OBS_REC_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsBandwidth</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests bandwidth estimation statistics for a TCP connection on bandwidth.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_BANDWIDTH_RW_v0" /> structure.</para><para>If bandwidth estimation statistics was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_BANDWIDTH_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsFineRtt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_FINE_RTT_RW_v0" /> structure.</para><para>If fine-grained RTT estimation statistics was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_FINE_RTT_ROD_v0" /> structure.</para></description>
        </listheader>
      </list>
    </param>
    <param name="Rw">A pointer to a buffer to receive the read/write information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read/write information for the TCP connection.</param>
    <param name="RwVersion">The version of the read/write information requested. The current supported value is a version of zero.</param>
    <param name="RwSize">The size, in bytes, of the buffer pointed to by <i>Rw</i> parameter.</param>
    <param name="Ros">A pointer to a buffer to receive read-only static information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read-only static information for the TCP connection.</param>
    <param name="RosVersion">The version of the read-only static information requested. The current supported value is a version of zero.</param>
    <param name="RosSize">The size, in bytes, of the buffer pointed to by the <i>Ros</i> parameter.</param>
    <param name="Rod">A pointer to a buffer to receive read-only dynamic information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read-only dynamic information for the TCP connection.</param>
    <param name="RodVersion">The version of the read-only dynamic information requested. The current supported value is a version of zero..</param>
    <param name="RodSize">The size, in bytes, of the buffer pointed to by the <i>Rod</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A buffer passed to a function is too small. This error is returned if the buffer pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is not large enough to receive the data. This error also returned if one of the given buffers pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is <b>NULL</b>, but a length was specified in the associated <i>RwSize</i>, <i>RosSize</i>, or <i>RodSize</i>.<para>This error value is returned on Windows Vista and Windows Server 2008.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parameter is incorrect. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_USER_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is <b>NULL</b>, but a length was specified in the associated <i>RwSize</i>, <i>RosSize</i>, or <i>RodSize</i>. As a result, this error is returned if any of the following conditions are met:<list type="bullet"><item><description>The <i>Row</i> parameter is a <b>NULL</b> pointer and the <i>RwSize</i> parameter is nonzero.</description></item><item><description>The <i>Ros</i> parameter is a <b>NULL</b> pointer and the <i>RosSize</i> parameter is nonzero.</description></item><item><description>The <i>Rod</i> parameter is a <b>NULL</b> pointer and the <i>RodSize</i> parameter is nonzero.</description></item></list><para>This error value is returned on Windows 7 and Windows Server 2008 R2.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This requested entry was not found. This error is returned if the TCP connection specified in the <i>Row</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if the <i>RwVersion</i>, <i>RosVersion</i>, or <i>RodVersion</i> parameter is not set to zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPerTcpConnectionEStats">
    <summary>The<b>GetPerTcpConnectionEStats</b> function retrieves extended statistics for an IPv4 TCP connection.</summary>
    <param name="Row">A pointer to a <see cref="MIB_TCPROW" /> structure for an IPv4 TCP connection.</param>
    <param name="EstatsType">
      <para>The type of extended statistics for TCP requested. This parameter determines the data and format of information that is returned in the <i>Rw</i>, <i>Rod</i>, and <i>Ros</i> parameters if the call is successful.</para>
      <para>This parameter can be one of the values from the <see cref="TCP_ESTATS_TYPE" /> enumeration type defined in the <i>Tcpestats.h</i> header file.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSynOpts</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests SYN exchange information for a TCP connection.<para>Only read-only static information is available for this enumeration value.</para><para>If the <i>Ros</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Ros</i> parameter should contain a <see cref="TCP_ESTATS_SYN_OPTS_ROS_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsData</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended data transfer information for a TCP connection. <para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_DATA_RW_v0" /> structure.</para><para>If extended data transfer information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_DATA_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSndCong</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests sender congestion for a TCP connection. <para>All three types of information (read-only static, read-only dynamic, and read/write information) are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_RW_v0" /> structure.</para><para>If the <i>Ros</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Ros</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_ROS_v0" /> structure.</para><para>If sender congestion information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_SND_CONG_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsPath</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended path measurement information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_PATH_RW_v0" /> structure.</para><para>If extended path measurement information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_PATH_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSendBuff</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended output-queuing information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_SEND_BUFF_RW_v0" /> structure.</para><para>If extended output-queuing information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_SEND_BUFF_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended local-receiver information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_REC_RW_v0" /> structure.</para><para>If extended local-receiver information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_REC_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsObsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests extended remote-receiver information for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_OBS_REC_RW_v0" /> structure.</para><para>If extended remote-receiver information was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_OBS_REC_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsBandwidth</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests bandwidth estimation statistics for a TCP connection on bandwidth.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_BANDWIDTH_RW_v0" /> structure.</para><para>If bandwidth estimation statistics was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_BANDWIDTH_ROD_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsFineRtt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value requests fine-grained round-trip time (RTT) estimation statistics for a TCP connection.<para>Only read-only dynamic information and read/write information are available for this enumeration value.</para><para>If the <i>Rw</i> parameter was not <b>NULL</b> and the function succeeds, the buffer pointed to by the <i>Rw</i> parameter should contain a <see cref="TCP_ESTATS_FINE_RTT_RW_v0" /> structure.</para><para>If fine-grained RTT estimation statistics was enabled for this TCP connection, the <i>Rod</i> parameter was not <b>NULL</b>, and the function succeeds, the buffer pointed to by the <i>Rod</i> parameter should contain a <see cref="TCP_ESTATS_FINE_RTT_ROD_v0" /> structure.</para></description>
        </listheader>
      </list>
    </param>
    <param name="Rw">A pointer to a buffer to receive the read/write information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read/write information for the TCP connection.</param>
    <param name="RwVersion">The version of the read/write information requested. The current supported value is a version of zero.</param>
    <param name="RwSize">The size, in bytes, of the buffer pointed to by <i>Rw</i> parameter.</param>
    <param name="Ros">A pointer to a buffer to receive read-only static information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read-only static information for the TCP connection.</param>
    <param name="RosVersion">The version of the read-only static information requested. The current supported value is a version of zero.</param>
    <param name="RosSize">The size, in bytes, of the buffer pointed to by the <i>Ros</i> parameter.</param>
    <param name="Rod">A pointer to a buffer to receive read-only dynamic information. This parameter may be a <b>NULL</b> pointer if an application does not want to retrieve read-only dynamic information for the TCP connection.</param>
    <param name="RodVersion">The version of the read-only dynamic information requested. The current supported value is a version of zero.</param>
    <param name="RodSize">The size, in bytes, of the buffer pointed to by the <i>Rod</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A buffer passed to a function is too small. This error is returned if the buffer pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is not large enough to receive the data. This error also returned if one of the given buffers pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is <b>NULL</b>, but a length was specified in the associated <i>RwSize</i>, <i>RosSize</i>, or <i>RodSize</i>.<para>This error value is returned on Windows Vista and Windows Server 2008.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parameter is incorrect. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_USER_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied user buffer is not valid for the requested operation. This error is returned if one of the given buffers pointed to by the <i>Rw</i>, <i>Ros</i>, or <i>Rod</i> parameters is <b>NULL</b>, but a length was specified in the associated <i>RwSize</i>, <i>RosSize</i>, or <i>RodSize</i>. As a result, this error is returned if any of the following conditions are met:<list type="bullet"><item><description>The <i>Row</i> parameter is a <b>NULL</b> pointer and the <i>RwSize</i> parameter is nonzero.</description></item><item><description>The <i>Ros</i> parameter is a <b>NULL</b> pointer and the <i>RosSize</i> parameter is nonzero.</description></item><item><description>The <i>Rod</i> parameter is a <b>NULL</b> pointer and the <i>RodSize</i> parameter is nonzero.</description></item></list><para>This error value is returned on Windows 7 and Windows Server 2008 R2.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This requested entry was not found. This error is returned if the TCP connection specified in the <i>Row</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if the <i>RwVersion</i>, <i>RosVersion</i>, or <i>RodVersion</i> parameter is not set to zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetRTTAndHopCount">
    <summary>The<b>GetRTTAndHopCount</b> function determines the round-trip time (RTT) and hop count to the specified destination.</summary>
    <param name="DestIpAddress">IP address of the destination for which to determine the RTT and hop count, in the form of an <see cref="IPAddr" /> structure.</param>
    <param name="HopCount">Pointer to a <b>ULONG</b> variable. This variable receives the hop count to the destination specified by the <i>DestIpAddress</i> parameter.</param>
    <param name="MaxHops">Maximum number of hops to search for the destination. If the number of hops to the destination exceeds this number, the function terminates the search and returns <b>FALSE</b>.</param>
    <param name="RTT">Round-trip time, in milliseconds, to the destination specified by <i>DestIpAddress</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Call<see cref="GetLastError" /> to obtain the error code for the failure.</para>
    </returns>
  </member>
  <member name="Windows.GetTcp6Table">
    <summary>The<b>GetTcp6Table</b> function retrieves the TCP connection table for IPv6.</summary>
    <param name="TcpTable">A pointer to a buffer that receives the TCP connection table for IPv6 as a<see cref="MIB_TCP6TABLE" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>TcpTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned TCP connection table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="Order">
      <para>A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in ascending order, starting with the lowest local IP address. If this parameter is <b>FALSE</b>, the table appears in the order in which they were retrieved.</para>
      <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
      <list type="number">
        <item>
          <description>Local IPv6 address</description>
        </item>
        <item>
          <description>Local scope ID</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
        <item>
          <description>Remote IPv6 address</description>
        </item>
        <item>
          <description>Remote scope ID</description>
        </item>
        <item>
          <description>Remote port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>TcpTable</i> parameter is not large enough. The required size is returned in the variable pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>SizePointer</i> parameter is <b>NULL</b>, or <see cref="GetTcp6Table" /> is unable to write to the memory pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcp6Table2">
    <summary>The<b>GetTcp6Table2</b> function retrieves the TCP connection table for IPv6.</summary>
    <param name="TcpTable">A pointer to a buffer that receives the TCP connection table for IPv6 as a<see cref="MIB_TCP6TABLE2" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size of the buffer pointed to by the <i>TcpTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned TCP connection table, the function sets this parameter equal to the required buffer size.</para>
    </param>
    <param name="Order">
      <para>A value that specifies whether the TCP connection table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in ascending order, starting with the lowest local IP address. If this parameter is <b>FALSE</b>, the table appears in the order in which they were retrieved.</para>
      <para>The following values are compared (as listed) when ordering the TCP endpoints:</para>
      <list type="number">
        <item>
          <description>Local IPv6 address</description>
        </item>
        <item>
          <description>Local scope ID</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
        <item>
          <description>Remote IPv6 address</description>
        </item>
        <item>
          <description>Remote scope ID</description>
        </item>
        <item>
          <description>Remote port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>TcpTable</i> parameter is not large enough. The required size is returned in the variable pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>SizePointer</i> parameter is <b>NULL</b>, or <see cref="GetTcp6Table2" /> is unable to write to the memory pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcpStatistics">
    <summary>The<b>GetTcpStatistics</b> function retrieves the TCP statistics for the local computer.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_TCPSTATS" /> structure that receives the TCP statistics for the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b>, or <see cref="GetTcpStatistics" /> is unable to write to the memory pointed to by the <i>pStats</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use the <see cref="FormatMessage" /> function to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcpStatisticsEx">
    <summary>The<b>GetTcpStatisticsEx</b> function retrieves the Transmission Control Protocol (TCP) statistics for the current computer. The<b>GetTcpStatisticsEx</b> function differs from the<b>GetTcpStatistics</b> function in that<b>GetTcpStatisticsEx</b> also supports the Internet Protocol version 6 (IPv6) protocol family.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_TCPSTATS" /> structure that receives the TCP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>dwFamily</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcpStatisticsEx2">
    <summary>The<b>GetTcpStatisticsEx2</b> function retrieves the Transmission Control Protocol (TCP) statistics for the current computer. The<b>GetTcpStatisticsEx2</b> function differs from the<see cref="GetTcpStatisticsEx" /> function in that it uses a new output structure that contains 64-bit counters, rather than 32-bit counters.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_TCPSTATS2" /> structure that receives the TCP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>dwFamily</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcpTable">
    <summary>The<b>GetTcpTable</b> function retrieves the IPv4 TCP connection table.</summary>
    <param name="TcpTable">A pointer to a buffer that receives the TCP connection table as a<see cref="MIB_TCPTABLE" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>pTcpTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned connection table, the function sets this parameter equal to the required buffer size in bytes.</para>
      <para>On the Windows SDK released for Windows Vista and later, the data type for this parameter is changed to a <b>PULONG</b> which is equivalent to a <b>PDWORD</b>.</para>
    </param>
    <param name="Order">
      <para>A Boolean value that specifies whether the TCP connection table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in the order of:</para>
      <list type="number">
        <item>
          <description>Local IP address</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
        <item>
          <description>Remote IP address</description>
        </item>
        <item>
          <description>Remote port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pTcpTable</i> parameter is not large enough. The required size is returned in the <b>DWORD</b> variable pointed to by the <i>pdwSize</i> parameter.<para>This error is also returned if the <i>pTcpTable</i> parameter is <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetTcpTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STATUS_UNSUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If you receive this return code then calling the function again is usually enough to clear the issue and get the desired result. This return code can be a consequence of the system being under high load. For example, if the size of the TCP connection table changes by more than 2 additional items 3 consecutive times.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetTcpTable2">
    <summary>The<b>GetTcpTable2</b> function retrieves the IPv4 TCP connection table.</summary>
    <param name="TcpTable">A pointer to a buffer that receives the TCP connection table as a<see cref="MIB_TCPTABLE2" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size of the buffer pointed to by the <i>TcpTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned connection table, the function sets this parameter equal to the required buffer size.</para>
    </param>
    <param name="Order">
      <para>A value that specifies whether the TCP connection table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in the order of:</para>
      <list type="number">
        <item>
          <description>Local IP address</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
        <item>
          <description>Remote IP address</description>
        </item>
        <item>
          <description>Remote port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>TcpTable</i> parameter is not large enough. The required size is returned in the <b>PULONG</b> variable pointed to by the <i>SizePointer</i> parameter.<para>This error is also returned if the <i>pTcpTable</i> parameter is <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>SizePointer</i> parameter is <b>NULL</b>, or <see cref="GetTcpTable2" /> is unable to write to the memory pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUdp6Table">
    <summary>The<b>GetUdp6Table</b> function retrieves the IPv6 User Datagram Protocol (UDP) listener table.</summary>
    <param name="Udp6Table">A pointer to a buffer that receives the IPv6 UDP listener table as a<see cref="MIB_UDP6TABLE" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>Udp6Table</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned listener table, the function sets this parameter equal to the required buffer size in bytes.</para>
    </param>
    <param name="Order">
      <para>A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in the order of:</para>
      <list type="number">
        <item>
          <description>Local IPv6 address</description>
        </item>
        <item>
          <description>Local scope ID</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>Udp6Table</i> parameter is not large enough. The required size is returned in the <b>ULONG</b> variable pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>SizePointer</i> parameter is <b>NULL</b>, or <see cref="GetUdp6Table" /> is unable to write to the memory pointed to by the <i>SizePointer</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUdpStatistics">
    <summary>The<b>GetUdpStatistics</b> function retrieves the User Datagram Protocol (UDP) statistics for the local computer.</summary>
    <param name="Stats">Pointer to a<see cref="MIB_UDPSTATS" /> structure that receives the UDP statistics for the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.GetUdpStatisticsEx">
    <summary>The<b>GetUdpStatisticsEx</b> function retrieves the User Datagram Protocol (UDP) statistics for the current computer. The<b>GetUdpStatisticsEx</b> function differs from the<b>GetUdpStatistics</b> function in that<b>GetUdpStatisticsEx</b> also supports the Internet Protocol version 6 (IPv6) protocol family.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_UDPSTATS" /> structure that receives the UDP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pStats</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>dwFamily</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUdpStatisticsEx2">
    <summary>The<b>GetUdpStatisticsEx2</b> function retrieves the User Datagram Protocol (UDP) statistics for the current computer. The<b>GetUdpStatisticsEx2</b> function differs from the<see cref="GetUdpStatisticsEx" /> function in that<b>GetUdpStatisticsEx2</b> uses a new output structure that contains 64-bit counters, rather than 32-bit counters.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_UDPSTATS2" /> structure that receives the UDP statistics for the local computer.</param>
    <param name="Family">
      <para>The protocol family for which to retrieve statistics. This parameter must be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 4 (IPv4).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Internet Protocol version 6 (IPv6).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>Statistics</i> parameter is <b>NULL</b> or does not point to valid memory, or the <i>Family</i> parameter is not a valid value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system on which the function call was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUdpTable">
    <summary>The<b>GetUdpTable</b> function retrieves the IPv4 User Datagram Protocol (UDP) listener table.</summary>
    <param name="UdpTable">A pointer to a buffer that receives the IPv4 UDP listener table as a<see cref="MIB_UDPTABLE" /> structure.</param>
    <param name="SizePointer">
      <para>On input, specifies the size in bytes of the buffer pointed to by the <i>UdpTable</i> parameter.</para>
      <para>On output, if the buffer is not large enough to hold the returned listener table, the function sets this parameter equal to the required buffer size in bytes.</para>
      <para>On the Windows SDK released for Windows Vista and later, the data type for this parameter is changed to a <b>PULONG</b> which is equivalent to a <b>PDWORD</b>.</para>
    </param>
    <param name="Order">
      <para>A Boolean value that specifies whether the returned UDP listener table should be sorted. If this parameter is <b>TRUE</b>, the table is sorted in the order of:</para>
      <list type="number">
        <item>
          <description>Local IP address</description>
        </item>
        <item>
          <description>Local port</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer pointed to by the <i>pUdpTable</i> parameter is not large enough. The required size is returned in the <b>ULONG</b> variable pointed to by the <i>pdwSize</i> parameter.<para>This error is also returned if the <i>pUdpTable</i> parameter is <b>NULL</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pdwSize</i> parameter is <b>NULL</b>, or <see cref="GetUdpTable" /> is unable to write to the memory pointed to by the <i>pdwSize</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function is not supported on the operating system in use on the local system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUniDirectionalAdapterInfo">
    <summary>The<b>GetUniDirectionalAdapterInfo</b> function retrieves information about the unidirectional adapters installed on the local computer. A unidirectional adapter is an adapter that can receive datagrams, but not transmit them.</summary>
    <param name="pIPIfInfo">Pointer to an<see cref="IP_UNIDIRECTIONAL_ADAPTER_ADDRESS" /> structure that receives information about the unidirectional adapters installed on the local computer.</param>
    <param name="dwOutBufLen">Pointer to a <b>ULONG</b> variable that receives the size of the structure pointed to by the <i>pIPIfInfo</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.IpReleaseAddress">
    <summary>The<b>IpReleaseAddress</b> function releases an IPv4 address previously obtained through the Dynamic Host Configuration Protocol (DHCP).</summary>
    <param name="AdapterInfo">A pointer to an<see cref="IP_ADAPTER_INDEX_MAP" /> structure that specifies the adapter associated with the IPv4 address to release.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned if the <i>AdapterInfo</i> parameter is <b>NULL</b> or if the <b>Name</b> member of the <b>PIP_ADAPTER_INDEX_MAP</b> structure pointed to by the <i>AdapterInfo</i> parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PROC_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An exception occurred during the request to DHCP for the release of the IPv4 address.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.IpRenewAddress">
    <summary>The<b>IpRenewAddress</b> function renews a lease on an IPv4 address previously obtained through Dynamic Host Configuration Protocol (DHCP).</summary>
    <param name="AdapterInfo">A pointer to an<see cref="IP_ADAPTER_INDEX_MAP" /> structure that specifies the adapter associated with the IP address to renew.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned if the <i>AdapterInfo</i> parameter is <b>NULL</b> or if the <b>Name</b> member of the <b>PIP_ADAPTER_INDEX_MAP</b> structure pointed to by the <i>AdapterInfo</i> parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PROC_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An exception occurred during the request to DHCP for the renewal of the IPv4 address.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LookupPersistentTcpPortReservation">
    <summary>The<b>LookupPersistentTcpPortReservation</b> function looks up the token for a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.</summary>
    <param name="StartPort">The starting TCP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of TCP port numbers that were reserved.</param>
    <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element was not found. This error is returned if persistent port block specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LookupPersistentUdpPortReservation">
    <summary>The<b>LookupPersistentUdpPortReservation</b> function looks up the token for a persistent UDP port reservation for a consecutive block of TCP ports on the local computer.</summary>
    <param name="StartPort">The starting UDP port number in network byte order.</param>
    <param name="NumberOfPorts">The number of UDP port numbers that were reserved.</param>
    <param name="Token">A pointer to a port reservation token that is returned if the function succeeds.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if zero is passed in the <i>StartPort</i> or <i>NumberOfPorts</i> parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element was not found. This error is returned if persistent port block specified by the <i>StartPort</i> and <i>NumberOfPorts</i> parameters could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.NotifyIfTimestampConfigChange">
    <summary>This function is reserved for system use, and you should not call it from your code.</summary>
    <param name="CallerContext">Reserved.</param>
    <param name="Callback">Reserved.</param>
    <param name="NotificationHandle">Reserved.</param>
    <returns>Reserved.</returns>
  </member>
  <member name="Windows.ParseNetworkString">
    <summary>The<b>ParseNetworkString</b> function parses the input network string and checks whether it is a legal representation of the specified IP network string type. If the string matches a type and its specification, the function can optionally return the parsed result.</summary>
    <param name="NetworkString">A pointer to the NULL-terminated network string to parse.</param>
    <param name="Types">
      <para>The type of IP network string to parse. This parameter consists of one of network string types as defined in the <i>Iphlpapi.h</i>header file.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV4_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 address using Internet standard dotted-decimal notation. A network port or prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>192.168.100.10</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV4_SERVICE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 service using Internet standard dotted-decimal notation. A network port is required as part of the network string. A prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>192.168.100.10:80</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV4_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 network using Internet standard dotted-decimal notation. A network prefix that uses the Classless Inter-Domain Routing (CIDR) notation is required as part of the network string. A network port must not be present in the network string. <para>An example network string is the following:</para><para><b>192.168.100/24</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV6_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID may be present in the network string. A network port or prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV6_ADDRESS_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID must not be present in the network string. A network port or prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV6_SERVICE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string. <para>An example network string with a scope ID is the following:</para><para><b>[21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A%2]:8080</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV6_SERVICE_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv6 service using Internet standard hexadecimal encoding. A network port is required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>21DA:00D3:0000:2F3B:02AA:00FF:FE28:9C5A:8080</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IPV6_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv6 network using Internet standard hexadecimal encoding. A network prefix in CIDR notation is required as part of the network string. A network port or scope ID must not be present in the network string. <para>An example network string is the following:</para><para><b>21DA:D3./48</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_NAMED_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an Internet address using a Domain Name System (DNS) name. A network port or prefix must not be present in the network string. <para>An example network string is the following:</para><para><b>www.microsoft.com</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_NAMED_SERVICE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an Internet service using a DNS name. A network port must be present in the network string. <para>An example network string is the following:</para><para><b>www.microsoft.com:80</b></para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IP_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000009</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using the Internet standard hexadecimal encoding. An IPv6 scope ID may be present in the network string. A network port or prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_IPV4_ADDRESS</b> or <b>NET_STRING_IPV6_ADDRESS</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IP_ADDRESS_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000011</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 address using Internet standard dotted-decimal notation or an IPv6 address using Internet standard hexadecimal encoding. An IPv6 scope ID must not be present in the network string. A network port or prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_IPV4_ADDRESS</b> or <b>NET_STRING_IPV6_ADDRESS_NO_SCOPE</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IP_SERVICE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000022</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_IPV4_SERVICE</b> or <b>NET_STRING_IPV6_SERVICE</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IP_SERVICE_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000042</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 service or IPv6 service. A network port is required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_IPV4_SERVICE</b> or <b>NET_STRING_IPV6_SERVICE_NO_SCOPE</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_IP_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000084</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 or IPv6 network. A network prefix in CIDR notation is required as part of the network string. A network port or scope ID must not be present in the network. <para>This type matches either the <b>NET_STRING_IPV4_NETWORK</b> or <b>NET_STRING_IPV6_NETWORK</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_ANY_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000209</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet standard hexadecimal encoding, or a DNS name. An IPv6 scope ID may be present in the network string for an IPv6 address. A network port or prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_NAMED_ADDRESS</b> or <b>NET_STRING_IP_ADDRESS</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_ANY_ADDRESS_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000211</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 address in Internet standard dotted-decimal notation, an IPv6 address in Internet standard hexadecimal encoding, or a DNS name. An IPv6 scope ID must not be present in the network string for an IPv6 address. A network port or prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_NAMED_ADDRESS</b> or <b>NET_STRING_IP_ADDRESS_NO_SCOPE</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_ANY_SERVICE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000222</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is required as part of the network string. An IPv6 scope ID may be present in the network string. A prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_NAMED_SERVICE</b> or <b>NET_STRING_IP_SERVICE</b> types.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NET_STRING_ANY_SERVICE_NO_SCOPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000242</term>
              </listheader>
            </list>
          </description>
          <description>The <i>NetworkString</i> parameter points to an IPv4 service or IPv6 service using IP address notation or a DNS name. A network port is required as part of the network string. An IPv6 scope ID must not be present in the network string. A prefix must not be present in the network string. <para>This type matches either the <b>NET_STRING_NAMED_SERVICE</b> or <b>NET_STRING_IP_SERVICE_NO_SCOPE</b> types.</para></description>
        </listheader>
      </list>
    </param>
    <param name="AddressInfo">On success, the function returns a pointer to a <b>NET_ADDRESS_INFO</b> structure that contains the parsed IP address information if a <b>NULL</b> pointer was not passed in this parameter.</param>
    <param name="PortNumber">On success, the function returns a pointer to the parsed network port in host order if a <b>NULL</b> pointer was not passed in this parameter. If a network port was not present in the <i>NetworkString</i> parameter, then a pointer to a value of zero is returned.</param>
    <param name="PrefixLength">On success, the function returns a pointer to the parsed prefix length if a <b>NULL</b> pointer was not passed in this parameter. If a prefix was not present in the <i>NetworkString</i> parameter, then a pointer to a value of -1 is returned.</param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer passed to the function is too small. This error is returned if the buffer pointed to by the <i>AddressInfo</i> parameter is too small to hold the parsed network address.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>NetworkString</i> parameter</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.RegisterInterfaceTimestampConfigChange">
    <summary>
      <para>Registers a user-implemented callback function, which the system calls to notify you of a timestamp capability change. You can cancel the registration by calling <see cref="UnregisterInterfaceTimestampConfigChange" />.</para>
      <para>For more info, and code examples, see <a href="https://docs.microsoft.com//windows/win32/iphlp/packet-timestamping">Packet timestamping</a>.</para>
    </summary>
    <param name="Callback">Your callback function, to be invoked when a timestamp capability change happens.</param>
    <param name="CallerContext">An optional caller-allocated context.</param>
    <param name="NotificationHandle">A handle, returned by the function, that identifies the registration.</param>
    <returns>A <b>DWORD</b> return code indicating success or failure.</returns>
  </member>
  <member name="Windows.RestoreMediaSense">
    <summary>The <b>RestoreMediaSense</b> function restores the media sensing capability of the TCP/IP stack on a local computer on which the <see cref="DisableMediaSense" /> function was previously called.</summary>
    <param name="pOverlapped">A pointer to an<see cref="OVERLAPPED" /> structure. Except for the <b>hEvent</b> member, all members of this structure must be set to zero. The <b>hEvent</b> member should contain a handle to a valid event object. Use the<see cref="CreateEvent" /> function to create this event object.</param>
    <param name="lpdwEnableCount">An optional pointer to a DWORD variable that receives the number of references remaining if the <b>RestoreMediaSense</b> function succeeds. The variable is also used by the <see cref="EnableRouter" /> and <see cref="UnenableRouter" /> functions.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if an <i>pOverlapped</i> parameter is a bad pointer. This error is also returned if the <see cref="DisableMediaSense" /> function was not called prior to calling the <see cref="RestoreMediaSense" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_IO_PENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation is in progress. This value may be returned by a successful asynchronous call to <see cref="RestoreMediaSense" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_OPEN_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An internal handle to the driver was invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SendARP">
    <summary>The<b>SendARP</b> function sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to the specified destination IPv4 address.</summary>
    <param name="DestIP">The destination IPv4 address, in the form of an <see cref="IPAddr" /> structure. The ARP request attempts to obtain the physical address that corresponds to this IPv4 address.</param>
    <param name="SrcIP">The source IPv4 address of the sender, in the form of an <see cref="IPAddr" /> structure. This parameter is optional and is used to select the interface to send the request on for the ARP entry. The caller may specify zero corresponding to the <b>INADDR_ANY</b> IPv4 address for this parameter.</param>
    <param name="pMacAddr">A pointer to an array of <b>ULONG</b> variables. This array must have at least two <b>ULONG</b> elements to hold an Ethernet or token ring physical address. The first six bytes of this array receive the physical address that corresponds to the IPv4 address specified by the <i>DestIP</i> parameter.</param>
    <param name="PhyAddrLen">
      <para>On input, a pointer to a <b>ULONG</b> value that specifies the maximum buffer size, in bytes, the application has set aside to receive the physical address or MAC address. The buffer size should be at least 6 bytes for an Ethernet or token ring physical address</para>
      <para>The buffer to receive the physical address is pointed to by the <i>pMacAddr</i> parameter.</para>
      <para>On successful output, this parameter points to a value that specifies the number of bytes written to the buffer pointed to by the <i>pMacAddr</i>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_NET_NAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The network name cannot be found. This error is returned on Windows Vista and later when an ARP reply to the <see cref="SendARP" /> request was not received. This error occurs if the destination IPv4 address could not be reached because it is not on the same subnet or the destination computer is not operating.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BUFFER_OVERFLOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name is too long. This error is returned on Windows Vista if the <b>ULONG</b> value pointed to by the <i>PhyAddrLen</i> parameter is less than 6, the size required to store a complete physical address.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A device attached to the system is not functioning. This error is returned on Windows Server 2003 and earlier when an ARP reply to the <see cref="SendARP" /> request was not received. This error can occur if destination IPv4 address could not be reached because it is not on the same subnet or the destination computer is not operating.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid. This error is returned on Windows Server 2003 and earlier if either the <i>pMacAddr</i> or <i>PhyAddrLen</i> parameter is a <b>NULL</b> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_USER_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied user buffer is not valid for the requested operation. This error is returned on Windows Server 2003 and earlier if the <b>ULONG</b> value pointed to by the <i>PhyAddrLen</i> parameter is zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Element not found. This error is returned on Windows Vista if the the <i>SrcIp</i> parameter does not specify a source IPv4 address on an interface on the local computer or the <b>INADDR_ANY</b> IP address (an IPv4 address of 0.0.0.0).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SendARP" /> function is not supported by the operating system running on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIfEntry">
    <summary>The<b>SetIfEntry</b> function sets the administrative status of an interface.</summary>
    <param name="pIfRow">
      <para>A pointer to a<see cref="MIB_IFROW" /> structure. The <b>dwIndex</b> member of this structure specifies the interface on which to set administrative status. The <b>dwAdminStatus</b> member specifies the new administrative status. The <b>dwAdminStatus</b> member can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MIB_IF_ADMIN_STATUS_UP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The interface is administratively enabled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MIB_IF_ADMIN_STATUS_DOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The interface is administratively disabled.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and later under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system cannot find the file specified. This error is returned on Windows Vista and later if the network interface specified by the <b>dwIndex</b> member of the <see cref="MIB_IFROW" /> structure pointed to by the <i>pIfRow</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pIfRow</i> parameter, or the <b>dwIndex</b> member of the <see cref="MIB_IFROW" /> pointed to by the <i>pIfRow</i> parameter was unspecified. This error is also returned on Windows Server 2003 and earlier if the network interface specified by the <b>dwIndex</b> member of the <b>MIB_IFROW</b> structure pointed to by the <i>pIfRow</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned on Windows Server 2003 and earlier if no TCP/IP stack is configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIpForwardEntry">
    <summary>The<b>SetIpForwardEntry</b> function modifies an existing route in the local computer's IPv4 routing table.</summary>
    <param name="pRoute">A pointer to a<see cref="MIB_IPFORWARDROW" /> structure that specifies the new information for the existing route. The caller must specify <b>MIB_IPPROTO_NETMGMT</b> for the <b>dwForwardProto</b> member of this structure. The caller must also specify values for the <b>dwForwardIfIndex</b>, <b>dwForwardDest</b>, <b>dwForwardMask</b>, <b>dwForwardNextHop</b>, and <b>dwForwardPolicy</b> members of the structure.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system cannot find the file specified. This error is returned on Windows Vista and later if the network interface specified by the <b>dwForwardIfIndex</b> member of the <see cref="MIB_IPFORWARDROW" /> structure pointed to by the <i>pRoute</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pRoute</i> parameter is <b>NULL</b>, or <see cref="SetIpForwardEntry" /> is unable to read from the memory pointed to by <i>pRoute</i>, or one of the members of the <see cref="MIB_IPFORWARDROW" /> structure is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The element is not found. The error is returned on Windows Vista and later when the <see cref="DeleteIpForwardEntry" /> function and then the <see cref="SetIpForwardEntry" /> function are called for the same IPv4 route table entry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This value is returned if the IPv4 transport is not configured on the local computer. This error is also returned on Windows Server 2003 and earlier if no TCP/IP stack is configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIpNetEntry">
    <summary>The<b>SetIpNetEntry</b> function modifies an existing ARP entry in the ARP table on the local computer.</summary>
    <param name="pArpEntry">A pointer to a<see cref="MIB_IPNETROW" /> structure. The information in this structure specifies the entry to modify and the new information for the entry. The caller must specify values for all members of this structure.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pArpEntry</i> parameter is <b>NULL</b>, or <b>SetIpNetEntry</b> is unable to read from the memory pointed to by <i>pArpEntry</i>, or one of the members of the <see cref="MIB_IPNETROW" /> structure is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIpStatistics">
    <summary>The<b>SetIpStatistics</b> function toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.</summary>
    <param name="pIpStats">A pointer to a<see cref="MIB_IPSTATS" /> structure. The caller should set the <b>dwForwarding</b> and <b>dwDefaultTTL</b> members of this structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pIpStats</i> parameter. This error is also returned if the <b>dwForwarding</b> member in the <see cref="MIB_IPSTATS" /> structure pointed to by the <i>pIpStats</i> parameter contains a value other than <b>MIB_IP_NOT_FORWARDING</b>, <b>MIB_IP_FORWARDING</b>, or <b>MIB_USE_CURRENT_FORWARDING</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIpStatisticsEx">
    <summary>The<b>SetIpStatisticsEx</b> function toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.</summary>
    <param name="Statistics">A pointer to a<see cref="MIB_IPSTATS" /> structure. The caller should set the <b>dwForwarding</b> and <b>dwDefaultTTL</b> members of this structure to the new values. To keep one of the members at its current value, use MIB_USE_CURRENT_TTL or MIB_USE_CURRENT_FORWARDING.</param>
    <param name="Family">
      <para>The address family for which forwarding and TTL is to be set.</para>
      <para>Possible values for the address family are listed in the <i>Winsock2.h</i> header file. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, <b>AF_INET</b> and <b>PF_INET</b>), so either constant can be used.</para>
      <para>On the Windows SDK released for Windows Vista and later, the organization of header files has changed and possible values for this member are defined in the <i>Ws2def.h</i> header file. Note that the <i>Ws2def.h</i> header file is automatically included in <i>Winsock2.h</i>, and should never be used directly.</para>
      <para>The values currently supported are <b>AF_INET</b>, and <b>AF_INET6</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 4 (IPv4) address family. When this parameter is specified, this function sets forwarding and TTL options for IPv4 entries.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
              <listheader>
                <term>23</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 6 (IPv6) address family. When this parameter is specified, this function sets forwarding and TTL options for IPv6 entries.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if a <b>NULL</b> pointer is passed in the <i>pIpStats</i> parameter or the <i>Family</i> parameter was not set to <b>AF_INET</b>, and <b>AF_INET6</b>. This error is also returned if the <b>dwForwarding</b> member in the <see cref="MIB_IPSTATS" /> structure pointed to by the <i>pIpStats</i> parameter contains a value other than <b>MIB_IP_NOT_FORWARDING</b>, <b>MIB_IP_FORWARDING</b>, or <b>MIB_USE_CURRENT_FORWARDING</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if no IPv4 stack is on the local computer and AF_INET was specified in the <i>Family</i> parameter or no IPv6 stack is on the local computer and AF_INET6 was specified in the <i>Family</i> member.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetIpTTL">
    <summary>The<b>SetIpTTL</b> function sets the default time-to-live (TTL) value for the local computer.</summary>
    <param name="nTTL">The new TTL value for the local computer.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed to the function. This error is returned if the <i>nTTL</i> parameter is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetPerTcp6ConnectionEStats">
    <summary>The<b>SetPerTcp6ConnectionEStats</b> function sets a value in the read/write information for an IPv6 TCP connection. This function is used to enable or disable extended statistics for an IPv6 TCP connection.</summary>
    <param name="Row">A pointer to a <see cref="MIB_TCP6ROW" /> structure for an IPv6 TCP connection.</param>
    <param name="EstatsType">
      <para>The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in the <i>Rw</i> parameter.</para>
      <para>This parameter can be one of the values from the <see cref="TCP_ESTATS_TYPE" /> enumeration type defined in the <i>Tcpestats.h</i> header file.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsData</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies extended data transfer information for a TCP connection. <para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_DATA_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSndCong</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies sender congestion for a TCP connection. <para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_SND_CONG_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsPath</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies extended path measurement information for a TCP connection.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_PATH_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsSendBuff</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies extended output-queuing information for a TCP connection.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_SEND_BUFF_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies extended local-receiver information for a TCP connection.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_REC_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsObsRec</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies extended remote-receiver information for a TCP connection.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_OBS_REC_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsBandwidth</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies bandwidth estimation statistics for a TCP connection on bandwidth.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_BANDWIDTH_RW_v0" /> structure.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TcpConnectionEstatsFineRtt</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value specifies fine-grained round-trip time (RTT) estimation statistics for a TCP connection.<para>When this value is specified, the buffer pointed to by the <i>Rw</i> parameter should point to a <see cref="TCP_ESTATS_FINE_RTT_RW_v0" /> structure.</para></description>
        </listheader>
      </list>
    </param>
    <param name="Rw">A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the <see cref="TCP_BOOLEAN_OPTIONAL" /> enumeration for each structure member that specifies how each member should be updated.</param>
    <param name="RwVersion">The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008, and Windows 7.</param>
    <param name="RwSize">The size, in bytes, of the buffer pointed to by the <i>Rw</i> parameter.</param>
    <param name="Offset">The offset, in bytes, to the member in the structure pointed to by the <i>Rw</i> parameter to be set. This parameter is currently unused and must be set to zero.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parameter is incorrect. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_USER_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied user buffer is not valid for the requested operation. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer and the <i>RwSize</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This requested entry was not found. This error is returned if the TCP connection specified in the <i>Row</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if the <i>RwVersion</i> or the <i>Offset</i> parameter is not set to 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetPerTcpConnectionEStats">
    <summary>The <b>SetPerTcpConnectionEStats</b> function sets a value in the read/write information for an IPv4 TCP connection. This function is used to enable or disable extended statistics for an IPv4 TCP connection.</summary>
    <param name="Row">A pointer to a <see cref="MIB_TCPROW" /> structure for an IPv4 TCP connection.</param>
    <param name="EstatsType">
      <para>The type of extended statistics for TCP to set. This parameter determines the data and format of information that is expected in the <i>Rw</i> parameter.</para>
      <para>This parameter can be one of the values from the <see cref="TCP_ESTATS_TYPE" /> enumeration type defined in the <i>Tcpestats.h</i> header file.</para>
    </param>
    <param name="Rw">A pointer to a buffer that contains the read/write information to set. The buffer should contain a value from the <see cref="TCP_BOOLEAN_OPTIONAL" /> enumeration for each structure member that specifies how each member should be updated.</param>
    <param name="RwVersion">The version of the read/write information to be set. This parameter should be set to zero for Windows Vista, Windows Server 2008, and Windows 7.</param>
    <param name="RwSize">The size, in bytes, of the buffer pointed to by the <i>Rw</i> parameter.</param>
    <param name="Offset">The offset, in bytes, to the member in the structure pointed to by the <i>Rw</i> parameter to be set. This parameter is currently unused and must be set to zero.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_USER_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied user buffer is not valid for the requested operation. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer and the <i>RwSize</i> parameter is nonzero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parameter is incorrect. This error is returned if the <i>Row</i> parameter is a <b>NULL</b> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This requested entry was not found. This error is returned if the TCP connection specified in the <i>Row</i> parameter could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The request is not supported. This error is returned if the <i>RwVersion</i> or the <i>Offset</i> parameter is not set to 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetTcpEntry">
    <summary>The<b>SetTcpEntry</b> function sets the state of a TCP connection.</summary>
    <param name="pTcpRow">A pointer to a<see cref="MIB_TCPROW" /> structure. This structure specifies information to identify the TCP connection to modify. It also specifies the new state for the TCP connection. The caller must specify values for all the members in this structure.</param>
    <returns>
      <para>The function returns <b>NO_ERROR</b> (zero) if the function is successful.</para>
      <para>If the function fails, the return value is one of the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Access is denied. This error is returned on Windows Vista and Windows Server 2008 under several conditions that include the following: the user lacks the required administrative privileges on the local computer or the application is not running in an enhanced shell as the built-in Administrator (RunAs administrator).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An input parameter is invalid, no action was taken. This error is returned if the <i>pTcpRow</i> parameter is <b>NULL</b> or the <b>Row</b> member in the <see cref="MIB_TCPROW" /> structure pointed to by the <i>pTcpRow</i> parameter is not set to MIB_TCP_STATE_DELETE_TCB.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The IPv4 transport is not configured on the local computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>317</term>
              </listheader>
            </list>
          </description>
          <description> The function is unable to set the TCP entry since the application is running non-elevated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Other</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Use <see cref="FormatMessage" /> to obtain the message string for the returned error.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.UnenableRouter">
    <summary>The<b>UnenableRouter</b> function decrements the reference count that tracks the number of requests to enable IPv4 forwarding. When this reference count reaches zero,<b>UnenableRouter</b> turns off IPv4 forwarding on the local computer.</summary>
    <param name="pOverlapped">A pointer to an <see cref="OVERLAPPED" /> structure. This structure should be the same as the one used in the call to the <see cref="EnableRouter" /> function.</param>
    <param name="lpdwEnableCount">An optional pointer to a <b>DWORD</b> variable. This variable receives the number of references remaining.</param>
    <returns>
      <para>If the function succeeds, the return value is NO_ERROR.</para>
      <para>If the function fails, use<see cref="FormatMessage" /> to obtain the message string for the returned error.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterInterfaceTimestampConfigChange">
    <summary>
      <para>Cancels notifications about timestamp capability changes by unregistering the callback function you registered in a call to <see cref="RegisterInterfaceTimestampConfigChange" />.</para>
      <para>To avoid deadlock, you shouldn't call <b>UnregisterInterfaceTimestampConfigChange</b> in the context of the thread that's executing a callback that was specified to <b>RegisterInterfaceTimestampConfigChange</b>. This is because <b>UnregisterInterfaceTimestampConfigChange</b> waits for outstanding notification callbacks to complete before it returns. Consequently, <b>UnregisterInterfaceTimestampConfigChange</b> mustn't be called in a way that prevents an outstanding notification callback from completing. No further callbacks will take place after <b>UnregisterInterfaceTimestampConfigChange</b> returns.</para>
      <para>For more info, and code examples, see <a href="https://docs.microsoft.com//windows/win32/iphlp/packet-timestamping">Packet timestamping</a>.</para>
    </summary>
    <param name="NotificationHandle">The handle that was returned by <see cref="RegisterInterfaceTimestampConfigChange" />. This identifies the registration to be canceled.</param>
    <returns>A <b>DWORD</b> return code indicating success or failure.</returns>
  </member>
</doc>