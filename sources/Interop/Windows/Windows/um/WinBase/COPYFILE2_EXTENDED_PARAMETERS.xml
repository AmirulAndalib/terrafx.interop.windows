<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="COPYFILE2_EXTENDED_PARAMETERS">
    <summary>
      <para>Contains extended parameters for the <see cref="CopyFile2" /></para>
      <para>function.</para>
    </summary>
    <remarks>
      <para>To compile an application that uses this structure, define the <b>_WIN32_WINNT</b></para>
      <para>macro as <b>_WIN32_WINNT_WIN8</b> or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="CopyFile2" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/winbase/nc-winbase-pcopyfile2_progress_routine">CopyFile2ProgressRoutine</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/FileIO/file-management-structures">File Management Structures</seealso>
  </member>
  <member name="COPYFILE2_EXTENDED_PARAMETERS.dwSize">
    <summary>
      <para>Contains the size of this structure,
<code>sizeof(COPYFILE2_EXTENDED_PARAMETERS)</code>.</para>
    </summary>
  </member>
  <member name="COPYFILE2_EXTENDED_PARAMETERS.dwCopyFlags">
    <summary>
      <para>Contains a combination of zero or more of these flag values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_ALLOW_DECRYPTED_DESTINATION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>The copy will be attempted even if the destination file cannot be encrypted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_COPY_SYMLINK</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same
file as the source symbolic link.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_FAIL_IF_EXISTS</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>If the destination file exists the copy operation fails immediately. If a file or directory exists with
the destination name then the <see cref="CopyFile2" /> function call will
fail with either <code>HRESULT_FROM_WIN32(ERROR_ALREADY_EXISTS)</code></para>
            <para>or <code>HRESULT_FROM_WIN32(ERROR_FILE_EXISTS)</code>. If
<b>COPY_FILE_RESUME_FROM_PAUSE</b> is also specified then a failure is only triggered if
the destination file does not have a valid restart header.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_NO_BUFFERING</b>
                </description>
              </item>
              <item>
                <description>0x00001000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The copy is performed using unbuffered I/O, bypassing the system cache resources. This flag is
recommended for very large file copies. It is not recommended to pause copies that are using this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_NO_OFFLOAD</b>
                </description>
              </item>
              <item>
                <description>0x00040000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not attempt to use the Windows Copy Offload mechanism. This is not generally recommended.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_OPEN_SOURCE_FOR_WRITE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>The file is copied and the source file is opened for write access.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_RESTARTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>The file is copied in a manner that can be restarted if the same source and destination filenames are
used again. This is slower.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_REQUEST_SECURITY_PRIVILEGES</b>
                </description>
              </item>
              <item>
                <description>0x00002000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The copy is attempted, specifying
<code>ACCESS_SYSTEM_SECURITY</code> for the source file and
<code>ACCESS_SYSTEM_SECURITY | WRITE_DAC | WRITE_OWNER</code> for the
destination file. If these requests are denied the access request will be reduced to the highest privilege
level for which access is granted. For more information see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/sacl-access-right">SACL Access Right</a>. This can be used to allow the
<a href="https://docs.microsoft.com//windows/desktop/api/winbase/nc-winbase-pcopyfile2_progress_routine">CopyFile2ProgressRoutine</a> callback to
perform operations requiring higher privileges, such as copying the security attributes for the file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>COPY_FILE_RESUME_FROM_PAUSE</b>
                </description>
              </item>
              <item>
                <description>0x00004000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The destination file is examined to see if it was copied using
<b>COPY_FILE_RESTARTABLE</b>. If so the copy is resumed. If not the file will be fully
copied.</para>
          </description>
        </item>
      </list>
    </summary>
  </member>
  <member name="COPYFILE2_EXTENDED_PARAMETERS.pfCancel">
    <summary>
      <para>If this flag is set to <b>TRUE</b> during the copy operation then the copy operation is
canceled.</para>
    </summary>
  </member>
  <member name="COPYFILE2_EXTENDED_PARAMETERS.pProgressRoutine">
    <summary>
      <para>The optional address of a callback function of type <b>PCOPYFILE2_PROGRESS_ROUTINE</b> that is
called each time another portion of the file has been copied. This parameter can be
<b>NULL</b>. For more information on the progress callback function, see the
<a href="https://docs.microsoft.com//windows/desktop/api/winbase/nc-winbase-pcopyfile2_progress_routine">CopyFile2ProgressRoutine</a> callback function.</para>
    </summary>
  </member>
  <member name="COPYFILE2_EXTENDED_PARAMETERS.pvCallbackContext">
    <summary>
      <para>A pointer to application-specific context information to be passed to the
<a href="https://docs.microsoft.com//windows/desktop/api/winbase/nc-winbase-pcopyfile2_progress_routine">CopyFile2ProgressRoutine</a>.</para>
    </summary>
  </member>
</doc>