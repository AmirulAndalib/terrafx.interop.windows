<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT">
    <summary>
      <para>
        <b>Important</b>  Deprecated. This API may be removed from future releases of Windows. Applications should use the <a href="https://docs.microsoft.com//windows/desktop/medfound/media-session">Media Session</a> for playback.</para>
      <para>Event structure for the <b>MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL</b> event. This event is sent if the application plays a media file from a server that requires authentication. The application can respond by providing the user credentials.</para>
    </summary>
    <remarks>
      <para>To get a pointer to this structure, cast the <i>pEventHeader</i> parameter of the <see cref="IMFPMediaPlayerCallback.OnMediaPlayerEvent" />  callback method.  You can use the <see cref="MFP_GET_ACQUIRE_USER_CREDENTIAL_EVENT" /> macro for this purpose.</para>
      <para>If the <b>flags</b> member contains the <b>MFP_CREDENTIAL_PROMPT</b> flag, the application should do the following:</para>
      <list type="number">
        <item>
          <description>Prompt the user to enter a user name and password.</description>
        </item>
        <item>
          <description>Store the user name in the credentials object by calling <see cref="IMFNetCredential.SetUser" /> on the <b>pCredential</b> pointer.</description>
        </item>
        <item>
          <description>Store the password by calling <see cref="IMFNetCredential.SetPassword" /> on the <b>pCredential</b> pointer.</description>
        </item>
      </list>
      <para>To cancel authentication, set <b>fProceedWithAuthentication</b> equal to <b>FALSE</b>.</para>
      <para>By default, MFPlay uses the network source's implementation of <see cref="IMFNetCredentialManager" /> to manage credentials. An application can provide its own implementation of this interface as follows:</para>
      <list type="number">
        <item>
          <description>Call <b>QueryInterface</b> on the <see cref="IMFPMediaPlayer" /> pointer to get the <b>IPropertyStore</b> interface.</description>
        </item>
        <item>
          <description>Call <b>IPropertyStore.SetValue</b> to set the <a href="https://docs.microsoft.com//windows/desktop/medfound/mfnetsource-credential-manager-property">MFNETSOURCE_CREDENTIAL_MANAGER</a> property.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="IMFPMediaPlayerCallback" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-structures">Media Foundation Structures</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/using-mfplay-for-audio-video-playback">Using MFPlay for Audio/Video Playback</seealso>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.header">
    <summary>
      <para>
        <see cref="MFP_EVENT_HEADER" /> structure that contains data common to all <see cref="IMFPMediaPlayer" /> events.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.dwUserData">
    <summary>
      <para>Application-defined user data for the media item. This value is specified when the application calls <see cref="IMFPMediaPlayer.CreateMediaItemFromURL" /> or <see cref="IMFPMediaPlayer.CreateMediaItemFromObject" /> to create the media item.</para>
      <para>This event is sent (if at all) before the media item is created and before the application receives the <b>MFP_EVENT_TYPE_MEDIAITEM_CREATED</b> event. You can use the value of <b>dwUserData</b> to identify which media item requires authentication.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.fProceedWithAuthentication">
    <summary>
      <para>The application should set this member to either <b>TRUE</b> or <b>FALSE</b> before returning from the <see cref="IMFPMediaPlayerCallback.OnMediaPlayerEvent" /> event callback.</para>
      <para>If the value is <b>TRUE</b> when the callback returns, MFPlay continues the authentication attempt. Otherwise, authentication fails.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.hrAuthenticationStatus">
    <summary>
      <para>The response code of the authentication challenge.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.pwszURL">
    <summary>
      <para>The original URL that requires authentication.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.pwszSite">
    <summary>
      <para>The name of the site or proxy that requires authentication.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.pwszRealm">
    <summary>
      <para>The name of the realm for this authentication.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.pwszPackage">
    <summary>
      <para>The name of the authentication package, such as "Digest" or "MBS_BASIC".</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.nRetries">
    <summary>
      <para>The number of retries. This member is set to zero on the first attempt, and incremented once for each subsequent attempt.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.flags">
    <summary>
      <para>Bitwise <b>OR</b> of zero or more flags from the <see cref="_MFP_CREDENTIAL_FLAGS" /> enumeration.</para>
    </summary>
  </member>
  <member name="MFP_ACQUIRE_USER_CREDENTIAL_EVENT.pCredential">
    <summary>
      <para>Pointer to the <see cref="IMFNetCredential" /> interface. The application uses this interface to set the user's credentials.</para>
    </summary>
  </member>
</doc>