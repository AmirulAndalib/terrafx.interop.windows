<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IFileOperation.Advise">
    <summary>Enables a handler to provide status and error information for all operations.</summary>
    <param name="pfops">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for progress status and error notifications.</param>
    <param name="pdwCookie">When this method returns, this parameter points to a returned token that uniquely identifies this connection. The calling application uses this token later to delete the connection by passing it to <see cref="IFileOperation.Unadvise" />. If the call to <b>Advise</b> fails, this value is meaningless.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.ApplyPropertiesToItem">
    <summary>Declares a single item whose property values are to be set.</summary>
    <param name="psiItem">Pointer to the item to receive the new property values.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.ApplyPropertiesToItems">
    <summary>Declares a set of items for which to apply a common set of property values.</summary>
    <param name="punkItems">Pointer to the <see cref="IUnknown" /> of the <see cref="IShellItemArray" />, <see cref="IDataObject" />, or <see cref="IEnumShellItems" /> object which represents the group of items. You can also point to an <see cref="IPersistIDList" /> object to represent a single item, effectively accomplishing the same function as <see cref="IFileOperation.ApplyPropertiesToItem" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.CopyItem">
    <summary>Declares a single item that is to be copied to a specified destination.</summary>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the copy of the item.</param>
    <param name="pszCopyName">Pointer to a new name for the item after it has been copied. This is a null-terminated Unicode string and can be <b>NULL</b>. If <b>NULL</b>, the name of the destination item is the same as the source.</param>
    <param name="pfopsItem">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for progress status and error notifications for this specific copy operation. If you call <see cref="IFileOperation.Advise" /> for the overall operation, progress status and error notifications for the copy operation are included there, so set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.CopyItems">
    <summary>Declares a set of items that are to be copied to a specified destination.</summary>
    <param name="punkItems">Pointer to the <see cref="IUnknown" /> of the <see cref="IShellItemArray" />, <see cref="IDataObject" />, or <see cref="IEnumShellItems" /> object which represents the group of items to be copied. You can also point to an <see cref="IPersistIDList" /> object to represent a single item, effectively accomplishing the same function as <see cref="IFileOperation.CopyItem" />.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the copy of the items.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.DeleteItem">
    <summary>Declares a single item that is to be deleted.</summary>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item to be deleted.</param>
    <param name="pfopsItem">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for progress status and error notifications for this specific delete operation. If you call <see cref="IFileOperation.Advise" /> for the overall operation, progress status and error notifications for the delete operation are included there, so set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.DeleteItems">
    <summary>Declares a set of items that are to be deleted.</summary>
    <param name="punkItems">Pointer to the <see cref="IUnknown" /> of the <see cref="IShellItemArray" />, <see cref="IDataObject" />, or <see cref="IEnumShellItems" /> object which represents the group of items to be deleted. You can also point to an <see cref="IPersistIDList" /> object to represent a single item, effectively accomplishing the same function as <see cref="IFileOperation.DeleteItem" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.GetAnyOperationsAborted">
    <summary>Gets a value that states whether any file operations initiated by a call to <see cref="IFileOperation.PerformOperations" /> were stopped before they were complete. The operations could be stopped either by user action or silently by the system.</summary>
    <param name="pfAnyOperationsAborted">When this method returns, points to <b>TRUE</b> if any file operations were aborted before they were complete; otherwise, <b>FALSE</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.MoveItem">
    <summary>Declares a single item that is to be moved to a specified destination.</summary>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the moved item.</param>
    <param name="pszNewName">Pointer to a new name for the item in its new location. This is a null-terminated Unicode string and can be <b>NULL</b>. If <b>NULL</b>, the name of the destination item is the same as the source.</param>
    <param name="pfopsItem">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for progress status and error notifications for this specific move operation. If you call <see cref="IFileOperation.Advise" /> for the overall operation, progress status and error notifications for the move operation are included there, so set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.MoveItems">
    <summary>Declares a set of items that are to be moved to a specified destination.</summary>
    <param name="punkItems">Pointer to the <see cref="IUnknown" /> of the <see cref="IShellItemArray" />, <see cref="IDataObject" />, or <see cref="IEnumShellItems" /> object which represents the group of items to be moved. You can also point to an <see cref="IPersistIDList" /> object to represent a single item, effectively accomplishing the same function as <see cref="IFileOperation.MoveItem" />.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the moved items.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.NewItem">
    <summary>Declares a new item that is to be created in a specified location.</summary>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder that will contain the new item.</param>
    <param name="dwFileAttributes">A bitwise value that specifies the file system attributes for the file or folder. See <see cref="GetFileAttributes" /> for possible values.</param>
    <param name="pszName">Pointer to the file name of the new item, for instance <b>Newfile.txt</b>. This is a null-terminated, Unicode string.</param>
    <param name="pszTemplateName">
      <para>Pointer to the name of the template file (for example <b>Excel9.xls</b>) that the new item is based on, stored in one of the following locations:</para>
      <list type="bullet">
        <item>
          <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
        </item>
        <item>
          <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
        </item>
        <item>
          <description>%SystemRoot%\shellnew</description>
        </item>
      </list>This is a null-terminated, Unicode string used to specify an existing file of the same type as the new file, containing the minimal content that an application wants to include in any new file.<para>This parameter is normally <b>NULL</b> to specify a new, blank file.</para></param>
    <param name="pfopsItem">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for status and failure notifications. If you call <see cref="IFileOperation.Advise" /> for the overall operation, progress status and error notifications for the creation operation are included there, so set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.PerformOperations">
    <summary>Executes all selected operations.</summary>
    <returns>Returns S_OK if successful, or an error value otherwise. Note that if the operation was canceled by the user, this method can still return a success code. Use the <see cref="GetAnyOperationsAborted" /> method to determine if this was the case.</returns>
  </member>
  <member name="IFileOperation.RenameItem">
    <summary>Declares a single item that is to be given a new display name.</summary>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="pszNewName">Pointer to the new <see cref="display name" /> of the item. This is a null-terminated, Unicode string.</param>
    <param name="pfopsItem">Pointer to an <see cref="IFileOperationProgressSink" /> object to be used for status and failure notifications. If you call <see cref="IFileOperation.Advise" /> for the overall operation, progress status and error notifications for the rename operation are included there, so set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.RenameItems">
    <summary>Declares a set of items that are to be given a new display name. All items are given the same name.</summary>
    <param name="pUnkItems">Pointer to the <see cref="IUnknown" /> of the <see cref="IShellItemArray" />, <see cref="IDataObject" />, or <see cref="IEnumShellItems" /> object which represents the group of items to be renamed. You can also point to an <see cref="IPersistIDList" /> object to represent a single item, effectively accomplishing the same function as <see cref="IFileOperation.RenameItem" />.</param>
    <param name="pszNewName">Pointer to the new display name of the items. This is a null-terminated, Unicode string.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.SetOperationFlags">
    <summary>Sets parameters for the current operation.</summary>
    <param name="dwOperationFlags">
      <para>Flags that control the file operation. This member can be a combination of the following flags. FOF flags are defined in Shellapi.h and FOFX flags are defined in Shobjidl.h.</para>
      <div>
        <b>Note</b>  If this method is not called, the default value used by the operation is FOF_ALLOWUNDO | FOF_NOCONFIRMMKDIR.</div>
      <h4>FOF_ALLOWUNDO (0x0040)</h4>
      <para>Preserve undo information, if possible.</para>
      <para>Prior to Windows Vista, operations could be undone only from the same process that performed the original operation.</para>
      <para>In Windows Vista and later systems, the scope of the undo is a user session. Any process running in the user session can undo another operation. The undo state is held in the Explorer.exe process, and as long as that process is running, it can coordinate the undo functions.</para>
      <para>If the source file parameter does not contain fully qualified path and file names, this flag is ignored.</para>
      <h4>FOF_FILESONLY (0x0080)</h4>
      <para>Perform the operation only on files (not on folders) if a wildcard file name (<i>.</i>) is specified.</para>
      <h4>FOF_NOCONFIRMATION (0x0010)</h4>
      <para>Respond with <b>Yes to All</b> for any dialog box that is displayed.</para>
      <h4>FOF_NOCONFIRMMKDIR (0x0200)</h4>
      <para>Do not confirm the creation of a new folder if the operation requires one to be created.</para>
      <h4>FOF_NO_CONNECTED_ELEMENTS (0x2000)</h4>
      <para>Do not move connected items as a group. Only move the specified files.</para>
      <h4>FOF_NOCOPYSECURITYATTRIBS (0x0800)</h4>
      <para>Do not copy the security attributes of the item.</para>
      <h4>FOF_NOERRORUI (0x0400)</h4>
      <para>Do not display a message to the user if an error occurs. If this flag is set without FOFX_EARLYFAILURE, any error is treated as if the user had chosen <b>Ignore</b> or <b>Continue</b> in a dialog box. It halts the current action, sets a flag to indicate that an action was aborted, and proceeds with the rest of the operation.</para>
      <h4>FOF_NORECURSION (0x1000)</h4>
      <para>Only operate in the local folder. Do not operate recursively into subdirectories.</para>
      <h4>FOF_RENAMEONCOLLISION (0x0008)</h4>
      <para>Give the item being operated on a new name in a move, copy, or rename operation if an item with the target name already exists.</para>
      <h4>FOF_SILENT (0x0004)</h4>
      <para>Do not display a progress dialog box.</para>
      <h4>FOF_WANTNUKEWARNING (0x4000)</h4>
      <para>Send a warning if a file or folder is being destroyed during a delete operation rather than recycled. This flag partially overrides <b>FOF_NOCONFIRMATION</b>.</para>
      <h4>FOFX_ADDUNDORECORD (0x20000000)</h4>
      <para>
        <b>Introduced in Windows 8</b>. The file operation was user-invoked and should be placed on the undo stack. This flag is preferred to FOF_ALLOWUNDO.</para>
      <h4>FOFX_NOSKIPJUNCTIONS (0x00010000)</h4>
      <para>Walk into Shell namespace junctions. By default, junctions are not entered. For more information on junctions, see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc144096(v=vs.85)">Specifying a Namespace Extension's Location</a>.</para>
      <h4>FOFX_PREFERHARDLINK (0x00020000)</h4>
      <para>If possible, create a hard link rather than a new instance of the file in the destination.</para>
      <h4>FOFX_SHOWELEVATIONPROMPT (0x00040000)</h4>
      <para>If an operation requires elevated rights and the FOF_NOERRORUI flag is set to disable error UI, display a UAC UI prompt nonetheless.</para>
      <h4>FOFX_EARLYFAILURE (0x00100000)</h4>
      <para>If FOFX_EARLYFAILURE is set together with FOF_NOERRORUI, the entire set of operations is stopped upon encountering any error in any operation. This flag is valid only when FOF_NOERRORUI is set.</para>
      <h4>FOFX_PRESERVEFILEEXTENSIONS (0x00200000)</h4>
      <para>Rename collisions in such a way as to preserve file name extensions. This flag is valid only when FOF_RENAMEONCOLLISION is also set.</para>
      <h4>FOFX_KEEPNEWERFILE (0x00400000)</h4>
      <para>Keep the newer file or folder, based on the Date Modified property, if a collision occurs. This is done automatically with no prompt UI presented to the user.</para>
      <h4>FOFX_NOCOPYHOOKS (0x00800000)</h4>
      <para>Do not use copy hooks.</para>
      <h4>FOFX_NOMINIMIZEBOX (0x01000000)</h4>
      <para>Do not allow the progress dialog to be minimized.</para>
      <h4>FOFX_MOVEACLSACROSSVOLUMES (0x02000000)</h4>
      <para>Copy the security attributes of the source item to the destination item when performing a cross-volume move operation. Without this flag, the destination item receives the security attributes of its new folder.</para>
      <h4>FOFX_DONTDISPLAYSOURCEPATH (0x04000000)</h4>
      <para>Do not display the path of the source item in the progress dialog.</para>
      <h4>FOFX_DONTDISPLAYDESTPATH (0x08000000)</h4>
      <para>Do not display the path of the destination item in the progress dialog.</para>
      <h4>FOFX_RECYCLEONDELETE (0x00080000)</h4>
      <para>
        <b>Introduced in Windows 8</b>. When a file is deleted, send it to the Recycle Bin rather than permanently deleting it.</para>
      <h4>FOFX_REQUIREELEVATION (0x10000000)</h4>
      <para>
        <b>Introduced in Windows Vista SP1</b>. The user expects a requirement for rights elevation, so do not display a dialog box asking for a confirmation of the elevation.</para>
      <h4>FOFX_COPYASDOWNLOAD (0x40000000)</h4>
      <para>
        <b>Introduced in Windows 7</b>. Display a <b>Downloading</b> instead of <b>Copying</b> message in the progress dialog.</para>
      <h4>FOFX_DONTDISPLAYLOCATIONS (0x80000000)</h4>
      <para>
        <b>Introduced in Windows 7</b>. Do not display the location line in the progress dialog.</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.SetOwnerWindow">
    <summary>Sets the parent or owner window for progress and dialog windows.</summary>
    <param name="hwndOwner">A handle to the owner window of the operation. This window will receive error messages.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.SetProgressDialog">
    <summary>Specifies a dialog box used to display the progress of the operation.</summary>
    <param name="popd">Pointer to an <see cref="IOperationsProgressDialog" /> object that represents the dialog box.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.SetProgressMessage">
    <summary>Not implemented.</summary>
    <param name="pszMessage">Pointer to the window title. This is a null-terminated, Unicode string.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.SetProperties">
    <summary>Declares a set of properties and values to be set on an item or items.</summary>
    <param name="pproparray">Pointer to an <see cref="IPropertyChangeArray" />, which accesses a collection of <see cref="IPropertyChange" /> objects that specify the properties to be set and their new values.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperation.Unadvise">
    <summary>Terminates an advisory connection previously established through <see cref="IFileOperation.Advise" />.</summary>
    <param name="dwCookie">The connection token that identifies the connection to delete. This value was originally retrieved by <see cref="Advise" /> when the connection was made.</param>
    <returns>
      <para>Any value other than those listed here indicate a failure.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The connection was terminated successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONNECT_E_NOCONNECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>dwCookie</i> does not represent a valid connection.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IFileOperation">
    <summary>Exposes methods to copy, move, rename, create, and delete Shell items as well as methods to provide progress and error dialogs. This interface replaces the <see cref="SHFileOperation" /> function.</summary>
  </member>
</doc>