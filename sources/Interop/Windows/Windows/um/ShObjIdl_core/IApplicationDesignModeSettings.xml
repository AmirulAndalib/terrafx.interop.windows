<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IApplicationDesignModeSettings.ComputeApplicationSize">
    <summary>
      <para>Gets the size of the Windows Store app, based on the current set of spoofed settings.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
      <para>In addition, each of these methods must be called before calling <b>ComputeApplicationSize</b>, or the call will fail.</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="SetApplicationViewState" />
          </description>
        </item>
        <item>
          <description>
            <see cref="SetNativeDisplaySize" />
          </description>
        </item>
        <item>
          <description>
            <see cref="SetScaleFactor" />
          </description>
        </item>
      </list>
    </summary>
    <param name="applicationSizePixels">When this method returns successfully, receives a pointer to the size that the Windows Store app should occupy, based on the current set of spoofed settings.</param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings.IsApplicationViewStateSupported">
    <summary>
      <para>Determines whether a particular application view state is supported for specific spoofed display size and scale factor settings.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
    </summary>
    <param name="viewState">One of the enumeration values that indicates the application view state for which support is being determined.</param>
    <param name="nativeDisplaySizePixels">The native size of the display to spoof.</param>
    <param name="scaleFactor">One of the enumeration values that indicates the device scale factor to spoof.</param>
    <param name="supported">When this method returns successfully, receives a pointer to a Boolean value which is set to <b>TRUE</b> if the application view state is supported for the given display size and scale factor, and <b>FALSE</b> if it is not.</param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings.SetApplicationViewState">
    <summary>
      <para>Sets a spoofed application view state (full-screen landscape, full-screen portrait, filled, or snapped) to be used for a Windows Store app running in design mode.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
      <para>
        <b>SetApplicationViewState</b> must be called before calling <see cref="ComputeApplicationSize" />.</para>
    </summary>
    <param name="viewState">One of the <see cref="APPLICATION_VIEW_STATE" /> enumeration values that indicates the application view state to spoof.</param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings.SetNativeDisplaySize">
    <summary>
      <para>Sets a spoofed native display size to be used for a Windows Store app running in design mode.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
      <para>
        <b>SetNativeDisplaySize</b> must be called before calling <see cref="ComputeApplicationSize" />.</para>
    </summary>
    <param name="nativeDisplaySizePixels">The native size of the display to spoof, as a <see cref="SIZE" /> structure. The specified size will be normalized to a landscape orientation. To spoof orientation, see <see cref="SetApplicationViewState" />.</param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_MONITOR_RESOLUTION_TOO_LOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>You cannot launch or switch to an immersive app when the resolution is this low. This is currently defined as any resolution below 800 horizontal or 600 vertical pixels when in landscape orientation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings.SetScaleFactor">
    <summary>
      <para>Sets a spoofed device scale factor to be used for a Windows Store app running in design mode.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
      <para>
        <b>SetScaleFactor</b> must be called before calling <see cref="ComputeApplicationSize" />.</para>
    </summary>
    <param name="scaleFactor">One of the <see cref="DEVICE_SCALE_FACTOR" /> enumeration values that indicates the device scale factor to spoof.</param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings.TriggerEdgeGesture">
    <summary>
      <para>Sends a spoofed edge gesture event to the proxy core window on the caller's thread. This gesture toggles the app's app bar, if the app supports one. The caller can specify the type of input that triggered the edge gesture.</para>
      <para>You must call <see cref="IInitializeWithWindow.Initialize" /> to set a proxy core window before calling this method. For a code example, see <a href="https://docs.microsoft.com//windows/apps/develop/ui-input/display-ui-objects#winui-3-with-c">Display WinRT UI objects that depend on CoreWindow</a>.</para>
    </summary>
    <param name="edgeGestureKind">
      <para>Indicates the <b>EDGE_GESTURE_KIND</b> input type that generated the spoofed edge gesture. If touch (<b>EGK_TOUCH</b>) is specified, both the <b>Starting</b> and <b>Completed</b> edge gesture events are sent. Otherwise, only the <b>Completed</b> event is sent. One of the following values:</para>
      <h4>EGK_TOUCH (0)</h4>
      <para>The edge gesture event was generated by a swipe on a touch-enabled screen.</para>
      <h4>EGK_KEYBOARD (1)</h4>
      <para>The edge gesture event was generated by the Win+Z key sequence on the keyboard.</para>
      <h4>EGK_MOUSE (2)</h4>
      <para>The edge gesture event was generated by a right mouse click.</para>
    </param>
    <returns>
      <para>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOT_SET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IInitializeWithWindow.Initialize" /> has not been called to set a proxy core window.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IApplicationDesignModeSettings">
    <summary>Enables development tool applications to dynamically spoof system and user states, such as native display resolution, device scale factor, and application view state, for the purpose of testing Windows Store apps running in design mode for a wide range of form factors without the need for the actual hardware. Also enables testing of changes in normally user-controlled state to test Windows Store apps under a variety of scenarios.</summary>
  </member>
</doc>