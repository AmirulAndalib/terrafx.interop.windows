<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IFileOperationProgressSink.FinishOperations">
    <summary>Performs caller-implemented actions after the last operation performed by the call to <see cref="IFileOperation" /> is complete.</summary>
    <param name="hrResult">The return value of the final operation. Note that this is not the HRESULT returned by one of the <see cref="IFileOperation" /> methods, which simply queue the operations. Instead, this is the result of the actual operation, such as copy, delete, or move.</param>
    <returns>Not used.</returns>
  </member>
  <member name="IFileOperationProgressSink.PauseTimer">
    <summary>Not supported.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperationProgressSink.PostCopyItem">
    <summary>Performs caller-implemented actions after the copy process for each item is complete.</summary>
    <param name="dwFlags">bitwise value that contains flags that were used during the copy operation. Some values can be set or changed during the copy operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to which the item was copied.</param>
    <param name="pszNewName">Pointer to the new name that was given to the item after it was copied. This is a null-terminated Unicode string. Note that this might not be the name that you asked for, given collisions and other naming rules.</param>
    <param name="hrCopy">The return value of the copy operation. Note that this is not the HRESULT returned by <see cref="CopyItem" />, which simply queues the copy operation. Instead, this is the result of the actual copy.</param>
    <param name="psiNewlyCreated">Pointer to an <see cref="IShellItem" /> that represents the new copy of the item.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PostDeleteItem">
    <summary>Performs caller-implemented actions after the delete process for each item is complete.</summary>
    <param name="dwFlags">bitwise value that contains flags that were used during the delete operation. Some values can be set or changed during the delete operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item that was deleted.</param>
    <param name="hrDelete">The return value of the delete operation. Note that this is not the HRESULT returned by <see cref="DeleteItem" />, which simply queues the delete operation. Instead, this is the result of the actual deletion.</param>
    <param name="psiNewlyCreated">A pointer to an <see cref="IShellItem" /> that specifies the deleted item, now in the Recycle Bin. If the item was fully deleted, this value is <b>NULL</b>.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PostMoveItem">
    <summary>Performs caller-implemented actions after the move process for each item is complete.</summary>
    <param name="dwFlags">bitwise value that contains flags that were used during the move operation. Some values can be set or changed during the move operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder that contains the moved item.</param>
    <param name="pszNewName">Pointer to the name that was given to the item after it was moved. This is a null-terminated Unicode string. Note that this might not be the name that you asked for, given collisions and other naming rules.</param>
    <param name="hrMove">The return value of the move operation. Note that this is not the HRESULT returned by <see cref="MoveItem" />, which simply queues the move operation. Instead, this is the result of the actual move.</param>
    <param name="psiNewlyCreated">Pointer to an <see cref="IShellItem" /> that represents the moved item in its new location.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PostNewItem">
    <summary>Performs caller-implemented actions after the new item is created.</summary>
    <param name="dwFlags">bitwise value that contains flags that were used during the creation operation. Some values can be set or changed during the creation operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to which the new item was added.</param>
    <param name="pszNewName">Pointer to the file name of the new item, for instance <b>Newfile.txt</b>. This is a null-terminated, Unicode string.</param>
    <param name="pszTemplateName">
      <para>Pointer to the name of the template file (for example <b>Excel9.xls</b>) that the new item is based on, stored in one of the following locations:</para>
      <list type="bullet">
        <item>
          <description>CSIDL_COMMON_TEMPLATES. The default path for this folder is %ALLUSERSPROFILE%\Templates.</description>
        </item>
        <item>
          <description>CSIDL_TEMPLATES. The default path for this folder is %USERPROFILE%\Templates.</description>
        </item>
        <item>
          <description>%SystemRoot%\shellnew</description>
        </item>
      </list>This is a null-terminated, Unicode string used to specify an existing file of the same type as the new file, containing the minimal content that an application wants to include in any new file.<para>This parameter is normally <b>NULL</b> to specify a new, blank file.</para></param>
    <param name="dwFileAttributes">The file attributes applied to the new item. One or more of the values found at <see cref="GetFileAttributes" />.</param>
    <param name="hrNew">The return value of the creation operation. Note that this is not the HRESULT returned by <see cref="NewItem" />, which simply queues the creation operation. Instead, this is the result of the actual creation.</param>
    <param name="psiNewItem">Pointer to an <see cref="IShellItem" /> that represents the new item.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PostRenameItem">
    <summary>Performs caller-implemented actions after the rename process for each item is complete.</summary>
    <param name="dwFlags">bitwise value that contains flags that were used during the rename operation. Some values can be set or changed during the rename operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item before it was renamed.</param>
    <param name="pszNewName">Pointer to the new <see cref="display name" /> of the item. This is a null-terminated, Unicode string. Note that this might not be the name that you asked for, given collisions and other naming rules.</param>
    <param name="hrRename">The return value of the rename operation. Note that this is not the HRESULT returned by <see cref="RenameItem" />, which simply queues the rename operation. Instead, this is the result of the actual rename operation.</param>
    <param name="psiNewlyCreated">Pointer to an <see cref="IShellItem" /> that represents the item with its new name.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PreCopyItem">
    <summary>Performs caller-implemented actions before the copy process for each item begins.</summary>
    <param name="dwFlags">bitwise value that contains flags that control the operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the source item.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the copy of the item.</param>
    <param name="pszNewName">Pointer to a new name for the item after it has been copied. This is a null-terminated Unicode string and can be <b>NULL</b>. If <b>NULL</b>, the name of the destination item is the same as the source.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, the copy operation and all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PreDeleteItem">
    <summary>Performs caller-implemented actions before the delete process for each item begins.</summary>
    <param name="dwFlags">bitwise value that contains flags that control the operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item to be deleted.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, the delete operation and all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PreMoveItem">
    <summary>Performs caller-implemented actions before the move process for each item begins.</summary>
    <param name="dwFlags">bitwise value that contains flags that control the operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item to be moved.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder to contain the moved item.</param>
    <param name="pszNewName">Pointer to a new name for the item in its new location. This is a null-terminated Unicode string and can be <b>NULL</b>. If <b>NULL</b>, the name of the destination item is the same as the source.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, the move operation and all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PreNewItem">
    <summary>Performs caller-implemented actions before the process to create a new item begins.</summary>
    <param name="dwFlags">bitwise value that contains flags that control the operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiDestinationFolder">Pointer to an <see cref="IShellItem" /> that specifies the destination folder that will contain the new item.</param>
    <param name="pszNewName">Pointer to the file name of the new item, for instance <b>Newfile.txt</b>. This is a null-terminated, Unicode string.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, this operation and all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.PreRenameItem">
    <summary>Performs caller-implemented actions before the rename process for each item begins.</summary>
    <param name="dwFlags">bitwise value that contains flags that control the operation. See <see cref="TRANSFER_SOURCE_FLAGS" /> for flag descriptions.</param>
    <param name="psiItem">Pointer to an <see cref="IShellItem" /> that specifies the item to be renamed.</param>
    <param name="pszNewName">Pointer to the new <see cref="display name" /> of the item. This is a null-terminated, Unicode string.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In the case of an error value, the rename operation and all subsequent operations pending from the call to <see cref="IFileOperation" /> are canceled.</returns>
  </member>
  <member name="IFileOperationProgressSink.ResetTimer">
    <summary>Not supported.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperationProgressSink.ResumeTimer">
    <summary>Not supported.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperationProgressSink.StartOperations">
    <summary>Performs caller-implemented actions before any specific file operations are performed.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperationProgressSink.UpdateProgress">
    <summary>Provides an estimate of the total amount of work currently done in relation to the total amount of work.</summary>
    <param name="iWorkTotal">An estimate of the amount of work to be completed.</param>
    <param name="iWorkSoFar">The portion of <i>iWorkTotal</i> that has been completed so far.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IFileOperationProgressSink">
    <summary>Exposes methods that provide a rich notification system used by callers of <see cref="IFileOperation" /> to monitor the details of the operations they are performing through that interface.</summary>
  </member>
</doc>