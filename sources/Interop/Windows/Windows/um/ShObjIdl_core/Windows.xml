<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.FreeIDListArray">
    <summary>
      <para>Frees the memory used by a pointer to an item identifier list (PIDL) list array.</para>
    </summary>
    <param name="ppidls">
      <para>Type: <b>PIDLIST_RELATIVE*</b></para>
      <para>A pointer to the list of <i>cItems</i> PIDLs, stored as an array.</para>
    </param>
    <param name="cItems">
      <para>Type: <b>UINT</b></para>
      <para>The number of items in the array.</para>
    </param>
  </member>
  <member name="Windows.FreeIDListArrayChild">
    <summary>
      <para>Releases the memory space for the array of pointers to child item IDs. This releases both the PITEMID_CHILDs within the array and the array itself.</para>
    </summary>
    <param name="ppidls">
      <para>Type: <b>PITEMID_CHILD*</b></para>
      <para>A pointer to the PIDL list, stored as an array of <i>cItems</i> elements.</para>
    </param>
    <param name="cItems">
      <para>Type: <b>UINT</b></para>
      <para>The number of items in the array.</para>
    </param>
  </member>
  <member name="Windows.FreeIDListArrayFull">
    <summary>
      <para>Releases the memory space for the pointer to an item identifier list (PIDL) array. This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.</para>
    </summary>
    <param name="ppidls">
      <para>Type: <b>PIDLIST_ABSOLUTE*</b></para>
      <para>A pointer to the PIDL list, stored as an array of <i>cItems</i> elements.</para>
    </param>
    <param name="cItems">
      <para>Type: <b>UINT</b></para>
      <para>The number of items in the array.</para>
    </param>
  </member>
  <member name="Windows.FreeKnownFolderDefinitionFields">
    <summary>
      <para>Frees the allocated fields in the result from <see cref="IKnownFolder.GetFolderDefinition" />.</para>
    </summary>
    <param name="pKFD">
      <para>Type: <b><see cref="KNOWNFOLDER_DEFINITION" />*</b></para>
      <para>A pointer to a <see cref="KNOWNFOLDER_DEFINITION" /> structure that contains information about the given known folder.</para>
    </param>
    <remarks>
      <para>This is an inline helper function that calls <see cref="CoTaskMemFree" /> on the fields in the structure that need to be freed. Its implementation can be seen in the header file.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd940364(v=vs.85)">Known Folders Sample</seealso>
  </member>
  <member name="Windows.GetCurrentProcessExplicitAppUserModelID">
    <summary>
      <para>Retrieves the application-defined, explicit Application User Model ID (AppUserModelID) for the current process.</para>
    </summary>
    <param name="AppID">
      <para>Type: <b>PWSTR*</b></para>
      <para>A pointer that receives the address of the AppUserModelID assigned to the process. The caller is responsible for freeing this string with <see cref="CoTaskMemFree" /> when it is no longer needed.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The AppUserModelID retrieved by this function was set earlier through <see cref="SetCurrentProcessExplicitAppUserModelID" />.</para>
      <para>An application can only retrieve an AppUserModelID that has been explicitly set. System-assigned default AppUserModelIDs cannot be retrieved. If the application requires knowledge of its AppUserModelID it should set one explicitly.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/shell/appids">Application User Model IDs (AppUserModelIDs)</seealso>
    <seealso cref="IObjectWithAppUserModelID.GetAppID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/shell/taskbar-extensions">Taskbar Extensions</seealso>
  </member>
  <member name="Windows.SetContractDelegateWindow">
    <summary>
      <para>Associates an app window other than the primary foreground window with an app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.</para>
    </summary>
    <param name="hwndSource">
      <para>Type: <b>HWND</b></para>
      <para>The handle of the app window normally associated with its contracts.</para>
    </param>
    <param name="hwndDelegate">
      <para>Type: <b>HWND</b></para>
      <para>The handle of another of the app's windows that will act as the contract delegate for <i>hwndSource</i>. Set this value to <b>NULL</b> to remove the delegate connection.</para>
    </param>
    <remarks>
      <para>This is an inline function, with the source code included in the header file. It is not included in a .lib or .dll file.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/jj152005(v=vs.85)">GetContractDelegateWindow</seealso>
  </member>
  <member name="Windows.SetCurrentProcessExplicitAppUserModelID">
    <summary>
      <para>Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.</para>
    </summary>
    <param name="AppID">
      <para>Type: <b>PCWSTR</b></para>
      <para>Pointer to the AppUserModelID to assign to the current process.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method must be called during an application's initial startup routine before the application presents any UI or makes any manipulation of its Jump Lists. This includes any call to <see cref="SHAddToRecentDocs" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/shell/appids">Application User Model IDs (AppUserModelIDs)</seealso>
    <seealso cref="GetCurrentProcessExplicitAppUserModelID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/shell/taskbar-extensions">Taskbar Extensions</seealso>
  </member>
  <member name="Windows.SHAddFolderPathToLibrary">
    <summary>
      <para>Adds a folder to a library.</para>
    </summary>
    <param name="plib">
      <para>Type: <b><see cref="IShellLibrary" />*</b></para>
      <para>Pointer to an <see cref="IShellLibrary" /> object to which to add the folder.</para>
    </param>
    <param name="pszFolderPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>The folder to add, specified by path.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.AddFolder" /> method.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.AddFolder" />
    <seealso cref="IShellLibrary.LoadLibraryFromItem" />
    <seealso cref="IShellLibrary.LoadLibraryFromKnownFolder" />
    <seealso cref="IShellLibrary.RemoveFolder" />
    <seealso cref="SHLoadLibraryFromItem" />
    <seealso cref="SHLoadLibraryFromKnownFolder" />
    <seealso cref="SHLoadLibraryFromParsingName" />
    <seealso cref="SHRemoveFolderPathFromLibrary" />
  </member>
  <member name="Windows.SHAssocEnumHandlers">
    <summary>
      <para>Returns an enumeration object for a specified set of file name extension handlers.</para>
    </summary>
    <param name="pszExtra">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a null-terminated buffer that contains a single file type extension, for instance ".jpg". Only handlers associated with the given extension are enumerated. This parameter may not be <b>NULL</b>.</para>
    </param>
    <param name="afFilter">
      <para>Type: <b>ASSOC_FILTER</b></para>
      <para>Specifies the enumeration handler filter applied to the full list of handlers that results from the value given in <i>pszExtra</i>. One of the following values.</para>
      <para>| Value | Description |
|-------|-------------|
| ASSOC_FILTER_NONE | Return all handlers. |
| ASSOC_FILTER_RECOMMENDED | Return only recommended handlers. A handler sets its recommended status in the registry when it is installed. An initial status of non-recommended can later be promoted to recommended as a result of user action. |</para>
    </param>
    <param name="ppEnumHandler">
      <para>Type: <b><see cref="IEnumAssocHandlers" />**</b></para>
      <para>When this method returns, contains the address of a pointer to an <see cref="IEnumAssocHandlers" /> object.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHAssocEnumHandlersForProtocolByApplication">
    <summary>
      <para>Gets an enumeration interface that provides access to handlers associated with a given protocol.</para>
    </summary>
    <param name="protocol">
      <para>Type: <b>PCWSTR</b></para>
      <para>Pointer to a string that specifies the protocol.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface to retrieve through <i>enumHandlers</i>, typically IID_IEnumAssocHandlers.</para>
    </param>
    <param name="enumHandlers">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IEnumAssocHandlers" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is recommended that you use the <b>IID_PPV_ARGS</b> macro, defined in Objbase.h, to package the <i>riid</i> and <i>enumHandlers</i> parameters. This macro provides the correct IID based on the interface pointed to by the value in <i>enumHandlers</i>, which eliminates the possibility of a coding error.</para>
    </remarks>
  </member>
  <member name="Windows.SHCreateAssociationRegistration">
    <summary>
      <para>Creates an <see cref="IApplicationAssociationRegistration" /> object based on the stock implementation of the interface provided by Windows.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the requested interface.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the address of a pointer to the <see cref="IApplicationAssociationRegistration" /> object.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHCreateDefaultExtractIcon">
    <summary>
      <para>Creates a standard icon extractor, whose defaults can be further configured via the <see cref="IDefaultExtractIconInit" /> interface.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to interface ID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>The address of <see cref="IDefaultExtractIconInit" /> interface pointer.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The intended usage for this function is as follows:</para>
      <code>IExtractIcon *pxi;

IDefaultExtractIconInit *pdxi;

HRESULT hr = SHCreateDefaultExtractIcon(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;pdxi);

 if (SUCCEEDED(hr)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;

      SUCCEEDED(hr = pdxi-&gt;SetFlags(GIL_PERCLASS)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;

      SUCCEEDED(hr = pdxi-&gt;SetKey(hkey)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;   // optional

      SUCCEEDED(hr = pdxi-&gt;SetNormalIcon(L"this.dll", 1)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;

      SUCCEEDED(hr = pdxi-&gt;SetOpenIcon(NULL, SIID_FOLDEROPEN)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; // optional

      SUCCEEDED(hr = pdxi-&gt;SetDefaultIcon(NULL, SIID_FOLDER)) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; // optional

      SUCCEEDED(hr = pdxi-&gt;SetShortcutIcon(L"this.dll", 2))) // optional

{

      hr = pdxi-&gt;QueryInterface(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;pxi))

}

 if (pdxi)

{

    pdxi-&gt;Release();

}
</code>
    </remarks>
  </member>
  <member name="Windows.SHCreateItemFromIDList">
    <summary>
      <para>Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object supports the <see cref="IShellItem" /> interface.</para>
    </summary>
    <param name="pidl">
      <para>Type: <b>PCIDLIST_ABSOLUTE</b></para>
      <para>The source PIDL.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the requested interface.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the interface pointer requested in riid.  This will typically be <see cref="IShellItem" /> or
<see cref="IShellItem2" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="SHGetIDListFromObject" />
  </member>
  <member name="Windows.SHCreateItemFromParsingName">
    <summary>
      <para>Creates and initializes a Shell item object from a parsing name.</para>
    </summary>
    <param name="pszPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a display name.</para>
    </param>
    <param name="pbc">
      <para>Type: <b><see cref="IBindCtx" />*</b></para>
      <para>Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed parameters are often specific to the data source and are documented by the data source owners. For example, the file system data source accepts the name being parsed (as a <see cref="WIN32_FIND_DATA" /> structure), using the <a href="https://docs.microsoft.com//windows/desktop/shell/str-constants">STR_FILE_SYS_BIND_DATA</a> bind context parameter.</para>
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/shell/str-constants">STR_PARSE_PREFER_FOLDER_BROWSING</a> can be passed to indicate that URLs are parsed using the file system data source when possible. Construct a bind context object using <see cref="CreateBindCtx" /> and populate the values using <see cref="IBindCtx.RegisterObjectParam" />. See <b>Bind Context String Keys</b> for a complete list of these. See the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd940368(v=vs.85)">Parsing With Parameters Sample</a> for an example of the use of this parameter.</para>
      <para>If no data is being passed to or received from the parsing function, this value can be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface to retrieve through <i>ppv</i>, typically <b>IID_IShellItem</b> or <b>IID_IShellItem2</b>.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns successfully, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItem" /> or <see cref="IShellItem2" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>We recommend that you use the <b>IID_PPV_ARGS</b> macro, defined in Objbase.h, to package the <i>riid</i> and <i>ppv</i> parameters. This macro provides the correct <b>IID</b> based on the interface pointed to by the value in <i>ppv</i>, which eliminates the possibility of a coding error in <i>riid</i> that could lead to unexpected results.</para>
    </remarks>
  </member>
  <member name="Windows.SHCreateItemFromRelativeName">
    <summary>
      <para>Creates and initializes a Shell item object from a relative parsing name.</para>
    </summary>
    <param name="psiParent">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>A pointer to the parent Shell item.</para>
    </param>
    <param name="pszName">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a null-terminated, Unicode string that specifies a display name that is relative to the <i>psiParent</i>.</para>
    </param>
    <param name="pbc">
      <para>Type: <b><see cref="IBindCtx" />*</b></para>
      <para>A pointer to a bind context that controls the parsing operation. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to an interface ID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the interface pointer requested in riid.  This will usually be <see cref="IShellItem" /> or
<see cref="IShellItem2" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHCreateItemInKnownFolder">
    <summary>
      <para>Creates a Shell item object for a single file that exists inside a known folder.</para>
    </summary>
    <param name="kfid">
      <para>Type: <b>REFKNOWNFOLDERID</b></para>
      <para>A reference to the <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a>, a <b>GUID</b> that identifies the folder that contains the item.</para>
    </param>
    <param name="dwKFFlags">
      <para>Type: <b>DWORD</b></para>
      <para>Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</para>
    </param>
    <param name="pszItem">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also be <b>NULL</b>. In this case, an <see cref="IShellItem" /> that represents the known folder itself is created.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface that represents the item, retrieved through <i>ppv</i>. This value is typically IID_IShellItem or IID_IShellItem2.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns successfully, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItem" /> or <see cref="IShellItem2" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd940364(v=vs.85)">Known Folders Sample</seealso>
  </member>
  <member name="Windows.SHCreateItemWithParent">
    <summary>
      <para>Create a Shell item, given a parent folder and a child item ID.</para>
    </summary>
    <param name="pidlParent">
      <para>Type: <b>PCIDLIST_ABSOLUTE</b></para>
      <para>The IDList of the parent folder of the item being created; the IDList of <i>psfParent</i>. This parameter can be <b>NULL</b>, if <i>psfParent</i> is specified.</para>
    </param>
    <param name="psfParent">
      <para>Type: <b><see cref="IShellFolder" />*</b></para>
      <para>A pointer to <see cref="IShellFolder" /> interface that specifies the shell data source of the child item specified by the <i>pidl</i>.This parameter can be <b>NULL</b>, if <i>pidlParent</i> is specified.</para>
    </param>
    <param name="pidl">
      <para>Type: <b>PCUITEMID_CHILD</b></para>
      <para>A child item ID relative to its parent folder specified by <i>psfParent</i> or <i>pidlParent</i>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to an interface ID.</para>
    </param>
    <param name="ppvItem">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the interface pointer requested in riid.  This will typically be <see cref="IShellItem" /> or
<see cref="IShellItem2" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHCreateLibrary">
    <summary>
      <para>Creates an <see cref="IShellLibrary" /> object.</para>
    </summary>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The IID for <see cref="IShellLibrary" />. (See usage remarks.)</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>Receives a new <see cref="IShellLibrary" /> object. (See usage remarks.)</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <h3>Usage</h3>
      <para>The <b>IID_PPV_ARGS</b> macro is generally used to generate the <i>riid</i> and <i>ppv</i> parameters for this function. For example:</para>
      <code>#include "shobjidl.h"
#include "objbase.h" // Defines the IID_PPV_ARGS macro.

...

IShellLibrary *pIShellLib;
SHCreateLibrary(IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;pIShellLib));

</code>
    </remarks>
    <seealso cref="IShellLibrary" />
  </member>
  <member name="Windows.SHCreateShellItemArray">
    <summary>
      <para>Creates a Shell item array object.</para>
    </summary>
    <param name="pidlParent">
      <para>Type: <b>PCIDLIST_ABSOLUTE</b></para>
      <para>The ID list of the parent folder of the items specified in <i>ppidl</i>. If <i>psf</i> is specified, this parameter can be <b>NULL</b>. If this <i>pidlParent</i> is not specified, it is computed from the <i>psf</i> parameter using <see cref="IPersistFolder2" />.</para>
    </param>
    <param name="psf">
      <para>Type: <b><see cref="IShellFolder" />*</b></para>
      <para>The Shell data source object that is the parent of the child items specified in <i>ppidl</i>. If <i>pidlParent</i> is specified, this parameter can be <b>NULL</b>.</para>
    </param>
    <param name="cidl">
      <para>Type: <b>UINT</b></para>
      <para>The number of elements in the array specified by <i>ppidl</i>.</para>
    </param>
    <param name="ppidl">
      <para>Type: <b>PCUITEMID_CHILD_ARRAY</b></para>
      <para>The list of child item IDs for which the array is being created. This value can be <b>NULL</b>.</para>
    </param>
    <param name="ppsiItemArray">
      <para>Type: <b><see cref="IShellItemArray" />**</b></para>
      <para>When this function returns, contains the address of an <see cref="IShellItemArray" /> interface pointer.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHCreateShellItemArrayFromDataObject">
    <summary>
      <para>Creates a Shell item array object from a data object.</para>
    </summary>
    <param name="pdo">
      <para>Type: <b><see cref="IDataObject" />*</b></para>
      <para>A pointer to <see cref="IDataObject" /> interface.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the desired interface ID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItemArray" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is useful for Shell extensions that implement <see cref="IShellExtInit" /> and are passed a data object to the <see cref="IShellExtInit.Initialize" /> method; for example, context menu handlers.</para>
      <para>This API lets you convert the data object into a Shell item that the handler can consume. It is recommend that handlers use a Shell item array rather than clipboard formats like <b>CF_HDROP</b> and <b>CFSTR_SHELLIDLIST</b> (also known as HIDA) as it leads to simpler code and allows some performance improvements.</para>
      <para>The resulting shell item array holds a reference to the source data object.  Therefore, that data object must remain valid for the lifetime of the shell item array.  Notably, the data objects passed to <see cref="IDropTarget" /> methods are no longer valid after the drop operation completes.</para>
    </remarks>
  </member>
  <member name="Windows.SHCreateShellItemArrayFromIDLists">
    <summary>
      <para>Creates a Shell item array object from a list of <see cref="ITEMIDLIST" /> structures.</para>
    </summary>
    <param name="cidl">
      <para>Type: <b>UINT</b></para>
      <para>The number of elements in the array.</para>
    </param>
    <param name="rgpidl">
      <para>Type: <b>PCIDLIST_ABSOLUTE_ARRAY</b></para>
      <para>A list of <i>cidl</i> constant pointers to <see cref="ITEMIDLIST" /> structures.</para>
    </param>
    <param name="ppsiItemArray">
      <para>Type: <b><see cref="IShellItemArray" />**</b></para>
      <para>When this function returns, contains an <see cref="IShellItemArray" /> interface pointer.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHCreateShellItemArrayFromShellItem">
    <summary>
      <para>Creates an array of one element from a single Shell item.</para>
    </summary>
    <param name="psi">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>Pointer to <see cref="IShellItem" /> object that represents the item.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface to retrieve through <i>ppv</i>, typically IID_IShellItemArray.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically a pointer to an <see cref="IShellItemArray" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function creates a one-element array from a single item. To create an array from the contents of a folder, use <see cref="SHCreateShellItemArray" />.</para>
    </remarks>
  </member>
  <member name="Windows.SHGetIDListFromObject">
    <summary>
      <para>Retrieves the pointer to an item identifier list (PIDL) of an object.</para>
    </summary>
    <param name="punk">
      <para>Type: <b><see cref="IUnknown" />*</b></para>
      <para>A pointer to the <see cref="IUnknown" /> of the object from which to get the PIDL.</para>
    </param>
    <param name="ppidl">
      <para>Type: <b>PIDLIST_ABSOLUTE*</b></para>
      <para>When this function returns, contains a pointer to the PIDL of the given object.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="SHCreateItemFromIDList" />
  </member>
  <member name="Windows.SHGetItemFromDataObject">
    <summary>
      <para>Creates an <see cref="IShellItem" /> or related object based on an item specified by an <see cref="IDataObject" />.</para>
    </summary>
    <param name="pdtobj">
      <para>Type: <b><see cref="IDataObject" />*</b></para>
      <para>A pointer to the source <see cref="IDataObject" /> instance.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b><see cref="DATAOBJ_GET_ITEM_FLAGS" /></b></para>
      <para>One or more values from the <see cref="DATAOBJ_GET_ITEM_FLAGS" /> enumeration to specify options regarding the target object. This value can be 0.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface to retrieve through <i>ppv</i>, typically IID_IShellItem.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItem" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is recommended that you use the <b>IID_PPV_ARGS</b> macro, defined in Objbase.h, to package the <i>riid</i> and <i>ppv</i> parameters. This macro provides the correct IID based on the interface pointed to by the value in <i>ppv</i>, which eliminates the possibility of a coding error.</para>
    </remarks>
  </member>
  <member name="Windows.SHGetItemFromObject">
    <summary>
      <para>Retrieves an <see cref="IShellItem" /> for an object.</para>
    </summary>
    <param name="punk">
      <para>Type: <b><see cref="IUnknown" />*</b></para>
      <para>A pointer to the <see cref="IUnknown" /> of the object.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>Reference to the desired IID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItem" /> or a related interface.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>From the standpoint of performance, this method is preferred to <see cref="SHGetIDListFromObject" /> in those cases where the IDList is already bound to a folder.</para>
    </remarks>
    <seealso cref="SHCreateItemFromIDList" />
    <seealso cref="SHGetIDListFromObject" />
  </member>
  <member name="Windows.SHGetNameFromIDList">
    <summary>
      <para>Retrieves the display name of an item identified by its IDList.</para>
    </summary>
    <param name="pidl">
      <para>Type: <b>PCIDLIST_ABSOLUTE</b></para>
      <para>A PIDL that identifies the item.</para>
    </param>
    <param name="sigdnName">
      <para>Type: <b><see cref="SIGDN" /></b></para>
      <para>A value from the <see cref="SIGDN" /> enumeration that specifies the type of display name to retrieve.</para>
    </param>
    <param name="ppszName">
      <para>Type: <b>PWSTR*</b></para>
      <para>A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is the responsibility of the caller to free the string pointed to by <i>ppszName</i> when it is no longer needed. Call <see cref="CoTaskMemFree" /> on *<i>ppszName</i> to free the memory.</para>
    </remarks>
  </member>
  <member name="Windows.SHGetPropertyStoreFromIDList">
    <summary>
      <para>Retrieves an object that supports <see cref="IPropertyStore" /> or related interfaces from a pointer to an item identifier list (PIDL).</para>
    </summary>
    <param name="pidl">
      <para>Type: <b>PCIDLIST_ABSOLUTE</b></para>
      <para>A pointer to an item ID list.</para>
    </param>
    <param name="flags">
      <para>Type: <b><see cref="GETPROPERTYSTOREFLAGS" /></b></para>
      <para>One or more values from the <see cref="GETPROPERTYSTOREFLAGS" /> constants. This parameter can also be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the desired interface ID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IPropertyStore" /> or a related interface.</para>
    </param>
  </member>
  <member name="Windows.SHGetPropertyStoreFromParsingName">
    <summary>
      <para>Returns a property store for an item, given a path or parsing name.</para>
    </summary>
    <param name="pszPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a null-terminated Unicode string that specifies the item path.</para>
    </param>
    <param name="pbc">
      <para>Type: <b><see cref="IBindCtx" />*</b></para>
      <para>A pointer to a <see cref="IBindCtx" /> object, which provides access to a bind context. This value can be <b>NULL</b>.</para>
    </param>
    <param name="flags">
      <para>Type: <b><see cref="GETPROPERTYSTOREFLAGS" /></b></para>
      <para>One or more values from the <see cref="GETPROPERTYSTOREFLAGS" /> constants. This parameter can also be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the desired interface ID.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IPropertyStore" /> or a related interface.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IShellItem2.GetPropertyStore" />
  </member>
  <member name="Windows.SHGetTemporaryPropertyForItem">
    <summary>
      <para>Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for the lifetime of the <see cref="IShellItem" /> object, rather than being persisted back into the item.</para>
    </summary>
    <param name="psi">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>A pointer to the item for which the temporary property is to be retrieved.</para>
    </param>
    <param name="propkey">
      <para>Type: <b>REFPROPERTYKEY</b></para>
      <para>The property key.</para>
    </param>
    <param name="ppropvar">
      <para>Type: <b><see cref="PROPVARIANT" />*</b></para>
      <para>A pointer to the temporary property for the item.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="Windows.SHLoadLibraryFromItem">
    <summary>
      <para>Creates and loads an <see cref="IShellLibrary" /> object from a specified library definition file.</para>
    </summary>
    <param name="psiLibrary">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>An <see cref="IShellItem" /> object for the library definition file to load.</para>
    </param>
    <param name="grfMode">
      <para>Type: <b>DWORD</b></para>
      <para>One or more storage medium flags that specify access and sharing modes for the library object. Commonly specified flags are <b>STGM_READ</b> or <b>STGM_READWRITE</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Stg/stgm-constants">STGM</a>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The IID for <see cref="IShellLibrary" />. (See usage remarks.)</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>Receives the loaded <see cref="IShellLibrary" /> object. (See usage remarks.)</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <h3>Usage</h3>
      <para>The <b>IID_PPV_ARGS</b> macro is generally used to generate the <i>riid</i> and <i>ppv</i> parameters for this function. For an example, see <see cref="SHCreateLibrary" />.</para>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.LoadLibraryFromItem" /> method.</para>
    </remarks>
    <seealso cref="IShellItem" />
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.LoadLibraryFromItem" />
    <seealso cref="IShellLibrary.LoadLibraryFromKnownFolder" />
    <seealso cref="SHCreateItemWithParent" />
    <seealso cref="SHCreateLibrary" />
    <seealso cref="SHGetItemFromObject" />
    <seealso cref="SHLoadLibraryFromKnownFolder" />
    <seealso cref="SHLoadLibraryFromParsingName" />
  </member>
  <member name="Windows.SHLoadLibraryFromKnownFolder">
    <summary>
      <para>Creates and loads an <see cref="IShellLibrary" /> object for a specified known folder ID.</para>
    </summary>
    <param name="kfidLibrary">
      <para>Type: <b>REFKNOWNFOLDERID</b></para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> value that identifies the known folder to load into the <see cref="IShellLibrary" /> object.</para>
    </param>
    <param name="grfMode">
      <para>Type: <b>DWORD</b></para>
      <para>One or more storage medium flags that specify access and sharing modes for the library object. Commonly specified flags are <b>STGM_READ</b> or <b>STGM_READWRITE</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Stg/stgm-constants">STGM</a>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>The IID for <see cref="IShellLibrary" />. (See Remarks for more information.)</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this function returns successfully, receives the loaded <see cref="IShellLibrary" /> object. (See Remarks for more information.)</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.LoadLibraryFromKnownFolder" /> method.</para>
      <h3>Usage</h3>
      <para>The <b>IID_PPV_ARGS</b> macro is generally used to generate the <i>riid</i> and <i>ppv</i> parameters for this function. For an example, see <see cref="SHCreateLibrary" />.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.LoadLibraryFromItem" />
    <seealso cref="IShellLibrary.LoadLibraryFromKnownFolder" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/dd940364(v=vs.85)">Known Folders Sample</seealso>
    <seealso cref="SHCreateLibrary" />
    <seealso cref="SHLoadLibraryFromItem" />
    <seealso cref="SHLoadLibraryFromParsingName" />
  </member>
  <member name="Windows.SHLoadLibraryFromParsingName">
    <summary>
      <para>Creates and loads an <see cref="IShellLibrary" /> object for a specified path.</para>
    </summary>
    <param name="pszParsingName">
      <para>Type: <b>PCWSTR</b></para>
      <para>The path for which to load the <see cref="IShellLibrary" /> object.</para>
    </param>
    <param name="grfMode">
      <para>Type: <b>DWORD</b></para>
      <para>One or more storage medium flags that specify access and sharing modes for the library object. Commonly specified flags are <b>STGM_READ</b> or <b>STGM_READWRITE</b>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Stg/stgm-constants">STGM</a>.</para>
    </param>
    <param name="riid">
      <para>Type: <b>REFIID</b></para>
      <para>A reference to the IID of the interface to retrieve through <i>ppv</i>, typically IID_IShellLibrary.</para>
    </param>
    <param name="ppv">
      <para>Type: <b>void**</b></para>
      <para>When this method returns successfully, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellLibrary" />.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>We recommend that you use the <b>IID_PPV_ARGS</b> macro, defined in Objbase.h, to package the <i>riid</i> and <i>ppv</i> parameters. This macro provides the correct IID based on the interface pointed to by the value in <i>ppv</i>, which eliminates the possibility of a coding error in <i>riid</i> that could lead to unexpected results.</para>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.LoadLibraryFromItem" /> method.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.LoadLibraryFromItem" />
    <seealso cref="IShellLibrary.LoadLibraryFromKnownFolder" />
    <seealso cref="SHCreateLibrary" />
    <seealso cref="SHLoadLibraryFromItem" />
    <seealso cref="SHLoadLibraryFromKnownFolder" />
  </member>
  <member name="Windows.SHRemoveFolderPathFromLibrary">
    <summary>
      <para>Removes a folder from a library.</para>
    </summary>
    <param name="plib">
      <para>Type: <b><see cref="IShellLibrary" />*</b></para>
      <para>The <see cref="IShellLibrary" /> object from which to remove the folder.</para>
    </param>
    <param name="pszFolderPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>The path of the folder to remove.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.RemoveFolder" /> method.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.AddFolder" />
    <seealso cref="IShellLibrary.LoadLibraryFromItem" />
    <seealso cref="IShellLibrary.LoadLibraryFromKnownFolder" />
    <seealso cref="IShellLibrary.RemoveFolder" />
    <seealso cref="SHAddFolderPathToLibrary" />
    <seealso cref="SHLoadLibraryFromItem" />
    <seealso cref="SHLoadLibraryFromKnownFolder" />
    <seealso cref="SHLoadLibraryFromParsingName" />
  </member>
  <member name="Windows.SHResolveLibrary">
    <summary>
      <para>Resolves all locations in a library, even those locations that have been moved or renamed.</para>
    </summary>
    <param name="psiLibrary">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>A pointer to an <see cref="IShellItem" /> object that represents the library.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function can block the calling thread for as long as it takes to resolve all the locations in the specified library. Because it blocks the thread from which it is called, it should not be called from a thread that also handles user interface interactions.</para>
      <para>This function resolves all locations in the specified library in a single call. To resolve an individual location in a library, see the <see cref="IShellLibrary.ResolveFolder" /> method or the <see cref="SHResolveFolderPathInLibrary" /> function.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.ResolveFolder" />
  </member>
  <member name="Windows.SHSaveLibraryInFolderPath">
    <summary>
      <para>Saves an <see cref="IShellLibrary" /> object to disk.</para>
    </summary>
    <param name="plib">
      <para>Type: <b><see cref="IShellLibrary" />*</b></para>
      <para>A pointer to the <see cref="IShellLibrary" /> object to save.</para>
    </param>
    <param name="pszFolderPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to the path to the folder in which to save the library.</para>
    </param>
    <param name="pszLibraryName">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a file name under which to save the library. The file name must not include the file name extension. The file name extension is added automatically.</para>
    </param>
    <param name="lsf">
      <para>Type: <b><see cref="LIBRARYSAVEFLAGS" /></b></para>
      <para>A value from the <see cref="LIBRARYSAVEFLAGS" /> enumeration that specifies how to handle a library name collision.</para>
    </param>
    <param name="ppszSavedToPath">
      <para>Type: <b>PWSTR*</b></para>
      <para>A pointer to a string that, when this function returns successfully, receives the path to the library description file into which the library was saved. If this path is not required, the value of this parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This is an inline helper function that wraps the <see cref="IShellLibrary.Save" /> method.</para>
    </remarks>
    <seealso cref="IShellLibrary" />
    <seealso cref="IShellLibrary.Save" />
    <seealso cref="IShellLibrary.SaveInKnownFolder" />
  </member>
  <member name="Windows.SHSetTemporaryPropertyForItem">
    <summary>
      <para>Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only for the lifetime of the <see cref="IShellItem" /> object, instead of writing them back into the item.</para>
    </summary>
    <param name="psi">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>A pointer to the item on which the temporary property is to be set.</para>
    </param>
    <param name="propkey">
      <para>Type: <b>REFPROPERTYKEY</b></para>
      <para>Reference to the <see cref="PROPERTYKEY" /> that identifies the temporary property that is being set.</para>
    </param>
    <param name="propvar">
      <para>Type: <b>REFPROPVARIANT</b></para>
      <para>Reference to a <see cref="PROPVARIANT" /> that contains the value of the temporary property.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>A temporary value can only be read with <see cref="SHGetTemporaryPropertyForItem" /> or by passing GPS_TEMPORARY to <see cref="IShellItem2.GetPropertyStore" />.</para>
    </remarks>
  </member>
  <member name="Windows.SHShowManageLibraryUI">
    <summary>
      <para>Shows the library management dialog box, which enables users to manage the library folders and default save location.</para>
    </summary>
    <param name="psiLibrary">
      <para>Type: <b><see cref="IShellItem" />*</b></para>
      <para>A pointer to an <see cref="IShellItem" /> object that represents the library that is to be managed.</para>
    </param>
    <param name="hwndOwner">
      <para>Type: <b>HWND</b></para>
      <para>The handle for the window that owns the library management dialog box. The value of this parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pszTitle">
      <para>Type: <b>LPCWSTR</b></para>
      <para>A pointer to the title for the library management dialog. To display the generic title string, set the value of this parameter to <b>NULL</b>.</para>
    </param>
    <param name="pszInstruction">
      <para>Type: <b>LPCWSTR</b></para>
      <para>A pointer to a help string to display below the title string in the library management dialog box. To display the generic help string, set the value of this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lmdOptions">
      <para>Type: <b><see cref="LIBRARYMANAGEDIALOGOPTIONS" /></b></para>
      <para>A value from the <see cref="LIBRARYMANAGEDIALOGOPTIONS" /> enumeration that specifies the behavior of the management dialog box.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="IShellLibrary" />
    <seealso cref="LIBRARYMANAGEDIALOGOPTIONS" />
  </member>
  <member name="Windows.SHSimpleIDListFromPath">
    <summary>
      <para>Deprecated. Returns a pointer to an <see cref="ITEMIDLIST" /> structure when passed a path.</para>
    </summary>
    <param name="pszPath">
      <para>Type: <b>PCWSTR</b></para>
      <para>A pointer to a null-terminated string that contains the path to be converted to a PIDL.</para>
    </param>
    <returns>
      <para>Type: <b>PIDLIST_ABSOLUTE</b></para>
      <para>Returns a pointer to an <see cref="ITEMIDLIST" /> structure if successful, or <b>NULL</b> otherwise.</para>
    </returns>
    <remarks>
      <para>Prior to Windows 7, this function was declared in Shlobj.h. In Windows 7 and later versions, it is declared in Shobjidl.h.</para>
      <para>
        <b>Note</b>  This function is available through Windows 7 and Windows Server 2003. It is possible that it will not be present in future versions of Windows.</para>
      <para>An alternative to this function is as follows:</para>
      <list type="number">
        <item>
          <description>Call <see cref="SHGetDesktopFolder" /> to obtain <see cref="IShellFolder" /> for the desktop folder.</description>
        </item>
        <item>
          <description>Get the <see cref="IShellFolder" />'s bind context (<see cref="IBindCtx" />).</description>
        </item>
        <item>
          <description>Call <see cref="IShellFolder.ParseDisplayName" /> with the <see cref="IBindCtx" /> and the path.</description>
        </item>
      </list>
    </remarks>
  </member>
</doc>