<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IContextMenu.GetCommandString">
    <summary>Gets information about a shortcut menu command, including the help string and the language-independent, or <i>canonical</i>, name for the command.</summary>
    <param name="idCmd">Menu command identifier offset.</param>
    <param name="uType">
      <para>Flags specifying the information to return. This parameter can have one of the following values.</para>
      <h4>GCS_HELPTEXTA</h4>
      <para>Sets <i>pszName</i> to an ANSI string containing the help text for the command.</para>
      <h4>GCS_HELPTEXTW</h4>
      <para>Sets <i>pszName</i> to a Unicode string containing the help text for the command.</para>
      <h4>GCS_VALIDATEA</h4>
      <para>Returns S_OK if the menu item exists, or S_FALSE otherwise.</para>
      <h4>GCS_VALIDATEW</h4>
      <para>Returns S_OK if the menu item exists, or S_FALSE otherwise.</para>
      <h4>GCS_VERBA</h4>
      <para>Sets <i>pszName</i> to an ANSI string containing the language-independent command name for the menu item.</para>
      <h4>GCS_VERBW</h4>
      <para>Sets <i>pszName</i> to a Unicode string containing the language-independent command name for the menu item.</para>
    </param>
    <param name="pReserved">Reserved. Applications must specify <b>NULL</b> when calling this method and handlers must ignore this parameter when called.</param>
    <param name="pszName">The address of the buffer to receive the null-terminated string being retrieved.</param>
    <param name="cchMax">Size of the buffer, in characters, to receive the null-terminated string.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IContextMenu.InvokeCommand">
    <summary>Carries out the command associated with a shortcut menu item.</summary>
    <param name="pici">A pointer to a <see cref="CMINVOKECOMMANDINFO" /> or <see cref="CMINVOKECOMMANDINFOEX" /> structure that contains specifics about the command.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IContextMenu.QueryContextMenu">
    <summary>Adds commands to a shortcut menu.</summary>
    <param name="hmenu">A handle to the shortcut menu. The handler should specify this handle when adding menu items.</param>
    <param name="indexMenu">The zero-based position at which to insert the first new menu item.</param>
    <param name="idCmdFirst">The minimum value that the handler can specify for a menu item identifier.</param>
    <param name="idCmdLast">The maximum value that the handler can specify for a menu item identifier.</param>
    <param name="uFlags">
      <para>Optional flags that specify how the shortcut menu can be changed. This parameter can be set to a combination of the following values. The remaining bits of the low-order word are reserved by the system. The high-order word can be used for context-specific communications. The CMF_RESERVED value can be used to mask the low-order word.</para>
      <h4>CMF_NORMAL (0x00000000)</h4>
      <para>0x00000000. Indicates normal operation. A shortcut menu extension, namespace extension, or drag-and-drop handler can add all menu items.</para>
      <h4>CMF_DEFAULTONLY (0x00000001)</h4>
      <para>0x00000001. The user is activating the default action, typically by double-clicking. This flag provides a hint for the shortcut menu extension to add nothing if it does not modify the default item in the menu. A shortcut menu extension or drag-and-drop handler should not add any menu items if this value is specified. A namespace extension should at most add only the default item.</para>
      <h4>CMF_VERBSONLY (0x00000002)</h4>
      <para>0x00000002. The shortcut menu is that of a shortcut file (normally, a .lnk file). Shortcut menu handlers should ignore this value.</para>
      <h4>CMF_EXPLORE (0x00000004)</h4>
      <para>0x00000004. The Windows Explorer tree window is present.</para>
      <h4>CMF_NOVERBS (0x00000008)</h4>
      <para>0x00000008. This flag is set for items displayed in the <b>Send To</b> menu. Shortcut menu handlers should ignore this value.</para>
      <h4>CMF_CANRENAME (0x00000010)</h4>
      <para>0x00000010. The calling application supports renaming of items. A shortcut menu or drag-and-drop handler should ignore this flag. A namespace extension should add a <b>Rename</b> item to the menu if applicable.</para>
      <h4>CMF_NODEFAULT (0x00000020)</h4>
      <para>0x00000020. No item in the menu has been set as the default. A drag-and-drop handler should ignore this flag. A namespace extension should not set any of the menu items as the default.</para>
      <h4>CMF_INCLUDESTATIC (0x00000040)</h4>
      <para>This value is not available.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:</b> 0x00000040. A static menu is being constructed. Only the browser should use this flag; all other shortcut menu extensions should ignore it.</para>
      <h4>CMF_ITEMMENU (0x00000080)</h4>
      <para>0x00000080. The calling application is invoking a shortcut menu on an item in the view (as opposed to the background of the view).</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_EXTENDEDVERBS (0x00000100)</h4>
      <para>0x00000100. The calling application wants extended verbs. Normal verbs are displayed when the user right-clicks an object. To display extended verbs, the user must right-click while pressing the Shift key.</para>
      <h4>CMF_DISABLEDVERBS (0x00000200)</h4>
      <para>0x00000200. The calling application intends to invoke verbs that are disabled, such as legacy menus.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_ASYNCVERBSTATE (0x00000400)</h4>
      <para>0x00000400. The verb state can be evaluated asynchronously.</para>
      <para>
        <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_OPTIMIZEFORINVOKE (0x00000800)</h4>
      <para>0x00000800. Informs context menu handlers that do not support the invocation of a verb through a canonical verb name to bypass <b>IContextMenu.QueryContextMenu</b> in their implementation.</para>
      <para>
        <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_SYNCCASCADEMENU (0x00001000)</h4>
      <para>0x00001000. Populate submenus synchronously.</para>
      <para>
        <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_DONOTPICKDEFAULT (0x00002000)</h4>
      <para>0x00002000. When no verb is explicitly specified, do not use a default verb in its place.</para>
      <para>
        <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not available.</para>
      <h4>CMF_RESERVED (0xffff0000)</h4>
      <para>0xffff0000. This flag is a bitmask that specifies all bits that should not be used. This is to be used only as a mask. Do not pass this as a parameter value.</para>
    </param>
    <returns>If successful, returns an <b>HRESULT</b> value that has its severity value set to SEVERITY_SUCCESS and its code value set to the offset of the largest command identifier that was assigned, plus one. For example, if <i>idCmdFirst</i> is set to 5 and you add three items to the menu with command identifiers of 5, 7, and 8, the return value should be MAKE_HRESULT(SEVERITY_SUCCESS, 0, 8 - 5 + 1). Otherwise, it returns a COM error value.</returns>
  </member>
</doc>