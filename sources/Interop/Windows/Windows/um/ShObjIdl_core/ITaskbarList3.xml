<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITaskbarList3.RegisterTab">
    <summary>Informs the taskbar that a new tab or document thumbnail has been provided for display in an application's taskbar group flyout.</summary>
    <param name="hwndTab">Handle of the tab or document window. This value is required and cannot be <b>NULL</b>.</param>
    <param name="hwndMDI">Handle of the application's main window. This value tells the taskbar which application's preview group to attach the new thumbnail to. This value is required and cannot be <b>NULL</b>.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. If either parameter is <b>NULL</b>, this method returns an error.</returns>
  </member>
  <member name="ITaskbarList3.SetOverlayIcon">
    <summary>Applies an overlay to a taskbar button to indicate application status or a notification to the user.</summary>
    <param name="hwnd">The handle of the window whose associated taskbar button receives the overlay. This handle must belong to a calling process associated with the button's application and must be a valid <b>HWND</b> or the call is ignored.</param>
    <param name="hIcon">
      <para>The handle of an icon to use as the overlay. This should be a small icon, measuring 16x16 pixels at 96 dpi. If an overlay icon is already applied to the taskbar button, that existing overlay is replaced.</para>
      <para>This value can be <b>NULL</b>. How a <b>NULL</b> value is handled depends on whether the taskbar button represents a single window or a group of windows.</para>
      <list type="bullet">
        <item>
          <description>If the taskbar button represents a single window, the overlay icon is removed from the display.</description>
        </item>
        <item>
          <description>If the taskbar button represents a group of windows and a previous overlay is still available (received earlier than the current overlay, but not yet freed by a <b>NULL</b> value), then that previous overlay is displayed in place of the current overlay.</description>
        </item>
      </list>
      <para>It is the responsibility of the calling application to free <i>hIcon</i> when it is no longer needed. This can generally be done after you call <b>SetOverlayIcon</b> because the taskbar makes and uses its own copy of the icon.</para>
    </param>
    <param name="pszDescription">A pointer to a string that provides an alt text version of the information conveyed by the overlay, for accessibility purposes.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetProgressState">
    <summary>Sets the type and state of the progress indicator displayed on a taskbar button.</summary>
    <param name="hwnd">The handle of the window in which the progress of an operation is being shown. This window's associated taskbar button will display the progress bar.</param>
    <param name="tbpFlags">
      <para>Flags that control the current state of the progress button. Specify only one of the following flags; all states are mutually exclusive of all others.</para>
      <h4>TBPF_NOPROGRESS (0x00000000)</h4>
      <para>Stops displaying progress and returns the button to its normal state. Call this method with this flag to dismiss the progress bar when the operation is complete or canceled.</para>
      <h4>TBPF_INDETERMINATE (0x00000001)</h4>
      <para>The progress indicator does not grow in size, but cycles repeatedly along the length of the taskbar button. This indicates activity without specifying what proportion of the progress is complete. Progress is taking place, but there is no prediction as to how long the operation will take.</para>
      <h4>TBPF_NORMAL (0x00000002)</h4>
      <para>The progress indicator grows in size from left to right in proportion to the estimated amount of the operation completed. This is a determinate progress indicator; a prediction is being made as to the duration of the operation.</para>
      <h4>TBPF_ERROR (0x00000004)</h4>
      <para>The progress indicator turns red to show that an error has occurred in one of the windows that is broadcasting progress. This is a determinate state. If the progress indicator is in the indeterminate state, it switches to a red determinate display of a generic percentage not indicative of actual progress.</para>
      <h4>TBPF_PAUSED (0x00000008)</h4>
      <para>The progress indicator turns yellow to show that progress is currently stopped in one of the windows but can be resumed by the user. No error condition exists and nothing is preventing the progress from continuing. This is a determinate state. If the progress indicator is in the indeterminate state, it switches to a yellow determinate display of a generic percentage not indicative of actual progress.</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetProgressValue">
    <summary>Displays or updates a progress bar hosted in a taskbar button to show the specific percentage completed of the full operation.</summary>
    <param name="hwnd">The handle of the window whose associated taskbar button is being used as a progress indicator.</param>
    <param name="ullCompleted">An application-defined value that indicates the proportion of the operation that has been completed at the time the method is called.</param>
    <param name="ullTotal">An application-defined value that specifies the value <i>ullCompleted</i> will have when the operation is complete.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetTabActive">
    <summary>Informs the taskbar that a tab or document window has been made the active window.</summary>
    <param name="hwndTab">Handle of the active tab window. This handle must already be registered through <see cref="ITaskbarList3.RegisterTab" />. This value can be <b>NULL</b> if no tab is active.</param>
    <param name="hwndMDI">Handle of the application's main window. This value tells the taskbar which group the thumbnail is a member of. This value is required and cannot be <b>NULL</b>.</param>
    <param name="dwReserved">Reserved; set to 0.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetTabOrder">
    <summary>Inserts a new thumbnail into a tabbed-document interface (TDI) or multiple-document interface (MDI) application's group flyout or moves an existing thumbnail to a new position in the application's group.</summary>
    <param name="hwndTab">The handle of the tab window whose thumbnail is being placed. This value is required, must already be registered through <see cref="ITaskbarList3.RegisterTab" />, and cannot be <b>NULL</b>.</param>
    <param name="hwndInsertBefore">The handle of the tab window whose thumbnail that <i>hwndTab</i> is inserted to the left of. This handle must already be registered through <see cref="ITaskbarList3.RegisterTab" />. If this value is <b>NULL</b>, the new thumbnail is added to the end of the list.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetThumbnailClip">
    <summary>Selects a portion of a window's client area to display as that window's thumbnail in the taskbar.</summary>
    <param name="hwnd">The handle to a window represented in the taskbar.</param>
    <param name="prcClip">A pointer to a <see cref="RECT" /> structure that specifies a selection within the window's client area, relative to the upper-left corner of that client area. To clear a clip that is already in place and return to the default display of the thumbnail, set this parameter to <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.SetThumbnailTooltip">
    <summary>Specifies or updates the text of the tooltip that is displayed when the mouse pointer rests on an individual preview thumbnail in a taskbar button flyout.</summary>
    <param name="hwnd">The handle to the window whose thumbnail displays the tooltip. This handle must belong to the calling process.</param>
    <param name="pszTip">The pointer to the text to be displayed in the tooltip. This value can be <b>NULL</b>, in which case the title of the window specified by <i>hwnd</i> is used as the tooltip.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.ThumbBarAddButtons">
    <summary>Adds a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button flyout.</summary>
    <param name="hwnd">The handle of the window whose thumbnail representation will receive the toolbar. This handle must belong to the calling process.</param>
    <param name="cButtons">The number of buttons defined in the array pointed to by <i>pButton</i>. The maximum number of buttons allowed is 7.</param>
    <param name="pButton">A pointer to an array of <see cref="THUMBBUTTON" /> structures. Each <b>THUMBBUTTON</b> defines an individual button to be added to the toolbar. Buttons cannot be added or deleted later, so this must be the full defined set. Buttons also cannot be reordered, so their order in the array, which is the order in which they are displayed left to right, will be their permanent order.</param>
    <returns>
      <para>Returns <b>S_OK</b> if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>hwnd</i> parameter does not specify a handle that belongs to the process or does not specify a window that is associated with a taskbar button. This value is also returned if <i>pButton</i> is less than 1 or greater than 7.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="ITaskbarList3.ThumbBarSetImageList">
    <summary>Specifies an image list that contains button images for a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.</summary>
    <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar to be updated. This handle must belong to the calling process.</param>
    <param name="himl">The handle of the image list that contains all button images to be used in the toolbar.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.ThumbBarUpdateButtons">
    <summary>Shows, enables, disables, or hides buttons in a thumbnail toolbar as required by the window's current state. A thumbnail toolbar is a toolbar embedded in a thumbnail image of a window in a taskbar button flyout.</summary>
    <param name="hwnd">The handle of the window whose thumbnail representation contains the toolbar.</param>
    <param name="cButtons">The number of buttons defined in the array pointed to by <i>pButton</i>. The maximum number of buttons allowed is 7. This array contains only structures that represent existing buttons that are being updated.</param>
    <param name="pButton">A pointer to an array of <see cref="THUMBBUTTON" /> structures. Each <b>THUMBBUTTON</b> defines an individual button. If the button already exists (the <b>iId</b> value is already defined), then that existing button is updated with the information provided in the structure.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ITaskbarList3.UnregisterTab">
    <summary>Removes a thumbnail from an application's preview group when that tab or document is closed in the application.</summary>
    <param name="hwndTab">The handle of the tab window whose thumbnail is being removed. This is the same value with which the thumbnail was registered as part the group through <see cref="ITaskbarList3.RegisterTab" />. This value is required and cannot be <b>NULL</b>.</param>
    <returns>Returns <b>S_OK</b> if successful, or an error value otherwise. If <i>hwndTab</i> is <b>NULL</b>, this method returns an error.</returns>
  </member>
  <member name="ITaskbarList3">
    <summary>Extends <see cref="ITaskbarList2" /> by exposing methods that support the unified launching and switching taskbar button functionality added in Windows 7. This functionality includes thumbnail representations and switch targets based on individual tabs in a tabbed application, thumbnail toolbars, notification and status overlays, and progress indicators.</summary>
  </member>
</doc>