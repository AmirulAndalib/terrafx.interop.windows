<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IShellBrowser.BrowseObject">
    <summary>
      <para>Informs Windows Explorer to browse to another folder.</para>
    </summary>
    <param name="pidl">
      <para>Type: <b>PCUIDLIST_RELATIVE</b></para>
      <para>The address of an <see cref="ITEMIDLIST" /> (item identifier list) structure that specifies an object's location. This value is dependent on the flag or flags set in the <i>wFlags</i> parameter.</para>
    </param>
    <param name="wFlags">
      <para>Type: <b>UINT</b></para>
      <para>Flags specifying the folder to be browsed. It can be zero or one or more of the following values.</para>
      <para>These flags specify whether another window is to be created.</para>
      <h4>SBSP_DEFBROWSER (0x0000)</h4>
      <para>Use default behavior, which respects the view option (the user setting to create new windows or to browse in place). In most cases, calling applications should use this flag.</para>
      <h4>SBSP_SAMEBROWSER</h4>
      <para>Browse to another folder with the same Windows Explorer window.</para>
      <h4>SBSP_NEWBROWSER</h4>
      <para>Creates another window for the specified folder.</para>
      <para>The following flags specify the mode. These values are ignored if SBSP_SAMEBROWSER is specified or if SBSP_DEFBROWSER is specified and the user has selected <b>Browse In Place</b>.</para>
      <h4>SBSP_DEFMODE</h4>
      <para>Use the current window.</para>
      <h4>SBSP_OPENMODE</h4>
      <para>Specifies no folder tree for the new browse window. If the current browser does not match the SBSP_OPENMODE of the browse object call,  a new window is opened.</para>
      <h4>SBSP_EXPLOREMODE</h4>
      <para>Specifies a folder tree for the new browse window. If the current browser does not match the SBSP_EXPLOREMODE of the browse object call, a new window is opened.</para>
      <h4>SBSP_HELPMODE</h4>
      <para>Not supported. Do not use.</para>
      <h4>SBSP_NOTRANSFERHIST</h4>
      <para>Do not transfer the browsing history to the new window.</para>
      <para>The following flags specify the category of the <i>pidl</i> parameter.</para>
      <h4>SBSP_ABSOLUTE</h4>
      <para>An absolute PIDL, relative to the desktop.</para>
      <h4>SBSP_RELATIVE</h4>
      <para>A relative PIDL, relative to the current folder.</para>
      <h4>SBSP_PARENT</h4>
      <para>Browse the parent folder, ignore the PIDL.</para>
      <h4>SBSP_NAVIGATEBACK</h4>
      <para>Navigate back, ignore the PIDL.</para>
      <h4>SBSP_NAVIGATEFORWARD</h4>
      <para>Navigate forward, ignore the PIDL.</para>
      <h4>SBSP_ALLOW_AUTONAVIGATE (0x00010000)</h4>
      <para>Enable auto-navigation.</para>
      <para>The following flags specify mode.</para>
      <h4>SBSP_KEEPSAMETEMPLATE (0x00020000)</h4>
      <para>
        <b>Windows Vista and later</b>. Not supported. Do not use.</para>
      <h4>SBSP_KEEPWORDWHEELTEXT (0x00040000)</h4>
      <para>
        <b>Windows Vista and later</b>. Navigate without clearing the search entry field.</para>
      <h4>SBSP_ACTIVATE_NOFOCUS (0x00080000)</h4>
      <para>
        <b>Windows Vista and later</b>. Navigate without the default behavior of setting focus into the new view.</para>
      <para>The following flags control how history is manipulated as a result of navigation.</para>
      <h4>SBSP_CALLERUNTRUSTED (0x00800000)</h4>
      <para>
        <b>Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later</b>. The navigation was possibly initiated by a webpage with scripting code already present on the local system.</para>
      <h4>SBSP_TRUSTFIRSTDOWNLOAD (0x01000000)</h4>
      <para>
        <b>Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later</b>. The new window is the result of a user initiated action. Trust the new window if it immediately attempts to download content.</para>
      <h4>SBSP_UNTRUSTEDFORDOWNLOAD (0x02000000)</h4>
      <para>
        <b>Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later</b>. The window is navigating to an untrusted, non-HTML file. If the user attempts to download the file, do not allow the download.</para>
      <h4>SBSP_NOAUTOSELECT</h4>
      <para>Suppress selection in the history pane.</para>
      <h4>SBSP_WRITENOHISTORY</h4>
      <para>Write no history of this navigation in the history Shell folder.</para>
      <h4>SBSP_CREATENOHISTORY (0x00100000)</h4>
      <para>0x00100000. <b>Windows 7 and later</b>.  Do not add a new entry to the travel log.  When the user enters a search term in the search box and subsequently refines the query, the browser navigates forward but does not add an additional travel log entry.</para>
      <h4>SBSP_TRUSTEDFORACTIVEX (0x10000000)</h4>
      <para>
        <b>Microsoft Internet Explorer 6 Service Pack 2 (SP2) and later</b>. The navigate should allow ActiveX prompts.</para>
      <h4>SBSP_FEEDNAVIGATION (0x20000000)</h4>
      <para>
        <b>Windows Internet Explorer 7 and later</b>. If allowed by current registry settings, give the browser a destination to navigate to.</para>
      <h4>SBSP_REDIRECT (0x40000000)</h4>
      <para>Enables redirection to another URL.</para>
      <h4>SBSP_INITIATEDBYHLINKFRAME (0x80000000)</h4>
      <h4>SBSP_PLAYNOSOUND (0x00200000)</h4>
      <para>
        <b>Windows 7 and later</b>.  Do not make the navigation complete sound for each keystroke in the search box.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Views can use this method to force Windows Explorer to browse to a specific place in the namespace. Typically, these are folders contained in the view.</para>
      <h4>Examples</h4>
      <code>IShellBrowser* psb;
hr = IUnknown_QueryService(punkSite, SID_STopLevelBrowser, IID_PPV_ARGS(&amp;amp;amp;amp;amp;amp;psb));

if (SUCCEEDED(hr))
{
    hr = psb-&gt;BrowseObject(pidlSearch, SBSP_DEFBROWSER | SBSP_ABSOLUTE);
    psb-&gt;Release();
}
</code>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.EnableModelessSB">
    <summary>
      <para>Tells Windows Explorer to enable or disable its modeless dialog boxes.</para>
    </summary>
    <param name="fEnable">
      <para>Type: <b>BOOL</b></para>
      <para>Specifies whether the modeless dialog boxes are to be enabled or disabled. If this parameter is nonzero, modeless dialog boxes are enabled. If this parameter is zero, modeless dialog boxes are disabled.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns <b>S_OK</b> if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is similar to the <see cref="IOleInPlaceFrame.EnableModeless" /> method. Although the current version of Windows Explorer does not have any modeless dialog boxes, the view should call this method when it wants to disable or enable modeless dialog boxes associated with the Windows Explorer window.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.GetControlWindow">
    <summary>
      <para>Gets the window handle to a browser control.</para>
    </summary>
    <param name="id">
      <para>Type: <b>UINT</b></para>
      <para>The control handle that is being requested. This parameter can be one of the following values:</para>
      <h4>FCW_TOOLBAR</h4>
      <para>Retrieves the window handle to the browser's toolbar.</para>
      <h4>FCW_STATUS</h4>
      <para>Retrieves the window handle to the browser's status bar.</para>
      <h4>FCW_TREE</h4>
      <para>Retrieves the window handle to the browser's tree view.</para>
      <h4>FCW_PROGRESS</h4>
      <para>Retrieves the window handle to the browser's progress bar.</para>
    </param>
    <param name="phwnd">
      <para>Type: <b>HWND*</b></para>
      <para>The address of the window handle to the Windows Explorer control.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>
        <b>GetControlWindow</b> is used so views can directly manipulate the browser's controls. <b>FCW_TREE</b> should be used only to determine if the tree is present.</para>
      <h3>Notes to Calling Applications</h3>
      <b>GetControlWindow</b> is used to manipulate and test the state of the control windows. Do not send messages directly to these controls; instead, use <see cref="IShellBrowser.SendControlMsg" />. Be prepared for this method to return <b>NULL</b>. Later versions of Windows Explorer may not include a toolbar, status bar, or tree window.
<h3>Notes to Implementers</h3><b>GetControlWindow</b> returns the window handle to these controls if they exist in your implementation.
<para>See also <see cref="IShellBrowser" /></para></remarks>
  </member>
  <member name="IShellBrowser.GetViewStateStream">
    <summary>
      <para>Gets an
<b>IStream</b> interface that can be used for storage of view-specific state information.</para>
    </summary>
    <param name="grfMode">
      <para>Type: <b>DWORD</b></para>
      <para>Read/write access of the <see cref="IStream" /> interface. This may be one of the following values.</para>
      <h4>STGM_READ</h4>
      <para>Requests an <see cref="IStream" /> suitable for reading.</para>
      <h4>STGM_WRITE</h4>
      <para>Requests an <see cref="IStream" /> suitable for writing.</para>
      <h4>STGM_READWRITE</h4>
      <para>Requests an <see cref="IStream" /> suitable for reading and writing.</para>
    </param>
    <param name="ppStrm">
      <para>Type: <b><see cref="IStream" />**</b></para>
      <para>The address that receives the <see cref="IStream" /> interface pointer.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is used to save and restore the persistent state for a view (the icon positions, the column widths, and the current scroll position, for example).</para>
      <h3>Notes to Calling Applications</h3>
      <para>Use <b>GetViewStateStream</b> when the view is being created to read in the saved view state and also when the view is being closed to save any changes to the view state. Typically, the view calls this method with <b>STGM_READ</b> when creating a view window and with <b>STGM_WRITE</b> when the <see cref="SaveViewState" /> method of its <see cref="IShellView" /> interface is called.</para>
      <h3>Notes to Implementers</h3>
      <para>Each Shell view should have its own view stream. Windows Explorer implements a most recently used (MRU) list of view streams that are stored on a per-user basis in the registry.</para>
      <para>See also <see cref="IShellBrowser" /></para>
    </remarks>
  </member>
  <member name="IShellBrowser.InsertMenusSB">
    <summary>
      <para>Allows the container to insert its menu groups into the composite menu that is displayed when an extended namespace is being viewed or used.</para>
    </summary>
    <param name="hmenuShared">
      <para>Type: <b>HMENU</b></para>
      <para>A handle to an empty menu.</para>
    </param>
    <param name="lpMenuWidths">
      <para>Type: <b>LPOLEMENUGROUPWIDTHS</b></para>
      <para>The address of an <see cref="OLEMENUGROUPWIDTHS" /> array of six <b>LONG</b> values. The container fills in elements 0, 2, and 4 to reflect the number of menu elements it provided in the File, View, and Window menu groups.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns <b>S_OK</b> if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is similar to the <see cref="IOleInPlaceFrame.InsertMenus" /> method. Windows Explorer puts <b>File</b> and <b>Edit</b> drop-down menus in the File menu group, <b>View</b> and <b>Tools</b> menus in the Container menu group, and a <b>Help</b> menu in the Window menu group. Each drop-down menu will have a unique identifier, FCIDM_MENU_FILE/EDIT/VIEW/TOOLS/HELP. The view is allowed to insert menu items into those submenus by their identifiers, which is different from OLE's in-place activation mechanism. The command identifiers for menus that the view inserts into either Windows Explorer's submenus or its own submenus must be between <b>FCIDM_SHVIEWFIRST</b> and <b>FCIDM_SHVIEWLAST</b>.</para>
      <h3>Notes to Calling Applications</h3>
      <para>This method is called by namespace extensions when they are first being activated so they can insert their menus into the frame-level user interface.</para>
      <para>The object application asks the container to add its menus to the menu specified in the <i>hmenuShared</i> parameter and to set the group counts in the <see cref="OLEMENUGROUPWIDTHS" /> array pointed to by the <i>lpMenuWidths</i> parameter. The object application then adds its own menus and counts. Objects can call the <see cref="IOleInPlaceFrame.InsertMenus" /> method as many times as necessary to build up the composite menus. The container should use the initial menu handle associated with the composite menu for all items in the drop-down menus.</para>
      <h3>Notes to Implementers</h3>
      <para>For <see cref="IShellBrowser" /> implementations, the menu identifiers must be in the range of <b>FCIDM_BROWSERFIRST</b> to <b>FCIDM_BROWSERLAST</b>.</para>
    </remarks>
  </member>
  <member name="IShellBrowser.OnViewWindowActive">
    <summary>
      <para>Called by the Shell view when the view window or one of its child windows gets the focus or becomes active.</para>
    </summary>
    <param name="pshv">
      <para>Type: <b><see cref="IShellView" />*</b></para>
      <para>Address of the view object's <see cref="IShellView" /> pointer.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>The view must pass its <see cref="IShellView" /> implementation to this routine, although the current version of Windows Explorer does not use this parameter.</para>
      <h3>Notes to Callers</h3>
      <para>The Shell view object must call this method before calling the <see cref="IShellBrowser.InsertMenusSB" /> method. This method will insert a different set of menu items depending on whether the view has the focus.</para>
      <h3>Notes to Implementers</h3>
      <para>This method informs the browser that the view is getting the focus (when the mouse is clicked on the view, for example).</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.QueryActiveShellView">
    <summary>
      <para>Retrieves the currently active (displayed) Shell view object.</para>
    </summary>
    <param name="ppshv">
      <para>Type: <b><see cref="IShellView" />**</b></para>
      <para>The address of the pointer to the currently active Shell view object.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <h3>Notes to Calling Applications</h3>
      <para>Because the <see cref="IShellBrowser" /> interface can host several Shell views simultaneously, this method provides an easy way to determine the active Shell view object.</para>
    </remarks>
  </member>
  <member name="IShellBrowser.RemoveMenusSB">
    <summary>
      <para>Permits the container to remove any of its menu elements from the in-place composite menu and to free all associated resources.</para>
    </summary>
    <param name="hmenuShared">
      <para>Type: <b>HMENU</b></para>
      <para>A handle to the in-place composite menu that was constructed by calls to <see cref="IShellBrowser.InsertMenusSB" /> and the  <see cref="InsertMenu" /> function.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns S_OK if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is similar to the <see cref="IOleInPlaceFrame.RemoveMenus" /> method.</para>
      <para>The object should always permit the container to remove its menu elements from the composite menu before deactivating the shared user interface.</para>
      <h3>Notes to Calling Applications</h3>
      <para>The method is called by the object application while it is being UI-deactivated so the browser can remove its menus.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.SendControlMsg">
    <summary>
      <para>Sends control messages to either the toolbar or the status bar in a Windows Explorer window.</para>
    </summary>
    <param name="id">
      <para>Type: <b>UINT</b></para>
      <para>An identifier for either a toolbar (<b>FCW_TOOLBAR</b>) or for a status bar window (<b>FCW_STATUS</b>).</para>
    </param>
    <param name="uMsg">
      <para>Type: <b>UINT</b></para>
      <para>The message to be sent to the control.</para>
    </param>
    <param name="wParam">
      <para>Type: <b>WPARAM</b></para>
      <para>The value depends on the message specified in the <i>uMsg</i> parameter.</para>
    </param>
    <param name="lParam">
      <para>Type: <b>LPARAM</b></para>
      <para>The value depends on the message specified in the <i>uMsg</i> parameter.</para>
    </param>
    <param name="pret">
      <para>Type: <b>LRESULT*</b></para>
      <para>The address of the return value of the
<see cref="SendMessage" /> function.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns <b>S_OK</b> if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>Refer to the <a href="https://docs.microsoft.com//windows/desktop/Controls/common-controls-intro">Common Controls</a> documentation for more information on the messages that can be sent to the toolbar or status bar control.</para>
      <h3>Notes to Calling Applications</h3>
      <para>Use of this call requires diligent attention, because leaving either the status bar or toolbar in an inappropriate state will affect the performance of Windows Explorer.</para>
      <h3>Notes to Implementers</h3>
      <para>If your Windows Explorer does not have these controls, you can return <b>E_NOTIMPL</b>.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.SetMenuSB">
    <summary>
      <para>Installs the composite menu in the view window.</para>
    </summary>
    <param name="hmenuShared">
      <para>Type: <b>HMENU</b></para>
      <para>A handle to the composite menu constructed by calls to <see cref="IShellBrowser.InsertMenusSB" /> and the <see cref="InsertMenu" /> function.</para>
    </param>
    <param name="holemenuRes">
      <para>Type: <b>HOLEMENU</b></para>
    </param>
    <param name="hwndActiveObject">
      <para>Type: <b>HWND</b></para>
      <para>The view's window handle.</para>
    </param>
    <returns>
      <para>Type: <b>RESULT</b></para>
      <para>Returns <b>S_OK</b> if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is similar to the <see cref="IOleInPlaceFrame.SetMenu" /> method. However, Windows Explorer performs menu dispatch based on the menu item identifier.</para>
      <para>The availability of specific menu items depends on whether the view has the focus. Accordingly, it is necessary to call the <see cref="IShellBrowser.OnViewWindowActive" /> method whenever the view window (or one of its child windows) has the focus.</para>
      <h3>Notes to Calling Applications</h3>
      <para>The object calls <b>IShellBrowser_SetMenuSB</b> to ask the container to install the composite menu structure set up by calls to <see cref="IShellBrowser.InsertMenusSB" />.</para>
      <h3>Notes to Implementers</h3>
      <para>A container's implementation of this method should call the <b>SetMenu</b> function.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.SetStatusTextSB">
    <summary>
      <para>Sets and displays status text about the in-place object in the container's frame-window status bar.</para>
    </summary>
    <param name="pszStatusText">
      <para>Type: <b>LPCWSTR</b></para>
      <para>A pointer to a null-terminated character string that contains the message to display.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>It is also possible to send messages directly to the status window by using the <see cref="IShellBrowser.SendControlMsg" /> method.</para>
      <h3>Notes to Calling Applications</h3>
      <para>Use this method to set the contents of the status bar.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser.TranslateAcceleratorSB">
    <summary>
      <para>Translates accelerator keystrokes intended for the browser's frame while the view is active.</para>
    </summary>
    <param name="pmsg">
      <para>Type: <b>LPMSG</b></para>
      <para>The address of an <see cref="MSG" /> structure containing the keystroke message.</para>
    </param>
    <param name="wID">
      <para>Type: <b>WORD</b></para>
      <para>The command identifier value corresponding to the keystroke in the container-provided accelerator table. Containers should use this value instead of translating again.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>Returns <b>S_OK</b> if successful, or a COM-defined error value otherwise.</para>
    </returns>
    <remarks>
      <para>This method is similar to the <see cref="IOleInPlaceFrame.TranslateAccelerator" /> method.</para>
    </remarks>
    <seealso cref="IShellBrowser" />
  </member>
  <member name="IShellBrowser">
    <summary>
      <para>Implemented by hosts of Shell views (objects that implement <see cref="IShellView" />). Exposes methods that provide services for the view it is hosting and other objects that run in the context of the Explorer window.</para>
    </summary>
    <remarks>
      <para>Windows Explorer and the <b>Open File</b> common dialog box are examples of implementations of this interface. It is a companion to the <see cref="IShellView" /> interface exposed by extensions.</para>
      <para>Objects that have access to the site chain of the browser can get a reference to the browser on <b>IShellBrowser</b> using  <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/cc678966(v=vs.85)">IServiceProvider.QueryService</a>, with Service IDs such as SID_STopLevelBrowser and SID_SCommDlgBrowser. See the Knowledge Base article <a href="https://support.microsoft.com/kb/257717">Retrieve the Top-Level IWebBrowser2 Interface from an ActiveX Control</a> for more information on using service IDs.</para>
      <para>
        <b>Windows 7 and later</b>.  Windows Explorer context menus  can support in-place navigation by using  <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/cc678966(v=vs.85)">IServiceProvider.QueryService</a> with the Service ID SID_SlnPlaceBrowser.</para>
    </remarks>
    <seealso cref="IOleWindow" />
    <seealso cref="IShellView" />
  </member>
</doc>