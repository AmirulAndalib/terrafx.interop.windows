<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IKnownFolder.GetCategory">
    <summary>Retrieves the category—virtual, fixed, common, or per-user—of the selected folder.</summary>
    <param name="pCategory">When this method returns, contains a pointer to the <see cref="KF_CATEGORY" /> of the selected folder.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetFolderDefinition">
    <summary>Retrieves a structure that contains the defining elements of a known folder, which includes the folder's category, name, path, description, tooltip, icon, and other properties.</summary>
    <param name="pKFD">When this method returns, contains a pointer to the <see cref="KNOWNFOLDER_DEFINITION" /> structure. When no longer needed, the calling application is responsible for calling <see cref="FreeKnownFolderDefinitionFields" /> to free this resource.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetFolderType">
    <summary>Retrieves the folder type.</summary>
    <param name="pftid">When this returns, contains a pointer to a <a href="https://docs.microsoft.com//windows/desktop/shell/foldertypeid">FOLDERTYPEID</a> (a GUID) that identifies the known folder type.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetId">
    <summary>Gets the ID of the selected folder.</summary>
    <param name="pkfid">When this method returns, returns the <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> value of the known folder. Note, <b>KNOWNFOLDERID</b> values are GUIDs.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetIDList">
    <summary>Gets the location of the Shell namespace folder in the IDList (<see cref="ITEMIDLIST" />) form.</summary>
    <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="ppidl">When this method returns, contains the address of an absolute PIDL. This parameter is passed uninitialized. The calling application is responsible for freeing this resource when it is no longer needed.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetPath">
    <summary>Retrieves the path of a known folder as a string.</summary>
    <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="ppszPath">When this method returns, contains the address of a pointer to a null-terminated buffer that contains the path. The calling application is responsible for calling <see cref="CoTaskMemFree" /> to free this resource when it is no longer needed.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetRedirectionCapabilities">
    <summary>Gets a value that states whether the known folder can have its path set to a new value or what specific restrictions or prohibitions are placed on that redirection.</summary>
    <param name="pCapabilities">When this method returns, contains a pointer to a <see cref="KF_REDIRECTION_CAPABILITIES" /> value that indicates the redirection capabilities for this folder.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.GetShellItem">
    <summary>Retrieves the location of a known folder in the Shell namespace in the form of a Shell item (<see cref="IShellItem" /> or derived interface).</summary>
    <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="riid">A reference to the IID of the requested interface.</param>
    <param name="ppv">When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellItem" /> or <see cref="IShellItem2" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder.SetPath">
    <summary>Assigns a new path to a known folder.</summary>
    <param name="dwFlags">
      <para>Either zero or the following value:</para>
      <h4>KF_FLAG_DONT_UNEXPAND</h4>
      <para>Set the full path without environment strings. If this flag is not set, portions of the path at <i>pszPath</i> may be represented by environment strings such as <code>%USERPROFILE%</code>.</para>
    </param>
    <param name="pszPath">Pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length. If this value is <b>NULL</b>, the <b>IKnownFolder.SetPath</b> sets the path to the default value.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IKnownFolder">
    <summary>Exposes methods that allow an application to retrieve information about a known folder's category, type, GUID, pointer to an item identifier list (PIDL) value, redirection capabilities, and definition. It provides a method for the retrieval of a known folder's <see cref="IShellItem" /> object. It also provides methods to get or set the path of the known folder.</summary>
  </member>
</doc>