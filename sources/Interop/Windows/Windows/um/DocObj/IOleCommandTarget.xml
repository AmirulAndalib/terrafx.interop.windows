<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleCommandTarget.Exec">
    <summary>
      <para>Executes the specified command or displays help for the command.</para>
    </summary>
    <param name="pguidCmdGroup">
      <para>The unique identifier of the command group; can be <b>NULL</b> to specify the standard group.</para>
    </param>
    <param name="nCmdID">
      <para>The command to be executed. This command must belong to the group specified with <i>pguidCmdGroup</i>.</para>
    </param>
    <param name="nCmdexecopt">
      <para>Specifies how the object should execute the command. Possible values are taken from the <see cref="OLECMDEXECOPT" /> and <see cref="OLECMDID_WINDOWSTATE_FLAG" /> enumerations.</para>
    </param>
    <param name="pvaIn">
      <para>A pointer to a <see cref="VARIANTARG" /> structure containing input arguments. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pvaOut">
      <para>Pointer to a VARIANTARG structure to receive command output. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_UNKNOWNGROUP</b>
            </para>
          </description>
          <description>
            <para>The <i>pguidCmdGroup</i> parameter is not <b>NULL</b> but does not specify a recognized command group.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The <i>nCmdID</i> parameter is not a valid command in the group identified by <i>pguidCmdGroup</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_DISABLED</b>
            </para>
          </description>
          <description>
            <para>The command identified by <i>nCmdID</i> is currently disabled and cannot be executed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_NOHELP</b>
            </para>
          </description>
          <description>
            <para>The caller has asked for help on the command identified by <i>nCmdID</i>, but no help is available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_CANCELED</b>
            </para>
          </description>
          <description>
            <para>The user canceled the execution of the command.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The list of input and output arguments of a command and how they are packaged is unique to each command. Such information should be documented with the specification of the command group. (See the description of OLECMDID_ZOOM in the <see cref="OLECMDID" /> enumeration.) In the absence of any specific information the command is assumed to take no arguments and have no return value.</para>
      <h3>Notes to Callers</h3>
      <para>The <i>pguidCmdGroup</i> and <i>nCmdID</i> parameters together uniquely identify the command to invoke. The <i>nCmdExecOpt</i> parameter specifies the exact action to be taken. (See the <see cref="OLECMDEXECOPT" /> enumeration for more details.)</para>
      <para>Most commands neither take arguments nor return values. For such commands, the caller can pass <b>NULL</b> in <i>pvaIn</i> and <i>pvaOut</i>. For commands that expect one or more input values, the caller can declare and initialize a VARIANTARG variable and pass a pointer to that variable in pvaIn. If the input to the command is a single value, the argument can be stored directly in the VARIANTARG structure and passed to the function. If the command expects multiple arguments, those arguments must be packaged appropriately within the VARIANTARG, using one of the supported types (such as <b>IDispatch</b> or <b>SAFEARRAY</b>).</para>
      <para>If a command returns one or more arguments, the caller is expected to declare a VARIANTARG, initialize it to VT_EMPTY, and pass its address in pvaOut. If the command returns a single value, then the object can store that value directly in pvaOut. If the command has multiple output values, then it will package those in some way appropriate for the VARIANTARG.</para>
      <para>Because <i>pvaIn</i> and <i>pvOut</i> are both caller-allocated, stack variables are permitted for both the caller and the object receiving the call. For commands that take zero or one argument on input and return zero or one value, no additional memory allocation is necessary. Most of the types supported by VARIANTARG do not require memory allocation. Exceptions include <b>SAFEARRAY</b> and <b>BSTR</b>.</para>
      <h3>Notes to Implementers</h3>
      <para>A command target must implement this function; E_NOTIMPL is not a valid return value.</para>
    </remarks>
    <seealso cref="IOleCommandTarget" />
    <seealso cref="OLECMDEXECOPT" />
  </member>
  <member name="IOleCommandTarget.QueryStatus">
    <summary>
      <para>Queries the object for the status of one or more commands generated by user interface events.</para>
    </summary>
    <param name="pguidCmdGroup">
      <para>The unique identifier of the command group; can be <b>NULL</b> to specify the standard group. All the commands that are passed in the <i>prgCmds</i> array must belong to the group specified by <i>pguidCmdGroup</i>.</para>
    </param>
    <param name="cCmds">
      <para>The number of commands in the <i>prgCmds</i> array.</para>
    </param>
    <param name="prgCmds">
      <para>A caller-allocated array of <see cref="OLECMD" /> structures that indicate the commands for which the caller needs status information. This method fills the <b>cmdf</b> member of each structure with values taken from the <see cref="OLECMDF" /> enumeration.</para>
    </param>
    <param name="pCmdText">
      <para>A pointer to an <see cref="OLECMDTEXT" /> structure in which to return name and/or status information of a single command. This parameter can be <b>NULL</b> to indicate that the caller does not need this information.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The operation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The <i>prgCmds</i> argument is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>OLECMDERR_E_UNKNOWNGROUP</b>
            </para>
          </description>
          <description>
            <para>The <i>pguidCmdGroup</i> parameter is not <b>NULL</b> but does not specify a recognized command group.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Callers use <b>QueryStatus</b> to determine which commands are supported by a target object. The caller can then disable unavailable commands that would otherwise be routed to the object. The caller can also use this method to get the name or status of a single command.</para>
    </remarks>
    <seealso cref="IOleCommandTarget" />
    <seealso cref="OLECMD" />
    <seealso cref="OLECMDF" />
    <seealso cref="OLECMDTEXT" />
  </member>
  <member name="IOleCommandTarget">
    <summary>
      <para>Enables objects and their containers to dispatch commands to each other. For example, an object's toolbars may contain buttons for commands such as <b>Print</b>, <b>Print Preview</b>, <b>Save</b>, <b>New</b>, and <b>Zoom</b>.</para>
      <para>Normal in-place activation guidelines recommend that you remove or disable such buttons because no efficient, standard mechanism has been available to dispatch them to the container. Similarly, a container has heretofore had no efficient means to send commands such as <b>Print</b>, <b>Page Setup</b>, and <b>Properties</b> to an in-place active object. Such simple command routing could have been handled through existing OLE Automation standards and the <b>IDispatch</b> interface, but the overhead with IDispatch is more than is required in the case of document objects. The <b>IOleCommandTarget</b> interface provides a simpler means to achieve the same ends.</para>
      <para>Available commands are defined by integer identifiers in a group. The group itself is identified with a GUID. The interface allows a caller both to query for support of one or more commands within a group and to issue a supported command to the object.</para>
    </summary>
  </member>
</doc>