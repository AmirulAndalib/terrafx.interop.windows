<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleDocumentSite.ActivateMe">
    <summary>
      <para>Asks a document site to activate the document making the call as a document object rather than an in-place-active object and, optionally, specifies which view of the object document to activate.</para>
    </summary>
    <param name="pViewToActivate">
      <para>A pointer to an <see cref="IOleDocumentView" /> interface pointer that represents the document view to be used in activating the document object. This parameter can be <b>NULL</b>, in which case the container should call <see cref="IOleDocument.CreateView" /> to obtain a document view pointer.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success.</para>
    </returns>
    <remarks>
      <para>When a container calls <see cref="IOleObject.DoVerb" /> to activate a document, a document object bypasses the usual in-place activation sequence by calling <b>IOleDocumentSite.ActivateMe</b>.</para>
      <para>When calling <see cref="IOleObject.DoVerb" /> on a document object, the most appropriate activation verb is usually OLEIVERB_SHOW. Other allowable verbs include OLEIVERB_PRIMARY and OLEIVERB_UIACTIVATE. OLEIVERB_OPEN is discouraged because it means opening an embedded object in a separate window, which is contrary to the intent of document object activation.</para>
      <h3>Notes to Callers</h3>
      <para>Only document objects should call this method. A normal in-place active document should respond to a container's call to <see cref="IOleObject.DoVerb" /> by calling <see cref="IOleInPlaceSite" />.</para>
      <para>A document object should initiate its activation by calling <b>IOleDocumentSite.ActivateMe</b>. If the container does not implement <see cref="IOleDocumentSite" />, then the document should default to the normal in-place activation sequence.</para>
      <para>A document object that supports more than one view of its data can specify which view to activate by passing a pointer to that view's <see cref="IOleDocumentView" /> interface in <i>pViewToActivate</i>.</para>
      <para>However the <see cref="IOleDocumentView" /> pointer is obtained, the container should release the pointer when it is no longer needed.</para>
      <h3>Notes to Implementers</h3>
      <para>This function must be completely implemented in a document object container; E_NOTIMPL is not an acceptable return value.</para>
      <para>If a document object passes an <see cref="IOleDocumentView" /> pointer in <i>pViewToActivate</i>, the container's implementation of <b>IOleDocumentSite.ActivateMe</b> should call <see cref="IOleDocumentView.SetInPlaceSite" /> and pass a pointer to its <see cref="IOleInPlaceSite" /> interface back to the view object. If the container is holding onto the <b>IOleDocumentView</b> pointer, which will normally be the case, it should follow the call to <b>IOleDocumentView.SetInPlaceSite</b> with a call to <see cref="IUnknown.AddRef" />.</para>
      <para>If <i>pViewToActivate</i> is <b>NULL</b>, the container can obtain a pointer to a document view by querying the document for <see cref="IOleDocument" />, then calling <see cref="IOleDocument.CreateView" /> and passing its <see cref="IOleInPlaceSite" /> pointer.</para>
    </remarks>
    <seealso cref="IOleClientSite" />
    <seealso cref="IOleDocument.CreateView" />
    <seealso cref="IOleDocumentSite" />
    <seealso cref="IOleDocumentView.SetInPlaceSite" />
    <seealso cref="IOleInPlaceSite" />
    <seealso cref="IOleObject.DoVerb" />
  </member>
  <member name="IOleDocumentSite">
    <summary>
      <para>Enables a document that has been implemented as a document object to bypass the normal activation sequence for in-place-active objects and to directly instruct its client site to activate it as a document object. A client site with this ability is called a document site.</para>
      <para>For each document object to be hosted, a container must provide a corresponding document site, which is an OLE Documents client site that, in addition to implementing <see cref="IOleClientSite" /> and <see cref="IAdviseSink" />, also implements <b>IOleDocumentSite</b>. Each document site implements a separate document view site object for each view of a document to be activated. The document view site implements <see cref="IOleInPlaceSite" /> and, optionally, <see cref="IContinueCallback" />.</para>
    </summary>
    <seealso cref="IOleClientSite" />
    <seealso cref="IOleControlSite" />
    <seealso cref="IOleInPlaceSite" />
  </member>
</doc>