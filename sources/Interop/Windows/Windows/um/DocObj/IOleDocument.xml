<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleDocument.CreateView">
    <summary>
      <para>Creates a document view object in the caller's process and obtains a pointer to that object's <see cref="IOleDocumentView" /> interface.</para>
    </summary>
    <param name="pIPSite">
      <para>A pointer to the <see cref="IOleInPlaceSite" /> interface that represents the view site object to be associated with the new document view object. This parameter can be <b>NULL</b>, for example, when the view is contained in a new, uninitialized document object, in which case the caller must initialize the view with a subsequent call to <see cref="IOleDocumentView.SetInPlaceSite" />.</para>
    </param>
    <param name="pstm">
      <para>A pointer to a stream containing data from which the new document view object should initialize itself. If <b>NULL</b>, the document object initializes the new document view object with a default state.</para>
    </param>
    <param name="dwReserved">
      <para>This parameter is reserved and must be zero.</para>
    </param>
    <param name="ppView">
      <para>A pointer to an <see cref="IOleDocumentView" /> pointer variable that receives the interface pointer to the new document view object. When successful, the caller is responsible for calling <see cref="IUnknown.Release" /> on the <i>ppview</i> pointer when the view object is no longer needed.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The operation failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory available for the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>ppView</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A document object container's document site calls <b>CreateView</b> to instruct a document object to create a new view of itself in the container's process, either from default data or using the contents of an existing stream.</para>
      <para>Calling <b>CreateView</b> does not cause the new view to display itself. To do so requires a call to either <see cref="IOleDocumentView.Show" /> or <see cref="IOleDocumentView.UIActivate" />.</para>
    </remarks>
    <seealso cref="IOleDocument" />
    <seealso cref="IOleDocumentSite.ActivateMe" />
    <seealso cref="IOleDocumentView.ApplyViewState" />
    <seealso cref="IOleDocumentView.SetInPlaceSite" />
    <seealso cref="IOleDocumentView.Show" />
    <seealso cref="IOleDocumentView.UIActivate" />
  </member>
  <member name="IOleDocument.EnumViews">
    <summary>
      <para>Creates an object that enumerates the views supported by a document object, or if only one view is supported, returns a pointer to that view.</para>
    </summary>
    <param name="ppEnum">
      <para>A pointer to an <see cref="IEnumOleDocumentViews" /> pointer variable that receives the interface pointer to the enumerator object.</para>
    </param>
    <param name="ppView">
      <para>A pointer to an <see cref="IOleDocumentView" /> pointer variable that receives the interface pointer to a single view object.</para>
    </param>
    <returns>
      <para>This method returns S_OK if the object supports multiple views, then <i>ppEnum</i> contains a pointer to the enumerator object, and <i>ppView</i> is <b>NULL</b>. Otherwise, <i>ppEnum</i> is <b>NULL</b>, and <i>ppView</i> contains an interface pointer on the single view.</para>
      <para>Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory available for the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>ppEnum</i> or <i>ppView</i> is invalid. The caller must pass valid pointers for both arguments.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a document object supports multiple views of its data, it must also implement <see cref="IEnumOleDocumentViews" /> and pass that interface's pointer in the out parameter <i>ppEnum</i>. Using this pointer, the container can enumerate the views supported by the document object.</para>
      <para>If the document object supports only a single view, <b>IOleDocument.EnumViews</b> passes that view's <see cref="IOleDocumentView" /> pointer in the out parameter <i>ppView</i>.</para>
    </remarks>
    <seealso cref="IEnumOleDocumentViews" />
    <seealso cref="IOleDocument" />
    <seealso cref="IOleDocumentView" />
  </member>
  <member name="IOleDocument.GetDocMiscStatus">
    <summary>
      <para>Retrieves status information about the document object.</para>
    </summary>
    <param name="pdwStatus">
      <para>A pointer to the information on supported behaviors. Possible values are taken from the <see cref="DOCMISC" /> enumeration.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>The address in <i>pdwStatus</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method provides a way for containers to ascertain whether a document object supports multiple views, complex rectangles, opening in a pop-up window, or file read/write.</para>
      <para>Values from this enumerator are also stored in the registry as the value of the DocObject key.</para>
      <h3>Notes to Callers</h3>
      <para>By calling this method prior to activating a document object, containers can take whatever steps are necessary to support or otherwise accommodate the specified behaviors.</para>
      <h3>Notes to Implementers</h3>
      <para>This method must be completely implemented in any document object, even if the dereferenced value of <i>pdwStatus</i> is zero. E_NOTIMPL is not an acceptable return value. Normally, the returned <see cref="DOCMISC" /> value should be hard-coded for performance.</para>
    </remarks>
    <seealso cref="DOCMISC" />
    <seealso cref="IOleDocument" />
  </member>
  <member name="IOleDocument">
    <summary>
      <para>Enables a document object to communicate to containers its ability to create views of its data. This interface also enables a document object to enumerate its views and to provide containers with miscellaneous information about itself, such as whether it supports multiple views or complex rectangles.</para>
    </summary>
    <seealso cref="IOleCommandTarget" />
    <seealso cref="IOleDocumentSite" />
    <seealso cref="IOleDocumentView" />
    <seealso cref="IPrint" />
  </member>
</doc>