<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPropertyStorage.DeleteMultiple">
    <summary>
      <para>The <b>DeleteMultiple</b> method deletes as many of the indicated properties as exist in this property set.</para>
    </summary>
    <param name="cpspec">
      <para>The numerical count of properties to be deleted. The value of this parameter can  legally be set to zero, however that defeats the purpose of the method as no properties are thereby deleted, regardless of the value set in <i>rgpspec</i>.</para>
    </param>
    <param name="rgpspec">
      <para>Properties to be deleted. A mixture of property identifiers and string-named properties is permitted. There may be duplicates, and there is no requirement that properties be specified in any order.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>
        <b>IPropertyStorage.DeleteMultiple</b> must delete as many of the indicated properties as are in the current property set. If a deletion of a stream- or storage-valued property occurs while that property is open, the deletion will succeed and place the previously returned
<see cref="IStream" /> or
<see cref="IStorage" /> pointer in the reverted state.</para>
    </remarks>
  </member>
  <member name="IPropertyStorage.DeletePropertyNames">
    <summary>
      <para>The <b>DeletePropertyNames</b> method deletes specified string names from the current property set.</para>
    </summary>
    <param name="cpropid">
      <para>The size on input of the array <i>rgpropid</i>. If 0, no property names are deleted.</para>
    </param>
    <param name="rgpropid">
      <para>Property identifiers for which string names are to be deleted.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>For each property identifier in <i>rgpropid</i>, <b>IPropertyStorage.DeletePropertyNames</b> removes any corresponding name-to-property ID mapping. An attempt is silently ignored to delete the name of a property that either does not exist or does not currently have a string name associated with it. This method has no effect on the properties themselves.</para>
      <para>
        <b>Note</b>  All the stored string property names can be deleted by deleting property identifier zero, but <i>cpropid</i> must be equal to 1 for this to be a valid parameter error.</para>
    </remarks>
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.ReadPropertyNames" />
  </member>
  <member name="IPropertyStorage.Enum">
    <summary>
      <para>The <b>Enum</b> method creates an enumerator object designed to enumerate data of type
<see cref="STATPROPSTG" />, which contains information on the current property set. On return, this method supplies a pointer to the
<see cref="IEnumSTATPROPSTG" /> pointer on this object.</para>
    </summary>
    <param name="ppenum">
      <para>Pointer to
<see cref="IEnumSTATPROPSTG" /> pointer variable that receives the interface pointer to the new enumerator object.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>
        <b>IPropertyStorage.Enum</b> creates an enumeration object that can be used to iterate
<see cref="STATPROPSTG" /> structures. On return, this method supplies a pointer to an instance of the
<see cref="IEnumSTATPROPSTG" /> interface on this object, whose methods you can call to obtain information about the current property set.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/enumall-sample">EnumAll Sample</seealso>
    <seealso cref="IEnumSTATPROPSTG" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/ienumstatpropstg-compound-file-implementation">IEnumSTATPROPSTG - Compound File Implementation</seealso>
    <seealso cref="IPropertyStorage" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/samples">Samples</seealso>
  </member>
  <member name="IPropertyStorage.ReadMultiple">
    <summary>
      <para>The
<b>ReadMultiple</b> method
reads specified properties from the current property set.</para>
    </summary>
    <param name="cpspec">
      <para>The numeric count of properties to be specified in the <i>rgpspec</i> array. The value of this parameter can  be set to zero; however, that defeats the purpose of the method as no properties are thereby read, regardless of the values set in <i>rgpspec</i>.</para>
    </param>
    <param name="rgpspec">
      <para>An array of
<see cref="PROPSPEC" /> structures specifies which properties are  read. Properties can be specified either by a property ID or by an optional string name. It is not necessary to specify properties in any particular order in the array. The array can contain duplicate properties, resulting in duplicate property values on return for simple properties. Nonsimple properties should return access denied on an attempt to open them a second time. The array can contain a mixture of property IDs and string IDs.</para>
    </param>
    <param name="rgpropvar">
      <para>Caller-allocated array of a
<see cref="PROPVARIANT" /> structure that, on return, contains the values of the properties specified by the corresponding elements in the <i>rgpspec</i> array. The array must be at least large enough to hold values of the <i>cpspec</i> parameter of the
<b>PROPVARIANT</b> structure. The <i>cpspec</i> parameter specifies the number of properties set in the array. The caller is not required to initialize these
<b>PROPVARIANT</b> structure values in any specific  order. However, the implementation must fill all members correctly on return. If there is no other appropriate value, the implementation must set the <b>vt</b> member of each
<b>PROPVARIANT</b> structure to <b>VT_EMPTY</b>.</para>
    </param>
    <returns>
      <para>This method supports the standard return value <b>E_UNEXPECTED</b>, as well as the following:</para>
      <para>This function can also return any file system errors or Win32 errors wrapped in an <b>HRESULT</b> data type. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/com/error-handling-strategies">Error Handling Strategies</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Stg/property-storage-considerations">Property Storage Considerations</a>.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/enumall-sample">EnumAll Sample</seealso>
    <seealso cref="IPropertySetStorage" />
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.WriteMultiple" />
    <seealso cref="IPropertyStorage.WritePropertyNames" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/samples">Samples</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/stgcreatepropsetstg-sample">StgCreatePropSetStg Sample</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/writeread-sample">WriteRead Sample</seealso>
  </member>
  <member name="IPropertyStorage.ReadPropertyNames">
    <summary>
      <para>The <b>ReadPropertyNames</b> method retrieves any existing string names for the specified property IDs.</para>
    </summary>
    <param name="cpropid">
      <para>The number of elements on input of the array <i>rgpropid</i>.  The value of this parameter can be set to zero, however that defeats the purpose of this method as no property names are thereby read.</para>
    </param>
    <param name="rgpropid">
      <para>An array of property IDs for which names are to be retrieved.</para>
    </param>
    <param name="rglpwstrName">
      <para>A caller-allocated array of size <i>cpropid</i> of <b>LPWSTR</b> members. On return, the implementation fills in this array. A given entry contains either the corresponding string name of a property ID or it can be empty if the property ID has no string names.</para>
      <para>Each <b>LPWSTR</b> member of the array should be freed using the
<see cref="CoTaskMemFree" /> function.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>For each property ID in the list of property IDs supplied in the <i>rgpropid</i> array, <b>ReadPropertyNames</b> retrieves the corresponding string name, if there is one. String names are created either by specifying the names in calls to
<see cref="IPropertyStorage.WriteMultiple" /> when creating the property, or through a call to <see cref="IPropertyStorage.WritePropertyNames" />. In either case, the string name is optional, however all properties must have a property ID.</para>
      <para>String names mapped to property IDs must be unique within the set.</para>
    </remarks>
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.WriteMultiple" />
    <seealso cref="IPropertyStorage.WritePropertyNames" />
  </member>
  <member name="IPropertyStorage.Revert">
    <summary>
      <para>The <b>Revert</b> method discards all changes to the named property set since it was last opened or discards changes that were last committed to the property set. This method has no effect on a direct-mode property set.</para>
    </summary>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>For transacted-mode property sets, this method discards all changes that have been made in this property set since the set was opened or since the time it was last committed, (whichever is later). After this operation, any existing storage- or stream-valued properties that have been opened from the property set being reverted are no longer valid and cannot be used. The error STG_E_REVERTED will be returned on all calls, except those to <b>Release</b>, using these streams or storages.</para>
      <para>For direct-mode property sets, this request is ignored and returns S_OK.</para>
    </remarks>
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.Commit" />
  </member>
  <member name="IPropertyStorage.SetClass">
    <summary>
      <para>The <b>SetClass</b> method assigns a new CLSID to the current property storage object, and persistently stores the CLSID with the object.</para>
    </summary>
    <param name="clsid">
      <para>New CLSID to be associated with the property set.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>Assigns a CLSID to the current property storage object. The CLSID has no relationship to the stored property IDs. Assigning a CLSID allows a piece of code to be associated with a given instance of a property set; such code, for example, might manage the user interface (UI). Different CLSIDs can be associated with different property set instances that have the same FMTID.</para>
      <para>If the property set is created with the <i>pclsid</i> parameter of the <see cref="IPropertySetStorage.Create" /> method specified as <b>NULL</b>, the CLSID is set to all zeroes.</para>
      <para>The current CLSID on a property storage object can be retrieved with a call to
<see cref="IPropertyStorage.Stat" />. The initial value for the CLSID can be specified at the time that the storage is created with a call to <see cref="IPropertySetStorage.Create" />.</para>
      <para>Setting the CLSID on a nonsimple property set (one that can legally contain storage- or stream-valued properties, as described in <see cref="IPropertySetStorage.Create" />) also sets the CLSID on the underlying sub-storage.</para>
    </remarks>
    <seealso cref="IPropertySetStorage.Create" />
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.Stat" />
  </member>
  <member name="IPropertyStorage.SetTimes">
    <summary>
      <para>The <b>SetTimes</b> method sets the modification, access, and creation times of this property set, if supported by the implementation. Not all implementations support all these time values.</para>
    </summary>
    <param name="pctime">
      <para>Pointer to the new creation time for the property set. May be <b>NULL</b>, indicating that this time is not to be modified by this call.</para>
    </param>
    <param name="patime">
      <para>Pointer to the new access time for the property set. May be <b>NULL</b>, indicating that this time is not to be modified by this call.</para>
    </param>
    <param name="pmtime">
      <para>Pointer to the new modification time for the property set. May be <b>NULL</b>, indicating that this time is not to be modified by this call.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>Sets the modification, access, and creation times of the current open property set, if supported by the implementation (not all implementations support all these time values). Unsupported time stamps are always reported as zero, enabling the caller to test for support. A call to <see cref="IPropertyStorage.Stat" /> supplies (among other data) time-stamp information.</para>
      <para>Notice that this functionality is provided as an
<see cref="IPropertyStorage" /> method on a property-storage object that is already open, in contrast to being provided as a method in
<see cref="IPropertySetStorage" />. Normally, when the
<b>SetTimes</b> method is not explicitly called, the access and modification times are updated as a side effect of reading and writing the property set. When
<b>SetTimes</b> is used, the latest specified times supersede either default times or time values specified in previous calls to
<b>SetTimes</b>.</para>
    </remarks>
    <seealso cref="FILETIME" />
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.Stat" />
  </member>
  <member name="IPropertyStorage.Stat">
    <summary>
      <para>The <b>Stat</b> method retrieves information about the current open property set.</para>
    </summary>
    <param name="pstatpsstg">
      <para>Pointer to a
<see cref="STATPROPSETSTG" /> structure, which contains statistics about the current open property set.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
    </returns>
    <remarks>
      <para>
        <b>IPropertyStorage.Stat</b> fills in and returns a pointer to a
<see cref="STATPROPSETSTG" /> structure, containing statistics about the current property set.</para>
    </remarks>
    <seealso cref="FILETIME" />
    <seealso cref="IPropertySetStorage.Enum" />
    <seealso cref="IPropertyStorage" />
    <seealso cref="STATPROPSETSTG" />
  </member>
  <member name="IPropertyStorage.WriteMultiple">
    <summary>
      <para>The
<b>WriteMultiple</b> method
writes a specified group of properties to the current property set. If a property with a specified name or property identifier already exists, it is replaced, even when the old and new types for the property value are different. If a property of a given name or property ID does not exist, it is created.</para>
    </summary>
    <param name="cpspec">
      <para>The number of properties set. The value of this parameter can be set to zero; however, this defeats the purpose of the method as no properties are then written.</para>
    </param>
    <param name="rgpspec">
      <para>An array of the property IDs (<see cref="PROPSPEC" />) to which properties are set. These need not be in any particular order, and may contain duplicates, however the last specified property ID is the one that takes effect. A mixture of property IDs and string names is permitted.</para>
    </param>
    <param name="rgpropvar">
      <para>An array (of size <i>cpspec</i>) of
<see cref="PROPVARIANT" /> structures that contain the property values to be written. The array must be the size specified by <i>cpspec</i>.</para>
    </param>
    <param name="propidNameFirst">
      <para>The minimum value for the property IDs that the method must assign if the <i>rgpspec</i> parameter specifies string-named properties for which no property IDs currently exist. If all string-named properties specified already exist in this set, and thus already have property IDs, this value is ignored. When not ignored, this value must be greater than, or equal to, two and less than 0x80000000. Property IDs 0 and 1 and greater than 0x80000000 are reserved for special use.</para>
    </param>
    <returns>
      <para>This method supports the standard return value E_UNEXPECTED, in addition to the following:</para>
      <para>This function can also return any file system errors or Win32 errors wrapped in an <b>HRESULT</b> data type. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/com/error-handling-strategies">Error Handling Strategies</a>.</para>
    </returns>
    <remarks>
      <para>If a specified property already exists, its value is replaced with the one specified in <i>rgpspec</i>, even when the old and new types for the property value are different. If the specified property does not already exist, that property is created. The changes are not persisted to the underlying storage until <see cref="IPropertyStorage.Commit" /> has been called.</para>
      <para>Property names are stored in a special dictionary section of the property set, which maps such names to property IDs. All properties have an ID, but names are optional. A string name is supplied by specifying PRSPEC_LPWSTR in the <b>ulKind</b> member of the
<see cref="PROPSPEC" /> structure. If a string name is supplied for a property, and the name does not already exist in the dictionary, the method will allocate a property ID, and add the property ID and the name to the dictionary. The property ID is allocated in such a way that it does not conflict with other IDs in the property set. The value of the property ID also is no less than the value specified by the <i>propidNameFirst</i> parameter. If the <i>rgpspec</i> parameter specifies string-named properties for which no property IDs currently exist, the <i>propidNameFirst</i> parameter specifies the minimum value for the property IDs that the
<b>WriteMultiple</b> method must assign.</para>
      <para>When a new property set is created, the special <b>codepage (</b><a href="https://msdn.microsoft.com/">Property ID 1</a><b>)</b> and <b>Locale ID (</b><a href="https://msdn.microsoft.com/">Property ID 0x80000000</a><b>)</b> properties are written to the property set automatically. These properties can subsequently be read, using the <see cref="IPropertyStorage.ReadMultiple" /> method, by specifying property IDs with the header-defined PID_CODEPAGE and PID_LOCALE values, respectively. If a property set is non-empty — has one or more properties in addition to the <b>codepage</b> and <b>Locale ID</b> properties or has one or more names in its dictionary — the special <b>codepage</b> and <b>Locale ID</b> properties cannot be modified by calling <b>IPropertyStorage.WriteMultiple</b>. However, if the property set is empty, one or both of these special properties can be modified.</para>
      <para>If an element in the <i>rgspec</i> array is set with a PRSPEC_PROPID value of 0xffffffff (PID_ILLEGAL), the corresponding value in the <i>rgvar</i> array is ignored by <b>IPropertyStorage.WriteMultiple</b>. For example, if this method is called with the <i>cspec</i> parameter set to 3, but <i>rgpspec[1].prspec</i> is set to PRSPEC_PROPID and <i>rgpspec[1].propid</i> is set to PID_ILLEGAL, only two properties will be written. The <i>rgpropvar[1]</i> element is silently ignored.</para>
      <para>Use the
<see cref="PropVariantInit" /> macro to initialize
<see cref="PROPVARIANT" /> structures.</para>
      <para>Property sets, not including the data for nonsimple properties, are limited to 256 KB in size for Windows NT 4.0 and earlier. For Windows 2000, Windows XP and Windows Server 2003, OLE property sets are limited to 1 MB.  If these limits are exceeded, the operation fails and the caller receives an error message. There is no possibility of a memory leak or overrun. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Stg/managing-property-sets">Managing Property Sets</a>.</para>
      <para>Unless PROPSETFLAG_CASE_SENSITIVE is passed to <see cref="IPropertySetStorage.Create" />, property set names are case insensitive. Specifying a property by its name in <b>IPropertyStorage.WriteMultiple</b> will result in a case-insensitive search of the names in the property set. To compare case-insensitive strings, the locale of the strings must be known. For more information, see
<see cref="IPropertyStorage.WritePropertyNames" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Stg/property-storage-considerations">Property Storage Considerations</a>.</para>
    </remarks>
    <seealso cref="IPropertySetStorage.Create" />
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.ReadMultiple" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/managing-property-sets">Managing Property Sets</seealso>
    <seealso cref="PROPVARIANT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/samples">Samples</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/stgcreatepropsetstg-sample">StgCreatePropSetStg Sample</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/writeread-sample">WriteRead Sample</seealso>
  </member>
  <member name="IPropertyStorage.WritePropertyNames">
    <summary>
      <para>The
<b>WritePropertyNames</b> method
assigns string <see cref="IPropertyStorage" /> names to a specified array of property IDs in the current property set.</para>
    </summary>
    <param name="cpropid">
      <para>The size on input of the array <i>rgpropid</i>. Can be zero.  However, making it zero causes this method to become non-operational.</para>
    </param>
    <param name="rgpropid">
      <para>An array of the property IDs for which names are to be set.</para>
    </param>
    <param name="rglpwstrName">
      <para>An array of new names to be assigned to the corresponding property IDs in the <i>rgpropid</i> array. These names may not exceed 255 characters (not including the <b>NULL</b> terminator).</para>
    </param>
    <returns>
      <para>This method supports the standard return value <b>E_UNEXPECTED</b>, in addition to the following:</para>
    </returns>
    <remarks>
      <para>For more information about property sets and memory management, see
<a href="https://docs.microsoft.com//windows/desktop/Stg/managing-property-sets">Managing Property Sets</a>.</para>
      <para>
        <b>IPropertyStorage.WritePropertyNames</b> assigns string names to property IDs passed to the method in the <i>rgpropid</i> array. It associates each string name in the <i>rglpwstrName</i> array with the respective property ID in <i>rgpropid</i>. It is explicitly valid to define a name for a property ID that is not currently present in the property storage object.</para>
      <para>It is also valid to change the mapping for an existing string name (determined by a case-insensitive match). That is, you can use the
<b>WritePropertyNames</b> method to map an existing name to a new property ID, or to map a new name to a property ID that already has a name in the dictionary. In either case, the original mapping is deleted. Property names must be unique (as are property IDs) within the property set.</para>
      <para>The storage of string property names preserves the case. Unless <b>PROPSETFLAG_CASE_SENSITIVE</b> is passed to
<see cref="IPropertySetStorage.Create" />, property set names are case insensitive by default. With case-insensitive property sets, the name strings passed by the caller are interpreted according to the locale of the property set, as specified by the <b>PID_LOCALE</b> property. If the property set has no locale property, the current user is assumed by default. String property names are limited in length to 128 characters. Property names that begin with the binary Unicode characters 0x0001 through 0x001F are reserved for future use.</para>
      <para>If the value of an element in the <i>rgpropid</i> array parameter is set to 0xffffffff (PID_ILLEGAL), the corresponding name is ignored by <b>IPropertyStorage.WritePropertyNames</b>. For example, if this method is called with a <i>cpropid</i> parameter of 3, but the first element of the array, <i>rgpropid[1]</i>, is set to <b>PID_ILLEGAL</b>, then only two property names are written. The <i>rgpropid[1]</i> element is ignored.</para>
    </remarks>
    <seealso cref="IPropertyStorage" />
    <seealso cref="IPropertyStorage.ReadMultiple" />
    <seealso cref="IPropertyStorage.ReadPropertyNames" />
    <seealso cref="IPropertyStorage.WriteMultiple" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/samples">Samples</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/writeread-sample">WriteRead Sample</seealso>
  </member>
  <member name="IPropertyStorage">
    <summary>
      <para>The <b>IPropertyStorage</b> interface manages the persistent properties of a single property set. Persistent properties consist of information that can be stored persistently in a property set, such as the summary information associated with a file. This contrasts with run-time properties associated with Controls and Automation, which can be used to affect system behavior. Use the methods of the
<see cref="IPropertySetStorage" /> interface to create or open a persistent property set. An instance of the
<b>IPropertySetStorage</b> interface can manage zero or more
<b>IPropertyStorage</b> instances.</para>
      <para>Each property within a property set is identified by a property identifier (ID), a four-byte <b>ULONG</b> value unique to that set. You can also assign a string name to a property through the
<b>IPropertyStorage</b> interface.</para>
      <para>Property IDs differ from the dispatch IDs used in Automation <b>dispid</b> property name tags. One difference is that the general-purpose use of property ID values zero and one is prohibited in
<b>IPropertyStorage</b>, while no such restriction exists in <b>IDispatch</b>. In addition, while there is significant overlap among the data types for property values that may be used in
<b>IPropertyStorage</b> and <b>IDispatch</b>, the property sets are not identical. Persistent property data types used in
<b>IPropertyStorage</b> methods are defined in the
<see cref="PROPVARIANT" /> structure.</para>
      <para>The
<b>IPropertyStorage</b> interface can be used to access both simple and nonsimple property sets. Nonsimple property sets can hold several complex property types that cannot be held in a simple property set. For more information see
<a href="https://docs.microsoft.com//windows/desktop/Stg/storage-vs--stream-for-a-property-set">Storage and Stream Objects for a Property Set</a>.</para>
    </summary>
    <seealso cref="IEnumSTATPROPSETSTG" />
    <seealso cref="IEnumSTATPROPSTG" />
    <seealso cref="IPropertySetStorage" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/ipropertystorage-compound-file-implementation">IPropertyStorage-Compound File Implementation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/ipropertystorage-ntfs-file-system-implementation">IPropertyStorage-NTFS File System Implementation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/ipropertystorage-stand-alone-implementation">IPropertyStorage-Stand-alone Implementation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/managing-properties">Managing
Properties</seealso>
    <seealso cref="PROPVARIANT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/property-storage-considerations">Property
Storage Considerations</seealso>
    <seealso cref="STATPROPSETSTG" />
    <seealso cref="STATPROPSTG" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/samples">Samples</seealso>
  </member>
</doc>