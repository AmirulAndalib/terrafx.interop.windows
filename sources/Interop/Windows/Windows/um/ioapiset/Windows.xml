<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CancelIo">
    <summary>
      <para>Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The function does not cancel I/O operations that other threads issue for a file handle.</para>
      <para>To cancel I/O operations from another thread, use the <a href="https://docs.microsoft.com//windows/desktop/FileIO/cancelioex-func">CancelIoEx</a> function.</para>
    </summary>
    <param name="hFile">
      <para>A handle to the file.</para>
      <para>The function cancels all pending I/O operations for this file handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. The cancel operation for all pending I/O operations issued by the calling thread for the specified file handle was successfully requested. The thread can use the <see cref="GetOverlappedResult" /> function to determine when the I/O operations themselves have been completed.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.CancelIoEx">
    <summary>Marks any outstanding I/O operations for the specified file handle. The function only cancels I/O operations in the current process, regardless of which thread created the I/O operation.</summary>
    <param name="hFile">A handle to the file.</param>
    <param name="lpOverlapped">
      <para>A pointer to an <see cref="OVERLAPPED" /> data structure that contains the data used for asynchronous I/O.</para>
      <para>If this parameter is <b>NULL</b>, all I/O requests for the <i>hFile</i>parameter are canceled.</para>
      <para>If this parameter is not <b>NULL</b>, only those specific I/O requests that were issued for the file with the specified <i>lpOverlapped</i> overlapped structure are marked as canceled, meaning that you can cancel one or more requests, while the<a href="https://docs.microsoft.com//windows/desktop/FileIO/cancelio">CancelIo</a> function cancels all outstanding requests on a file handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. The cancel operation for all pending I/O operations issued by the calling process for the specified file handle was successfully requested. The application must not free or reuse the <see cref="OVERLAPPED" /> structure associated with the canceled I/O operations until they have completed. The thread can use the<see cref="GetOverlappedResult" /> function to determine when the I/O operations themselves have been completed.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>If this function cannot find a request to cancel, the return value is 0 (zero), and<see cref="GetLastError" /> returns<b>ERROR_NOT_FOUND</b>.</para>
    </returns>
  </member>
  <member name="Windows.CancelSynchronousIo">
    <summary>Marks pending synchronous I/O operations that are issued by the specified thread as canceled.</summary>
    <param name="hThread">A handle to the thread.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>If this function cannot find a request to cancel, the return value is 0 (zero), and<see cref="GetLastError" /> returns<b>ERROR_NOT_FOUND</b>.</para>
    </returns>
  </member>
  <member name="Windows.DeviceIoControl">
    <summary>
      <para>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</para>
      <para>See the <a href="https://github.com/microsoft/windows-classic-samples/tree/master/samples/win7samples/winbase/io/dledit">Assign drive letter sample</a>.</para>
    </summary>
    <param name="hDevice">A handle to the device on which the operation is to be performed. The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the<see cref="CreateFile" /> function. For more information, see Remarks.</param>
    <param name="dwIoControlCode">
      <para>The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.</para>
      <para>For a list of the control codes, see Remarks. The documentation for each control code provides usage details for the <i>lpInBuffer</i>, <i>nInBufferSize</i>,<i>lpOutBuffer</i>, and <i>nOutBufferSize</i> parameters.</para>
    </param>
    <param name="lpInBuffer">
      <para>A pointer to the input buffer that contains the data required to perform the operation. The format of this data depends on the value of the <i>dwIoControlCode</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> if <i>dwIoControlCode</i> specifies an operation that does not require input data.</para>
    </param>
    <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
    <param name="lpOutBuffer">
      <para>A pointer to the output buffer that is to receive the data returned by the operation. The format of this data depends on the value of the <i>dwIoControlCode</i> parameter.</para>
      <para>This parameter can be <b>NULL</b> if <i>dwIoControlCode</i> specifies an operation that does not return data.</para>
    </param>
    <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
    <param name="lpBytesReturned">
      <para>A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</para>
      <para>If the output buffer is too small to receive any data, the call fails,<see cref="GetLastError" /> returns<b>ERROR_INSUFFICIENT_BUFFER</b>, and <i>lpBytesReturned</i> is zero.</para>
      <para>If the output buffer is too small to hold all of the data but can hold some entries, some drivers will return as much data as fits. In this case, the call fails,<see cref="GetLastError" /> returns<b>ERROR_MORE_DATA</b>, and <i>lpBytesReturned</i> indicates the amount of data received. Your application should call<b>DeviceIoControl</b> again with the same operation, specifying a new starting point.</para>
      <para>If <i>lpOverlapped</i> is <b>NULL</b>,<i>lpBytesReturned</i> cannot be <b>NULL</b>. Even when an operation returns no output data and <i>lpOutBuffer</i> is <b>NULL</b>,<b>DeviceIoControl</b> makes use of<i>lpBytesReturned</i>. After such an operation, the value of<i>lpBytesReturned</i> is meaningless.</para>
      <para>If <i>lpOverlapped</i> is not <b>NULL</b>,<i>lpBytesReturned</i> can be <b>NULL</b>. If this parameter is not<b>NULL</b> and the operation returns data, <i>lpBytesReturned</i> is meaningless until the overlapped operation has completed. To retrieve the number of bytes returned, call<see cref="GetOverlappedResult" />. If<i>hDevice</i> is associated with an I/O completion port, you can retrieve the number of bytes returned by calling<see cref="GetQueuedCompletionStatus" />.</para>
    </param>
    <param name="lpOverlapped">
      <para>A pointer to an <see cref="OVERLAPPED" /> structure.</para>
      <para>If <i>hDevice</i> was opened without specifying<b>FILE_FLAG_OVERLAPPED</b>, <i>lpOverlapped</i> is ignored.</para>
      <para>If <i>hDevice</i> was opened with the <b>FILE_FLAG_OVERLAPPED</b> flag, the operation is performed as an overlapped (asynchronous) operation. In this case,<i>lpOverlapped</i> must point to a valid<see cref="OVERLAPPED" /> structure that contains a handle to an event object. Otherwise, the function fails in unpredictable ways.</para>
      <para>For overlapped operations,<b>DeviceIoControl</b> returns immediately, and the event object is signaled when the operation has been completed. Otherwise, the function does not return until the operation has been completed or an error occurs.</para>
    </param>
    <returns>
      <para>If the operation completes successfully, the return value is nonzero (TRUE).</para>
      <para>If the operation fails or is pending, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetOverlappedResult">
    <summary>Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device. To specify a timeout interval or wait on an alertable thread, use <see cref="GetOverlappedResultEx" />.</summary>
    <param name="hFile">
      <para>A handle to the file, named pipe, or communications device. This is the same handle that was specified when the overlapped operation was started by a call to any of the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="ReadFile" />
          </description>
        </item>
        <item>
          <description>
            <see cref="WriteFile" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ConnectNamedPipe" />
          </description>
        </item>
        <item>
          <description>
            <see cref="TransactNamedPipe" />
          </description>
        </item>
        <item>
          <description>
            <see cref="DeviceIoControl" />
          </description>
        </item>
        <item>
          <description>
            <see cref="WaitCommEvent" />
          </description>
        </item>
        <item>
          <description>
            <see cref="ReadDirectoryChangesW" />
          </description>
        </item>
        <item>
          <description>
            <see cref="LockFileEx" />
          </description>
        </item>
      </list>
    </param>
    <param name="lpOverlapped">A pointer to an<see cref="OVERLAPPED" /> structure that was specified when the overlapped operation was started.</param>
    <param name="lpNumberOfBytesTransferred">A pointer to a variable that receives the number of bytes that were actually transferred by a read or write operation. For a<see cref="TransactNamedPipe" /> operation, this is the number of bytes that were read from the pipe. For a<see cref="DeviceIoControl" /> operation, this is the number of bytes of output data returned by the device driver. For a<see cref="ConnectNamedPipe" /> or<see cref="WaitCommEvent" /> operation, this value is undefined.</param>
    <param name="bWait">If this parameter is <b>TRUE</b>, and the <b>Internal</b> member of the <i>lpOverlapped</i> structure is <b>STATUS_PENDING</b>, the function does not return until the operation has been completed. If this parameter is <b>FALSE</b> and the operation is still pending, the function returns <b>FALSE</b> and the<see cref="GetLastError" /> function returns <b>ERROR_IO_INCOMPLETE</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetOverlappedResultEx">
    <summary>Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device within the specified time-out interval. The calling thread can perform an alertable wait.</summary>
    <param name="hFile">A handle to the file, named pipe, or communications device. This is the same handle that was specified when the overlapped operation was started by a call to the<see cref="ReadFile" />,<see cref="WriteFile" />,<see cref="ConnectNamedPipe" />,<see cref="TransactNamedPipe" />,<see cref="DeviceIoControl" />, or<see cref="WaitCommEvent" /> function.</param>
    <param name="lpOverlapped">A pointer to an<see cref="OVERLAPPED" /> structure that was specified when the overlapped operation was started.</param>
    <param name="lpNumberOfBytesTransferred">A pointer to a variable that receives the number of bytes that were actually transferred by a read or write operation. For a<see cref="TransactNamedPipe" /> operation, this is the number of bytes that were read from the pipe. For a<see cref="DeviceIoControl" /> operation, this is the number of bytes of output data returned by the device driver. For a<see cref="ConnectNamedPipe" /> or<see cref="WaitCommEvent" /> operation, this value is undefined.</param>
    <param name="dwMilliseconds">
      <para>The time-out interval, in milliseconds.</para>
      <para>If <i>dwMilliseconds</i> is zero and the operation is still in progress, the function returns immediately and the <see cref="GetLastError" /> function returns <b>ERROR_IO_INCOMPLETE</b>.</para>
      <para>If <i>dwMilliseconds</i> is nonzero and the operation is still in progress, the function waits until the object is signaled, an I/O completion routine or APC is queued, or the interval elapses before returning. Use <see cref="GetLastError" /> to get extended error information.</para>
      <para>If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function returns only when the object is signaled or an I/O completion routine or APC is queued.</para>
      <para>
        <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:</b>The <i>dwMilliseconds</i> value includes time spent in low-power states. For example, the timeout continues counting down while the computer is asleep.</para>
      <para>
        <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:</b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not continue counting down while the computer is asleep.</para>
    </param>
    <param name="bAlertable">
      <para>If this parameter is <b>TRUE</b> and the calling thread is in the waiting state, the function returns when the system queues an I/O completion routine or APC. The calling thread then runs the routine or function. Otherwise, the function does not return, and the completion routine or APC function is not executed.</para>
      <para>A completion routine is queued when the <see cref="ReadFileEx" /> or <see cref="WriteFileEx" /> function in which it was specified has completed. The function returns and the completion routine is called only if <i>bAlertable</i> is <b>TRUE</b>, and the calling thread is the thread that initiated the read or write operation. An APC is queued when you call <see cref="QueueUserAPC" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />. Common error codes include the following:</para>
      <list type="bullet">
        <item>
          <description>If <i>dwMilliseconds</i> is zero and the operation is still in progress, <see cref="GetLastError" /> returns <b>ERROR_IO_INCOMPLETE</b>.</description>
        </item>
        <item>
          <description>If <i>dwMilliseconds</i> is nonzero, and an I/O completion routine or APC is queued, <see cref="GetLastError" /> returns <b>WAIT_IO_COMPLETION</b>.</description>
        </item>
        <item>
          <description>If <i>dwMilliseconds</i> is nonzero and the specified timeout interval elapses, <see cref="GetLastError" /> returns <b>WAIT_TIMEOUT</b>.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.GetQueuedCompletionStatus">
    <summary>
      <para>Attempts to dequeue an I/O completion packet from the specified I/O completion port. If there is no completion packet queued, the function waits for a pending I/O operation associated with the completion port to complete.</para>
      <para>To dequeue multiple I/O completion packets at once, use the <a href="https://docs.microsoft.com//windows/desktop/FileIO/getqueuedcompletionstatusex-func">GetQueuedCompletionStatusEx</a> function.</para>
    </summary>
    <param name="CompletionPort">A handle to the completion port. To create a completion port, use the<a href="https://docs.microsoft.com//windows/desktop/FileIO/createiocompletionport">CreateIoCompletionPort</a> function.</param>
    <param name="lpNumberOfBytesTransferred">A pointer to a variable that receives the number of bytes transferred in a completed I/O operation.</param>
    <param name="lpCompletionKey">A pointer to a variable that receives the completion key value associated with the file handle whose I/O operation has completed. A completion key is a per-file key that is specified in a call to<a href="https://docs.microsoft.com//windows/desktop/FileIO/createiocompletionport">CreateIoCompletionPort</a>.</param>
    <param name="lpOverlapped">
      <para>A pointer to a variable that receives the address of the<see cref="OVERLAPPED" /> structure that was specified when the completed I/O operation was started.</para>
      <para>Even if you have passed the function a file handle associated with a completion port and a valid<see cref="OVERLAPPED" /> structure, an application can prevent completion port notification. This is done by specifying a valid event handle for the <b>hEvent</b> member of the <b>OVERLAPPED</b> structure, and setting its low-order bit. A valid event handle whose low-order bit is set prevents the completion of the overlapped I/O from enqueing a completion packet to the completion port.</para>
    </param>
    <param name="dwMilliseconds">
      <para>The number of milliseconds that the caller is willing to wait for a completion packet to appear at the completion port. If a completion packet does not appear within the specified time, the function times out, returns <b>FALSE</b>, and sets *<i>lpOverlapped</i> to <b>NULL</b>.</para>
      <para>If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function will never time out. If <i>dwMilliseconds</i> is zero and there is no I/O operation to dequeue, the function will time out immediately.</para>
      <para>
        <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:</b>The <i>dwMilliseconds</i> value includes time spent in low-power states. For example, the timeout continues counting down while the computer is asleep.</para>
      <para>
        <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:</b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not continue counting down while the computer is asleep.</para>
    </param>
    <returns>
      <para>Returns nonzero (<b>TRUE</b>) if successful or zero (<b>FALSE</b>) otherwise.</para>
      <para>To get extended error information, call<see cref="GetLastError" />.</para>
      <para>For more information, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.GetQueuedCompletionStatusEx">
    <summary>
      <para>Retrieves multiple completion port entries simultaneously. It waits for pending I/O operations that are associated with the specified completion port to complete.</para>
      <para>To dequeue I/O completion packets one at a time, use the<see cref="GetQueuedCompletionStatus" /> function.</para>
    </summary>
    <param name="CompletionPort">A handle to the completion port. To create a completion port, use the<a href="https://docs.microsoft.com//windows/desktop/FileIO/createiocompletionport">CreateIoCompletionPort</a> function.</param>
    <param name="lpCompletionPortEntries">
      <para>On input, points to a pre-allocated array of<see cref="OVERLAPPED_ENTRY" /> structures.</para>
      <para>On output, receives an array of <see cref="OVERLAPPED_ENTRY" />structures that hold the entries. The number of array elements is provided by<i>ulNumEntriesRemoved</i>.</para>
      <para>The number of bytes transferred during each I/O, the completion key that indicates on which file each I/O occurred, and the overlapped structure address used in each original I/O are all returned in the<i>lpCompletionPortEntries</i> array.</para>
    </param>
    <param name="ulCount">The maximum number of entries to remove.</param>
    <param name="ulNumEntriesRemoved">A pointer to a variable that receives the number of entries actually removed.</param>
    <param name="dwMilliseconds">
      <para>The number of milliseconds that the caller is willing to wait for a completion packet to appear at the completion port. If a completion packet does not appear within the specified time, the function times out and returns <b>FALSE</b>.</para>
      <para>If <i>dwMilliseconds</i> is <b>INFINITE</b> (0xFFFFFFFF), the function will never time out. If <i>dwMilliseconds</i> is zero and there is no I/O operation to dequeue, the function will time out immediately.</para>
      <para>
        <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:</b>The <i>dwMilliseconds</i> value includes time spent in low-power states. For example, the timeout continues counting down while the computer is asleep.</para>
      <para>
        <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:</b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not continue counting down while the computer is asleep.</para>
    </param>
    <param name="fAlertable">
      <para>If this parameter is <b>FALSE</b>, the function does not return until the time-out period has elapsed or an entry is retrieved.</para>
      <para>If the parameter is <b>TRUE</b> and there are no available entries, the function performs an alertable wait. The thread returns when the system queues an I/O completion routine or APC to the thread and the thread executes the function.</para>
      <para>A completion routine is queued when the <see cref="ReadFileEx" /> or<see cref="WriteFileEx" /> function in which it was specified has completed, and the calling thread is the thread that initiated the operation. An APC is queued when you call<see cref="QueueUserAPC" />.</para>
    </param>
    <returns>
      <para>Returns nonzero (<b>TRUE</b>) if successful or zero (<b>FALSE</b>) otherwise.</para>
      <para>To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostQueuedCompletionStatus">
    <summary>Posts an I/O completion packet to an I/O completion port.</summary>
    <param name="CompletionPort">A handle to an I/O completion port to which the I/O completion packet is to be posted.</param>
    <param name="dwNumberOfBytesTransferred">The value to be returned through the <i>lpNumberOfBytesTransferred</i> parameter of the<see cref="GetQueuedCompletionStatus" /> function.</param>
    <param name="dwCompletionKey">The value to be returned through the <i>lpCompletionKey</i> parameter of the<see cref="GetQueuedCompletionStatus" /> function.</param>
    <param name="lpOverlapped">The value to be returned through the <i>lpOverlapped</i> parameter of the<see cref="GetQueuedCompletionStatus" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" /> .</para>
    </returns>
  </member>
</doc>