<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AddPackageDependency">
    <summary>Adds a run-time reference for the framework package dependency you created earlier by using the <see cref="TryCreatePackageDependency" /> method, with the specified options. After this method successfully returns, your app can activate types and use content from the framework package.</summary>
    <param name="packageDependencyId">The ID of the package dependency to be resolved and added to the invoking process' package graph. This parameter must match a package dependency defined by using the <see cref="TryCreatePackageDependency" /> function for the calling user or the system (via the <see cref="CreatePackageDependencyOptions_ScopeIsSystem" /> option), or else an error is returned.</param>
    <param name="rank">The rank to use to add the resolved package to the caller's package graph. For more information, see the remarks.</param>
    <param name="options">The options to apply when adding the package dependency.</param>
    <param name="packageDependencyContext">The handle of the added package dependency. This handle is valid until it is passed to <see cref="RemovePackageDependency" />.</param>
    <param name="packageFullName">When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the full name of the package to which the dependency has been resolved. The caller is responsible for freeing this resource once it is no longer needed by calling <see cref="HeapFree" />.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <para>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyId</i> or <i>packageDependencyContext</i> parameter is NULL on input. |</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetClrCompat">
    <summary>Retrieves a value indicating the application type of a process so that you can determine whether to enable private reflection and/or make managed objects agile.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyClrCompat" /> enumerated type. When the function returns successfully, the variable contains an enumerated constant value indicating the application type of the identified process.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known application type was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetCreateFileAccess">
    <summary>Retrieves a value indicating whether a process has full or restricted access to the IO devices (file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe).</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyCreateFileAccess" /> enumerated type. When the function returns successfully, the variable contains an enumerated constant value indicating whether the process has full or restricted access to the IO devices.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known create file access policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetLifecycleManagement">
    <summary>Retrieves a value indicating whether a process can be suspended/resumed by the Process Lifecycle Manager (PLM). You can use the value to decide whether to subscribe to relevant notifications from the PLM, or to register for a classic system suspend notification.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyLifecycleManagement" /> enumerated type. When the function returns successfully, the variable contains an enumerated constant value indicating whether the identified process is lifecycle-managed or not.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known lifecycle management policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetMediaFoundationCodecLoading">
    <summary>Retrieves a value indicating whether a process’s policy allows it to load non-Windows (third-party) plugins. You can use the value to decide whether or not to allow non-Windows (third-party) plugins.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyMediaFoundationCodecLoading" /> enumerated type. When the function returns successfully, the variable contains an enumerated constant value indicating the codec-loading policy of the identified process.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known codec-loading policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetProcessTerminationMethod">
    <summary>Retrieves the method used to end a process.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyProcessTerminationMethod" /> enumerated type. When the function returns successfully, the variable contains a value indicating the method used to end the process.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known process termination policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetShowDeveloperDiagnostic">
    <summary>Retrieves the method used for a process to surface developer information, such as asserts, to the user.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyShowDeveloperDiagnostic" /> enumerated type. When the function returns successfully, the variable contains a value indicating the method used for the process to surface developer information, such as asserts, to the user.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known developer information policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetThreadInitializationType">
    <summary>Retrieves the kind of initialization that should be automatically performed for a process when beginthread[ex] creates a thread.</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyThreadInitializationType" /> enumerated type. When the function returns successfully, the variable contains a value indicating the kind of initialization that should be automatically performed for the process when beginthread[ex] creates a thread.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known thread initialization policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.AppPolicyGetWindowingModel">
    <summary>Retrieves a value indicating whether a process uses a CoreWindow-based, or a HWND-based, windowing model. You can use the value to decide how to register for window state change notifications (size changed, visibility changed, etc.).</summary>
    <param name="processToken">A handle that identifies the access token for a process.</param>
    <param name="policy">A pointer to a variable of the <see cref="AppPolicyWindowingModel" /> enumerated type. When the function returns successfully, the variable contains an enumerated constant value indicating the windowing model of the identified process.</param>
    <returns>
      <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
      <para>If no known windowing model policy was found for the process token, the function raises a STATUS_ASSERTION_FAILURE exception and returns ERROR_NOT_FOUND.</para>
      <para>If either processToken or policy are null, the function returns ERROR_INVALID_PARAMETER.</para>
    </returns>
  </member>
  <member name="Windows.ClosePackageInfo">
    <summary>Closes a reference to the specified package information.</summary>
    <param name="packageInfoReference">A reference to package information.</param>
    <returns>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code.</returns>
  </member>
  <member name="Windows.DeletePackageDependency">
    <summary>Deletes the install-time reference for the framework package dependency you created earlier by using the <see cref="TryCreatePackageDependency" /> method. This method informs the OS that it is safe to remove the framework package if no other apps have a dependency on it.</summary>
    <param name="packageDependencyId">The ID of the package dependency to remove.</param>
    <returns>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyId</i> parameter is NULL on input. |</returns>
  </member>
  <member name="Windows.FindPackagesByPackageFamily">
    <summary>Finds the packages with the specified family name for the current user.</summary>
    <param name="packageFamilyName">The package family name.</param>
    <param name="packageFilters">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved. All package constants except <b>PACKAGE_FILTER_ALL_LOADED</b> are supported.</param>
    <param name="count">
      <para>A pointer to a variable that holds the number of package full names that were found.</para>
      <para>First you pass <b>NULL</b> to <i>packageFullNames</i> to get the number of package full names that were found. You use this number to allocate memory space for <i>packageFullNames</i>. Then you pass the address of this memory space to fill <i>packageFullNames</i>.</para>
    </param>
    <param name="packageFullNames">A pointer to memory space that receives the strings of package full names that were found.</param>
    <param name="bufferLength">
      <para>A pointer to a variable that holds the number of characters in the string of package full names.</para>
      <para>First you pass <b>NULL</b> to <i>buffer</i> to get the number of characters. You use this number to allocate memory space for <i>buffer</i>. Then you pass the address of this memory space to fill <i>buffer</i>.</para>
    </param>
    <param name="buffer">A pointer to memory space that receives the string of characters for all of the package full names.</param>
    <param name="packageProperties">A pointer to memory space that receives the <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package properties</a> for all of the packages that were found.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more buffer is not large enough to hold the data. The required size is specified by either <i>count</i> or <i>buffer</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FormatApplicationUserModelId">
    <summary>Constructs an <a href="https://docs.microsoft.com//windows/desktop/appxpkg/appx-packaging-glossary">application user model ID</a> from the <i>package family name</i> and the <i>package relative application ID</i> (PRAID).</summary>
    <param name="packageFamilyName">The package family name.</param>
    <param name="packageRelativeApplicationId">The package-relative app ID (PRAID).</param>
    <param name="applicationUserModelIdLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the app user model ID string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>applicationUserModelId</i> to get the number of characters. You use this number to allocate memory space for <i>applicationUserModelId</i>. Then you pass the address of this memory space to fill <i>applicationUserModelId</i>.</para>
    </param>
    <param name="applicationUserModelId">A pointer to memory space that receives the app user model ID string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>packageFamilyName</i> or <i>packageRelativeApplicationId</i> parameter isn't valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>applicationUserModelId</i> is not large enough to hold the data; the required buffer size, in <b>WCHAR</b>s, is stored in the variable pointed to by <i>applicationUserModelIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetApplicationUserModelId">
    <summary>Gets the <a href="https://docs.microsoft.com//windows/desktop/appxpkg/appx-packaging-glossary">application user model ID</a> for the specified process.</summary>
    <param name="hProcess">A handle to the process. This handle must have the <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more info, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="applicationUserModelIdLength">On input, the size of the <i>applicationUserModelId</i> buffer, in wide characters. On success, the size of the buffer used, including the null terminator.</param>
    <param name="applicationUserModelId">A pointer to a buffer that receives the application user model ID.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_APPLICATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no application identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>applicationUserModelIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetApplicationUserModelIdFromToken">
    <summary>Gets the <a href="https://docs.microsoft.com//windows/desktop/appxpkg/appx-packaging-glossary">application user model ID</a> for the specified token.</summary>
    <param name="token">A token that contains the application identity. This handle must have the <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more info, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="applicationUserModelIdLength">On input, the size of the <i>applicationUserModelId</i> buffer, in wide characters. On success, the size of the buffer used, including the null terminator.</param>
    <param name="applicationUserModelId">A pointer to a buffer that receives the application user model ID.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_APPLICATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The token has no application identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>applicationUserModelIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentApplicationUserModelId">
    <summary>Gets the <a href="https://docs.microsoft.com//windows/desktop/appxpkg/appx-packaging-glossary">application user model ID</a> for the current process.</summary>
    <param name="applicationUserModelIdLength">On input, the size of the <i>applicationUserModelId</i> buffer, in wide characters. On success, the size of the buffer used, including the null terminator.</param>
    <param name="applicationUserModelId">A pointer to a buffer that receives the application user model ID.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_APPLICATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no application identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>applicationUserModelIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackageFamilyName">
    <summary>Gets the package family name for the calling process.</summary>
    <param name="packageFamilyNameLength">On input, the size of the <i>packageFamilyName</i> buffer, in characters, including the null terminator. On output, the size of the package family name returned, in characters, including the null terminator.</param>
    <param name="packageFamilyName">The package family name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFamilyNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackageFullName">
    <summary>Gets the package full name for the calling process.</summary>
    <param name="packageFullNameLength">On input, the size of the <i>packageFullName</i> buffer, in characters. On output, the size of the package full name returned, in characters, including the null terminator.</param>
    <param name="packageFullName">The package full name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFullNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackageId">
    <summary>Gets the package identifier (ID) for the calling process.</summary>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the structure returned, in bytes.</param>
    <param name="buffer">The package ID, represented as a <see cref="PACKAGE_ID" /> structure.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackageInfo">
    <summary>Gets the package information for the calling process.</summary>
    <param name="flags">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved. The <b>PACKAGE_FILTER_*</b> flags are supported.</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the array of structures returned, in bytes.</param>
    <param name="buffer">The package information, represented as an array of <see cref="PACKAGE_INFO" /> structures.</param>
    <param name="count">The number of structures in the buffer.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackageInfo2">
    <summary>Gets the package information for the calling process, with the option to specify the type of folder path to retrieve for the package.</summary>
    <param name="flags">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved. The <b>PACKAGE_FILTER_*</b> flags are supported.</param>
    <param name="packagePathType">Indicates the type of folder path to retrieve for the package (the original install folder or the mutable folder).</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the array of structures returned, in bytes.</param>
    <param name="buffer">The package information, represented as an array of <see cref="PACKAGE_INFO" /> structures.</param>
    <param name="count">The number of structures in the buffer.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackagePath">
    <summary>Gets the package path for the calling process.</summary>
    <param name="pathLength">On input, the size of the <i>path</i> buffer, in characters. On output, the size of the package path returned, in characters, including the null terminator.</param>
    <param name="path">The package path.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetCurrentPackagePath2">
    <summary>Gets the package path for the calling process, with the option to specify the type of folder path to retrieve for the package.</summary>
    <param name="packagePathType">Indicates the type of folder path to retrieve for the package (the original install folder or the mutable folder).</param>
    <param name="pathLength">On input, the size of the <i>path</i> buffer, in characters. On output, the size of the package path returned, in characters, including the null terminator.</param>
    <param name="path">The package path.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetIdForPackageDependencyContext">
    <summary>Returns the package dependency for the specified context handle.</summary>
    <param name="packageDependencyContext">The handle of the package dependency to return.</param>
    <param name="packageDependencyId">The ID of the package dependency for the specified context handle. If the package dependency cannot be resolved, the function succeeds but this parameter is <b>nullptr</b> on output. Use the <see cref="HeapAlloc" /> function to allocate memory for this parameter, and use <see cref="HeapFree" /> to deallocate the memory.</param>
    <returns>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyContext</i> or <i>packageDependencyId</i> parameter is NULL on input. |</returns>
  </member>
  <member name="Windows.GetPackageApplicationIds">
    <summary>Gets the IDs of apps in the specified package.</summary>
    <param name="packageInfoReference">A reference to package information.</param>
    <param name="bufferLength">
      <para>A pointer to a variable that holds the size of <i>buffer</i>, in bytes.</para>
      <para>First you pass <b>NULL</b> to <i>buffer</i> to get the required size of <i>buffer</i>. You use this number to allocate memory space for <i>buffer</i>. Then you pass the address of this memory space to fill <i>buffer</i>.</para>
    </param>
    <param name="buffer">A pointer to memory space that receives the app IDs.</param>
    <param name="count">A pointer to a variable that receives the number of app IDs in <i>buffer</i>.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageFamilyName">
    <summary>Gets the package family name for the specified process.</summary>
    <param name="hProcess">A handle to the process that has the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="packageFamilyNameLength">On input, the size of the <i>packageFamilyName</i> buffer, in characters. On output, the size of the package family name returned, in characters, including the null-terminator.</param>
    <param name="packageFamilyName">The package family name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFamilyNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageFamilyNameFromToken">
    <summary>Gets the package family name for the specified token.</summary>
    <param name="token">A token that contains the package identity.</param>
    <param name="packageFamilyNameLength">On input, the size of the <i>packageFamilyName</i> buffer, in characters. On output, the size of the package family name returned, in characters, including the null-terminator.</param>
    <param name="packageFamilyName">The package family name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The token has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFamilyNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageFullName">
    <summary>Gets the package full name for the specified process.</summary>
    <param name="hProcess">A handle to the process that has the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="packageFullNameLength">On input, the size of the <i>packageFullName</i> buffer, in characters. On output, the size of the package full name returned, in characters, including the null terminator.</param>
    <param name="packageFullName">The package full name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFullNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageFullNameFromToken">
    <summary>Gets the package full name for the specified token.</summary>
    <param name="token">A token that contains the package identity.</param>
    <param name="packageFullNameLength">On input, the size of the <i>packageFullName</i> buffer, in characters. On output, the size of the package full name returned, in characters, including the null terminator.</param>
    <param name="packageFullName">The package full name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The token has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFullNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageId">
    <summary>Gets the package identifier (ID) for the specified process.</summary>
    <param name="hProcess">A handle to the process that has the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the structure returned, in bytes.</param>
    <param name="buffer">The package ID, represented as a <see cref="PACKAGE_ID" /> structure.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APPMODEL_ERROR_NO_PACKAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The process has no package identity.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageInfo">
    <summary>Gets the package information for the specified package.</summary>
    <param name="packageInfoReference">A reference to package information.</param>
    <param name="flags">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved.</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the package information returned, in bytes.</param>
    <param name="buffer">The package information, represented as an array of <see cref="PACKAGE_INFO" /> structures.</param>
    <param name="count">The number of packages in the buffer.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackageInfo2">
    <summary>Gets the package information for the specified package, with the option to specify the type of folder path to retrieve for the package.</summary>
    <param name="packageInfoReference">A reference to package information.</param>
    <param name="flags">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved.</param>
    <param name="packagePathType">Indicates the type of folder path to retrieve for the package (the original install folder or the mutable folder).</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the package information returned, in bytes.</param>
    <param name="buffer">The package information, represented as an array of <see cref="PACKAGE_INFO" /> structures.</param>
    <param name="count">The number of packages in the buffer.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackagePath">
    <summary>Gets the path for the specified package.</summary>
    <param name="packageId">The package identifier.</param>
    <param name="reserved">Reserved, do not use.</param>
    <param name="pathLength">On input, the size of the <i>path</i> buffer, in characters. On output, the size of the package path returned, in characters, including the null-terminator.</param>
    <param name="path">The package path.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>path</i> is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackagePathByFullName">
    <summary>Gets the path of the specified package.</summary>
    <param name="packageFullName">The full name of the package.</param>
    <param name="pathLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package path string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>path</i> to get the number of characters. You use this number to allocate memory space for <i>path</i>. Then you pass the address of this memory space to fill <i>path</i>.</para>
    </param>
    <param name="path">A pointer to memory space that receives the package path string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>path</i> is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackagePathByFullName2">
    <summary>Gets the path of the specified package, with the option to specify the type of folder path to retrieve for the package.</summary>
    <param name="packageFullName">The full name of the package.</param>
    <param name="packagePathType">Indicates the type of folder path to retrieve for the package (the original install folder or the mutable folder).</param>
    <param name="pathLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package path string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>path</i> to get the number of characters. You use this number to allocate memory space for <i>path</i>. Then you pass the address of this memory space to fill <i>path</i>.</para>
    </param>
    <param name="path">A pointer to memory space that receives the package path string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>path</i> is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPackagesByPackageFamily">
    <summary>Gets the packages with the specified family name for the current user.</summary>
    <param name="packageFamilyName">The package family name.</param>
    <param name="count">
      <para>A pointer to a variable that holds the number of package full names.</para>
      <para>First you pass <b>NULL</b> to <i>packageFullNames</i> to get the number of package full names. You use this number to allocate memory space for <i>packageFullNames</i>. Then you pass the address of this number to fill <i>packageFullNames</i>.</para>
    </param>
    <param name="packageFullNames">A pointer to the strings of package full names.</param>
    <param name="bufferLength">
      <para>A pointer to a variable that holds the number of characters in the string of package full names.</para>
      <para>First you pass <b>NULL</b> to <i>buffer</i> to get the number of characters. You use this number to allocate memory space for <i>buffer</i>. Then you pass the address of this number to fill <i>buffer</i>.</para>
    </param>
    <param name="buffer">The string of characters for all of the package full names.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more buffer is not large enough to hold the data. The required size is specified by either <i>count</i> or <i>buffer</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetResolvedPackageFullNameForPackageDependency">
    <summary>Returns the package full name that would be used if the package dependency were to be resolved. This function does not add the package to the invoking process' package graph.</summary>
    <param name="packageDependencyId">The ID of the package dependency to be resolved. This parameter must match a package dependency defined by using the <see cref="TryCreatePackageDependency" /> function for the calling user or the system (via the <see cref="CreatePackageDependencyOptions_ScopeIsSystem" /> option), or else an error is returned.</param>
    <param name="packageFullName">The full name of the package to which the dependency has been resolved. If the package dependency cannot be resolved, the function succeeds but this parameter is <b>nullptr</b> on output. Use the <see cref="HeapAlloc" /> function to allocate memory for this parameter, and use <see cref="HeapFree" /> to deallocate the memory.</param>
    <returns>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyId</i> or <i>packageFullName</i> parameter is NULL on input. |</returns>
  </member>
  <member name="Windows.GetStagedPackageOrigin">
    <summary>Gets the origin of the specified package.</summary>
    <param name="packageFullName">The full name of the package.</param>
    <param name="origin">A pointer to a variable that receives a <see cref="PackageOrigin" />-typed value that indicates the origin of the package specified by <i>packageFullName</i>.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>packageFullName</i> parameter isn't valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetStagedPackagePathByFullName">
    <summary>Gets the path of the specified staged package.</summary>
    <param name="packageFullName">The full name of the staged package.</param>
    <param name="pathLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package path string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>path</i> to get the number of characters. You use this number to allocate memory space for <i>path</i>. Then you pass the address of this memory space to fill <i>path</i>.</para>
    </param>
    <param name="path">A pointer to memory space that receives the package path string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>path</i> is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetStagedPackagePathByFullName2">
    <summary>Gets the path of the specified staged package, with the option to specify the type of folder path to retrieve for the package.</summary>
    <param name="packageFullName">The full name of the staged package.</param>
    <param name="packagePathType">Indicates the type of folder path to retrieve for the package (the original install folder or the mutable folder).</param>
    <param name="pathLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package path string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>path</i> to get the number of characters. You use this number to allocate memory space for <i>path</i>. Then you pass the address of this memory space to fill <i>path</i>.</para>
    </param>
    <param name="path">A pointer to memory space that receives the package path string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>path</i> is not large enough to hold the data. The required size is specified by <i>pathLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.OpenPackageInfoByFullName">
    <summary>Opens the package information of the specified package.</summary>
    <param name="packageFullName">The full name of the package.</param>
    <param name="reserved">Reserved; must be 0.</param>
    <param name="packageInfoReference">A reference to package information.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The package is not installed for the current user.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PackageFamilyNameFromFullName">
    <summary>Gets the package family name for the specified package full name.</summary>
    <param name="packageFullName">The full name of a package.</param>
    <param name="packageFamilyNameLength">On input, the size of the <i>packageFamilyName</i> buffer, in characters. On output, the size of the package family name returned, in characters, including the null terminator.</param>
    <param name="packageFamilyName">The package family name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFamilyNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PackageFamilyNameFromId">
    <summary>Gets the package family name for the specified package identifier.</summary>
    <param name="packageId">The package identifier.</param>
    <param name="packageFamilyNameLength">On input, the size of the <i>packageFamilyName</i> buffer, in characters. On output, the size of the package family name returned, in characters, including the null terminator.</param>
    <param name="packageFamilyName">The package family name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFamilyNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PackageFullNameFromId">
    <summary>Gets the package full name for the specified package identifier (ID).</summary>
    <param name="packageId">The package ID.</param>
    <param name="packageFullNameLength">On input, the size of the <i>packageFullName</i> buffer, in characters. On output, the size of the package full name returned, in characters, including the null terminator.</param>
    <param name="packageFullName">The package full name.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>packageFullNameLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PackageIdFromFullName">
    <summary>Gets the package identifier (ID) for the specified package full name.</summary>
    <param name="packageFullName">The full name of a package.</param>
    <param name="flags">The <a href="https://docs.microsoft.com//windows/desktop/appxpkg/package-constants">package constants</a> that specify how package information is retrieved. The <b>PACKAGE_INFORMATION_*</b> flags are supported.</param>
    <param name="bufferLength">On input, the size of <i>buffer</i>, in bytes. On output, the size of the data returned, in bytes.</param>
    <param name="buffer">The package ID, represented as a <see cref="PACKAGE_ID" /> structure.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not large enough to hold the data. The required size is specified by <i>bufferLength</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The package is not installed for the user.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PackageNameAndPublisherIdFromFamilyName">
    <summary>Gets the package name and publisher identifier (ID) for the specified package family name.</summary>
    <param name="packageFamilyName">The family name of a package.</param>
    <param name="packageNameLength">On input, the size of the <i>packageName</i> buffer, in characters. On output, the size of the package name returned, in characters, including the null-terminator.</param>
    <param name="packageName">The package name.</param>
    <param name="packagePublisherIdLength">On input, the size of the <i>packagePublishId</i> buffer, in characters. On output, the size of the publisher ID returned, in characters, including the null-terminator.</param>
    <param name="packagePublisherId">The package publisher ID.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the buffers is not large enough to hold the data. The required sizes are specified by <i>packageNameLength</i> and <i>packagePublisherIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ParseApplicationUserModelId">
    <summary>Deconstructs an <a href="https://docs.microsoft.com//windows/desktop/appxpkg/appx-packaging-glossary">application user model ID</a> to its <i>package family name</i> and <i>package relative application ID</i> (PRAID).</summary>
    <param name="applicationUserModelId">The app user model ID.</param>
    <param name="packageFamilyNameLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package family name string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>packageFamilyName</i> to get the number of characters. You use this number to allocate memory space for <i>packageFamilyName</i>. Then you pass the address of this memory space to fill <i>packageFamilyName</i>.</para>
    </param>
    <param name="packageFamilyName">A pointer to memory space that receives the package family name string, which includes the null-terminator.</param>
    <param name="packageRelativeApplicationIdLength">
      <para>A pointer to a variable that holds the number of characters (<b>WCHAR</b>s) in the package-relative app ID string, which includes the null-terminator.</para>
      <para>First you pass <b>NULL</b> to <i>packageRelativeApplicationId</i> to get the number of characters. You use this number to allocate memory space for <i>packageRelativeApplicationId</i>. Then you pass the address of this memory space to fill <i>packageRelativeApplicationId</i>.</para>
    </param>
    <param name="packageRelativeApplicationId">A pointer to memory space that receives the package-relative app ID (PRAID) string, which includes the null-terminator.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>applicationUserModelId</i> parameter isn't valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer specified by <i>packageFamilyName</i> or <i>packageRelativeApplicationId</i> is not large enough to hold the data; the required buffer size, in <b>WCHAR</b>s, is stored in the variable pointed to by <i>packageFamilyNameLength</i> or <i>packageRelativeApplicationIdLength</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.RemovePackageDependency">
    <summary>Removes a resolved package dependency from the current process' package graph (that is, a run-time reference for a framework package dependency that was added by using the <see cref="AddPackageDependency" /> method).</summary>
    <param name="packageDependencyContext">The handle of the package dependency to remove.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <para>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyContext</i> parameter is NULL on input. |</para>
    </returns>
  </member>
  <member name="Windows.TryCreatePackageDependency">
    <summary>Creates an install-time reference for a framework package dependency for the current app, using the specified package family name, minimum version, and additional criteria.</summary>
    <param name="user">The user scope of the package dependency. If NULL, the caller's user context is used. Must be NULL if <see cref="CreatePackageDependencyOptions_ScopeIsSystem" /> is specified.</param>
    <param name="packageFamilyName">The package family name of the framework package on which to take dependency.</param>
    <param name="minVersion">The minimum version of the framework package on which to take dependency.</param>
    <param name="packageDependencyProcessorArchitectures">The processor architectures of the package dependency.</param>
    <param name="lifetimeKind">The type of artifact to use to define the lifetime of the package dependency. For more information, see the remarks.</param>
    <param name="lifetimeArtifact">The name of the artifact used to define the lifetime of the package dependency. Must be NULL if the <i>lifetimeKind</i> parameter is <see cref="PackageDependencyLifetimeKind_Process" />. For more information, see the remarks.</param>
    <param name="options">The options to apply when creating the package dependency.</param>
    <param name="packageDependencyId">When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the ID of the new package dependency. The caller is responsible for freeing this resource once it is no longer needed by calling <see cref="HeapFree" />.</param>
    <returns>
      <para>If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following.</para>
      <para>| Return code | Description | |-------------|-------------| | E_INVALIDARG | The <i>packageDependencyId</i> parameter is NULL on input. |</para>
    </returns>
  </member>
</doc>