<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IStreamAsync.CancelIo">
    <summary>
      <para>Marks all pending input/output (I/O) operations as canceled.</para>
    </summary>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IStreamAsync.OverlappedResult">
    <summary>
      <para>Retrieves the results of an overlapped operation.</para>
    </summary>
    <param name="lpOverlapped">
      <para>Type: <b>LPOVERLAPPED*</b></para>
      <para>A pointer to the <see cref="OVERLAPPED" /> structure that was specified when the overlapped operation was started.</para>
    </param>
    <param name="lpNumberOfBytesTransferred">
      <para>Type: <b>LPDWORD</b></para>
      <para>When this method returns, contains the number of bytes that were actually transferred by a read or write operation.</para>
    </param>
    <param name="bWait">
      <para>Type: <b>BOOL</b></para>
      <para>If <b>TRUE</b> the method does not return until the operation has been completed.  If <b>FALSE</b> and an operation is pending, the method returns the HRESULT equivalent to ERROR_IO_INCOMPLETE.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="IStreamAsync.ReadAsync">
    <summary>
      <para>Reads information from a stream asynchronously. For example, the Shell implements this interface on file items when transferring them asynchronously.</para>
    </summary>
    <param name="pv">
      <para>Type: <b>void*</b></para>
      <para>When this method returns successfully, returns a buffer that is <i>cb</i> bytes long and contains <i>pcbRead</i> bytes of information from the read operation.</para>
    </param>
    <param name="cb">
      <para>Type: <b>DWORD</b></para>
      <para>The number of bytes to read from the stream.</para>
    </param>
    <param name="pcbRead">
      <para>Type: <b>LPDWORD</b></para>
      <para>Pointer to a <b>DWORD</b> value that, when this method returns successfully, states the actual number of bytes read to the buffer pointed to by <i>pv</i>. This value can be <b>NULL</b>.</para>
    </param>
    <param name="lpOverlapped">
      <para>Type: <b>LPOVERLAPPED</b></para>
      <para>A pointer to an <see cref="OVERLAPPED" /> structure that contains information used in the asynchronous read operation.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>IStreamAsync.ReadAsync</b> should reset the event specified by the <b>hEvent</b> member of the <see cref="OVERLAPPED" /> structure to a nonsignaled state when it begins the input/output (I/O) operation.</para>
      <para>This method has been implemented in the Shell as a thin wrapper around the public <see cref="ReadFile" /> API.</para>
    </remarks>
  </member>
  <member name="IStreamAsync.WriteAsync">
    <summary>
      <para>Writes information to a stream asynchronously. For example, the Shell implements this method on file items when transferring them asynchronously.</para>
    </summary>
    <param name="lpBuffer">
      <para>Type: <b>const void*</b></para>
      <para>A pointer to a buffer of size <i>cb</i> bytes that contains the information to be written to the stream.</para>
    </param>
    <param name="cb">
      <para>Type: <b>DWORD</b></para>
      <para>The size of the buffer pointed to by <i>lpBuffer</i>, in bytes.</para>
    </param>
    <param name="pcbWritten">
      <para>Type: <b>LPDWORD</b></para>
      <para>Pointer to a <b>DWORD</b> value that, when the method returns successfully, states the actual number of bytes written to the stream. This value can be <b>NULL</b> if this information is not needed.</para>
    </param>
    <param name="lpOverlapped">
      <para>Type: <b>LPOVERLAPPED</b></para>
      <para>A pointer to an <see cref="OVERLAPPED" /> structure that contains information used in the asynchronous write operation.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>WriteAsync</b> should reset the event specified by the <b>hEvent</b> member of the <see cref="OVERLAPPED" /> structure to a nonsignaled state when it begins the input/output (I/O) operation.</para>
    </remarks>
  </member>
  <member name="IStreamAsync">
    <summary>
      <para>Exposes methods to manage input/output (I/O) to an asynchronous stream.</para>
    </summary>
  </member>
</doc>