<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.ExpandEnvironmentStrings">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ExpandEnvironmentStringsA">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ExpandEnvironmentStringsW">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ExpandEnvironmentStrings">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ExpandEnvironmentStringsA">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ExpandEnvironmentStringsW">
    <summary>
      <para>Expands environment-variable strings and replaces them with the values defined for the current user.</para>
      <para>To specify the environment block for a particular user or the system, use the <see cref="ExpandEnvironmentStringsForUser" /> function.</para>
    </summary>
    <param name="lpSrc">
      <para>A buffer that contains one or more environment-variable strings in the form: %<i>variableName</i>%. For each such reference, the %<i>variableName</i>% portion is replaced with the current value of that environment variable.</para>
      <para>Case is ignored when looking up the environment-variable name. If the name is not found, the %<i>variableName</i>% portion is left unexpanded.</para>
      <para>Note that this function does not support all the features that Cmd.exe supports. For example, it does not support %<i>variableName</i>:<i>str1</i>=<i>str2</i>% or %<i>variableName</i>:~<i>offset</i>,<i>length</i>%.</para>
    </param>
    <param name="lpDst">A pointer to a buffer that receives the result of expanding the environment variable strings in the <i>lpSrc</i> buffer. Note that this buffer cannot be the same as the <i>lpSrc</i> buffer.</param>
    <param name="nSize">The maximum number of characters that can be stored in the buffer pointed to by the <i>lpDst</i> parameter. When using ANSI strings, the buffer size should be the string length, plus terminating null character, plus one. When using Unicode strings, the buffer size should be the string length plus the terminating null character.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of <b>TCHARs</b> stored in the destination buffer, including the terminating null character. If the destination buffer is too small to hold the expanded string, the return value is the required buffer size, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStrings">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStringsA">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStringsW">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStrings">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStringsA">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FreeEnvironmentStringsW">
    <summary>Frees a block of environment strings.</summary>
    <param name="penv">A pointer to a block of environment strings. The pointer to the block must be obtained by calling the<see cref="GetEnvironmentStrings" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetCommandLine">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetCommandLineA">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetCommandLineW">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetCommandLine">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetCommandLineA">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetCommandLineW">
    <summary>Retrieves the command-line string for the current process.</summary>
    <returns>The return value is a pointer to the command-line string for the current process.</returns>
  </member>
  <member name="Windows.GetEnvironmentStrings">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentStringsA">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentStringsW">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentStrings">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentStringsA">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentStringsW">
    <summary>Retrieves the environment variables for the current process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the environment block of the current process.</para>
      <para>If the function fails, the return value is NULL.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariable">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string. An environment variable has a maximum size limit of 32,767 characters, including the null-terminating character.</param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariableA">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string. An environment variable has a maximum size limit of 32,767 characters, including the null-terminating character.</param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariableW">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string. An environment variable has a maximum size limit of 32,767 characters, including the null-terminating character.</param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariable">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">
      <para>A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
    </param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariableA">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">
      <para>A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
    </param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.GetEnvironmentVariableW">
    <summary>Retrieves the contents of the specified variable from the environment block of the calling process.</summary>
    <param name="lpName">The name of the environment variable.</param>
    <param name="lpBuffer">
      <para>A pointer to a buffer that receives the contents of the specified environment variable as a null-terminated string.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
    </param>
    <param name="nSize">The size of the buffer pointed to by the <i>lpBuffer</i> parameter, including the null-terminating character, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer pointed to by <i>lpBuffer</i>, not including the terminating null character.</para>
      <para>If <i>lpBuffer</i> is not large enough to hold the data, the return value is the buffer size, in characters, required to hold the string and its terminating null character and the contents of <i>lpBuffer</i> are undefined.</para>
      <para>If the function fails, the return value is zero. If the specified environment variable was not found in the environment block,<see cref="GetLastError" /> returns ERROR_ENVVAR_NOT_FOUND.</para>
    </returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePath">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePathA">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePathW">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePath">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePathA">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.NeedCurrentDirectoryForExePathW">
    <summary>Determines whether the current directory should be included in the search path for the specified executable.</summary>
    <param name="ExeName">The name of the executable file.</param>
    <returns>If the current directory should be part of the search path, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
  </member>
  <member name="Windows.SearchPath">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">
      <para>The name of the file for which to search.</para>
      <para>By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend "\\?\" to the path. For more information, see <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a>.</para>
      <blockquote>[!TIP] Starting with Windows 10, Version 1607, you can opt-in to remove the MAX_PATH limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</blockquote>
    </param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchPathA">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">
      <para>The name of the file for which to search.</para>
      <para>By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend "\\?\" to the path. For more information, see <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a>.</para>
      <blockquote>[!TIP] Starting with Windows 10, Version 1607, you can opt-in to remove the MAX_PATH limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</blockquote>
    </param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchPathW">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">
      <para>The name of the file for which to search.</para>
      <para>By default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend "\\?\" to the path. For more information, see <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a>.</para>
      <blockquote>[!TIP] Starting with Windows 10, Version 1607, you can opt-in to remove the MAX_PATH limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com//windows/win32/fileio/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</blockquote>
    </param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchPath">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">The name of the file for which to search.</param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchPathA">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">The name of the file for which to search.</param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchPathW">
    <summary>Searches for a specified file in a specified path.</summary>
    <param name="lpPath">
      <para>The path to be searched for the file.</para>
      <para>If this parameter is <b>NULL</b>, the function searches for a matching file using a registry-dependent system search path. For more information, see the Remarks section.</para>
    </param>
    <param name="lpFileName">The name of the file for which to search.</param>
    <param name="lpExtension">
      <para>The extension to be added to the file name when searching for the file. The first character of the file name extension must be a period (.). The extension is added only if the specified file name does not end with an extension.</para>
      <para>If a file name extension is not required or if the file name contains an extension, this parameter can be<b>NULL</b>.</para>
    </param>
    <param name="nBufferLength">The size of the buffer that receives the valid path and file name (including the terminating null character), in <b>TCHARs</b>.</param>
    <param name="lpBuffer">A pointer to the buffer to receive the path and file name of the file found. The string is a null-terminated string.</param>
    <param name="lpFilePart">A pointer to the variable to receive the address (within <i>lpBuffer</i>) of the last component of the valid path and file name, which is the address of the character immediately following the final backslash (\) in the path.</param>
    <returns>
      <para>If the function succeeds, the value returned is the length, in <b>TCHARs</b>, of the string that is copied to the buffer, not including the terminating null character. If the return value is greater than <i>nBufferLength</i>, the value returned is the size of the buffer that is required to hold the path, including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentStringsW">
    <summary>Sets the environment strings of the calling process (both the system and the user environment variables) for the current process.</summary>
    <param name="NewEnvironment">
      <para>The environment variable string using the following format:</para>
      <para>
        <i>Var1</i>
        <i>Value1</i>
        <i>Var2</i>
        <i>Value2</i>
        <i>Var3</i>
        <i>Value3</i>
        <i>VarN</i>
        <i>ValueN</i>
      </para>
    </param>
    <returns>Returns S_OK on success.</returns>
  </member>
  <member name="Windows.SetEnvironmentVariable">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable. The maximum size of a user-defined environment variable is 32,767 characters. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentVariableA">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable. The maximum size of a user-defined environment variable is 32,767 characters. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentVariableW">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable. The maximum size of a user-defined environment variable is 32,767 characters. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentVariable">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentVariableA">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetEnvironmentVariableW">
    <summary>Sets the contents of the specified environment variable for the current process.</summary>
    <param name="lpName">The name of the environment variable. The operating system creates the environment variable if it does not exist and <i>lpValue</i> is not NULL.</param>
    <param name="lpValue">
      <para>The contents of the environment variable.</para>
      <para>The maximum size of a user-defined environment variable is 32,767 characters. There is no technical limitation on the size of the environment block. However, there are practical limits depending on the mechanism used to access the block. For example, a batch file cannot set a variable that is longer than the maximum command line length. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/environment-variables">Environment Variables</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The total size of the environment block for a process may not exceed 32,767 characters.</para>
      <para>If this parameter is NULL, the variable is deleted from the current process's environment.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetStdHandleEx">
    <summary>Sets the handle for the input, output, or error streams.</summary>
    <param name="nStdHandle">A DWORD indicating the stream for which the handle is being set.</param>
    <param name="hHandle">The handle.</param>
    <param name="phPrevValue">Optional. Receives the previous handle.</param>
    <returns>Returns S_OK on success.</returns>
  </member>
</doc>