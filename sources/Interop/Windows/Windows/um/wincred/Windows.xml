<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CredDelete">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredDeleteA">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredDeleteW">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredDelete">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredDeleteA">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredDeleteW">
    <summary>
      <para>The <b>CredDelete</b> function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to delete.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to delete. Must be one of the CRED_TYPE_* defined types. For a list of the defined types, see the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure.</para>
      <para>If the value of this parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, this function can delete a credential that specifies a user name when there are multiple credentials for the same target. The value of the <i>TargetName</i> parameter must specify the user name as <i>Target</i><b>|</b><i>UserName</i>.</para>
    </param>
    <param name="Flags">
      <para>Reserved and must be zero.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>There is no credential with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredDelete as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredEnumerate">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredEnumerateA">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredEnumerateW">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredEnumerate">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredEnumerateA">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredEnumerateW">
    <summary>
      <para>The <b>CredEnumerate</b> function enumerates the credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="Filter">
      <para>Pointer to a <b>null</b>-terminated string that contains the filter for the returned credentials. Only credentials with a <i>TargetName</i> matching the filter will be returned. The filter specifies a name prefix followed by an asterisk. For instance, the filter "FRED*" will return all credentials with a <i>TargetName</i> beginning with the string "FRED".</para>
      <para>If <b>NULL</b> is specified, all credentials will be returned.</para>
    </param>
    <param name="Flags">
      <para>The value of this parameter can be zero or more of the following values combined with a bitwise-<b>OR</b> operation.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_ENUMERATE_ALL_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>This function enumerates all of the credentials in the user's credential set. The target name of each credential is returned in the "namespace:attribute=target" format. If this flag is set and the <i>Filter</i> parameter is not <b>NULL</b>, the function fails and returns <b>ERROR_INVALID_FLAGS</b>.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials.
The returned credential is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description>1168 (0x490)</description>
              </item>
            </list>
          </description>
          <description>
            <para>No credential exists matching the specified <i>Filter</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description>1312 (0x520)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description>1004 (0x3EC)</description>
              </item>
            </list>
          </description>
          <description>
            <para>A flag that is not valid was specified for the <i>Flags</i> parameter, or <b>CRED_ENUMERATE_ALL_CREDENTIALS</b> is specified for the <i>Flags</i> parameter and the <i>Filter</i> parameter is not <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredEnumerate as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredFindBestCredential">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFindBestCredentialA">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFindBestCredentialW">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFindBestCredential">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFindBestCredentialA">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFindBestCredentialW">
    <summary>
      <para>The <b>CredFindBestCredential</b> function searches the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/credentials-management">Credentials Management</a> (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.</para>
    </summary>
    <param name="TargetName">
      <para>A pointer to a null-terminated string that contains the name of the target resource for which to find credentials.</para>
    </param>
    <param name="Type">
      <para>The type of credentials to search for. Currently, this function supports only <b>CRED_TYPE_GENERIC</b>.</para>
    </param>
    <param name="Flags">
      <para>Reserved.</para>
    </param>
    <param name="Credential">
      <para>The address of a pointer to a <see cref="CREDENTIAL" /> structure that specifies the set of credentials this function finds.</para>
      <para>When you have finished using this structure, free it by calling the <see cref="CredFree" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredFindBestCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredFree">
    <summary>
      <para>The <b>CredFree</b> function frees a buffer returned by any of the credentials management functions.</para>
    </summary>
    <param name="Buffer">
      <para>Pointer to the buffer to be freed.</para>
    </param>
  </member>
  <member name="Windows.CredGetSessionTypes">
    <summary>
      <para>The <b>CredGetSessionTypes</b> function returns the maximum persistence supported by the current logon session. A separate maximum persistence is returned for each credential type.</para>
    </summary>
    <param name="MaximumPersistCount">
      <para>Number of elements in the <i>MaximumPersist</i> array. Use CRED_TYPE_MAXIMUM to return all of the currently defined credential types.</para>
    </param>
    <param name="MaximumPersist">
      <para>Pointer to an array to return the persistence values in. The passed in array should be <i>MaximumPersistCount</i> elements long. On return, each element specifies the maximum persistence supported by the corresponding credential type.</para>
      <para>The caller should use one of the following defines to index into the array:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_GENERIC</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
      </list>
      <para>That is, <i>MaximumPersist</i>[CRED_TYPE_GENERIC] specifies the maximum persistence supported for generic credentials.</para>
      <para>The following values can be returned in each element of the array.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PERSIST_NONE</b>
          </description>
          <description>
            <para>No credential can be stored. This value will be returned if the credential type is not supported or has been disabled by policy.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PERSIST_SESSION</b>
          </description>
          <description>
            <para>Only a session-specific credential can be stored.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PERSIST_LOCAL_MACHINE</b>
          </description>
          <description>
            <para>Session-specific and computer-specific credentials can be stored.</para>
            <para>
              <b>Windows XP:  </b>This credential cannot be stored for sessions in which the profile is not loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PERSIST_ENTERPRISE</b>
          </description>
          <description>
            <para>Any credential can be stored.</para>
            <para>
              <b>Windows XP:  </b>This credential cannot be stored for sessions in which the profile is not loaded.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_NO_SUCH_LOGON_SESSION</para>
      <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
    </returns>
  </member>
  <member name="Windows.CredGetTargetInfo">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredGetTargetInfoA">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredGetTargetInfoW">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredGetTargetInfo">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredGetTargetInfoA">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredGetTargetInfoW">
    <summary>
      <para>The <b>CredGetTargetInfo</b> function retrieves all known target name information for the named target computer. This executed locally and does not need any particular privilege. The information returned is expected to be passed to the
<see cref="CredReadDomainCredentials" /> and
<see cref="CredWriteDomainCredentials" /> functions. The information should not be used for any other purpose.</para>
      <para>Authentication packages compute <i>TargetInfo</i> when attempting to authenticate to a <i>TargetName</i>. The authentication packages cache this target information to make it available to <b>CredGetTargetInfo</b>. Therefore, the target information will only be available from a recent attempt to authenticate a <i>TargetName</i>.</para>
      <para>Authentication packages not in the LSA process can cache a <i>TargetInfo</i> for later retrieval by <b>CredGetTargetInfo</b> by calling <see cref="CredReadDomainCredentials" /> with the CRED_CACHE_TARGET_INFORMATION flag.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the target computer for which information is to be retrieved.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function. The following flag can be used:</para>
      <para>CRED_ALLOW_NAME_RESOLUTION</para>
      <para>If no target information can be found for <i>TargetName</i> name resolution is done on <i>TargetName</i> to convert it to other forms. If target information exists for any of those other forms, it is returned. Currently only DNS name resolution is done.</para>
      <para>This is useful if the application does not call an authentication package directly. The application can pass the <i>TargetName</i> to another layer of software to authenticate to the server, and that layer of software might resolve the name and pass the resolved name to the authentication package. As such, there will be no target information for the original <i>TargetName</i>.</para>
    </param>
    <param name="TargetInfo">
      <para>Pointer to a single allocated block buffer to contain the target information. At least one of the returned members of <i>TargetInfo</i> will be non-NULL. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>Target information for the named server is not available.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredGetTargetInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredFree" />
    <seealso cref="CredReadDomainCredentials" />
    <seealso cref="CredWriteDomainCredentials" />
    <seealso cref="GetLastError" />
  </member>
  <member name="Windows.CredIsMarshaledCredential">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsMarshaledCredentialA">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsMarshaledCredentialW">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsMarshaledCredential">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsMarshaledCredentialA">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsMarshaledCredentialW">
    <summary>
      <para>The <b>CredIsMarshaledCredential</b> function determines whether a specified user name string is a marshaled credential previously marshaled by
<see cref="CredMarshalCredential" />.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> if <i>MarshaledCredential</i> is a marshaled credential and <b>FALSE</b> if it is not.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsMarshaledCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtected">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtectedA">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtectedW">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtected">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtectedA">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredIsProtectedW">
    <summary>
      <para>The <b>CredIsProtected</b> function specifies whether the specified credentials are encrypted by a previous call to the <see cref="CredProtect" /> function.</para>
    </summary>
    <param name="pszProtectedCredentials">
      <para>A pointer to a null-terminated string that specifies the credentials to test.</para>
    </param>
    <param name="pProtectionType">
      <para>A pointer to a value from the <see cref="CRED_PROTECTION_TYPE" /> enumeration that specifies whether the credentials specified in the <i>pszProtectedCredentials</i> parameter are protected.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredIsProtected as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredMarshalCredential">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredMarshalCredentialA">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredMarshalCredentialW">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredMarshalCredential">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredMarshalCredentialA">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredMarshalCredentialW">
    <summary>
      <para>The <b>CredMarshalCredential</b> function transforms a credential into a text string. Historically, many functions, such as <see cref="NetUseAdd" />, take a domain name, user name, and password as credentials. These functions do not accept certificates as credentials. The <b>CredMarshalCredential</b> function converts such credentials into a form that can be passed into these APIs.</para>
      <para>The marshaled credential should be passed as the user name string to any API that is currently passed credentials. The domain name, if applicable, passed to that API should be passed as <b>NULL</b> or empty. For certificate credentials, the PIN of the certificate should be passed to that API as the password.</para>
      <para>The caller should not modify or print marshaled credentials. The returned value can be freely converted between the Unicode, ANSI, and OEM characters sets. The string is case sensitive.</para>
    </summary>
    <param name="CredType">
      <para>Type of the credential to marshal.</para>
    </param>
    <param name="Credential">
      <para>Credential to marshal.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
      <para>If <i>CredType</i> is <i>CertCredential</i>, <i>Credential</i> points to a <see cref="CERT_CREDENTIAL_INFO" /> structure.</para>
      <para>If <i>CredType</i> is <i>UsernameTargetCredential</i>, <i>Credential</i> points to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
    </param>
    <param name="MarshaledCredential">
      <para>Pointer to a <b>null</b>-terminated
string that contains the marshaled credential. The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>CredType</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredMarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredUnmarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredPackAuthenticationBuffer">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredPackAuthenticationBufferA">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredPackAuthenticationBufferW">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredPackAuthenticationBuffer">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredPackAuthenticationBufferA">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredPackAuthenticationBufferW">
    <summary>
      <para>The <b>CredPackAuthenticationBuffer</b> function converts a string user name and password into an authentication buffer.</para>
      <para>Beginning with Windows 8 and Windows Server 2012, the <b>CredPackAuthenticationBuffer</b> function converts an identity credential into an authentication buffer, which is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure. This buffer can be passed to <see cref="LsaLogonUser" />, <see cref="AcquireCredentialsHandle" />, or other identity provider interfaces.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies how the credential should be packed. This can be a combination of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CRED_PACK_PROTECTED_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential so that it can only be decrypted by processes in the caller's logon session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_WOW_BUFFER</b>
          </description>
          <description>
            <para>Encrypts the credential in a WOW buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_GENERIC_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential in a CRED_GENERIC buffer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>CRED_PACK_ID_PROVIDER_CREDENTIALS</b>
          </description>
          <description>
            <para>Encrypts the credential of an online identity into a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure.  If CRED_PACK_GENERIC_CREDENTIALS and CRED_PACK_ID_PROVIDER_CREDENTIALS are not set, encrypts the credentials in a KERB_INTERACTIVE_LOGON buffer.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pszUserName">
      <para>A pointer to a null-terminated string that specifies the user name to be converted. For domain users, the string must be in the following format:</para>
      <para>
        <i>DomainName</i>
        <b>\</b>
        <i>UserName</i>
      </para>
      <para>For online identities, if the credential is a plaintext password, the user name format is <i>ProviderName</i><b>\</b><i>UserName</i>. If the credential is a <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> structure, the user name is an encoded string that is the <i>UserName</i> parameter output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a> or certificate credentials, the user name is an encoded string that is the output of a function call to <see cref="CredMarshalCredential" /> with the CertCredential option.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a null-terminated string that specifies the password to be converted.</para>
      <para>For <see cref="SEC_WINNT_AUTH_IDENTITY_EX2" /> credentials, the password is an encoded string that is in the <i>ppszPackedCredentialsString</i> output of a function call to <see cref="SspiEncodeAuthIdentityAsStrings" />.</para>
      <para>For <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">smart card</a>  credentials, this is the <i>smart card</i> PIN.</para>
      <para>
        <b>Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  </b>Online identities are not supported.</para>
    </param>
    <param name="pPackedCredentials">
      <para>A pointer to an array of bytes that, on output, receives the packed authentication buffer. This parameter can be <b>NULL</b> to receive the required buffer size in the <i>pcbPackedCredentials</i> parameter.</para>
    </param>
    <param name="pcbPackedCredentials">
      <para>A pointer to a <b>DWORD</b> value that specifies the size, in bytes, of the <i>pPackedCredentials</i> buffer. On output, if the buffer is not of sufficient size, specifies the required size, in bytes, of the  <i>pPackedCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function, which may return the following error codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The buffer provided by <i>pPackedCredentials</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredPackAuthenticationBuffer as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtect">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtectA">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtectW">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtect">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtectA">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredProtectW">
    <summary>
      <para>The <b>CredProtect</b> function encrypts the specified credentials so that only the current security context can decrypt them.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials are encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials are encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that specifies the credentials to encrypt. The function encrypts the number of characters provided in the <i>cchCredentials</i> parameter.</para>
    </param>
    <param name="cchCredentials">
      <para>The size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that, on output, receives the encrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszProtectedCredentials</i> buffer. On output, if the <i>pszProtectedCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="ProtectionType">
      <para>A pointer to a <see cref="CRED_PROTECTION_TYPE" /> enumeration type that, on output, specifies the type of protection provided.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>Note that the output of the <b>CredProtect</b> function is not integrity protected, so if the output is modified, the <see cref="CredUnprotect" /> function is not updated and may produce incorrect results.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredProtect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredRead">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredReadA">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredReadW">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredReadDomainCredentials">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredReadDomainCredentialsA">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredReadDomainCredentialsW">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredReadDomainCredentials">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredReadDomainCredentialsA">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredReadDomainCredentialsW">
    <summary>
      <para>The <b>CredReadDomainCredentials</b> function reads the domain credentials from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Target information that identifies the target server. At least one of the naming members must not be <b>NULL</b>: NetbiosServerName, DnsServerName, NetbiosDomainName, DnsDomainName or DnsTreeName.</para>
    </param>
    <param name="Flags">
      <para>Flags controlling the operation of the function.</para>
      <para>The following flag is defined:</para>
      <para>CRED_CACHE_TARGET_INFORMATION</para>
      <para>Cache the TargetInfo for a subsequent read using <see cref="CredGetTargetInfo" />.</para>
    </param>
    <param name="Count">
      <para>Count of the credentials returned in the <i>Credentials</i> array.</para>
    </param>
    <param name="Credential">
      <para>Pointer to an array of pointers to credentials. The most specific existing credential matching the <i>TargetInfo</i> is returned. If credentials of various types (for example, CRED_TYPE_DOMAIN_PASSWORD and CRED_TYPE_DOMAIN_CERTIFICATE credentials) exist, one of each type is returned. If a connection were to be made to the named target, this most-specific credential would be used.</para>
      <para>Only those credential types specified by the <i>TargetInfo</i>.CredTypes array are returned. The returned <i>Credentials</i> array is sorted in the same order as the <i>TargetInfo</i>.CredTypes array. That is, authentication packages specify a preferred credential type by specifying it earlier in the <i>TargetInfo</i>.CredTypes array.If <i>TargetInfo</i>.CredTypeCount is zero, the <i>Credentials</i> array is returned in the following sorted order:</para>
      <list type="bullet">
        <item>
          <description>CRED_TYPE_DOMAIN_CERTIFICATE</description>
        </item>
        <item>
          <description>CRED_TYPE_DOMAIN_PASSWORD</description>
        </item>
      </list>
      <para>The returned buffer is a single allocated block. Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_INVALID_PARAMETER
<para>None of the naming parameters were specified.</para></description>
        </item>
        <item>
          <description>ERROR_NOT_FOUND
<para>There are no credentials matching the specified naming parameters.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns the most specific credentials matching the naming parameters. For instance, if there is a credential that matches the target server name and a credential that matches the target domain name, only the server specific credential is returned. This is the credential that would be used.</para>
      <para>The following list specifies the order (from most specific to least specific) of what credential is returned if more than one matches:</para>
      <list type="bullet">
        <item>
          <description>The credential target name is of the form &lt;<i>DfsRoot</i>&gt;\&lt;<i>DfsShare</i>&gt;, and it is an exact match on the <i>TargetName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>DnsServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on the <i>NetBIOSServerName</i>.</description>
        </item>
        <item>
          <description>An exact match on <i>TargetName</i>.</description>
        </item>
        <item>
          <description>A match of the <i>DnsServerName</i> to a wildcard server credential. If more than one wildcard server credential matches, the credential with the longer TargetName is used. That is, a credential for *.example.microsoft.com is used instead of a credential for *.microsoft.com.</description>
        </item>
        <item>
          <description>An exact match of the <i>DnsDomainName</i> to a wildcard domain credential of the form &lt;<i>DnsDomainName</i>&gt;\*.</description>
        </item>
        <item>
          <description>An exact match of the <i>NetBIOSDomainName </i> to a wildcard domain credential of the form &lt;<i>NetBIOSDomainName</i>&gt;\*</description>
        </item>
        <item>
          <description>The credential named CRED_SESSION_WILDCARD_NAME.</description>
        </item>
        <item>
          <description>The credential named "*".</description>
        </item>
      </list>
      <b>CredReadDomainCredentials</b> differs from <see cref="CredRead" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.
<para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credentials</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para><para>This function can return multiple credentials of this type, but <b>CRED_TYPE_DOMAIN_EXTENDED</b> cannot be mixed with other types in the <b>CredTypes</b> member of the <see cref="CREDENTIAL_TARGET_INFORMATION" /> structure specified by the <i>TargetInfo</i> parameter.</para><blockquote><para>[!NOTE]
The wincred.h header defines CredReadDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para></blockquote></remarks>
  </member>
  <member name="Windows.CredRead">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredReadA">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredReadW">
    <summary>
      <para>The <b>CredRead</b> function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetName">
      <para>Pointer to a null-terminated string that contains the name of the credential to read.</para>
    </param>
    <param name="Type">
      <para>Type of the credential to read. <i>Type</i> must be one of the CRED_TYPE_* defined types.</para>
    </param>
    <param name="Flags">
      <para>Currently reserved and must be zero.</para>
    </param>
    <param name="Credential">
      <para>Pointer to a single allocated block buffer to return the credential.
Any pointers contained within the buffer are pointers to locations within this single allocated block. The single returned buffer must be freed by calling <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>The function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status codes can be returned:</para>
      <list type="bullet">
        <item>
          <description>ERROR_NOT_FOUND
<para>No credential exists with the specified <i>TargetName</i>.</para></description>
        </item>
        <item>
          <description>ERROR_NO_SUCH_LOGON_SESSION
<para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_FLAGS
<para>A flag that is not valid was specified for the <i>Flags</i> parameter.</para></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function can return only one credential of the specified type.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredRead as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentials">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentialsA">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentialsW">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentials">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentialsA">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUICmdLinePromptForCredentialsW">
    <summary>
      <para>The <b>CredUICmdLinePromptForCredentials</b> function prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.</para>
    </summary>
    <param name="pszTargetName">
      <para>A pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a server name. For DFS connections, this string is of the form <i>ServerName</i><b>\</b><i>ShareName</i>. The <i>pszTargetName</i> parameter is used to identify the target information and is used to store and retrieve the credential.</para>
    </param>
    <param name="pContext">
      <para>Currently reserved and must be <b>NULL</b>.</para>
    </param>
    <param name="dwAuthError">
      <para>Specifies why prompting for credentials is needed. A caller can pass this Windows error parameter, returned by another authentication call, to allow the dialog box to accommodate certain errors. For example, if the password expired status code is passed, the dialog box prompts the user to change the password on the account.</para>
    </param>
    <param name="UserName">
      <para>A pointer to a <b>null</b>-terminated string that contains the credential user name. If a nonzero-length string is specified for <i>pszUserName</i>, the user will be prompted only for the password. In the case of credentials other than user name/password, a marshaled format of the credential can be passed in. This string is created by calling
<see cref="CredMarshalCredential" />.</para>
      <para>This function writes the user-supplied name to this buffer, copying a maximum of <i>ulUserNameMaxChars</i> characters. The string in this format can be converted to the user name/password format by calling the
<see cref="CredUIParseUsername" /> function. The string in its marshaled format can be passed directly to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security support provider</a> (SSP).</para>
      <para>If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to <see cref="CredUIParseUsername" />. The subsequent results of <b>CredUIParseUsername</b> can  be passed only to a client-side authentication API such as <see cref="WNetAddConnection" /> or the SSP API.</para>
    </param>
    <param name="ulUserBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszUserName</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pszPassword">
      <para>A pointer to a <b>null</b>-terminated string that contains the password for the credentials. If a nonzero-length string is specified for <i>pszPassword</i>, the password parameter will be prefilled with the string.</para>
      <para>This function writes the user-supplied password to this buffer, copying a maximum of <i>ulPasswordMaxChars</i> characters. If the CREDUI_FLAGS_DO_NOT_PERSIST flag is not specified, the value returned in this parameter is of a form that should not be inspected, printed, or persisted other than passing it to a client-side authentication function such as <see cref="WNetAddConnection" /> or an SSP function.</para>
      <para>When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="ulPasswordBufferSize">
      <para>The maximum number of characters that can be copied to <i>pszPassword</i> including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_PASSWORD_LENGTH does not include the terminating <b>null</b> character.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a <b>BOOL</b> that specifies the initial state of the <b>Save</b> message and receives the state of the <b>Save</b> message after the user has responded to the command prompt. If <i>pfSave</i> is not <b>NULL</b> and <see cref="CredUIPromptForCredentials" /> returns NO_ERROR, <i>pfSave</i> returns the state of the <b>Save</b> message. If the CREDUI_FLAGS_PERSIST flag is specified, the <b>Save</b> message is not displayed but is considered to be "y". If the CREDUI_FLAGS_DO_NOT_PERSIST flag is specified and CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX is not specified, the <b>Save</b> message is not displayed but is considered to be "n".</para>
    </param>
    <param name="dwFlags">
      <para>A <b>DWORD</b> value that specifies special behavior for this function. This value can be a bitwise-<b>OR</b> combination of zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_ALWAYS_SHOW_UI</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display a user interface if the credentials can be returned from an existing credential in credential manager. This flag is  permitted only if CREDUI_FLAGS_GENERIC_CREDENTIALS is also specified and is  used only in conjunction with CREDUI_FLAGS_GENERIC_CREDENTIALS.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_DO_NOT_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display the save message or store credentials.</para>
            <para>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX can also be passed to display the save message only and return the result in <i>pfSave</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXCLUDE_CERTIFICATES</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Prompt for user name/password. If the <i>pszUserName</i> parameter is specified, the user name is omitted. If the credential is persisted, store the passed-in user name with the credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_EXPECT_CONFIRMATION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Specifies that the caller will call
<see cref="CredUIConfirmCredentials" /> to determine whether the returned credentials are actually valid. This ensures that credentials that are not valid are not saved to the credential manager. Specify this flag unless CREDUI_FLAGS_DO_NOT_PERSIST is specified.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_GENERIC_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Consider the credentials entered by the user a generic credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_INCORRECT_PASSWORD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_PERSIST</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not show the save message, but save the credential as though the user answered "y".</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUEST_ADMINISTRATOR</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Silently ignore this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_CERTIFICATE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved for future use; do not pass this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_REQUIRE_SMARTCARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Use a smart card and prompt for a PIN. If more than one smart card is available, select one of them. If the <i>pszUserName</i> parameter passes a string that is not empty, the string must match the UPN associated with the certificate on one of the smart cards. A UPN matches if the string matches the whole UPN on the certificate or the string matches the part to the left of the at sign (@) in the UPN of the certificate. If there is a match, the matching smart card is selected.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SERVER_CREDENTIAL</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is meaningful only in locating a matching credential to prefill the dialog box, should authentication fail.  When this flag is specified, wildcard credentials will not be matched. It has no effect when writing a credential. CredUI does not create credentials that contain wildcard characters.  Any found were either created explicitly by the user
or created programmatically, as happens when a RAS connection is made.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Display the save message and return <b>TRUE</b> in the <i>pfSave</i> out parameter if the user answers "y", <b>FALSE</b> if the user answers "n". CREDUI_FLAGS_DO_NOT_PERSIST must be specified to use this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential is a run-as credential. The <i>pszTargetName</i> parameter specifies the name of the command or program being run. It is used for prompting purposes only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b> and can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>This status is returned for any of the flag combinations that are not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>Either <i>pszTargetName</i> is <b>NULL</b>, the empty string, or longer than CREDUI_MAX_DOMAIN_LENGTH, or <i>pUiInfo</i> is not <b>NULL</b> and the <see cref="CredUI_INFO" /> structure pointed to did not meet one of the following requirements:</para>
            <list type="bullet">
              <item>
                <description>The <b>cbSize</b> member must be one.</description>
              </item>
              <item>
                <description>If the <b>hbmBanner</b> member is not <b>NULL</b>, it must be of type OBJ_BITMAP.</description>
              </item>
              <item>
                <description>If the <b>pszMessageText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_MESSAGE_LENGTH.</description>
              </item>
              <item>
                <description>If the <b>pszCaptionText</b> member is not <b>NULL</b>, it must not be greater than CREDUI_MAX_CAPTION_LENGTH.</description>
              </item>
            </list>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The credential manager cannot be used. Typically, this error is handled by calling <see cref="CredUICmdLinePromptForCredentials" /> and passing in the CREDUI_FLAGS_DO_NOT_PERSIST flag.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>NO_ERROR</b>
            </para>
          </description>
          <description>
            <para>User chose <b>OK</b>. The <i>pszUserName</i>, <i>pszPassword</i>, and <i>pfSave</i> variables will return the values documented earlier.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD, CREDUI_FLAGS_REQUIRE_CERTIFICATE, and CREDUI_FLAGS_EXCLUDE_CERTIFICATE flags are mutually exclusive.</para>
      <para>If CREDUI_FLAGS_DO_NOT_PERSIST is specified, either <i>pszTargetName</i> must be specified or  <i>uiInfo-&gt;pszMessageText</i> and <i>uiInfo-&gt;pszCaption</i> must be specified.</para>
      <para>The CREDUI_FLAG_USERNAME_TARGET_CREDENTIALS and CREDUI_FLAGS_GENERIC_CREDENTIALS flags are mutually exclusive. If neither is specified, the credential is a domain credential.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is not specified or CREDUI_FLAGS_COMPLETE_USERNAME is specified, the typed name is <i>syntax checked</i>. Syntax checked means that the same rules are used as are implied by <see cref="CredUIParseUserName" />. If the typed name is not valid, the user is prompted for a valid one. If the domain portion of the typed name is missing, one will be supplied based on the target name.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and CREDUI_FLAGS_VALIDATE_USERNAME is also specified, the typed name is syntax checked. If the typed name is not valid, the user is prompted for a valid one.</para>
      <para>If CREDUI_FLAGS_GENERIC_CREDENTIALS is specified and neither CREDUI_FLAGS_COMPLETE_USERNAME nor CREDUI_FLAGS_VALIDATE_USERNAME is specified, the typed name is not syntax checked in any way.</para>
      <para>If neither CREDUI_FLAGS_PERSIST nor CREDUI_FLAGS_DO_NOT_PERSIST are set, the save message is shown, and it controls whether the credential is saved or not.</para>
      <para>If CREDUI_FLAGS_PROMPT_FOR_SAVE is specified, the <i>pfSave</i> parameter must not be <b>NULL</b>.</para>
      <para>The CREDUI_FLAGS_REQUIRE_SMARTCARD and CREDUI_FLAGS_EXCLUDE_CERTIFICATES flags are mutually exclusive. <b>CredUICmdLinePromptForCredentials</b> supports prompting for a smart card certificate or a password-based credential. It does not support certificates that are not smart card certificates or prompting for both on a single call.</para>
      <para>Calling Modes</para>
      <list type="bullet">
        <item>
          <description>The caller will attempt to access the target resource, call credui (passing a description of the target resource and the failure status), call <see cref="CredUIParseUserName" />, access the target resource again, and then call <see cref="CredUIConfirmCredentials" />.</description>
        </item>
        <item>
          <description>The caller can prompt for credentials without accessing any resources by passing CREDUI_FLAGS_DO_NOT_PERSIST.</description>
        </item>
      </list>
      <para>Target Information</para>
      <para>Target Information is  information about the location of the resource to be accessed. For a list of all potential target names for a resource, call
<see cref="CredGetTargetInfo" />. <b>CredGetTargetInfo</b> returns information that was cached by the Negotiate, NTLM, or Kerberos authentication package when one of those packages was used to authenticate to the named target. <b>CredGetTargetInfo</b> returns some or all of the following names for the target:</para>
      <list type="bullet">
        <item>
          <description>NetBIOS server name of the computer</description>
        </item>
        <item>
          <description>DNS server name of the computer</description>
        </item>
        <item>
          <description>NetBIOS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS domain name of the domain the computer belongs to</description>
        </item>
        <item>
          <description>DNS tree name of the tree the computer belongs to</description>
        </item>
        <item>
          <description>Name of the package that collected the information</description>
        </item>
      </list>
      <para>Any piece of this information can be missing if the information does not apply to the target computer. For instance, a computer that is a member of a workgroup does not have a NetBIOS domain name. A computer that is a member of a Windows domain does not have a DNS domain name or DNS tree name.</para>
      <para>Credentials are stored in the credential manager based on target name. Each target name is stored as generally as possible without colliding with credentials already stored in the credential manager. An important effect of storing credentials by target name is that a particular user can  have only one credential per target stored in the credential manager.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUICmdLinePromptForCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredGetTargetInfo" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="CredUIConfirmCredentials" />
    <seealso cref="CredUIParseUserName" />
    <seealso cref="CredUI_INFO" />
    <seealso cref="WNetAddConnection" />
  </member>
  <member name="Windows.CredUIConfirmCredentials">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIConfirmCredentialsA">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIConfirmCredentialsW">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIConfirmCredentials">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIConfirmCredentialsA">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIConfirmCredentialsW">
    <summary>
      <para>The <b>CredUIConfirmCredentials</b> function is called after
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />, to confirm the validity of the credential harvested. <b>CredUIConfirmCredentials</b> must be called if the CREDUI_FLAGS_EXPECT_CONFIRMATION flag was passed to the "prompt" function, either <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />, and the "prompt" function returned NO_ERROR.</para>
      <para>After calling the "prompt" function and before calling <b>CredUIConfirmCredentials</b>, the caller must determine whether the credentials are actually valid by using the credentials to access the resource specified by <i>pszTargetName</i>. The results of that validation test are passed to <b>CredUIConfirmCredentials</b> in the <i>bConfirm</i> parameter.</para>
    </summary>
    <param name="pszTargetName">
      <para>Pointer to a <b>null</b>-terminated string that contains the name of the target for the credentials, typically a domain or server application name. This must be the same value passed as <i>pszTargetName</i> to <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" /></para>
    </param>
    <param name="bConfirm">
      <para>Specifies whether the credentials returned from the prompt function are valid. If <b>TRUE</b>, the credentials are stored in the credential manager as defined by <see cref="CredUIPromptForCredentials" /> or <see cref="CredUICmdLinePromptForCredentials" />. If <b>FALSE</b>, the credentials are not stored and various pieces of memory are cleaned up.</para>
    </param>
    <returns>
      <para>Status of the operation is returned. The caller can check this status to determine whether the credential confirm operation succeeded. Most applications ignore this status code because the application's connection to the resource has already been done. The operation can fail because the credential was not found on the list of credentials awaiting confirmation, or because the attempt to write or delete the credential failed. Failure to find the credential on the list can occur because the credential was never queued or as a result of too many credentials being queued. Up to five credentials can be queued before older ones are discarded as newer ones are queued.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>NO_ERROR - (zero)</b>
            </para>
          </description>
          <description>
            <para>Confirm operation succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The subject credential could not be found on the confirmation waiting list.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An attempt to confirm a waiting credential failed because the credential contained data that was not valid or was inconsistent.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIConfirmCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIParseUserName">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIParseUserNameA">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIParseUserNameW">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIParseUserName">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="UserName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>UserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIParseUserNameA">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="UserName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>UserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIParseUserNameW">
    <summary>
      <para>The <b>CredUIParseUserName</b> function extracts the domain and user account name from a fully qualified user name.</para>
    </summary>
    <param name="UserName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>UserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <param name="user">
      <para>Pointer to a <b>null</b>-terminated string that receives the user account name.</para>
    </param>
    <param name="userBufferSize">
      <para>Maximum number of characters to write to the <i>pszUser</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_USERNAME_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="domain">
      <para>Pointer to a <b>null</b>-terminated string that receives the domain name. If <i>pszUserName</i> specifies a certificate, <i>pszDomain</i> will be <b>NULL</b>.</para>
    </param>
    <param name="domainBufferSize">
      <para>Maximum number of characters to write to the <i>pszDomain</i> string including the terminating <b>null</b> character.</para>
      <para>
        <b>Note</b>  CREDUI_MAX_DOMAIN_TARGET_LENGTH does NOT include the terminating <b>null</b> character.</para>
    </param>
    <param name="userName">
      <para>Pointer to a <b>null</b>-terminated string that contains the user name to be parsed. The name must be in UPN or down-level format, or a certificate. Typically, <i>pszUserName</i> is received from the
<see cref="CredUIPromptForCredentials" /> or
<see cref="CredUICmdLinePromptForCredentials" />.</para>
    </param>
    <returns>
      <para>This function returns the following:</para>
      <list type="bullet">
        <item>
          <description>NO_ERROR
<para>The user name is valid.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_ACCOUNT_NAME
<para>The user name is not valid.</para></description>
        </item>
        <item>
          <description>ERROR_INSUFFICIENT_BUFFER
<para>One of the buffers is too small.</para></description>
        </item>
        <item>
          <description>ERROR_INVALID_PARAMETER
<list type="bullet"><item><description><i>ulUserMaxChars</i> or <i>ulDomainMaxChars</i> is zero.</description></item><item><description><i>pszUserName</i>, <i>pszUser</i>, or <i>pszDomain</i> is <b>NULL</b>.</description></item></list></description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function parses the user name information returned by the
<see cref="CredUIPromptForCredentials" /> and
<see cref="CredUICmdLinePromptForCredentials" /> functions so that the resulting credentials can be passed to functions, such as <see cref="LogonUser" />, that require the user name and domain as separate strings.</para>
      <para>The following formats are supported:</para>
      <list type="bullet">
        <item>
          <description>&lt;MarshalledCredentialReference&gt;
<para>Marshaled credential reference as defined by
<see cref="CredIsMarshaledCredential" />. Such a credential is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string.</para></description>
        </item>
        <item>
          <description>&lt;DomainName&gt;\&lt;UserName&gt;
<para>&lt;UserName&gt; is returned in the <i>User</i> parameter and the &lt;DomainName&gt; is returned is the <i>Domain</i> parameter. The name is considered to have this syntax if the <i>UserName</i> contains a backslash (\).</para></description>
        </item>
        <item>
          <description>&lt;UserName&gt;@&lt;DNSDomainName&gt;
<para>The entire string is returned in the <i>User</i> parameter. The <i>Domain</i> parameter is set to an empty string. For this syntax, the last @ in the string is used because &lt;UserName&gt; can contain an @ but &lt;DNSDomainName&gt; cannot.</para></description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIParseUserName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CredIsMarshaledCredential" />
    <seealso cref="CredUICmdLinePromptForCredentials" />
    <seealso cref="CredUIPromptForCredentials" />
    <seealso cref="LogonUser" />
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentials">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentialsA">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentialsW">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentials">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentialsA">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIPromptForWindowsCredentialsW">
    <summary>
      <para>The <b>CredUIPromptForWindowsCredentials</b> function creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.</para>
    </summary>
    <param name="pUiInfo">
      <para>A pointer to a <see cref="CREDUI_INFO" /> structure that contains information for customizing the appearance of the dialog box that this function displays.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is not <b>NULL</b>, this function displays a modal dialog box centered on the parent window.</para>
      <para>If the <b>hwndParent</b> member of the <see cref="CREDUI_INFO" /> structure is <b>NULL</b>, the function displays a dialog box centered on the screen.</para>
      <para>This function ignores the  <b>hbmBanner</b> member of the <b>CREDUI_INFO</b> structure.</para>
    </param>
    <param name="dwAuthError">
      <para>A Windows error code, defined in Winerror.h, that is displayed in the dialog box. If credentials previously collected were not valid, the caller uses this parameter to pass the error message from the API that collected the credentials (for example, Winlogon) to this function. The corresponding error message is formatted and displayed in the dialog box. Set the  value of this parameter to zero to display no error message.</para>
    </param>
    <param name="pulAuthPackage">
      <para>On input, the value of this parameter is used to specify the authentication package for which the credentials in the <i>pvInAuthBuffer</i> buffer are serialized. If the value of <i>pvInAuthBuffer</i> is <b>NULL</b> and the <b>CREDUIWIN_AUTHPACKAGE_ONLY</b> flag is set in the <i>dwFlags</i> parameter, only credential providers capable of serializing credentials for the specified authentication package are to be enumerated.</para>
      <para>To get the appropriate value to use for this parameter on input, call the <see cref="LsaLookupAuthenticationPackage" /> function and use the value of the <i>AuthenticationPackage</i> parameter  of that function.</para>
      <para>On output, this parameter specifies the authentication package for which the credentials in the <i>ppvOutAuthBuffer</i> buffer are serialized.</para>
    </param>
    <param name="pvInAuthBuffer">
      <para>A pointer to a credential BLOB that is used to populate the credential fields in the dialog box. Set the value of this parameter to <b>NULL</b> to leave the credential fields empty.</para>
    </param>
    <param name="ulInAuthBufferSize">
      <para>The size, in bytes, of the <i>pvInAuthBuffer</i> buffer.</para>
    </param>
    <param name="ppvOutAuthBuffer">
      <para>The address of a pointer that, on output, specifies the credential BLOB. For Kerberos, NTLM, or Negotiate credentials, call the <see cref="CredUnPackAuthenticationBuffer" /> function to convert this BLOB to string representations of the credentials.</para>
      <para>When you have finished using the credential BLOB, clear it from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function, and free it by calling the <see cref="CoTaskMemFree" /> function.</para>
    </param>
    <param name="pulOutAuthBufferSize">
      <para>The size, in bytes, of the <i>ppvOutAuthBuffer</i> buffer.</para>
    </param>
    <param name="pfSave">
      <para>A pointer to a Boolean value that, on input, specifies whether the <b>Save</b> check box is selected in the dialog box that this function displays. On output, the value of this parameter specifies whether the <b>Save</b> check box was selected when the user clicks the <b>Submit</b> button in the dialog box. Set this parameter to <b>NULL</b> to ignore the <b>Save</b> check box.</para>
      <para>This parameter is ignored if the <b>CREDUIWIN_CHECKBOX</b> flag is not set in the <i>dwFlags</i> parameter.</para>
    </param>
    <param name="dwFlags">
      <para>A value that specifies behavior for this function. This value can be a bitwise-<b>OR</b> combination of one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_GENERIC</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The caller is requesting that the credential provider return the user name and password in plain text.</para>
            <para>This value cannot be combined with <b>SECURE_PROMPT</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_CHECKBOX</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>Save</b> check box is displayed in the dialog box.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only credential providers that support the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_IN_CRED_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the credentials specified by the <i>pvInAuthBuffer</i> parameter for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
            <para>If this flag is set, and the <i>pvInAuthBuffer</i> parameter is <b>NULL</b>, the function fails.</para>
            <para>This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_ADMINS</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Credential providers should enumerate only administrators. This value is intended for User Account Control (UAC) purposes only. We recommend that external callers not set this flag.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_ENUMERATE_CURRENT_USER</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Only the incoming credentials for the authentication package specified by the <i>pulAuthPackage</i> parameter should be enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_SECURE_PROMPT</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PREPROMPTING</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential dialog box is invoked by the <see cref="SspiPromptForCredentials" /> function, and the client is prompted before a prior handshake. If SSPIPFC_NO_CHECKBOX is passed in the <i>pvInAuthBuffer</i> parameter, then the credential provider should not display the check box.</para>
            <para>
              <b>Windows Vista:  </b>This value is supported beginning with Windows Vista with SP1.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x40000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider will not pack the AAD authority name. This is only applied to Azure AD joined devices.</para>
            <para>
              <b>Windows 10, version 1607:  </b>This value is supported beginning with Windows 10, version 1607.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CREDUIWIN_PACK_32_WOW</b>
                </description>
              </item>
              <item>
                <description>0x10000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential provider should align the credential BLOB pointed to by the <i>ppvOutAuthBuffer</i> parameter to a 32-bit boundary, even if the provider is running on a 64-bit system.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b></b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Windows Hello credentials will be packed in a smart card auth buffer. This only applies to the face, fingerprint, and PIN credential providers.</para>
            <para>
              <b>Windows 10, version 1809:  </b>This value is supported beginning with Windows 10, version 1809.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>ERROR_SUCCESS</b>. If the function is canceled by the user, it returns <b>ERROR_CANCELLED</b>. Any other return value indicates that the function failed to load.</para>
    </returns>
    <remarks>
      <para>This function does not save credentials.</para>
      <para>Applications that use <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/sspi">SSPI</a> to authenticate users should not call this function. Instead, call <see cref="SspiPromptForCredentials" />.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUIPromptForWindowsCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUIReadSSOCredW">
    <summary>
      <para>The <b>CredUIReadSSOCredW</b> function retrieves the user name for a single logon credential.</para>
    </summary>
    <param name="pszRealm">
      <para>Pointer to a <b>null</b>-terminated string that specifies the realm. If this parameter is <b>NULL</b>, the default realm is used.</para>
    </param>
    <param name="ppszUsername">
      <para>Pointer to a pointer to a <b>null</b>-terminated string. When you have finished using the string, free <i>ppszUsername</i> by calling the  <see cref="LocalFree" /> function.</para>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b>. The following table lists the possible values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>The credential was not found.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="CredUIStoreSSOCredW" />
  </member>
  <member name="Windows.CredUIStoreSSOCredW">
    <summary>
      <para>The <b>CredUIStoreSSOCredW</b> function stores a single logon credential.</para>
    </summary>
    <param name="pszRealm">
      <para>Pointer to a <b>null</b>-terminated string that specifies the realm. If this parameter is <b>NULL</b>, the default realm is used.</para>
    </param>
    <param name="pszUsername">
      <para>Pointer to a <b>null</b>-terminated string that specifies the user's name.</para>
    </param>
    <param name="pszPassword">
      <para>Pointer to a <b>null</b>-terminated string that specifies the user's password. When you have finished using the password, clear the password from memory by calling the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> function. For more information about protecting passwords, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/handling-passwords">Handling Passwords</a>.</para>
    </param>
    <param name="bPersist">
      <para>Boolean value that specifies whether the credentials are persisted. If this value is <b>TRUE</b>, the credentials are persisted. If this value is <b>FALSE</b>, the credentials are not persisted.</para>
    </param>
    <returns>
      <para>The return value is a <b>DWORD</b>. A return value of ERROR_SUCCESS indicates the function was successful.</para>
    </returns>
    <seealso cref="CredUIReadSSOCredW" />
  </member>
  <member name="Windows.CredUnmarshalCredential">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnmarshalCredentialA">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnmarshalCredentialW">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnmarshalCredential">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnmarshalCredentialA">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnmarshalCredentialW">
    <summary>
      <para>The <b>CredUnmarshalCredential</b> function transforms a marshaled credential back into its original form.</para>
    </summary>
    <param name="MarshaledCredential">
      <para>Pointer to a null-terminated string that contains the marshaled credential.</para>
    </param>
    <param name="CredType">
      <para>Type of credential specified by <i>MarshaledCredential</i>.</para>
      <para>This is one of the <see cref="CRED_MARSHAL_TYPE" /> values.</para>
    </param>
    <param name="Credential">
      <para>Pointer to the unmarshaled credential. If <i>CredType</i> returns <i>CertCredential</i>, the returned pointer is to a <see cref="CERT_CREDENTIAL_INFO" /> structure. If <i>CredType</i> returns <i>UsernameTargetCredential</i>, the returned pointer is to a <see cref="USERNAME_TARGET_CREDENTIAL_INFO" /> structure.</para>
      <para>The caller should free the returned buffer using <see cref="CredFree" />.</para>
    </param>
    <returns>
      <para>This function returns <b>TRUE</b> on success and <b>FALSE</b> on failure. The <see cref="GetLastError" /> function can be called to get a more specific status code. The following status code can be returned:</para>
      <para>ERROR_INVALID_PARAMETER</para>
      <para>
        <i>MarshaledCredential</i> is not valid.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnmarshalCredential as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CERT_CREDENTIAL_INFO" />
    <seealso cref="CRED_MARSHAL_TYPE" />
    <seealso cref="CredFree" />
    <seealso cref="CredMarshalCredential" />
    <seealso cref="GetLastError" />
    <seealso cref="USERNAME_TARGET_CREDENTIAL_INFO" />
  </member>
  <member name="Windows.CredUnprotect">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUnprotectA">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUnprotectW">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUnprotect">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUnprotectA">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredUnprotectW">
    <summary>
      <para>The <b>CredUnprotect</b> function decrypts credentials that were previously encrypted by using the <see cref="CredProtect" /> function. The credentials must have been encrypted in the same security context in which <b>CredUnprotect</b> is called.</para>
    </summary>
    <param name="fAsSelf">
      <para>Set to <b>TRUE</b> to specify that the credentials were encrypted in the security context of the current process. Set to <b>FALSE</b> to specify that credentials were encrypted in the security context of the calling thread security context.</para>
    </param>
    <param name="pszProtectedCredentials">
      <para>A pointer to a string that specifies the encrypted credentials.</para>
    </param>
    <param name="cchProtectedCredentials">
      <para>The size, in characters, of the <i>pszProtectedCredentials</i> buffer.</para>
    </param>
    <param name="pszCredentials">
      <para>A pointer to a string that, on output, receives the decrypted credentials.</para>
    </param>
    <param name="pcchMaxChars">
      <para>The size, in characters of the <i>pszCredentials</i> buffer. On output, if the <i>pszCredentials</i> is not of sufficient size to receive the encrypted credentials, this parameter specifies the required size, in characters, of the <i>pszCredentials</i> buffer.</para>
    </param>
    <returns>
      <para>
        <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>.</para>
      <para>For extended error information, call the
<see cref="GetLastError" /> function. The following table shows common values for the <b>GetLastError</b> function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_NOT_CAPABLE</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The security context used to encrypt the credentials is different from the security context used to decrypt the credentials.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>
                    <b>ERROR_INSUFFICIENT_BUFFER</b>
                  </b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>pszCredentials</i> buffer was of insufficient size.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredUnprotect as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWrite">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
  <member name="Windows.CredWriteA">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
  <member name="Windows.CredWriteW">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
  <member name="Windows.CredWriteDomainCredentials">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWriteDomainCredentialsA">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWriteDomainCredentialsW">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWriteDomainCredentials">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWriteDomainCredentialsA">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWriteDomainCredentialsW">
    <summary>
      <para>The <b>CredWriteDomainCredentials</b> function writes domain credentials to the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled.</para>
    </summary>
    <param name="TargetInfo">
      <para>Identifies the target server. At least one of the naming members must be non-<b>NULL</b> and can be <b>NetbiosServerName</b>, <b>DnsServerName</b>, <b>NetbiosDomainName</b>, <b>DnsDomainName</b>, or <b>DnsTreeName</b>.</para>
    </param>
    <param name="Credential">
      <para>Credential to be written.</para>
      <para>The credential must be one that matches <i>TargetInfo</i> For instance, if the <b>TargetName</b> is a wildcard DNS name, then the <b>TargetName</b> member of the credential must be a postfix of the <b>DnsServerName</b> member from the <i>TargetInfo</i>.</para>
    </param>
    <param name="Flags">
      <para>Flags to control the operation of the API. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB should be preserved from the already existing credential with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters are not valid. Either none of the naming parameters were specified, or the credential specified did not have the <b>Type</b> member set to CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, or the <i>Credential</i> does not match the <i>TargetInfo</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_SUCH_LOGON_SESSION</b>
            </para>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_USERNAME</b>
            </para>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid syntaxes, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_FOUND</b>
            </para>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_READERS_AVAILABLE</b>
            </para>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD: The CRED_TYPE_CERTIFICATE</b>
            </para>
          </description>
          <description>
            <para>The credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>SCARD_W_WRONG_CHV</b>
            </para>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN that protects the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b>. The credential manager does not maintain the PIN. Rather, the PIN is passed to the CSP of the certificate for later use by the CSP and authentication packages. The CSP defines the lifetime of the PIN. For instance, most CSPs flush the PIN upon smart card removal.</para>
      <para>
        <b>CredWriteDomainCredentials</b> differs from <see cref="CredWrite" /> in that it handles the idiosyncrasies of domain (CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE) credentials. Domain credentials contain more than one target member.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWriteDomainCredentials as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.CredWrite">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
  <member name="Windows.CredWriteA">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
  <member name="Windows.CredWriteW">
    <summary>
      <para>The <b>CredWrite</b> function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) disabled.</para>
    </summary>
    <param name="Credential">
      <para>A pointer to the <see cref="CREDENTIAL" /> structure to be written.</para>
    </param>
    <param name="Flags">
      <para>Flags that control the function's operation. The following flag is defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CRED_PRESERVE_CREDENTIAL_BLOB</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The credential BLOB from an existing credential is preserved with the same credential name and credential type. The <b>CredentialBlobSize</b> of the passed in <i>Credential</i> structure must be zero.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. Call the <see cref="GetLastError" /> function to get a more specific status code. The following status codes can be returned.</para>
      <para>Other smart card errors can be returned when writing a CRED_TYPE_CERTIFICATE credential.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NO_SUCH_LOGON_SESSION</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The logon session does not exist or there is no credential set associated with this logon session. Network logon sessions do not have an associated credential set.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_PARAMETER</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>Certain fields cannot be changed in an existing credential. This error is returned if a field does not match the value in a protected field of the existing credential.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INVALID_FLAGS</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A value that is not valid was specified for the <i>Flags</i> parameter.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_BAD_USERNAME</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>UserName</b> member of the passed in <i>Credential</i> structure is not valid. For a description of valid user name syntax, see the definition of that member.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_NOT_FOUND</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>CRED_PRESERVE_CREDENTIAL_BLOB was specified and there is no existing credential by the same <b>TargetName</b> and <b>Type</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_READERS_AVAILABLE</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The CRED_TYPE_CERTIFICATE credential being written requires the smart card reader to be available.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_E_NO_SMARTCARD or SCARD_W_REMOVED_CARD</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>A CRED_TYPE_CERTIFICATE credential being written requires the smart card to be inserted.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SCARD_W_WRONG_CHV</b>
                </description>
              </item>
              <item>
                <description></description>
              </item>
            </list>
          </description>
          <description>
            <para>The wrong PIN was supplied for the CRED_TYPE_CERTIFICATE credential being written.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a credential if a credential with the specified <b>TargetName</b> and <b>Type</b> does not exist. If a credential with the specified <b>TargetName</b> and <b>Type</b> exists, the new specified credential replaces the existing one.</para>
      <para>When this function writes a CRED_TYPE_CERTIFICATE credential, the <i>Credential</i>-&gt;<b>CredentialBlob</b> member specifies the PIN protecting the private key of the certificate specified by the <i>Credential</i>-&gt;<b>UserName</b> member. The credential manager does not maintain the PIN. Rather, the PIN is passed to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/c-gly">cryptographic service provider</a> (CSP) indicated on the certificate for later use by the CSP and the authentication packages. The CSP defines the lifetime of the PIN. Most CSPs flush the PIN when the smart card removal from the smart card reader.</para>
      <para>If the value of the <b>Type</b> member of the <see cref="CREDENTIAL" /> structure specified by the <i>Credential</i>  parameter is <b>CRED_TYPE_DOMAIN_EXTENDED</b>, a namespace must be specified in the target name. This function does not support writing to target names that contain wildcards.</para>
      <blockquote>
        <para>[!NOTE]
The wincred.h header defines CredWrite as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso cref="CREDENTIAL" />
  </member>
</doc>