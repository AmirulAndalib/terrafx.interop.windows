<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ICredentialProviderCredentialEvents.AppendFieldComboBoxItem">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that a combo box needs an item appended and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing the combo box that needs an item added. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the combo box.</para>
    </param>
    <param name="pszItem">
      <para>Type: <b>LPCWSTR</b></para>
      <para>The string that will be appended to the combo box as a new option.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.DeleteFieldComboBoxItem">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that an item should be deleted from a combo box and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing the combo box that needs to be updated. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the combo box.</para>
    </param>
    <param name="dwItem">
      <para>Type: <b>DWORD</b></para>
      <para>The index of the item that is deleted.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.OnCreatingWindow">
    <summary>
      <para>Called when the window is created. Enables credentials to retrieve the HWND of the parent window after <see cref="Advise" /> is called.</para>
    </summary>
    <param name="phwndOwner">
      <para>Type: <b>HWND*</b></para>
      <para>A pointer to the handle of the parent window.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The HWND that is returned in <i>phwndOwner</i> can be used as a parent to dialog boxes, such as message boxes. Any credential provider displaying a dialog must parent it to the HWND supplied by <b>OnCreatingWindow</b>. Credential providers that do not parent dialogs boxes properly will cause Credential UI and Logon UI to fail if a timeout occurs.</para>
      <para>Credential UI and Logon UI can cancel the dialog box if they receive no input for two minutes. In the event of a timeout only if the pointer to the parent window is correctly assigned.</para>
      <para>The Logon UI and Credential UI will automatically cancel dialogs that receive no input for two minutes. This is only possible if the pointer to the parent window is correctly assigned. Dialogs presented as calls to <see cref="IConnectableCredentialProviderCredential.Connect" /> on the Pre-Logon-Access Provider (PLAP) screen will never be cancelled due to inactivity.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldBitmap">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that a tile image  field has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing the tile image field that is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the tile image field.</para>
    </param>
    <param name="hbmp">
      <para>Type: <b>HBITMAP</b></para>
      <para>The new tile image.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldCheckbox">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that a checkbox field has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing the checkbox field that is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique field ID for the checkbox.</para>
    </param>
    <param name="bChecked">
      <para>Type: <b>BOOL</b></para>
      <para>The new state of the checkbox. <b>TRUE</b> indicates the checkbox should be checked, <b>FALSE</b> indicates it should not.</para>
    </param>
    <param name="pszLabel">
      <para>Type: <b>LPCWSTR</b></para>
      <para>The new string for the checkbox label.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldComboBoxSelectedItem">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that the selected item in a combo box has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing the combo box being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the combo box.</para>
    </param>
    <param name="dwSelectedItem">
      <para>Type: <b>DWORD</b></para>
      <para>The index of the item to select in the combo box.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldInteractiveState">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that the interactivity state of a field has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing a field whose interactivity state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the field.</para>
    </param>
    <param name="cpfis">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE" /></b></para>
      <para>The new interactive state of the field.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldState">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that a field state has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing a field whose state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the field where the change occurred to generate the event.</para>
    </param>
    <param name="cpfs">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_FIELD_STATE" /></b></para>
      <para>The value from the <see cref="CREDENTIAL_PROVIDER_FIELD_STATE" /> enumeration that specifies the new field state.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldString">
    <summary>
      <para>Communicates to the Logon UI or Credential UI that the string associated with a field has changed and that the UI should be updated.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential containing a field whose interactivity state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique ID of the field for which the string is being set.</para>
    </param>
    <param name="psz">
      <para>Type: <b>LPCWSTR</b></para>
      <para>A pointer to the new string for the field.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldSubmitButton">
    <summary>
      <para>Enables credentials to set the field that the submit button appears adjacent to.</para>
    </summary>
    <param name="pcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />*</b></para>
      <para>The credential whose submit button location is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</para>
    </param>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The unique field ID of the submit button.</para>
    </param>
    <param name="dwAdjacentTo">
      <para>Type: <b>DWORD</b></para>
      <para>The unique field ID of the field that the submit button should be adjacent to when this method completes.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredentialEvents">
    <summary>
      <para>Provides an asynchronous callback mechanism used by a credential to notify it of state or text change events in the Logon UI or Credential UI.</para>
    </summary>
    <remarks>
      <para>These methods should only be called by a credential passing <b>this</b> as the first parameter. Behavior is undefined if you attempt to call these methods using a credential other than the one activated by the call on <see cref="Advise" />. If a credential provider has information on another thread and wants to communicate through that thread's Logon UI or Credential UI, the requests will need to go through the credential that received the <b>Advise</b> call.</para>
      <h3>When to Implement</h3>
      <para>Third parties do not implement <b>ICredentialProviderCredentialEvents</b>. An implementation is included with Windows.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthN/credential-providers-in-windows">Credential Providers in Windows 10</seealso>
    <seealso cref="ICredentialProviderCredential.Advise" />
    <seealso cref="ICredentialProviderCredential.UnAdvise" />
    <seealso cref="ICredentialProviderCredentialEvents2" />
  </member>
</doc>