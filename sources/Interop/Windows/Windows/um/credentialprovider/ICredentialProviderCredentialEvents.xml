<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ICredentialProviderCredentialEvents.AppendFieldComboBoxItem">
    <summary>Communicates to the Logon UI or Credential UI that a combo box needs an item appended and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing the combo box that needs an item added. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the combo box.</param>
    <param name="pszItem">The string that will be appended to the combo box as a new option.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.DeleteFieldComboBoxItem">
    <summary>Communicates to the Logon UI or Credential UI that an item should be deleted from a combo box and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing the combo box that needs to be updated. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the combo box.</param>
    <param name="dwItem">The index of the item that is deleted.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.OnCreatingWindow">
    <summary>Called when the window is created. Enables credentials to retrieve the HWND of the parent window after <see cref="Advise" /> is called.</summary>
    <param name="phwndOwner">A pointer to the handle of the parent window.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldBitmap">
    <summary>Communicates to the Logon UI or Credential UI that a tile image field has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing the tile image field that is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the tile image field.</param>
    <param name="hbmp">The new tile image.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldCheckbox">
    <summary>Communicates to the Logon UI or Credential UI that a checkbox field has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing the checkbox field that is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique field ID for the checkbox.</param>
    <param name="bChecked">The new state of the checkbox. <b>TRUE</b> indicates the checkbox should be checked, <b>FALSE</b> indicates it should not.</param>
    <param name="pszLabel">The new string for the checkbox label.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldComboBoxSelectedItem">
    <summary>Communicates to the Logon UI or Credential UI that the selected item in a combo box has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing the combo box being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the combo box.</param>
    <param name="dwSelectedItem">The index of the item to select in the combo box.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldInteractiveState">
    <summary>Communicates to the Logon UI or Credential UI that the interactivity state of a field has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing a field whose interactivity state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the field.</param>
    <param name="cpfis">The new interactive state of the field.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldState">
    <summary>Communicates to the Logon UI or Credential UI that a field state has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing a field whose state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the field where the change occurred to generate the event.</param>
    <param name="cpfs">The value from the <see cref="CREDENTIAL_PROVIDER_FIELD_STATE" /> enumeration that specifies the new field state.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldString">
    <summary>Communicates to the Logon UI or Credential UI that the string associated with a field has changed and that the UI should be updated.</summary>
    <param name="pcpc">The credential containing a field whose interactivity state is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique ID of the field for which the string is being set.</param>
    <param name="psz">A pointer to the new string for the field.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents.SetFieldSubmitButton">
    <summary>Enables credentials to set the field that the submit button appears adjacent to.</summary>
    <param name="pcpc">The credential whose submit button location is being set. This value should be set to <b>this</b>. See <see cref="ICredentialProviderCredentialEvents" /> for more information.</param>
    <param name="dwFieldID">The unique field ID of the submit button.</param>
    <param name="dwAdjacentTo">The unique field ID of the field that the submit button should be adjacent to when this method completes.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="ICredentialProviderCredentialEvents">
    <summary>Provides an asynchronous callback mechanism used by a credential to notify it of state or text change events in the Logon UI or Credential UI.</summary>
  </member>
</doc>