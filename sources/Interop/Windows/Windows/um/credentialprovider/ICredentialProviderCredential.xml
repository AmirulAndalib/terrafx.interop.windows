<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ICredentialProviderCredential.Advise">
    <summary>
      <para>Enables a credential to initiate events in the Logon UI or Credential UI through a callback interface. This method should be called before other methods in <see cref="ICredentialProviderCredential" /> interface.</para>
    </summary>
    <param name="pcpce">
      <para>Type: <b><see cref="ICredentialProviderCredentialEvents" />*</b></para>
      <para>A pointer to an <see cref="ICredentialProviderCredentialEvents" /> callback interface to be used as the notification mechanism.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is optional. If you do not implement this method, you should just return <b>E_NOTIMPL</b>.</para>
      <para>Credential providers that implement this method have the responsibility of calling <see cref="AddRef" /> on the provided <see cref="ICredentialProviderCredentialEvents" />. Those credential providers also need to call <see cref="Release" /> during the <see cref="UnAdvise" /> method.</para>
    </remarks>
    <seealso cref="ICredentialProviderCredential" />
    <seealso cref="ICredentialProviderCredential.UnAdvise" />
  </member>
  <member name="ICredentialProviderCredential.CommandLinkClicked">
    <summary>
      <para>Enables the Logon UI and Credential UI to indicate that a link was clicked.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field clicked on.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method contains the logic that the credential provider uses to respond to the click.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.GetBitmapValue">
    <summary>
      <para>Enables retrieval of bitmap data from a credential with a bitmap field.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field.</para>
    </param>
    <param name="phbmp">
      <para>Type: <b>HBITMAP*</b></para>
      <para>Contains a pointer to the handle of the bitmap.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is optional.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.GetCheckboxValue">
    <summary>
      <para>Retrieves the checkbox value.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field.</para>
    </param>
    <param name="pbChecked">
      <para>Type: <b>BOOL*</b></para>
      <para>Indicates the state of the checkbox. <b>TRUE</b> indicates the checkbox is checked, otherwise <b>FALSE</b>.</para>
    </param>
    <param name="ppszLabel">
      <para>Type: <b>LPWSTR*</b></para>
      <para>Points to the label on the checkbox.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredential.GetComboBoxValueAt">
    <summary>
      <para>Gets the string label for a combo box entry at the given index.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the combo box to query.</para>
    </param>
    <param name="dwItem">
      <para>Type: <b>DWORD</b></para>
      <para>The index of the desired item.</para>
    </param>
    <param name="ppszItem">
      <para>Type: <b>LPWSTR*</b></para>
      <para>A pointer to the string value that receives the combo box label.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredential.GetComboBoxValueCount">
    <summary>
      <para>Gets a count of the items in the specified combo box and designates which item should have initial selection.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the combo box to gather information about.</para>
    </param>
    <param name="pcItems">
      <para>Type: <b>DWORD*</b></para>
      <para>A pointer to the number of items in the given combo box.</para>
    </param>
    <param name="pdwSelectedItem">
      <para>Type: <b>DWORD*</b></para>
      <para>Contains a pointer to the item that receives initial selection.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Credential UI and Logon UI use this method to obtain the number of items in a combo box and designate which item should have initial selection.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.GetFieldState">
    <summary>
      <para>Retrieves the field state. The Logon UI and Credential UI use this to gain information about a field of a credential to display this information in the user tile.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field.</para>
    </param>
    <param name="pcpfs">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_FIELD_STATE" />*</b></para>
      <para>A pointer to the credential provider field state. This indicates when the field should be displayed on the user tile.</para>
    </param>
    <param name="pcpfis">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE" />*</b></para>
      <para>A pointer to the credential provider field interactive state. This indicates when the user can interact with the field.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredential.GetSerialization">
    <summary>
      <para>Called in response to an attempt to submit this credential to the underlying authentication engine.</para>
    </summary>
    <param name="pcpgsr">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE" />*</b></para>
      <para>Indicates the success or failure of the attempt to serialize credentials.</para>
    </param>
    <param name="pcpcs">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" />*</b></para>
      <para>A pointer to the credential. Depending on the result, there may be no valid credential.</para>
    </param>
    <param name="ppszOptionalStatusText">
      <para>Type: <b>LPWSTR*</b></para>
      <para>A pointer to a Unicode string value that will be displayed by the Logon UI after serialization. May be <b>NULL</b>.</para>
    </param>
    <param name="pcpsiOptionalStatusIcon">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_STATUS_ICON" />*</b></para>
      <para>A pointer to an icon that will be displayed by the credential after the call to <b>GetSerialization</b> returns. This value can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required.</para>
      <para>The <see cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" /> indicates what the appropriate response would be when the user attempts to submit credentials. The following table indicates how to respond based on the usage scenario.</para>
      <list type="table">
        <listheader>
          <description>
            <b>CPUS_CHANGE_PASSWORD</b>
          </description>
          <description>No credential serialization occurs in this scenario. In this scenario the credential provider should update the user's private information and return <b>CPGSR_NO_CREDENTIAL_FINISHED</b> as <i>pcpgsr.</i></description>
        </listheader>
        <item>
          <description>
            <b>CPUS_CREDUI</b>
          </description>
          <description>The credential information should be serialized and delivered to the calling application.</description>
        </item>
        <item>
          <description>
            <b>CPUS_LOGON</b>, <b>CPUS_UNLOCK_WORKSTATION</b></description>
          <description>The credential information should be packed into a binary stream and transmitted to <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/winlogon">Winlogon</a> and eventually LSA.</description>
        </item>
      </list>
      <h3>Credential Provider Best Practices</h3>
      <para>Credential providers handle extremely sensitive user secrets in order to complete logon and unlock requests. As a best practice, secret information such as passwords and PINs should be handled with the utmost care. Proper techniques for handling secret information within a credential provider are:</para>
      <list type="bullet">
        <item>
          <description>Always securely discard secrets. To do this, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> before freeing the memory used to hold any secret.</description>
        </item>
        <item>
          <description>Securely discard secrets promptly after they are used.</description>
        </item>
        <item>
          <description>Securely discard secrets if they are not used for their intended purpose within an expected amount of time.</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.GetStringValue">
    <summary>
      <para>Enables retrieval of text from a credential with a text field.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field.</para>
    </param>
    <param name="ppsz">
      <para>Type: <b>LPWSTR*</b></para>
      <para>A pointer to the memory containing a null-terminated Unicode string to return to the Logon UI or Credential UI.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is optional.</para>
      <para>The Logon UI and Credential UI us this method to obtain the <i>pszLabel</i> for a field. This information is necessary to get values for <b>CPFT_LARGE_TEXT</b>, <b>CPFT_SMALL_TEXT</b>, <b>CPFT_COMMAND_LINK</b>, <b>CPFT_EDIT_TEXT</b>, and <b>CPFT_PASSWORD_TEXT</b> fields.</para>
      <h3>Credential Provider Best Practices</h3>
      <para>Credential providers handle extremely sensitive user secrets in order to complete logon and unlock requests. As a best practice, secret information such as passwords and PINs should be handled with the utmost care. Proper techniques for handling secret information within a credential provider are:</para>
      <list type="bullet">
        <item>
          <description>Always securely discard secrets. To do this, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> before freeing the memory used to hold any secret.</description>
        </item>
        <item>
          <description>Securely discard secrets promptly after they are used.</description>
        </item>
        <item>
          <description>Securely discard secrets if they are not used for their intended purpose within an expected amount of time.</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.GetSubmitButtonValue">
    <summary>
      <para>Retrieves the identifier of a field that the submit button should be placed next to in the Logon UI. The Credential UI does not call this method.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field a submit button value is needed for.</para>
    </param>
    <param name="pdwAdjacentTo">
      <para>Type: <b>DWORD*</b></para>
      <para>A pointer to a value that receives the field ID of the field that the submit button should be placed next to.</para>
      <para>
        <b>Note to implementers:</b> Do not return the field ID of a bitmap in this parameter. It is not good UI design to place the submit button next to a bitmap, and doing so can cause a failure in the Logon UI.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The submit button is not labeled as such; that is simply a generic way to refer to the button you click to submit the credentials. The button normally appears as a circular button that contains an arrow pointing to the right, although this appearance could change in later releases. For more information, see <see cref="CPFT_SUBMIT_BUTTON" />.</para>
      <para>You should not hide the submit button unless your credential provider always performs automatic submission. Otherwise it can be confusing to the users since they will not see a way to submit their credentials.</para>
      <para>Call this method when assembling the Logon UI. For example usage, see the Credential Providers samples included in the Windows Software Development Kit (SDK).</para>
      <para>.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.ReportResult">
    <summary>
      <para>Translates a received error status code into the appropriate user-readable message. The Credential UI does not call this method.</para>
    </summary>
    <param name="ntsStatus">
      <para>Type: <b>NTSTATUS</b></para>
      <para>The <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/ntstatus-values">NTSTATUS</a> value that reflects the return value of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/winlogon">Winlogon</a> call to <see cref="LsaLogonUser" />.</para>
    </param>
    <param name="ntsSubstatus">
      <para>Type: <b>NTSTATUS</b></para>
      <para>The <a href="https://docs.microsoft.com//windows-hardware/drivers/kernel/ntstatus-values">NTSTATUS</a> value that reflects the value pointed to by the <i>SubStatus</i> parameter of <see cref="LsaLogonUser" /> when that function returns after being called by <a href="https://docs.microsoft.com//windows/desktop/SecAuthN/winlogon">Winlogon</a>.</para>
    </param>
    <param name="ppszOptionalStatusText">
      <para>Type: <b>LPWSTR*</b></para>
      <para>A pointer to the error message that will be displayed to the user. May be <b>NULL</b>.</para>
    </param>
    <param name="pcpsiOptionalStatusIcon">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_STATUS_ICON" />*</b></para>
      <para>A pointer to an icon  that will shown on the credential. May be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required for Logon UI.</para>
      <para>This method is used to report the outcome of a logon attempt back to a credential. The information in <i>ntsStatus</i> and <i>ntsSubstatus</i> can also be used when credential providers want to generate custom error messages. That status text from this call will be displayed on the selected credential.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.SetCheckboxValue">
    <summary>
      <para>Enables a Logon UI and Credential UI to indicate that a checkbox value has changed.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field to update.</para>
    </param>
    <param name="bChecked">
      <para>Type: <b>BOOL</b></para>
      <para>Indicates the new value for the checkbox. <b>TRUE</b> means the checkbox should be checked, <b>FALSE</b> means unchecked.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredential.SetComboBoxSelectedValue">
    <summary>
      <para>Enables a Logon UI and Credential UI to indicate that a combo box value has been selected.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the combo box that is affected.</para>
    </param>
    <param name="dwSelectedItem">
      <para>Type: <b>DWORD</b></para>
      <para>The specific item selected.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
  </member>
  <member name="ICredentialProviderCredential.SetDeselected">
    <summary>
      <para>Called when a credential loses selection.</para>
    </summary>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Credential providers should use this method to purge all buffers containing sensitive information such as a password or Personal Identification Number (PIN). This is in addition to purging them in the destructor of the class that stores them.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.SetSelected">
    <summary>
      <para>Called when a credential is selected. Enables the implementer to set logon characteristics.</para>
    </summary>
    <param name="pbAutoLogon">
      <para>Type: <b>BOOL*</b></para>
      <para>When this method returns, contains <b>TRUE</b> if selection of the credential indicates that it should attempt to logon immediately and automatically, otherwise <b>FALSE</b>. For example, a credential provider that enumerates an account without a password may want to return this as true.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Returning any value other than <b>S_OK</b> causes the Logon UI and Credential UI to behave as if no selection occurred.</para>
      <para>In Windows 10, if a credential provider wants to automatically log the user on in a situation Windows does not think is appropriate, the system will display a sign in button as a speed bump. One example of this is when a user with an empty password locks the computer or signs out. In that scenario,  Windows does not directly log the user back in.</para>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.SetStringValue">
    <summary>
      <para>Enables a Logon UI or Credential UI to update the text for a <b>CPFT_EDIT_TEXT</b> fields as the user types in them.</para>
    </summary>
    <param name="dwFieldID">
      <para>Type: <b>DWORD</b></para>
      <para>The identifier for the field that needs to be updated.</para>
    </param>
    <param name="psz">
      <para>Type: <b>LPCWSTR</b></para>
      <para>A pointer to a buffer containing the new text.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is optional.</para>
      <h3>Credential Provider Best Practices</h3>
      <para>Credential providers handle extremely sensitive user secrets in order to complete logon and unlock requests. As a best practice, secret information such as passwords and PINs should be handled with the utmost care. Proper techniques for handling secret information within a credential provider are:</para>
      <list type="bullet">
        <item>
          <description>Always securely discard secrets. To do this, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> before freeing the memory used to hold any secret.</description>
        </item>
        <item>
          <description>Securely discard secrets promptly after they are used.</description>
        </item>
        <item>
          <description>Securely discard secrets if they are not used for their intended purpose within an expected amount of time.</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="ICredentialProviderCredential.UnAdvise">
    <summary>
      <para>Used by the Logon UI or Credential UI to advise the credential that event callbacks are no longer accepted.</para>
    </summary>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is optional. If you do not implement this method, you should just return <b>E_NOTIMPL</b>.</para>
      <para>If this method is called, it indicates that the <see cref="ICredentialProviderCredentialEvents" /> pointer provided in <see cref="Advise" /> is no longer valid. It is the responsibility of the credential provider to call <see cref="Release" /> on the provided <b>ICredentialProviderCredentialEvents</b> pointer during this method.</para>
    </remarks>
    <seealso cref="ICredentialProviderCredential" />
    <seealso cref="ICredentialProviderCredential.Advise" />
  </member>
  <member name="ICredentialProviderCredential">
    <summary>
      <para>Exposes methods that enable the handling of a credential.</para>
    </summary>
    <remarks>
      <h3>When to Implement</h3>
      <b>ICredentialProviderCredential</b> is implemented by outside parties providing a Logon UI or Credential UI  prompting for user credentials. Enumeration of user tiles cannot be done without an implementation of this interface.
<h3>Credential Provider Best Practices</h3><para>Credential providers handle extremely sensitive user secrets in order to complete logon and unlock requests. As a best practice, secret information such as passwords and PINs should be handled with the utmost care. Proper techniques for handling secret information within a credential provider are:</para><list type="bullet"><item><description>Always securely discard secrets. To do this, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> before freeing the memory used to hold any secret.</description></item><item><description>Securely discard secrets promptly after they are used.</description></item><item><description>Securely discard secrets if they are not used for their intended purpose within an expected amount of time.</description></item></list></remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthN/credential-providers-in-windows">Credential Providers in Windows 10</seealso>
    <seealso cref="ICredentialProvider" />
  </member>
</doc>