<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ICredentialProvider.Advise">
    <summary>
      <para>Allows a credential provider to initiate events in the Logon UI or Credential UI through a callback interface.</para>
    </summary>
    <param name="pcpe">
      <para>Type: <b><see cref="ICredentialProviderEvents" />*</b></para>
      <para>A pointer to an <see cref="ICredentialProviderEvents" /> callback interface to be used as the notification mechanism.</para>
    </param>
    <param name="upAdviseContext">
      <para>Type: <b>UINT_PTR</b></para>
      <para>A pointer to an integer that uniquely identifies which credential provider has requested re-enumeration.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The method does not need to be implemented, and should return <b>E_NOTIMPL</b> if it doesn't. There might be no reason to call it, such as if the Logon UI or Credential UI never changes or updates.</para>
      <para>This method enables the Logon UI and the Credential UI to pass an <see cref="ICredentialProviderEvents" /> pointer to the credential provider. This enables the credential provider to have asynchronous callback communication with the Logon or Credential UI. For example, a smart card provider might want to enumerate credentials again when a new smart card is inserted. In order to trigger the Logon UI to get credentials again,  the credential provider should call <see cref="CredentialsChanged" /> providing the <i>upAdviseContext</i> identifier.</para>
      <para>Credential providers that implement this method have the responsibility of calling <see cref="AddRef" /> on the provided <see cref="ICredentialProviderEvents" />. Those credential providers also need to call <see cref="Release" /> during the <see cref="UnAdvise" /> method.</para>
    </remarks>
    <seealso cref="ICredentialProvider" />
    <seealso cref="ICredentialProvider.UnAdvise" />
  </member>
  <member name="ICredentialProvider.GetCredentialAt">
    <summary>
      <para>Gets a specific credential.</para>
    </summary>
    <param name="dwIndex">
      <para>Type: <b>DWORD</b></para>
      <para>The zero-based index of the credential within the set of credentials enumerated for this credential provider.</para>
    </param>
    <param name="ppcpc">
      <para>Type: <b><see cref="ICredentialProviderCredential" />**</b></para>
      <para>The address of a pointer to a <see cref="ICredentialProviderCredential" /> instance representing the credential.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required.</para>
      <para>The number of available credentials is retrieved by <see cref="ICredentialProvider.GetCredentialCount" />. This method is used by the Logon UI or Credential UI in conjunction with <b>GetCredentialCount</b> to enumerate the credentials.</para>
    </remarks>
  </member>
  <member name="ICredentialProvider.GetCredentialCount">
    <summary>
      <para>Gets the number of available credentials under this credential provider.</para>
    </summary>
    <param name="pdwCount">
      <para>Type: <b>DWORD*</b></para>
      <para>A pointer to a <b>DWORD</b> value that receives the count of credentials.</para>
    </param>
    <param name="pdwDefault">
      <para>Type: <b>DWORD*</b></para>
      <para>A pointer to a <b>DWORD</b> value that receives the index of the credential to be used as the default. If no default value has been set, this value should be set to <b>CREDENTIAL_PROVIDER_NO_DEFAULT</b>.</para>
    </param>
    <param name="pbAutoLogonWithDefault">
      <para>Type: <b>BOOL*</b></para>
      <para>A pointer to a <b>BOOL</b> value indicating if the default credential identified by <i>pdwDefault</i> should be used for an auto logon attempt. An auto logon attempt means the Logon UI or Credential UI will immediately call <see cref="GetSerialization" /> on the provider's default tile.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required.</para>
      <para>When a Logon UI or Credential UI is ready for user interaction, a default credential is selected by default. Since each credential provider supplies a default credential, the following rules determine if <i>pdwDefault</i> will receive focus or if the credential will be automatically logged in.</para>
      <list type="bullet">
        <item>
          <description>If a default credential has already been specified, that credential is not intended to be used for auto logon, and the <i>pdwDefault</i> is used for auto logon, then <i>pdwDefault</i> will be used as the default.</description>
        </item>
        <item>
          <description>If <i>pdwDefault</i> is from the last logged on provider and there isn't already a default with auto logon, then <i>pdwDefault</i> will be used as the default.</description>
        </item>
        <item>
          <description>If no default has been specified, then <i>pdwDefault</i> will be used as the default.</description>
        </item>
      </list>
      <para>If the number of valid credentials change, the credential provider should call <see cref="CredentialsChanged" /> on the  <see cref="ICredentialProviderEvents" /> instance provided in <see cref="Advise" />.</para>
      <h3>Credential Provider Best Practices</h3>
      <para>Credential providers handle extremely sensitive user secrets in order to complete logon and unlock requests. As a best practice, secret information such as passwords and PINs should be handled with the utmost care. Proper techniques for handling secret information within a credential provider are:</para>
      <list type="bullet">
        <item>
          <description>Always securely discard secrets. To do this, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa366877(v=vs.85)">SecureZeroMemory</a> before freeing the memory used to hold any secret.</description>
        </item>
        <item>
          <description>Securely discard secrets promptly after they are used.</description>
        </item>
        <item>
          <description>Securely discard secrets if they are not used for their intended purpose within an expected amount of time.</description>
        </item>
      </list>
    </remarks>
  </member>
  <member name="ICredentialProvider.GetFieldDescriptorAt">
    <summary>
      <para>Gets metadata that describes a specified field.</para>
    </summary>
    <param name="dwIndex">
      <para>Type: <b>DWORD</b></para>
      <para>The zero-based index of the field for which the information should be retrieved.</para>
    </param>
    <param name="ppcpfd">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR" />**</b></para>
      <para>The address of a pointer to a <see cref="CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR" /> structure which receives the information about the field.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required.</para>
    </remarks>
  </member>
  <member name="ICredentialProvider.GetFieldDescriptorCount">
    <summary>
      <para>Retrieves the count of fields in the needed to display this provider's credentials.</para>
    </summary>
    <param name="pdwCount">
      <para>Type: <b>DWORD*</b></para>
      <para>Pointer to the field count.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required.</para>
      <para>The count provided by this method must be valid for the entire usage scenario. This means that you need to include all fields, even those that are hidden or only shown under special circumstances. This value cannot be changed during a usage scenario and can only be changed when a new <see cref="SetUsageScenario" /> call is made to the provider or the <see cref="ICredentialProviderEvents" /> instance forces another enumeration.</para>
    </remarks>
  </member>
  <member name="ICredentialProvider.SetSerialization">
    <summary>
      <para>Sets the serialization characteristics of the credential provider.</para>
    </summary>
    <param name="pcpcs">
      <para>Type: <b>const <see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" />*</b></para>
      <para>A pointer to a <see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" /> structure that stores the serialization characteristics of the credential provider.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required. It accepts a credential and determines if <i>pcpcs</i> was a partial or a full credential. If it is a partial credential, it is either incomplete or was passed for the purpose of displaying some information to the user. If it is a full credential, it should be serialized and submitted. Use the members of the <see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" /> and the flags passed in <see cref="SetUsageScenario" /> to determine how to handle the input. The responsibility is on the credential provider to verify the integrity of the input. The Credential UI and Logon UI do not perform any checks on the structure before passing it to the credential provider.</para>
      <para>
        <b>SetSerialization</b> is always called after <see cref="SetUsageScenario" />. The Logon UI also calls <b>SetSerialization</b> when a filter returns a credential through <see cref="UpdateRemoteCredential" />. It does not use this method when re-enumerating tiles because of a call to <see cref="CredentialsChanged" />. The Credential UI calls <b>SetSerialization</b> when an input credential has been suppled by an application.</para>
      <para>The Credential UI enforces the following rules based on the <i>dwFlags</i> for this content provider instance defined when <see cref="SetUsageScenario" /> was called.</para>
      <list type="bullet">
        <item>
          <description>If the flags include <b>CREDUIWIN_IN_CRED_ONLY</b>, all credential providers returning <b>S_OK</b> are enabled.</description>
        </item>
        <item>
          <description>If the flags include <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>, all credential providers returning a success status are enabled.</description>
        </item>
        <item>
          <description>If neither of those flags are included, then the Credential UI follows the same logic as the Logon UI and all credential providers that implement the <see cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" /><b>CPUS_REDUI</b> will be enabled regardless of the returned status value.</description>
        </item>
      </list>
      <para>Credential providers that implement a <see cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" /> of <b>CPUS_LOGON</b> and return a failure from this method will still be enabled.</para>
    </remarks>
  </member>
  <member name="ICredentialProvider.SetUsageScenario">
    <summary>
      <para>Defines the scenarios for which the credential provider is valid. Called whenever the credential provider is initialized.</para>
    </summary>
    <param name="cpus">
      <para>Type: <b><see cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" /></b></para>
      <para>The scenario the credential provider has been created in. This is the usage scenario that needs to be supported. See the Remarks for more information.</para>
    </param>
    <param name="dwFlags">
      <para>Type: <b>DWORD</b></para>
      <para>A value that affects the behavior of the credential provider. This value can be a bitwise-OR combination of one or more of the following values defined in Wincred.h. See <see cref="CredUIPromptForWindowsCredentials" /> for more information.</para>
      <h4>CREDUIWIN_GENERIC (0x00000001)</h4>
      <para>0x00000001. The caller is requesting that the credential provider return the user name and password in plain text. This value cannot be combined with <b>CREDUIWIN_SECURE_PROMPT</b>.</para>
      <h4>CREDUIWIN_CHECKBOX (0x00000002)</h4>
      <para>0x00000002. The <b>Save</b> check box is displayed in the dialog box.</para>
      <h4>CREDUIWIN_AUTHPACKAGE_ONLY (0x00000010)</h4>
      <para>0x00000010. Only credential providers that support the input authentication package should be enumerated. If credential providers do not support the input authentication package, they should enumerate zero user tiles. This value cannot be combined with <b>CREDUIWIN_IN_CRED_ONLY</b>.</para>
      <h4>CREDUIWIN_IN_CRED_ONLY (0x00000020)</h4>
      <para>0x00000020. If the provider can serialize the credentials, then it should enumerate a tile for that credential. No other tiles should be enumerated. Credential providers should use the input <see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" /> in <see cref="ICredentialProvider.SetSerialization" /> and <i>dwFlags</i> in <b>ICredentialProvider.SetUsageScenario</b> in order
to determine how many credential tiles to enumerate. This value cannot be combined with <b>CREDUIWIN_AUTHPACKAGE_ONLY</b>.</para>
      <h4>CREDUIWIN_ENUMERATE_ADMINS (0x00000100)</h4>
      <para>0x00000100. Credential providers should enumerate only administrators. This value is intended for UAC purposes only. We recommend that external callers not set this flag.</para>
      <h4>CREDUIWIN_ENUMERATE_CURRENT_USER (0x00000200)</h4>
      <para>0x00000200. Credential providers should enumerate a tile for the currently logged on user.</para>
      <h4>CREDUIWIN_SECURE_PROMPT (0x00001000)</h4>
      <para>0x00001000. The credential dialog box should be displayed on the secure desktop. This value cannot be combined with <b>CREDUIWIN_GENERIC</b>. Credential provider implementers can safely ignore this flag.</para>
      <h4>CREDUIWIN_PACK_32_WOW (0x10000000)</h4>
      <para>0x10000000. Buffers passed to the provider are 32-bit. Buffers returned from the provider must also be 32-bit. This is necessary for WOW64.</para>
    </param>
    <returns>
      <para>Type: <b>HRESULT</b></para>
      <para>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This method is required and enables the credential provider to indicate how it will be used.</para>
      <para>This method should return <b>E_NOTIMPL</b> if the call completes but the requested usage scenario is not supported. This method should return <b>S_OK</b> if the method is successful and the usage scenario is supported.</para>
    </remarks>
  </member>
  <member name="ICredentialProvider">
    <summary>
      <para>Exposes methods used in the setup and manipulation of a credential provider. All credential providers must implement this interface.</para>
    </summary>
    <remarks>
      <para>This interface is how you will interact with the Logon UI and the Credential UI for your app.</para>
      <para>An instantiated credential provider is maintained for the entire lifetime of a Logon UI. Because of this, the Logon UI can maintain the state of a credential provider. In particular, it remembers which provider and tile provided a credential. This means that you can potentially store state information when you are using a <see cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" /> of <b>CPUS_LOGON</b>, <b>CPUS_UNLOCK_WORKSTATION</b>, and <b>CPUS_CHANGE_PASSWORD</b>. This is not the case with the Credential UI. The Credential UI creates a new instance of the provider every time an application calls <see cref="CredUIPromptForWindowsCredentials" />. Because of this, the Credential UI cannot remember a credential provider's state.</para>
      <para>Be aware that  a <see cref="CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION" /> generated in one scenario might be saved and used in a subsequent usage scenario. Because of this, it is necessary to make sure your <b>ICredentialProvider</b> implementation is robust enough to handle this scenario.</para>
      <para>Windows 8 adds new functionality in the credential providers API, primarily the ability to group credentials by user.</para>
    </remarks>
    <seealso cref="CREDENTIAL_PROVIDER_USAGE_SCENARIO" />
    <seealso href="https://go.microsoft.com/fwlink/?linkid=717287">Credential Provider driven Windows Logon Experience</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthN/credential-providers-in-windows">Credential Providers in Windows 10</seealso>
    <seealso cref="ICredentialProviderCredential" />
  </member>
</doc>