<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPart.Activate">
    <summary>The <b>Activate</b> method activates a function-specific interface on a connector or subunit.</summary>
    <param name="dwClsContext">The execution context in which the code that manages the newly created object will run. The caller can restrict the context by setting this parameter to the bitwise <b>OR</b> of one or more <b>CLSCTX</b> enumeration values. The client can avoid imposing any context restrictions by specifying CLSCTX_ALL. For more information about <b>CLSCTX</b>, see the Windows SDK documentation.</param>
    <param name="refiid">
      <para>The interface ID for the requested control function. The client should set this parameter to one of the following <b>REFIID</b> values:</para>
      <para>IID_IAudioAutoGainControl</para>
      <para>IID_IAudioBass</para>
      <para>IID_IAudioChannelConfig</para>
      <para>IID_IAudioInputSelector</para>
      <para>IID_IAudioLoudness</para>
      <para>IID_IAudioMidrange</para>
      <para>IID_IAudioMute</para>
      <para>IID_IAudioOutputSelector</para>
      <para>IID_IAudioPeakMeter</para>
      <para>IID_IAudioTreble</para>
      <para>IID_IAudioVolumeLevel</para>
      <para>IID_IDeviceSpecificProperty</para>
      <para>IID_IKsFormatSupport</para>
      <para>IID_IKsJackDescription</para>
      <para>IID_IKsJackDescription2</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="ppvObject">Pointer to a pointer variable into which the method writes the address of the interface that is specified by parameter <i>refiid</i>. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>Activate</b> call fails, <i>*ppObject</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CLSCTX_INPROC_SERVER bit in <i>dwClsContext</i> is zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppvObject</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The part object does not support the requested interface.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.EnumPartsIncoming">
    <summary>The <b>EnumPartsIncoming</b> method gets a list of all the incoming parts—that is, the parts that reside on data paths that are upstream from this part.</summary>
    <param name="ppParts">Pointer to a pointer variable into which the method writes the address of an <see cref="IPartsList" /> interface that encapsulates the list of parts that are immediately upstream from this part. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>EnumPartsIncoming</b> call fails, <i>*ppParts</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppParts</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This part has no links to upstream parts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.EnumPartsOutgoing">
    <summary>The <b>EnumPartsOutgoing</b> method retrieves a list of all the outgoing parts—that is, the parts that reside on data paths that are downstream from this part.</summary>
    <param name="ppParts">Pointer to a pointer variable into which the method writes the address of an <see cref="IPartsList" /> interface that encapsulates the list of parts that are immediately downstream from this part. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>EnumPartsOutgoing</b> call fails, <i>*ppParts</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppParts</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This part has no links to downstream parts.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetControlInterface">
    <summary>The <b>GetControlInterface</b> method gets a reference to the specified control interface, if this part supports it.</summary>
    <param name="nIndex">The control interface number. If a part supports <i>n</i> control interfaces, the control interfaces are numbered from 0 to <i>n</i>– 1.</param>
    <param name="ppInterfaceDesc">Pointer to a pointer variable into which the method writes the address of the <see cref="IControlInterface" /> interface of the specified audio function. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetControlInterface</b> call fails, <i>*ppFunction</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppFunction</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>nIndex</i> is out of range.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The part does not have a control interface.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetControlInterfaceCount">
    <summary>The <b>GetControlInterfaceCount</b> method gets the number of control interfaces that this part supports.</summary>
    <param name="pCount">Pointer to a <b>UINT</b> variable into which the method writes the number of control interfaces on this part.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pCount</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetGlobalId">
    <summary>The <b>GetGlobalId</b> method gets the global ID of this part.</summary>
    <param name="ppwstrGlobalId">Pointer to a pointer variable into which the method writes the address of a null-terminated, wide-character string that contains the global ID. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the <b>CoTaskMemFree</b> function. If the <b>GetGlobalId</b> call fails, <i>*ppwstrGlobalId</i> is <b>NULL</b>. For information about <b>CoTaskMemFree</b>, see the Windows SDK documentation.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppwstrGlobalId</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetLocalId">
    <summary>The <b>GetLocalId</b> method gets the local ID of this part.</summary>
    <param name="pnId">Pointer to a <b>UINT</b> variable into which the method writes the local ID of this part.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pnId</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetName">
    <summary>The <b>GetName</b> method gets the friendly name of this part.</summary>
    <param name="ppwstrName">Pointer to a pointer variable into which the method writes the address of a null-terminated, wide-character string that contains the friendly name of this part. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the <b>CoTaskMemFree</b> function. If the <b>GetName</b> call fails, <i>*ppwstrName</i> is <b>NULL</b>. For information about <b>CoTaskMemFree</b>, see the Windows SDK documentation.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppwstrName</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetPartType">
    <summary>The <b>GetPartType</b> method gets the part type of this part.</summary>
    <param name="pPartType">
      <para>Pointer to a <see cref="PartType" /> variable into which the method writes the part type. The part type is one of the following <b>PartType</b> enumeration values, which indicate whether the part is a connector or subunit:</para>
      <para>Connector</para>
      <para>Subunit</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pPartType</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetSubType">
    <summary>The <b>GetSubType</b> method gets the part subtype of this part.</summary>
    <param name="pSubType">Pointer to a GUID variable into which the method writes the subtype GUID for this part.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pSubType</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.GetTopologyObject">
    <summary>The <b>GetTopologyObject</b> method gets a reference to the <see cref="IDeviceTopology" /> interface of the device-topology object that contains this part.</summary>
    <param name="ppTopology">Pointer to a pointer variable into which the method writes the address of the <b>IDeviceTopology</b> interface of the device-topology object. The caller obtains a counted reference to the interface from this method. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetTopologyObject</b> call fails, <i>*ppTopology</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppTopology</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.RegisterControlChangeCallback">
    <summary>The <b>RegisterControlChangeCallback</b> method registers the <see cref="IControlChangeNotify" /> interface, which the client implements to receive notifications of status changes in this part.</summary>
    <param name="riid">The function-specific control interface that is to be monitored for control changes. For more information, see Remarks.</param>
    <param name="pNotify">Pointer to the client's <see cref="IControlChangeNotify" /> interface. If the method succeeds, it calls the <see cref="AddRef" /> method on the client's <b>IControlChangeNotify</b> interface.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>riid</i> is not a valid control-interface identifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pNotify</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart.UnregisterControlChangeCallback">
    <summary>The <b>UnregisterControlChangeCallback</b> method removes the registration of an <see cref="IControlChangeNotify" /> interface that the client previously registered by a call to the <see cref="IPart.RegisterControlChangeCallback" /> method.</summary>
    <param name="pNotify">Pointer to the <b>IControlChangeNotify</b> interface whose registration is to be deleted. The client passed this same interface pointer to the part object in a previous call to the <b>IPart.RegisterControlChangeCallback</b> method. If the <b>UnregisterControlChangeCallback</b> method succeeds, it calls the <b>Release</b> method on the client's <b>IControlChangeNotify</b> interface.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pNotify</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Interface instance <i>*pNotify</i> is not currently registered.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPart">
    <summary>
      <para>The <b>IPart</b> interface represents a part (connector or subunit) of a device topology. A client obtains a reference to an <b>IPart</b> interface by calling the <see cref="IDeviceTopology.GetPartById" /> or <see cref="IPartsList.GetPart" /> method, or by calling the <b>QueryInterface</b> method of the <see cref="IConnector" /> or <see cref="ISubunit" /> interface on a part object and setting the method's <i>iid</i> parameter to <b>REFIID</b> IID_IPart.</para>
      <para>An object with an <b>IPart</b> interface can encapsulate one of the following device topology parts:</para>
      <list type="bullet">
        <item>
          <description>
            <b>Connector.</b> This is a part that connects to another device to form a data path for transmitting an audio stream between devices.</description>
        </item>
        <item>
          <description>
            <b>Subunit.</b> This is a part that processes an audio stream (for example, volume control).</description>
        </item>
      </list>The <b>IPart</b> interface of a connector or subunit object represents the generic functions that are common to all parts, and the object's <b>IConnector</b> or <b>ISubunit</b> interface represents the functions that are specific to a connector or subunit. In addition, a part might support one or more control interfaces for controlling or monitoring the function of the part. For example, the client controls a volume-control subunit through its <see cref="IAudioVolumeLevel" /> interface.<para>The <b>IPart</b> interface provides methods for getting the name, local ID, global ID, and part type of a connector or subunit. In addition, <b>IPart</b> can activate a control interface on a connector or subunit.</para><para>For code examples that use the <b>IPart</b> interface, see the implementations of the GetHardwareDeviceTopology and SelectCaptureDevice functions in <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/device-topologies">Device Topologies</a>.</para></summary>
  </member>
</doc>