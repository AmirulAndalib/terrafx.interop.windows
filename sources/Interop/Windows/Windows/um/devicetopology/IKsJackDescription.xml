<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IKsJackDescription.GetJackCount">
    <summary>
      <para>The <b>GetJackCount</b> method gets the number of jacks required to connect to an audio endpoint device.</para>
    </summary>
    <param name="pcJacks">
      <para>Pointer to a <b>UINT</b> variable into which the method writes the number of jacks associated with the connector.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>pcJacks</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An audio endpoint device that plays or records a stream that contains multiple channels might require a connection with more than one jack (physical connector).</para>
      <para>For example, a set of surround speakers that plays a 6-channel audio stream might require three stereo jacks. In this example, the first jack transmits the channels for the front-left and front-right speakers, the second jack transmits the channels for the front-center and low-frequency-effects (subwoofer) speakers, and the third jack transmits the channels for the side-left and side-right speakers.</para>
      <para>After calling this method to retrieve the jack count, call the <see cref="IKsJackDescription.GetJackDescription" /> method once for each jack to obtain a description of the jack.</para>
    </remarks>
    <seealso cref="IKsJackDescription Interface" />
    <seealso cref="IKsJackDescription.GetJackDescription" />
  </member>
  <member name="IKsJackDescription.GetJackDescription">
    <summary>
      <para>The <b>GetJackDescription</b> method gets a description of an audio jack.</para>
    </summary>
    <param name="nJack">
      <para>The jack index. If the connection consists of <i>n</i> jacks, the jacks are numbered from 0 to <i>n</i>– 1. To get the number of jacks, call the <see cref="IKsJackDescription.GetJackCount" /> method.</para>
    </param>
    <param name="pDescription">
      <para>Pointer to a caller-allocated buffer into which the method writes a structure of type <see cref="KSJACK_DESCRIPTION" /> that contains information about the jack. The buffer size must be at least sizeof(KSJACK_DESCRIPTION).</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>nJack</i> is not a valid jack index.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>pDescription</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a user needs to plug an audio endpoint device into a jack or unplug it from a jack, an audio application can use the descriptive information that it retrieves from this method to help the user to find the jack. This information includes:</para>
      <list type="bullet">
        <item>
          <description>The physical location of the jack on the computer chassis or external box.</description>
        </item>
        <item>
          <description>The color of the jack.</description>
        </item>
        <item>
          <description>The type of physical connector used for the jack.</description>
        </item>
        <item>
          <description>The mapping of channels to the jack.</description>
        </item>
      </list>
      <para>For more information, see <see cref="KSJACK_DESCRIPTION" />.</para>
    </remarks>
    <seealso cref="IKsJackDescription Interface" />
    <seealso cref="IKsJackDescription.GetJackCount" />
    <seealso cref="KSJACK_DESCRIPTION" />
  </member>
  <member name="IKsJackDescription">
    <summary>
      <para>The <b>IKsJackDescription</b> interface provides information about the jacks or internal connectors that provide a physical connection between a device on an audio adapter and an external or internal endpoint device (for example, a microphone or CD player). The client obtains a reference to the <b>IKsJackDescription</b> interface of a part by calling the <see cref="IPart.Activate" /> method with parameter <i>refiid</i> set to <b>REFIID</b> IID_IKsJackDescription. The call to <b>IPart.Activate</b> succeeds only if the part supports the <b>IKsJackDescription</b> interface. Only a part object that represents a connector with a Physical_External or Physical_Internal connection type will support this interface.</para>
      <para>Most Windows audio adapter drivers support the Windows Driver Model (WDM) and use kernel-streaming (KS) properties to represent the hardware description parameters in connectors (referred to as KS pins). The <b>IKsJackDescription</b> interface provides convenient access to the KSPROPERTY_JACK_DESCRIPTION property of a connector to an endpoint device. For more information about KS properties and KS pins, see the Windows DDK documentation.</para>
    </summary>
    <remarks>
      <para>If an audio endpoint device supports the <b>IKsJackDescription</b> interface, the Windows multimedia control panel, Mmsys.cpl, displays the jack information. To view the jack information, follow these steps:</para>
      <list type="number">
        <item>
          <description>
            <para>To run Mmsys.cpl, open a Command Prompt window and enter the following command:</para>
            <para>
              <b>control mmsys.cpl</b>
            </para>
            <para>Alternatively, you can run Mmsys.cpl by right-clicking the speaker icon in the notification area, which is located on the right side of the taskbar, and selecting either <b>Playback Devices</b> or <b>Recording Devices</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>After the Mmsys.cpl window opens, select a device from either the list of playback devices or the list of recording devices, and click <b>Properties</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>When the properties window opens, click <b>General</b>. If the selected property page displays the jack information for the device, the device supports the <b>IKsJackDescription</b> interface. If the property page displays the text "No jack information is available", the device does not support the interface.</para>
          </description>
        </item>
      </list>
      <para>The following code example shows how to obtain the <b>IKsJackDescription</b> interface for an audio endpoint device:</para>
      <code>//-----------------------------------------------------------
// Get the IKsJackDescription interface that describes the
// audio jack or jacks that the endpoint device plugs into.
//-----------------------------------------------------------
#define EXIT_ON_ERROR(hres)  \
              if (FAILED(hres)) { goto Exit; }
#define SAFE_RELEASE(punk)  \
              if ((punk) != NULL)  \
                { (punk)-&gt;Release(); (punk) = NULL; }

HRESULT GetJackInfo(IMMDevice *pDevice,
                    IKsJackDescription **ppJackDesc)
{
    HRESULT hr = S_OK;
    IDeviceTopology *pDeviceTopology = NULL;
    IConnector *pConnFrom = NULL;
    IConnector *pConnTo = NULL;
    IPart *pPart = NULL;
    IKsJackDescription *pJackDesc = NULL;

    if (NULL != ppJackDesc)
    {
        *ppJackDesc = NULL;
    }
    if (NULL == pDevice || NULL == ppJackDesc)
    {
        return E_POINTER;
    }

    // Get the endpoint device's IDeviceTopology interface.
    hr = pDevice-&gt;Activate(__uuidof(IDeviceTopology), CLSCTX_ALL,
                           NULL, (void**)&amp;amp;amp;amp;amp;amp;pDeviceTopology);
    EXIT_ON_ERROR(hr)

    // The device topology for an endpoint device always
    // contains just one connector (connector number 0).
    hr = pDeviceTopology-&gt;GetConnector(0, &amp;amp;amp;amp;amp;amp;pConnFrom);
    EXIT_ON_ERROR(hr)

    // Step across the connection to the jack on the adapter.
    hr = pConnFrom-&gt;GetConnectedTo(&amp;amp;amp;amp;amp;amp;pConnTo);
    if (HRESULT_FROM_WIN32(ERROR_PATH_NOT_FOUND) == hr)
    {
        // The adapter device is not currently active.
        hr = E_NOINTERFACE;
    }
    EXIT_ON_ERROR(hr)

    // Get the connector's IPart interface.
    hr = pConnTo-&gt;QueryInterface(__uuidof(IPart), (void**)&amp;amp;amp;amp;amp;amp;pPart);
    EXIT_ON_ERROR(hr)

    // Activate the connector's IKsJackDescription interface.
    hr = pPart-&gt;Activate(CLSCTX_INPROC_SERVER,
                         __uuidof(IKsJackDescription), (void**)&amp;amp;amp;amp;amp;amp;pJackDesc);
    EXIT_ON_ERROR(hr)

    *ppJackDesc = pJackDesc;

Exit:
    SAFE_RELEASE(pDeviceTopology)
    SAFE_RELEASE(pConnFrom)
    SAFE_RELEASE(pConnTo)
    SAFE_RELEASE(pPart)
    return hr;
}

</code>
      <para>In the preceding code example, the GetJackInfo function takes two parameters. Input parameter <i>pDevice</i> points to the <see cref="IMMDevice" /> interface of an endpoint device. Output parameter <i>ppJackDesc</i> points to a pointer value into which the function writes the address of the corresponding <b>IKsJackDescription</b> interface, if the interface exists. If the interface does not exist, the function writes <b>NULL</b> to  <i>*ppJackDesc</i> and returns error code E_NOINTERFACE.</para>
      <para>In the preceding code example, the call to <see cref="IMMDevice.Activate" /> retrieves the <see cref="IDeviceTopology" /> interface of the endpoint device. The device topology of an endpoint device contains a single connector (connector number 0) that connects to the adapter device. At the other side of this connection, the connector on the adapter device represents the audio jack or jacks that the endpoint device plugs into. The call to the <see cref="IDeviceTopology.GetConnector" /> method retrieves the <see cref="IConnector" /> interface of the connector on the endpoint device, and the <see cref="IConnector.GetConnectedTo" /> method call retrieves the corresponding connector on the adapter device. Finally, the <b>IConnector.QueryInterface</b> method call retrieves the <see cref="IPart" /> interface of the adapter device's connector, and the <see cref="IPart.Activate" /> method call retrieves the connector's <b>IKsJackDescription</b> interface, if it exists.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/core-audio-interfaces">Core Audio Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/devicetopology-api">DeviceTopology API</seealso>
    <seealso cref="IPart.Activate" />
  </member>
</doc>