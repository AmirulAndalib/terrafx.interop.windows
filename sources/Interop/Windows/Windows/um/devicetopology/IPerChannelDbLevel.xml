<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPerChannelDbLevel.GetChannelCount">
    <summary>
      <para>The <b>GetChannelCount</b> method gets the number of channels in the audio stream.</para>
    </summary>
    <param name="pcChannels">
      <para>Pointer to a <b>UINT</b> variable into which the method writes the channel count (the number of channels in the audio stream).</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>pcChannels</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IPerChannelDbLevel Interface" />
  </member>
  <member name="IPerChannelDbLevel.GetLevel">
    <summary>
      <para>The <b>GetLevel</b> method gets the volume level, in decibels, of the specified channel.</para>
    </summary>
    <param name="nChannel">
      <para>The channel number. If the audio stream has <i>N</i> channels, the channels are numbered from 0 to <i>N</i>– 1. To get the number of channels in the stream, call the <see cref="IPerChannelDbLevel.GetChannelCount" /> method.</para>
    </param>
    <param name="pfLevelDB">
      <para>Pointer to a <b>float</b> variable into which the method writes the volume level, in decibels, of the specified channel.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>nChannel</i> is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>pfLevelDB</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IPerChannelDbLevel Interface" />
    <seealso cref="IPerChannelDbLevel.GetChannelCount" />
  </member>
  <member name="IPerChannelDbLevel.GetLevelRange">
    <summary>
      <para>The <b>GetLevelRange</b> method gets the range, in decibels, of the volume level of the specified channel.</para>
    </summary>
    <param name="nChannel">
      <para>The number of the selected channel. If the audio stream has <i>n</i> channels, the channels are numbered from 0 to <i>n</i>– 1. To get the number of channels in the stream, call the <see cref="IPerChannelDbLevel.GetChannelCount" /> method.</para>
    </param>
    <param name="pfMinLevelDB">
      <para>Pointer to a <b>float</b> variable into which the method writes the minimum volume level in decibels.</para>
    </param>
    <param name="pfMaxLevelDB">
      <para>Pointer to a <b>float</b> variable into which the method writes the maximum volume level in decibels.</para>
    </param>
    <param name="pfStepping">
      <para>Pointer to a <b>float</b> variable into which the method writes the stepping value between consecutive volume levels in the range  <i>*pfMinLevelDB</i> to  <i>*pfMaxLevelDB</i>. If the difference between the maximum and minimum volume levels is <i>d</i> decibels, and the range is divided into <i>n</i> steps (uniformly sized intervals), then the volume can have <i>n</i> + 1 discrete levels and the size of the step between consecutive levels is <i>d</i> / <i>n</i> decibels.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>nChannel</i> is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>pfminLevelDB</i>, <i>pfmaxLevelDB</i>, or <i>pfmaxLevelDB</i> is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IPerChannelDbLevel Interface" />
    <seealso cref="IPerChannelDbLevel.GetChannelCount" />
  </member>
  <member name="IPerChannelDbLevel.SetLevelAllChannels">
    <summary>
      <para>The <b>SetLevelAllChannels</b> method sets the volume levels, in decibels, of all the channels in the audio stream.</para>
    </summary>
    <param name="aLevelsDB">
      <para>Pointer to an array of volume levels. This parameter points to a caller-allocated <b>float</b> array into which the method writes the new volume levels, in decibels, for all the channels. The method writes the level for a particular channel into the array element whose index matches the channel number. If the audio stream contains <i>n</i> channels, the channels are numbered 0 to <i>n</i>– 1. To get the number of channels in the stream, call the <see cref="IPerChannelDbLevel.GetChannelCount" /> method.</para>
    </param>
    <param name="cChannels">
      <para>The number of elements in the <i>aLevelsDB</i> array. If this parameter does not match the number of channels in the audio stream, the method fails without modifying the <i>aLevelsDB</i> array.</para>
    </param>
    <param name="pguidEventContext">
      <para>Context value for the <see cref="IControlChangeNotify.OnNotify" /> method. This parameter points to an event-context GUID. If the <b>SetLevelAllChannels</b> call changes the state of the level control, all clients that have registered <see cref="IControlChangeNotify" /> interfaces with that control receive notifications. In its implementation of the <b>OnNotify</b> method, a client can inspect the event-context GUID to discover whether it or another client is the source of the control-change event. If the caller supplies a <b>NULL</b> pointer for this parameter, the client's notification method receives a <b>NULL</b> context pointer.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>cChannels</i> does not equal the number of channels.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Pointer <i>aLevelsDB</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Out of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the specified level value for any channel is beyond the range that the <see cref="IPerChannelDbLevel.GetLevelRange" /> method reports for that channel, the <b>SetLevelAllChannels</b> call clamps the value to the supported range and completes successfully. A subsequent call to the <see cref="IPerChannelDbLevel.GetLevel" /> method retrieves the actual value used for that channel.</para>
    </remarks>
    <seealso cref="IPerChannelDbLevel Interface" />
    <seealso cref="IPerChannelDbLevel.GetChannelCount" />
    <seealso cref="IPerChannelDbLevel.GetLevel" />
    <seealso cref="IPerChannelDbLevel.GetLevelRange" />
  </member>
  <member name="IPerChannelDbLevel.SetLevelUniform">
    <summary>
      <para>The <b>SetLevelUniform</b> method sets all channels in the audio stream to the same uniform volume level, in decibels.</para>
    </summary>
    <param name="fLevelDB">
      <para>The new uniform level in decibels.</para>
    </param>
    <param name="pguidEventContext">
      <para>Context value for the <see cref="IControlChangeNotify.OnNotify" /> method. This parameter points to an event-context GUID. If the <b>SetLevelUniform</b> call changes the state of the level control, all clients that have registered <see cref="IControlChangeNotify" /> interfaces with that control receive notifications. In its implementation of the <b>OnNotify</b> method, a client can inspect the event-context GUID to discover whether it or another client is the source of the control-change event. If the caller supplies a <b>NULL</b> pointer for this parameter, the client's notification method receives a <b>NULL</b> context pointer.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Out of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the specified uniform level is beyond the range that the <see cref="IPerChannelDbLevel.GetLevelRange" /> method reports for a particular channel, the <b>SetLevelUniform</b> call clamps the value for that channel to the supported range and completes successfully. A subsequent call to the <see cref="IPerChannelDbLevel.GetLevel" /> method retrieves the actual value used for that channel.</para>
    </remarks>
    <seealso cref="IPerChannelDbLevel Interface" />
    <seealso cref="IPerChannelDbLevel.GetLevel" />
    <seealso cref="IPerChannelDbLevel.GetLevelRange" />
  </member>
  <member name="IPerChannelDbLevel">
    <summary>
      <para>The <b>IPerChannelDbLevel</b> interface represents a generic subunit control interface that provides per-channel control over the volume level, in decibels, of an audio stream or of a frequency band in an audio stream. A positive volume level represents gain, and a negative value represents attenuation.</para>
      <para>Clients do not call the methods in this interface directly. Instead, this interface serves as the base interface for the following interfaces, which clients do call directly:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IAudioBass Interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IAudioMidrange Interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IAudioTreble Interface" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IAudioVolumeLevel Interface" />
          </description>
        </item>
      </list>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/core-audio-interfaces">Core Audio Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/devicetopology-api">DeviceTopology API</seealso>
    <seealso cref="IAudioBass Interface" />
    <seealso cref="IAudioMidrange Interface" />
    <seealso cref="IAudioTreble Interface" />
    <seealso cref="IAudioVolumeLevel Interface" />
  </member>
</doc>