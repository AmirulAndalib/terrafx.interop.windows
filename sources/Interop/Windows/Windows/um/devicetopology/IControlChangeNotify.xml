<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IControlChangeNotify.OnNotify">
    <summary>
      <para>The <b>OnNotify</b> method notifies the client when the status of a connector or subunit changes.</para>
    </summary>
    <param name="dwSenderProcessId">
      <para>The process ID of the client that changed the state of the control. If a notification is generated by a hardware event, this process ID will differ from the client's process ID. For more information, see Remarks.</para>
    </param>
    <param name="pguidEventContext">
      <para>A pointer to the context GUID for the control-change event. The client that initiates the control change supplies this GUID. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>A client can use this method to keep track of control changes made by other processes and by the hardware. However, a client that changes a control setting can typically disregard the notification that the control change generates. In its implementation of the <b>OnNotify</b> method, a client can inspect the <i>dwSenderProcessId</i> and <i>pguidEventContext</i> parameters to discover whether it or another client is the source of the control-change event.</para>
    </remarks>
    <seealso cref="IControlChangeNotify Interface" />
  </member>
  <member name="IControlChangeNotify">
    <summary>
      <para>The <b>IControlChangeNotify</b> interface provides notifications when the status of a part (connector or subunit) changes. Unlike the other interfaces in this section, which are implemented by the DeviceTopology API, the <b>IControlChangeNotify</b> interface must be implemented by a client. To receive notifications, the client passes a pointer to its <b>IControlChangeNotify</b> interface instance as a parameter to the <see cref="IPart.RegisterControlChangeCallback" /> method.</para>
      <para>After registering its <b>IControlChangeNotify</b> interface, the client receives event notifications in the form of callbacks through the <b>OnNotify</b> method in the interface.</para>
      <para>In implementing the <b>IControlChangeNotify</b> interface, the client should observe these rules to avoid deadlocks and undefined behavior:</para>
      <list type="bullet">
        <item>
          <description>The methods in the interface must be nonblocking. The client should never wait on a synchronization object during an event callback.</description>
        </item>
        <item>
          <description>The client should never call the <see cref="IPart.UnregisterControlChangeCallback" /> method during an event callback.</description>
        </item>
        <item>
          <description>The client should never release the final reference on an MMDevice API object during an event callback.</description>
        </item>
      </list>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/core-audio-interfaces">Core Audio Interfaces</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/devicetopology-api">DeviceTopology API</seealso>
    <seealso cref="IPart.RegisterControlChangeCallback" />
    <seealso cref="IPart.UnregisterControlChangeCallback" />
  </member>
</doc>