<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDeviceTopology.GetConnector">
    <summary>The <b>GetConnector</b> method gets the connector that is specified by a connector number.</summary>
    <param name="nIndex">The connector number. If a device topology contains n connectors, the connectors are numbered 0 to n – 1. To get the number of connectors in the device topology, call the <see cref="IDeviceTopology.GetConnectorCount" /> method.</param>
    <param name="ppConnector">Pointer to a pointer variable into which the method writes the address of the <see cref="IConnector" /> interface of the connector object. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetConnector</b> call fails, <i>*ppConnector</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>nIndex</i> is out of range.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppConnector</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetConnectorCount">
    <summary>The <b>GetConnectorCount</b> method gets the number of connectors in the device-topology object.</summary>
    <param name="pCount">Pointer to a <b>UINT</b> pointer variable into which the method writes the connector count (the number of connectors in the device topology).</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pCount</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetDeviceId">
    <summary>The <b>GetDeviceId</b> method gets the device identifier of the device that is represented by the device-topology object.</summary>
    <param name="ppwstrDeviceId">Pointer to a pointer variable into which the method writes the address of a null-terminated, wide-character string that contains the device identifier. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the <b>CoTaskMemFree</b> function. If the <b>GetDeviceId</b> call fails, <i>*ppwstrDeviceId</i> is <b>NULL</b>. For information about <b>CoTaskMemFree</b>, see the Windows SDK documentation.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>D_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppwstrDeviceId</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetPartById">
    <summary>The <b>GetPartById</b> method gets a part that is identified by its local ID.</summary>
    <param name="nId">The part to get. This parameter is the local ID of the part. For more information, see Remarks.</param>
    <param name="ppPart">Pointer to a pointer variable into which the method writes the address of the <see cref="IPart" /> interface of the part object that is identified by <i>nId</i>. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetPartById</b> call fails, <i>*ppPart</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>nId</i> is not a valid local ID.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppPart</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetSignalPath">
    <summary>The <b>GetSignalPath</b> method gets a list of parts in the signal path that links two parts, if the path exists.</summary>
    <param name="pIPartFrom">Pointer to the "from" part. This parameter is a pointer to the <see cref="IPart" /> interface of the part at the beginning of the signal path.</param>
    <param name="pIPartTo">Pointer to the "to" part. This parameter is a pointer to the <b>IPart</b> interface of the part at the end of the signal path.</param>
    <param name="bRejectMixedPaths">Specifies whether to reject paths that contain mixed data. If <i>bRejectMixedPaths</i> is <b>TRUE</b> (nonzero), the method ignores any data path that contains a mixer (that is, a processing node that sums together two or more input signals). If <b>FALSE</b>, the method will try to find a path that connects the "from" and "to" parts regardless of whether the path contains a mixer.</param>
    <param name="ppParts">Pointer to a pointer variable into which the method writes the address of an <see cref="IPartsList" /> interface instance. This interface encapsulates the list of parts in the signal path that connects the "from" part to the "to" part. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetSignalPath</b> call fails, <i>*ppParts</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>pIPartFrom</i>, <i>pIPartTo</i>, or <i>ppParts</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No path linking the two parts was found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>pIPartFrom</i> or <i>pIPartTo</i> does not point to a valid <b>IPart</b> interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetSubunit">
    <summary>The <b>GetSubunit</b> method gets the subunit that is specified by a subunit number.</summary>
    <param name="nIndex">The subunit number. If a device topology contains <i>n</i> subunits, the subunits are numbered from 0 to <i>n</i>– 1. To get the number of subunits in the device topology, call the <see cref="IDeviceTopology.GetSubunitCount" /> method.</param>
    <param name="ppSubunit">Pointer to a pointer variable into which the method writes the address of the <see cref="ISubunit" /> interface of the subunit object. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method. If the <b>GetSubunit</b> call fails, <i>*ppSubunit</i> is <b>NULL</b>.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Parameter <i>nIndex</i> is out of range.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>ppSubunit</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology.GetSubunitCount">
    <summary>The <b>GetSubunitCount</b> method gets the number of subunits in the device topology.</summary>
    <param name="pCount">Pointer to a <b>UINT</b> variable into which the method writes the subunit count (the number of subunits in the device topology).</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Pointer <i>pCount</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDeviceTopology">
    <summary>
      <para>The <b>IDeviceTopology</b> interface provides access to the topology of an audio device. The topology of an audio <i>adapter</i> device consists of the data paths that lead to and from audio endpoint devices and the control points that lie along the paths. An audio <i>endpoint</i> device also has a topology, but it is trivial, as explained in <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/device-topologies">Device Topologies</a>. A client obtains a reference to the <b>IDeviceTopology</b> interface for an audio endpoint device by following these steps:</para>
      <list type="number">
        <item>
          <description>By using one of the techniques described in <see cref="IMMDevice Interface" />, obtain a reference to the <b>IMMDevice</b> interface for an audio endpoint device.</description>
        </item>
        <item>
          <description>Call the <see cref="IMMDevice.Activate" /> method with parameter <i>refiid</i> set to <b>REFIID</b> IID_IDeviceTopology.</description>
        </item>
      </list>After obtaining the <b>IDeviceTopology</b> interface for an audio endpoint device, an application can explore the topologies of the audio adapter devices to which the endpoint device is connected.<para>For code examples that use the <b>IDeviceTopology</b> interface, see the implementations of the GetHardwareDeviceTopology and SelectCaptureDevice functions in <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/device-topologies">Device Topologies</a>.</para></summary>
  </member>
</doc>