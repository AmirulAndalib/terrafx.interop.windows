<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITEMIDLIST">
    <summary>
      <para>Contains a list of item identifiers.</para>
    </summary>
    <remarks>
      <para>A pointer to this structure, called a <i>PIDL</i>, is used to identify objects in the Shell namespace.  For more information about pointers to item identifier lists (PIDLs) and item identifiers, see <a href="https://docs.microsoft.com//windows/desktop/shell/namespace-intro">Introduction to the Shell Namespace</a>.</para>
      <h3>ITEMIDLIST Strict Types</h3>
      <para>As of Windows Vista, several forms of <b>ITEMIDLIST</b> are available as data types. The three main types are:</para>
      <list type="bullet">
        <item>
          <description>IDLIST_ABSOLUTE: Fully qualified <b>ITEMIDLIST</b> relative to the root of the namespace. It may be multi-level.</description>
        </item>
        <item>
          <description>IDLIST_RELATIVE: <b>ITEMIDLIST</b> relative to a parent folder. It may be multi-level.</description>
        </item>
        <item>
          <description>ITEMID_CHILD: Single-level <b>ITEMIDLIST</b> relative to a parent folder. It contains exactly one <see cref="SHITEMID" /> structure.</description>
        </item>
      </list>
      <para>These types are used if you compile your code with the symbol STRICT_TYPED_ITEMIDS before you include the Shell header files, as shown in the following example code.</para>
      <code>
#define STRICT_TYPED_ITEMIDS    // Better type safety for IDLists

#include &lt;shlobj.h&gt;             // Typical Shell header file
</code>
      <para>The meaning of each of these types can be altered with one or more of the following modifiers:</para>
      <list type="bullet">
        <item>
          <description>P: The type is a pointer.</description>
        </item>
        <item>
          <description>C: The type is constant.</description>
        </item>
        <item>
          <description>U: The type is unaligned. It aligns to a <b>DWORD</b> boundary in 32-bit architectures and a <b>QWORD</b> boundary in 64-bit architectures.</description>
        </item>
      </list>
      <para>Some examples of these modified types are:</para>
      <list type="bullet">
        <item>
          <description>PIDLIST_ABSOLUTE: The <b>ITEMIDLIST</b> is absolute and has been allocated, as indicated by its being non-constant. This means that it needs to be deallocated with <see cref="ILFree" /> when it is no longer needed. Because it is a direct pointer to allocated memory, it is aligned.</description>
        </item>
        <item>
          <description>PCIDLIST_ABSOLUTE: The <b>ITEMIDLIST</b> is absolute and constant. This is typically used when you are passed an absolute <b>ITEMIDLIST</b> as a parameter but do not own it, and so are not allowed to change it.</description>
        </item>
        <item>
          <description>PCUIDLIST_ABSOLUTE: The <b>ITEMIDLIST</b> is absolute, constant and unaligned. This is rarely used. Absolute <b>ITEMIDLIST</b> are typically allocated in memory aligned to a <b>DWORD</b> boundary in 32-bit architectures and to a <b>QWORD</b> boundary in 64-bit architectures. An absolute <b>ITEMIDLIST</b> would be unaligned only if it has been byte-packed along with other data, such as in a serialization format.</description>
        </item>
        <item>
          <description>PITEMID_CHILD: The <b>ITEMIDLIST</b> is an allocated child <b>ITEMIDLIST</b> relative to a parent folder, such as a result of <see cref="IEnumIDList.Next" />. It contains exactly one <see cref="SHITEMID" /> structure.</description>
        </item>
        <item>
          <description>PCUITEMID_CHILD: The child <b>ITEMIDLIST</b> is relative, constant, and unaligned. This often occurs when you get a pointer to part of an existing PIDL. For example, if you have an absolute PIDL and call <see cref="ILFindLastID" />, it returns the pointer to the last child <see cref="SHITEMID" /> in the list. It is unaligned because the byte-packed PIDL does not ensure that its individual <b>SHITEMID</b> structures fall on byte boundaries. References to child PIDLs such as these are always constant because the memory is owned by the absolute PIDL.</description>
        </item>
        <item>
          <description>PCITEMID_CHILD: The child <b>ITEMIDLIST</b> is constant and aligned. This is rarely used because as a child PIDL, it is usually a part of a larger PIDL, and therefore not aligned on byte boundaries.</description>
        </item>
        <item>
          <description>PUITEMID_CHILD: The child <b>ITEMIDLIST</b> is unaligned. This is rarely used because memory for this <b>ITEMIDLIST</b> is owned by the parent PIDL, which is absolute. This means that modifications can be made only to the parent PIDL, and so the child PIDL would need to be constant.</description>
        </item>
      </list>
      <para>This list is not exhaustive. Other types can also exist.</para>
    </remarks>
  </member>
  <member name="ITEMIDLIST.mkid">
    <summary>
      <para>Type: <b><see cref="SHITEMID" /></b></para>
      <para>A list of item identifiers.</para>
    </summary>
  </member>
</doc>