<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFMediaEngine.CanPlayType">
    <summary>Queries how likely it is that the Media Engine can play a specified type of media resource.</summary>
    <param name="type">A string that contains a MIME type with an optional codecs parameter, as defined in RFC 4281.</param>
    <param name="pAnswer">Receives an <see cref="MF_MEDIA_ENGINE_CANPLAY" /> enumeration value.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetAutoPlay">
    <summary>Queries whether the Media Engine automatically begins playback.</summary>
    <returns>Returns <b>TRUE</b> if the Media Engine automatically begins playback, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.GetBuffered">
    <summary>Queries how much resource data the media engine has buffered.</summary>
    <param name="ppBuffered">Receives a pointer to the <see cref="IMFMediaTimeRange" /> interface. The caller must release the interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetCurrentSource">
    <summary>Gets the URL of the current media resource, or an empty string if no media resource is present.</summary>
    <param name="ppUrl">Receives a <b>BSTR</b> that contains the URL of the current media resource. If there is no media resource, <i>ppUrl</i> receives an empty string. The caller must free the <b>BSTR</b> by calling <b>SysFreeString</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetCurrentTime">
    <summary>Gets the current playback position.</summary>
    <returns>Returns the playback position, in seconds.</returns>
  </member>
  <member name="IMFMediaEngine.GetDefaultPlaybackRate">
    <summary>Gets the default playback rate.</summary>
    <returns>Returns the default playback rate, as a multiple of normal (1×) playback. A negative value indicates reverse playback.</returns>
  </member>
  <member name="IMFMediaEngine.GetDuration">
    <summary>Gets the duration of the media resource.</summary>
    <returns>Returns the duration, in seconds. If no media data is available, the method returns not-a-number (NaN). If the duration is unbounded, the method returns an infinite value.</returns>
  </member>
  <member name="IMFMediaEngine.GetError">
    <summary>Gets the most recent error status.</summary>
    <param name="ppError">Receives either a pointer to the <see cref="IMFMediaError" /> interface, or the value <b>NULL</b>. If the value is <b>non-NULL</b>, the caller must release the interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetLoop">
    <summary>Queries whether the Media Engine will loop playback.</summary>
    <returns>Returns <b>TRUE</b> if looping is enabled, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.GetMuted">
    <summary>Queries whether the audio is muted.</summary>
    <returns>Returns <b>TRUE</b> if the audio is muted, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.GetNativeVideoSize">
    <summary>Gets the size of the video frame, adjusted for aspect ratio.</summary>
    <param name="cx">Receives the width in pixels.</param>
    <param name="cy">Receives the height in pixels.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetNetworkState">
    <summary>Gets the current network state of the media engine.</summary>
    <returns>Returns an <see cref="MF_MEDIA_ENGINE_NETWORK" /> enumeration value.</returns>
  </member>
  <member name="IMFMediaEngine.GetPlaybackRate">
    <summary>Gets the current playback rate.</summary>
    <returns>Returns the playback rate, as a multiple of normal (1×) playback. A negative value indicates reverse playback.</returns>
  </member>
  <member name="IMFMediaEngine.GetPlayed">
    <summary>Gets the time ranges that have been rendered.</summary>
    <param name="ppPlayed">Receives a pointer to the <see cref="IMFMediaTimeRange" /> interface. The caller must release the interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetPreload">
    <summary>Gets the preload flag.</summary>
    <returns>Returns an <see cref="MF_MEDIA_ENGINE_PRELOAD" /> enumeration value.</returns>
  </member>
  <member name="IMFMediaEngine.GetReadyState">
    <summary>Gets the ready state, which indicates whether the current media resource can be rendered.</summary>
    <returns>Returns an <see cref="MF_MEDIA_ENGINE_READY" /> enumeration value.</returns>
  </member>
  <member name="IMFMediaEngine.GetSeekable">
    <summary>Gets the time ranges to which the Media Engine can currently seek.</summary>
    <param name="ppSeekable">Receives a pointer to the <see cref="IMFMediaTimeRange" /> interface. The caller must release the interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetStartTime">
    <summary>Gets the initial playback position.</summary>
    <returns>Returns the initial playback position, in seconds.</returns>
  </member>
  <member name="IMFMediaEngine.GetVideoAspectRatio">
    <summary>Gets the picture aspect ratio of the video stream.</summary>
    <param name="cx">Receives the x component of the aspect ratio.</param>
    <param name="cy">Receives the y component of the aspect ratio.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.GetVolume">
    <summary>Gets the audio volume level.</summary>
    <returns>Returns the volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation).</returns>
  </member>
  <member name="IMFMediaEngine.HasAudio">
    <summary>Queries whether the current media resource contains an audio stream.</summary>
    <returns>Returns <b>TRUE</b> if the current media resource contains an audio stream. Returns <b>FALSE</b> if there is no media resource or the media resource does not contain an audio stream.</returns>
  </member>
  <member name="IMFMediaEngine.HasVideo">
    <summary>Queries whether the current media resource contains a video stream.</summary>
    <returns>Returns <b>TRUE</b> if the current media resource contains a video stream. Returns <b>FALSE</b> if there is no media resource or the media resource does not contain a video stream.</returns>
  </member>
  <member name="IMFMediaEngine.IsEnded">
    <summary>Queries whether playback has ended.</summary>
    <returns>Returns <b>TRUE</b> if the direction of playback is forward and playback has reached the end of the media resource. Returns <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.IsPaused">
    <summary>Queries whether playback is currently paused.</summary>
    <returns>Returns <b>TRUE</b> if playback is paused, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.IsSeeking">
    <summary>Queries whether the Media Engine is currently seeking to a new playback position.</summary>
    <returns>Returns <b>TRUE</b> if the Media Engine is seeking, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="IMFMediaEngine.Load">
    <summary>Loads the current media source.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.OnVideoStreamTick">
    <summary>Queries the Media Engine to find out whether a new video frame is ready.</summary>
    <param name="pPts">If a new frame is ready, receives the presentation time of the frame.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded, but the Media Engine does not have a new frame.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A new video frame is ready for display.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFMediaEngine.Pause">
    <summary>Pauses playback.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.Play">
    <summary>Starts playback.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetAutoPlay">
    <summary>Specifies whether the Media Engine automatically begins playback.</summary>
    <param name="AutoPlay">If <b>TRUE</b>, the Media Engine automatically begins playback after it loads a media source. Otherwise, playback does not begin until the application calls <see cref="IMFMediaEngine.Play" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetCurrentTime">
    <summary>Seeks to a new playback position.</summary>
    <param name="seekTime">The new playback position, in seconds.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetDefaultPlaybackRate">
    <summary>Sets the default playback rate.</summary>
    <param name="Rate">The default playback rate, as a multiple of normal (1×) playback. A negative value indicates reverse playback.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetErrorCode">
    <summary>Sets the current error code.</summary>
    <param name="error">The error code, as an <see cref="MF_MEDIA_ENGINE_ERR" /> value.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetLoop">
    <summary>Specifies whether the Media Engine loops playback.</summary>
    <param name="Loop">Specify <b>TRUE</b> to enable looping, or <b>FALSE</b> to disable looping.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetMuted">
    <summary>Mutes or unmutes the audio.</summary>
    <param name="Muted">Specify <b>TRUE</b> to mute the audio, or <b>FALSE</b> to unmute the audio.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetPlaybackRate">
    <summary>Sets the current playback rate.</summary>
    <param name="Rate">The playback rate, as a multiple of normal (1×) playback. A negative value indicates reverse playback.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetPreload">
    <summary>Sets the preload flag.</summary>
    <param name="Preload">An <see cref="MF_MEDIA_ENGINE_PRELOAD" /> value equal to the preload flag.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetSource">
    <summary>Sets the URL of a media resource.</summary>
    <param name="pUrl">The URL of the media resource.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetSourceElements">
    <summary>Sets a list of media sources.</summary>
    <param name="pSrcElements">A pointer to the <see cref="IMFMediaEngineSrcElements" /> interface. The caller must implement this interface.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.SetVolume">
    <summary>Sets the audio volume level.</summary>
    <param name="Volume">The volume level. Volume is expressed as an attenuation level, where 0.0 indicates silence and 1.0 indicates full volume (no attenuation).</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.Shutdown">
    <summary>Shuts down the Media Engine and releases the resources it is using.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine.TransferVideoFrame">
    <summary>Copies the current video frame to a DXGI surface or WIC bitmap.</summary>
    <param name="pDstSurf">A pointer to the <see cref="IUnknown" /> interface of the destination surface.</param>
    <param name="pSrc">A pointer to an <see cref="MFVideoNormalizedRect" /> structure that specifies the source rectangle.</param>
    <param name="pDst">A pointer to a <see cref="RECT" /> structure that specifies the destination rectangle.</param>
    <param name="pBorderClr">A pointer to an <see cref="MFARGB" /> structure that specifies the border color.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFMediaEngine">
    <summary>Enables an application to play audio or video files.</summary>
  </member>
</doc>