<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AssignProcessToJobObject">
    <summary>
      <para>Assigns a process to an existing job object.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job object to which the process will be associated. The
<see cref="CreateJobObject" /> or
<see cref="OpenJobObject" /> function returns this handle. The handle must have the JOB_OBJECT_ASSIGN_PROCESS access right. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
    </param>
    <param name="hProcess">
      <para>A handle to the process to associate with the job object. The handle must have the PROCESS_SET_QUOTA and PROCESS_TERMINATE access rights. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>If the process is already associated with a job, the job specified by <i>hJob</i> must be empty or it must be in the hierarchy of nested jobs to which the process already belongs, and it cannot have UI limits set (<see cref="SetInformationJobObject" /> with <b>JobObjectBasicUIRestrictions</b>). For more information, see Remarks.</para>
      <para>
        <b>Windows 7, Windows Server 2008 R2, Windows XP with SP3, Windows Server 2008, Windows Vista and Windows Server 2003:  </b>The process must not already be assigned to a job; if it is, the function fails with ERROR_ACCESS_DENIED. This behavior changed starting in Windows 8 and Windows Server 2012.</para>
      <para>
        <b>Terminal Services:  </b>All processes within a job must run within the same session as the job.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>After you associate a process with a job object using
<b>AssignProcessToJobObject</b>, the process is subject to the limits set for the job. To set limits for a job, use the
<see cref="SetInformationJobObject" /> function.</para>
      <para>If the job has a user-mode time limit, and the time limit has been exhausted,
<b>AssignProcessToJobObject</b> fails and the specified process is terminated. If the time limit would be exceeded by associating the process,
<b>AssignProcessToJobObject</b> still succeeds. However, the time limit violation will be reported. If the job has an active process limit, and the limit would be exceeded by associating this process,
<b>AssignProcessToJobObject</b> fails, and the specified process is terminated.</para>
      <para>Memory operations performed by a process associated with a job that has a memory limit are subject to the memory limit. Memory operations performed by the process before it was associated with the job are not examined by
<b>AssignProcessToJobObject</b>.</para>
      <para>If the process is already running and the job has security limitations,
<b>AssignProcessToJobObject</b> may fail. For example, if the primary token of the process contains the local administrators group, but the job object has the security limitation JOB_OBJECT_SECURITY_NO_ADMIN, the function fails. If the job has the security limitation JOB_OBJECT_SECURITY_ONLY_TOKEN, the process must be created suspended. To create a suspended process, call the
<see cref="CreateProcess" /> function with the CREATE_SUSPENDED flag.</para>
      <para>A process can be associated with more than one job in a hierarchy of nested jobs. For priority class, affinity, commit charge, per-process execution time limit, scheduling class limit, and working set minimum and maximum, the process inherits an effective limit which is the most restrictive limit of all the jobs in its parent job chain. For other resource limits, the process inherits limits from its immediate job in the hierarchy. Accounting information is added to the  immediate job and aggregated in each parent job in the job chain. By default, all child processes are associated with the immediate job and every job in the parent job chain. To create a child process that is not part of the same job chain, call the <see cref="CreateProcess" /> function with the CREATE_BREAKAWAY_FROM_JOB flag. The child process breaks away from every job in the job chain unless a job in the chain does not allow breakaway. In this case, the child process does not break away from that job or any job above it in the job chain. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/nested-jobs">Nested Jobs</a>.</para>
      <para>
        <b>Windows 7, Windows Server 2008 R2, Windows XP with SP3, Windows Server 2008, Windows Vista and Windows Server 2003:  </b>A process can be associated only with a single job. A process inherits limits from the job it is associated with and adds its accounting information to the job. If a process is associated with a job, all child processes it creates are associated with that job by default. To create a child process that is not part of the same job, call the
<see cref="CreateProcess" /> function with the CREATE_BREAKAWAY_FROM_JOB flag. A process can be associated with more than one job starting in Windows 8 and Windows Server 2012.</para>
      <para>
        <b>Windows 7, Windows Server 2008 R2, Windows Server 2008 and Windows Vista:  </b>If the process is being monitored by the Program Compatibility Assistant (PCA), it is placed into a compatibility job. Therefore, the process must be created using CREATE_BREAKAWAY_FROM_JOB before it can be placed in another job. Alternatively, you can embed an application manifest that specifies a User Account Control (UAC) level in your application and PCA will not add the process to the compatibility job. For more information, see <a href="https://docs.microsoft.com//previous-versions/dotnet/articles/bb530410(v=msdn.10)">Application Development Requirements for User Account Control Compatibility</a>.</para>
      <para>If the job or any of its parent jobs in the job chain is terminating when <b>AssignProcessToJob</b> is called, the function fails.</para>
      <para>To compile an application that uses this function, define _WIN32_WINNT as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="CreateJobObject" />
    <seealso cref="CreateProcess" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso cref="OpenJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="SetInformationJobObject" />
  </member>
  <member name="Windows.CreateJobObject">
    <summary>
      <para>Creates or opens a job object.</para>
    </summary>
    <param name="lpJobAttributes">
      <para>A pointer to a
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle. If <i>lpJobAttributes</i> is <b>NULL</b>, the job object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a job object come from the primary or impersonation token of the creator.</para>
    </param>
    <param name="lpName">
      <para>The name of the job. The name is limited to <b>MAX_PATH</b> characters. Name comparison is case-sensitive.</para>
      <para>If <i>lpName</i> is <b>NULL</b>, the job is created without a name.</para>
      <para>If <i>lpName</i> matches the name of an existing event, semaphore, mutex, waitable timer, or file-mapping object, the function fails and the
<see cref="GetLastError" /> function returns <b>ERROR_INVALID_HANDLE</b>. This occurs because these objects share the same namespace.</para>
      <para>The object can be created in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job object. The handle has the <b>JOB_OBJECT_ALL_ACCESS</b> access right. If the object existed before the function call, the function returns a handle to the existing job object and
<see cref="GetLastError" /> returns <b>ERROR_ALREADY_EXISTS</b>.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>When a job is created, its accounting information is initialized to zero, all limits are inactive, and there are no associated processes. To assign a process to  a job object, use the
<see cref="AssignProcessToJobObject" /> function. To set limits for a job, use the
<see cref="SetInformationJobObject" /> function. To query accounting information, use the
<see cref="QueryInformationJobObject" /> function.</para>
      <para>All processes associated with a job must run in the same session. A job is associated with the session of the first process to be assigned to the job.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A job is associated with the session of the  process that created it.</para>
      <para>To close a job object handle, use the
<see cref="CloseHandle" /> function. The job is destroyed when its last handle has been closed and all associated processes have exited. However, if the job has the <b>JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE</b> flag specified, closing the last job object handle terminates all associated processes and then destroys the job object itself.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso cref="CloseHandle" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="QueryInformationJobObject" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</seealso>
    <seealso cref="SetInformationJobObject" />
  </member>
  <member name="Windows.CreateJobObjectA">
    <summary>
      <para>Creates or opens a job object.</para>
    </summary>
    <param name="lpJobAttributes">
      <para>A pointer to a
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle. If <i>lpJobAttributes</i> is <b>NULL</b>, the job object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a job object come from the primary or impersonation token of the creator.</para>
    </param>
    <param name="lpName">
      <para>The name of the job. The name is limited to <b>MAX_PATH</b> characters. Name comparison is case-sensitive.</para>
      <para>If <i>lpName</i> is <b>NULL</b>, the job is created without a name.</para>
      <para>If <i>lpName</i> matches the name of an existing event, semaphore, mutex, waitable timer, or file-mapping object, the function fails and the
<see cref="GetLastError" /> function returns <b>ERROR_INVALID_HANDLE</b>. This occurs because these objects share the same namespace.</para>
      <para>The object can be created in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job object. The handle has the <b>JOB_OBJECT_ALL_ACCESS</b> access right. If the object existed before the function call, the function returns a handle to the existing job object and
<see cref="GetLastError" /> returns <b>ERROR_ALREADY_EXISTS</b>.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>When a job is created, its accounting information is initialized to zero, all limits are inactive, and there are no associated processes. To assign a process to  a job object, use the
<see cref="AssignProcessToJobObject" /> function. To set limits for a job, use the
<see cref="SetInformationJobObject" /> function. To query accounting information, use the
<see cref="QueryInformationJobObject" /> function.</para>
      <para>All processes associated with a job must run in the same session. A job is associated with the session of the first process to be assigned to the job.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A job is associated with the session of the  process that created it.</para>
      <para>To close a job object handle, use the
<see cref="CloseHandle" /> function. The job is destroyed when its last handle has been closed and all associated processes have exited. However, if the job has the <b>JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE</b> flag specified, closing the last job object handle terminates all associated processes and then destroys the job object itself.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso cref="CloseHandle" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="QueryInformationJobObject" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</seealso>
    <seealso cref="SetInformationJobObject" />
  </member>
  <member name="Windows.CreateJobObjectW">
    <summary>
      <para>Creates or opens a job object.</para>
    </summary>
    <param name="lpJobAttributes">
      <para>A pointer to a
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle. If <i>lpJobAttributes</i> is <b>NULL</b>, the job object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a job object come from the primary or impersonation token of the creator.</para>
    </param>
    <param name="lpName">
      <para>The name of the job. The name is limited to <b>MAX_PATH</b> characters. Name comparison is case-sensitive.</para>
      <para>If <i>lpName</i> is <b>NULL</b>, the job is created without a name.</para>
      <para>If <i>lpName</i> matches the name of an existing event, semaphore, mutex, waitable timer, or file-mapping object, the function fails and the
<see cref="GetLastError" /> function returns <b>ERROR_INVALID_HANDLE</b>. This occurs because these objects share the same namespace.</para>
      <para>The object can be created in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job object. The handle has the <b>JOB_OBJECT_ALL_ACCESS</b> access right. If the object existed before the function call, the function returns a handle to the existing job object and
<see cref="GetLastError" /> returns <b>ERROR_ALREADY_EXISTS</b>.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>When a job is created, its accounting information is initialized to zero, all limits are inactive, and there are no associated processes. To assign a process to  a job object, use the
<see cref="AssignProcessToJobObject" /> function. To set limits for a job, use the
<see cref="SetInformationJobObject" /> function. To query accounting information, use the
<see cref="QueryInformationJobObject" /> function.</para>
      <para>All processes associated with a job must run in the same session. A job is associated with the session of the first process to be assigned to the job.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>A job is associated with the session of the  process that created it.</para>
      <para>To close a job object handle, use the
<see cref="CloseHandle" /> function. The job is destroyed when its last handle has been closed and all associated processes have exited. However, if the job has the <b>JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE</b> flag specified, closing the last job object handle terminates all associated processes and then destroys the job object itself.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso cref="CloseHandle" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="QueryInformationJobObject" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</seealso>
    <seealso cref="SetInformationJobObject" />
  </member>
  <member name="Windows.FreeMemoryJobObject">
    <summary>
      <para>Frees memory that a function related to job objects allocated. Functions related to job objects that allocate memory include <see cref="QueryIoRateControlInformationJobObject" />.</para>
    </summary>
    <param name="Buffer">
      <para>A pointer to the buffer of allocated memory that you want to free.</para>
    </param>
    <seealso cref="QueryIoRateControlInformationJobObject" />
  </member>
  <member name="Windows.OpenJobObject">
    <summary>
      <para>Opens an existing job object.</para>
    </summary>
    <param name="dwDesiredAccess">
      <para>The access to the job object. This parameter can be one or more of the
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">job object access rights</a>. This access right is checked against any security descriptor for the object.</para>
    </param>
    <param name="bInheritHandle">
      <para>If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</para>
    </param>
    <param name="lpName">
      <para>The name of the job to be opened. Name comparisons are case sensitive.</para>
      <para>This function can open objects in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly open the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job. The handle provides the requested access to the job.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To associate a process with a job, use the
<see cref="AssignProcessToJobObject" /> function.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
  </member>
  <member name="Windows.OpenJobObjectA">
    <summary>
      <para>Opens an existing job object.</para>
    </summary>
    <param name="dwDesiredAccess">
      <para>The access to the job object. This parameter can be one or more of the
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">job object access rights</a>. This access right is checked against any security descriptor for the object.</para>
    </param>
    <param name="bInheritHandle">
      <para>If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</para>
    </param>
    <param name="lpName">
      <para>The name of the job to be opened. Name comparisons are case sensitive.</para>
      <para>This function can open objects in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly open the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job. The handle provides the requested access to the job.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To associate a process with a job, use the
<see cref="AssignProcessToJobObject" /> function.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
  </member>
  <member name="Windows.OpenJobObjectW">
    <summary>
      <para>Opens an existing job object.</para>
    </summary>
    <param name="dwDesiredAccess">
      <para>The access to the job object. This parameter can be one or more of the
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">job object access rights</a>. This access right is checked against any security descriptor for the object.</para>
    </param>
    <param name="bInheritHandle">
      <para>If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</para>
    </param>
    <param name="lpName">
      <para>The name of the job to be opened. Name comparisons are case sensitive.</para>
      <para>This function can open objects in a private namespace. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</para>
      <para>
        <b>Terminal Services:  </b>The name can have a "Global\" or "Local\" prefix to explicitly open the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see
<a href="https://docs.microsoft.com//windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the job. The handle provides the requested access to the job.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To associate a process with a job, use the
<see cref="AssignProcessToJobObject" /> function.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="AssignProcessToJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
  </member>
  <member name="Windows.QueryInformationJobObject">
    <summary>
      <para>Retrieves limit and job state information from the job object.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job whose information is being queried. The
<see cref="CreateJobObject" /> or
<see cref="OpenJobObject" /> function returns this handle. The handle must have the <b>JOB_OBJECT_QUERY</b> access right. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
      <para>If this value is NULL and the calling process is associated with a job, the job associated with the calling process is used. If the job is nested, the immediate job of the calling process is used.</para>
    </param>
    <param name="JobObjectInformationClass">
      <para>The information class for the limits to be queried. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicAccountingInformation</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_ACCOUNTING_INFORMATION" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicAndIoAccountingInformation</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicLimitInformation</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_LIMIT_INFORMATION" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicProcessIdList</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_PROCESS_ID_LIST" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicUIRestrictions</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_UI_RESTRICTIONS" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectCpuRateControlInformation</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_CPU_RATE_CONTROL_INFORMATION" /> structure.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectEndOfJobTimeInformation</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_END_OF_JOB_TIME_INFORMATION" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectExtendedLimitInformation</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_EXTENDED_LIMIT_INFORMATION" /> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectGroupInformation</b>
                </description>
              </item>
              <item>
                <description>11</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a buffer that receives the list of  <a href="https://docs.microsoft.com//windows/desktop/ProcThread/processor-groups">processor groups</a> to which the job is currently assigned. The variable pointed to by the <i>lpReturnLength</i> parameter is set to the size of the group data. Divide this value by <code>sizeof(USHORT)</code> to determine the number of groups.</para>
            <para>
              <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectGroupInformationEx</b>
                </description>
              </item>
              <item>
                <description>14</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a buffer that receives an array of <see cref="GROUP_AFFINITY" /> structures that indicate the affinity of the job in the <a href="https://docs.microsoft.com//windows/desktop/ProcThread/processor-groups">processor groups</a> to which the job is currently assigned. The variable pointed to by the <i>lpReturnLength</i> parameter is set to the size of the group affinity data. Divide this value by <code>sizeof(GROUP_AFFINITY)</code> to determine the number of groups.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectLimitViolationInformation</b>
                </description>
              </item>
              <item>
                <description>13</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION" /> structure.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectLimitViolationInformation2</b>
                </description>
              </item>
              <item>
                <description>34</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNetRateControlInformation</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NET_RATE_CONTROL_INFORMATION" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNotificationLimitInformation</b>
                </description>
              </item>
              <item>
                <description>12</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION" /> structure.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNotificationLimitInformation2</b>
                </description>
              </item>
              <item>
                <description>33</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectSecurityLimitInformation</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is not supported. Applications must set security limits individually for each process. <b>Windows Server 2003 and Windows XP:  </b>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_SECURITY_LIMIT_INFORMATION" /> structure.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpJobObjectInformation">
      <para>The limit or job state information. The format of this data depends on the value of the <i>JobObjectInfoClass</i> parameter.</para>
    </param>
    <param name="cbJobObjectInformationLength">
      <para>The count of the job information being queried, in bytes. This value depends on the value of the <i>JobObjectInfoClass</i> parameter.</para>
    </param>
    <param name="lpReturnLength">
      <para>A pointer to a variable that receives the length of data written to the structure pointed to by the <i>lpJobObjectInfo</i> parameter. Specify <b>NULL</b>  to not receive this information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Use
<b>QueryInformationJobObject</b> to obtain the current limits and modify them. Use the
<see cref="SetInformationJobObject" /> function to set new limits.</para>
      <para>To compile an application that uses this function, define <b>_WIN32_WINNT</b> as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="JOBOBJECT_BASIC_ACCOUNTING_INFORMATION" />
    <seealso cref="JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION" />
    <seealso cref="JOBOBJECT_BASIC_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_BASIC_PROCESS_ID_LIST" />
    <seealso cref="JOBOBJECT_BASIC_UI_RESTRICTIONS" />
    <seealso cref="JOBOBJECT_CPU_RATE_CONTROL_INFORMATION" />
    <seealso cref="JOBOBJECT_END_OF_JOB_TIME_INFORMATION" />
    <seealso cref="JOBOBJECT_EXTENDED_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION" />
    <seealso cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2" />
    <seealso cref="JOBOBJECT_NET_RATE_CONTROL_INFORMATION" />
    <seealso cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2" />
    <seealso cref="JOBOBJECT_SECURITY_LIMIT_INFORMATION" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="SetInformationJobObject" />
  </member>
  <member name="Windows.QueryIoRateControlInformationJobObject">
    <summary>
      <para>Gets information about the control of the I/O rate for a job object.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job to query for information. Get this handle from the <see cref="CreateJobObject" /> or <see cref="OpenJobObject" /> function. The handle must have the <b>JOB_OBJECT_QUERY</b> access right. For more information about access rights, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
      <para>If this value is NULL and the process that calls <b>QueryIoRateControlInformationJobObject</b> is associated with a job, the function uses job that is associated with the process. If the job is nested within another job, the function uses the immediate job for the process.</para>
    </param>
    <param name="VolumeName">
      <para>The name of the volume to query. If this value is NULL, the function gets the information about I/O rate control for the job for all of the volumes for the system.</para>
    </param>
    <param name="InfoBlocks">
      <para>A pointer to array of <see cref="JOBOBJECT_IO_RATE_CONTROL_INFORMATION" /> structures that contain the information about I/O rate control for the job. Your code must free the memory for this array by calling the <see cref="FreeMemoryJobObject" /> function with the address of the array.</para>
    </param>
    <param name="InfoBlockCount">
      <para>The number of <see cref="JOBOBJECT_IO_RATE_CONTROL_INFORMATION" /> structures that the function allocated in the array to which the <i>InfoBlocks</i> parameter points.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>Important</b>  Starting with Windows 10, version 1607, this function is no longer supported.</para>
    </remarks>
    <seealso cref="FreeMemoryJobObject" />
    <seealso cref="JOBOBJECT_IO_RATE_CONTROL_INFORMATION" />
    <seealso cref="SetIoRateControlInformationJobObject" />
  </member>
  <member name="Windows.SetInformationJobObject">
    <summary>
      <para>Sets limits for a job object.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job whose limits are being set. The
<see cref="CreateJobObject" /> or
<see cref="OpenJobObject" /> function returns this handle. The handle
must have the <b>JOB_OBJECT_SET_ATTRIBUTES</b> access right. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
    </param>
    <param name="JobObjectInformationClass">
      <para>The information class for the limits to be set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectAssociateCompletionPortInformation</b>
                </description>
              </item>
              <item>
                <description>7</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_ASSOCIATE_COMPLETION_PORT" /></para>
            <para>structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicLimitInformation</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_LIMIT_INFORMATION" /></para>
            <para>structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectBasicUIRestrictions</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_BASIC_UI_RESTRICTIONS" /></para>
            <para>structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectCpuRateControlInformation</b>
                </description>
              </item>
              <item>
                <description>15</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_CPU_RATE_CONTROL_INFORMATION" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
            <para>If Dynamic Fair Share Scheduling (DFSS) is enabled, the CPU rate cannot be set and SetInformationJobObject will fail with error code 50 ("The request is not supported").</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectEndOfJobTimeInformation</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_END_OF_JOB_TIME_INFORMATION" /></para>
            <para>structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectExtendedLimitInformation</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_EXTENDED_LIMIT_INFORMATION" /></para>
            <para>structure.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectGroupInformation</b>
                </description>
              </item>
              <item>
                <description>11</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<b>USHORT</b> value that specifies the list of
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/processor-groups">processor groups</a> to assign the job to. The
<i>cbJobObjectInfoLength</i> parameter is set to the size of the group data. Divide this
value by <code>sizeof(USHORT)</code> to determine the number of groups.</para>
            <para>
              <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectGroupInformationEx</b>
                </description>
              </item>
              <item>
                <description>14</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a buffer that contains an array
of <see cref="GROUP_AFFINITY" /> structures that specify the
affinity of the job for the <a href="https://docs.microsoft.com//windows/desktop/ProcThread/processor-groups">processor groups</a> to which
the job is currently assigned. The <i>cbJobObjectInfoLength</i> parameter is set to the
size of the group affinity data. Divide this value by
<code>sizeof(GROUP_AFFINITY)</code> to determine the number of groups.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectLimitViolationInformation2</b>
                </description>
              </item>
              <item>
                <description>34</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNetRateControlInformation</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NET_RATE_CONTROL_INFORMATION" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNotificationLimitInformation</b>
                </description>
              </item>
              <item>
                <description>12</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectNotificationLimitInformation2</b>
                </description>
              </item>
              <item>
                <description>33</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2" /></para>
            <para>structure.</para>
            <para>
              <b>Windows 8.1, Windows Server 2012 R2, Windows 8, Windows Server 2012, Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This flag is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>JobObjectSecurityLimitInformation</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>This flag is not supported. Applications must set security limitations individually for each process.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>The <i>lpJobObjectInfo</i> parameter is a pointer to a
<see cref="JOBOBJECT_SECURITY_LIMIT_INFORMATION" /></para>
            <para>structure. The
<i>hJob</i> handle must have the
<b>JOB_OBJECT_SET_SECURITY_ATTRIBUTES</b> access right associated with it.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="lpJobObjectInformation">
      <para>The limits or job state to be set for the job. The format of this data depends on the value of <i>JobObjectInfoClass</i>.</para>
    </param>
    <param name="cbJobObjectInformationLength">
      <para>The size of the job information being set, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Use the <b>SetInformationJobObject</b></para>
      <para>function to set several limits in a single call. To establish the limits one at a time or change a
subset of the limits, call the
<see cref="QueryInformationJobObject" /> function to obtain
the current limits, modify these limits, and then call
<b>SetInformationJobObject</b>.</para>
      <para>You must set security limits individually for each process associated with a job object, rather than setting
them for the job object itself. For information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>Use the <b>SetInformationJobObject</b></para>
      <para>function to set security limits for the job object.</para>
      <para>To compile an application that uses this function, define _WIN32_WINNT as 0x0500 or later. For more
information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="JOBOBJECT_ASSOCIATE_COMPLETION_PORT" />
    <seealso cref="JOBOBJECT_BASIC_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_BASIC_UI_RESTRICTIONS" />
    <seealso cref="JOBOBJECT_CPU_RATE_CONTROL_INFORMATION" />
    <seealso cref="JOBOBJECT_END_OF_JOB_TIME_INFORMATION" />
    <seealso cref="JOBOBJECT_EXTENDED_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION" />
    <seealso cref="JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2" />
    <seealso cref="JOBOBJECT_NET_RATE_CONTROL_INFORMATION" />
    <seealso cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION" />
    <seealso cref="JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2" />
    <seealso cref="JOBOBJECT_SECURITY_LIMIT_INFORMATION" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="QueryInformationJobObject" />
  </member>
  <member name="Windows.SetIoRateControlInformationJobObject">
    <summary>
      <para>Sets I/O limits on a job object.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job on which to set I/O limits. Get this handle from the <see cref="CreateJobObject" /> or <see cref="OpenJobObject" /> function. The handle must have the <b>JOB_OBJECT_SET_ATTRIBUTES</b> access right. For more information about access rights, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
    </param>
    <param name="IoRateControlInfo">
      <para>A pointer to a <see cref="JOBOBJECT_IO_RATE_CONTROL_INFORMATION" /> structure that specifies the I/O limits to set for the job.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>Important</b>  Starting with Windows 10, version 1607, this function is no longer supported.</para>
    </remarks>
    <seealso cref="JOBOBJECT_IO_RATE_CONTROL_INFORMATION" />
    <seealso cref="QueryIoRateControlInformationJobObject" />
  </member>
  <member name="Windows.TerminateJobObject">
    <summary>
      <para>Terminates all processes currently associated with the job.  If the job is nested, this function terminates all processes currently associated with the job and all of its child jobs in the hierarchy.</para>
    </summary>
    <param name="hJob">
      <para>A handle to the job whose processes will be terminated. The
<see cref="CreateJobObject" /> or
<see cref="OpenJobObject" /> function returns this handle. This handle must have the JOB_OBJECT_TERMINATE access right. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/job-object-security-and-access-rights">Job Object Security and Access Rights</a>.</para>
      <para>The handle for each process in the job object must have the PROCESS_TERMINATE access right. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="uExitCode">
      <para>The exit code to be used by all processes and threads in the job object. Use the
<see cref="GetExitCodeProcess" /> function to retrieve each process's exit value. Use the
<see cref="GetExitCodeThread" /> function to retrieve each thread's exit value.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>It is not possible for any of the processes associated with the job to postpone or handle the termination. It is as if
<see cref="TerminateProcess" /> were called for each process associated with the job.</para>
      <para>Terminating a nested job additionally terminates all child job objects. Resources used by the terminated jobs are charged up the parent job chain in the hierarchy.</para>
      <para>To compile an application that uses this function, define _WIN32_WINNT as 0x0500 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="CreateJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/job-objects">Job Objects</seealso>
    <seealso cref="OpenJobObject" />
    <seealso href="https://docs.microsoft.com//windows/desktop/ProcThread/process-and-thread-functions">Process and Thread Functions</seealso>
    <seealso cref="TerminateProcess" />
  </member>
</doc>