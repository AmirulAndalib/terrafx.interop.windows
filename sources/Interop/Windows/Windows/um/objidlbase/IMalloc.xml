<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMalloc.DidAlloc">
    <summary>
      <para>Determines whether this allocator was used to allocate the specified block of memory.</para>
    </summary>
    <param name="pv">
      <para>A pointer to the block of memory. If this parameter is a <b>NULL</b> pointer, -1 is returned.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>1</para>
          </description>
          <description>
            <para>The block of memory was allocated by this allocator.</para>
          </description>
        </item>
        <item>
          <description>
            <para>0</para>
          </description>
          <description>
            <para>The block of memory was not allocated by this allocator.</para>
          </description>
        </item>
        <item>
          <description>
            <para>-1</para>
          </description>
          <description>
            <para>This method cannot determine whether this allocator allocated the block of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IMalloc" />
  </member>
  <member name="IMalloc.Free">
    <summary>
      <para>Frees a previously allocated block of memory.</para>
    </summary>
    <param name="pv">
      <para>A pointer to the memory block to be freed. If this parameter is <b>NULL</b>, this method has no effect.</para>
    </param>
    <remarks>
      <para>This method frees a block of memory previously allocated through a call to <see cref="IMalloc.Alloc" /> or <see cref="IMalloc.Realloc" />. The number of bytes freed equals the number of bytes that were allocated. After the call, the block of memory pointed to by <i>pv</i> is invalid and can no longer be used.</para>
    </remarks>
    <seealso cref="CoTaskMemFree" />
    <seealso cref="IMalloc" />
  </member>
  <member name="IMalloc.GetSize">
    <summary>
      <para>Retrieves the size of a previously allocated block of memory.</para>
    </summary>
    <param name="pv">
      <para>A pointer to the block of memory.</para>
    </param>
    <returns>
      <para>The size of the allocated memory block in bytes or, if <i>pv</i> is a <b>NULL</b> pointer, -1.</para>
    </returns>
    <remarks>
      <para>To get the size in bytes of a memory block, the block must have been previously allocated with <see cref="IMalloc.Alloc" /> or <see cref="IMalloc.Realloc" />. The size returned is the actual size of the allocation, which may be greater than the size requested when the allocation was made.</para>
    </remarks>
    <seealso cref="IMalloc" />
  </member>
  <member name="IMalloc.HeapMinimize">
    <summary>
      <para>Minimizes the heap as much as possible by releasing unused memory to the operating system, coalescing adjacent free blocks, and committing free pages.</para>
    </summary>
    <seealso cref="IMalloc" />
  </member>
  <member name="IMalloc.Realloc">
    <summary>
      <para>Changes the size of a previously allocated block of memory.</para>
    </summary>
    <param name="pv">
      <para>A pointer to the block of memory to be reallocated. This parameter can be <b>NULL</b>, as discussed in the Remarks section below.</para>
    </param>
    <param name="cb">
      <para>The size of the memory block to be reallocated, in bytes. This parameter can be 0, as discussed in the Remarks section below.</para>
    </param>
    <returns>
      <para>If the method succeeds, the return value is a pointer to the reallocated block of memory. Otherwise, it is <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>This method reallocates a block of memory, but does not guarantee that its contents are initialized. Therefore, the caller is responsible for subsequently initializing the memory. The allocated block may be larger than <i>cb</i> bytes because of the space required for alignment and for maintenance information.</para>
      <para>The <i>pv</i> argument points to the beginning of the block. If <i>pv</i> is <b>NULL</b>, <b>Realloc</b> allocates a new memory block in the same way that <see cref="IMalloc.Alloc" /> does. If <i>pv</i> is not <b>NULL</b>, it should be a pointer returned by a prior call to <b>Alloc</b>.</para>
      <para>The <i>cb</i> argument specifies the size of the new block, in bytes. The contents of the block are unchanged up to the shorter of the new and old sizes, although the new block can be in a different location. Because the new block can be in a different memory location, the pointer returned by <b>Realloc</b> is not guaranteed to be the pointer passed through the <i>pv</i> argument. If <i>pv</i> is not <b>NULL</b> and <i>cb</i> is zero, the memory pointed to by <i>pv</i> is freed.</para>
      <para>
        <b>Realloc</b> returns a void pointer to the reallocated (and possibly moved) block of memory. The return value is <b>NULL</b> if the size is zero and the buffer argument is not <b>NULL</b>, or if there is not enough memory available to expand the block to the specified size. In the first case, the original block is freed; in the second, the original block is unchanged.</para>
      <para>The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than <b>void</b>, use a type cast on the return value.</para>
    </remarks>
    <seealso cref="IMalloc" />
  </member>
  <member name="IMalloc">
    <summary>
      <para>Allocates, frees, and manages memory.</para>
    </summary>
    <seealso cref="CoGetMalloc" />
    <seealso cref="CoRegisterMallocSpy" />
    <seealso cref="CoRevokeMallocSpy" />
    <seealso cref="IMallocSpy" />
  </member>
</doc>