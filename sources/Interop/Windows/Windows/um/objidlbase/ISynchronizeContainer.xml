<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ISynchronizeContainer.AddSynchronize">
    <summary>
      <para>Adds a synchronization object to the container.</para>
    </summary>
    <param name="pSync">
      <para>A pointer to the synchronization object to be added to the container. See <see cref="ISynchronize" />.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_FAIL, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>RPC_E_OUT_OF_RESOURCES</b>
            </para>
          </description>
          <description>
            <para>The synchronization object container is full.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A synchronization container can hold pointers to as many as 63 synchronization objects.</para>
    </remarks>
    <seealso cref="ISynchronize" />
    <seealso cref="ISynchronizeContainer" />
  </member>
  <member name="ISynchronizeContainer.WaitMultiple">
    <summary>
      <para>Waits for any synchronization object in the container to be signaled or for a specified timeout period to elapse, whichever comes first.</para>
    </summary>
    <param name="dwFlags">
      <para>The wait options. Possible values are taken from the <see cref="COWAIT_FLAGS" /> enumeration. COWAIT_WAITALL is not a valid setting for this method.</para>
    </param>
    <param name="dwTimeOut">
      <para>The time this call will wait before returning, in milliseconds. If this parameter is INFINITE, the caller will wait until a synchronization object is signaled, no matter how long it takes. If this parameter is 0, the method returns immediately.</para>
    </param>
    <param name="ppSync">
      <para>A pointer to an <see cref="ISynchronize" /> interface pointer on the synchronization object that was signaled. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_FAIL, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The synchronization object was signaled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>RPC_E_TIMEOUT</b>
            </para>
          </description>
          <description>
            <para>The time-out period elapsed before the synchronization object was signaled.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>RPC_E_NO_SYNC</b>
            </para>
          </description>
          <description>
            <para>There are no synchronization objects in the container.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the caller is waiting in a single-thread apartment, <b>WaitMultiple</b> enters the COM modal loop. If the caller is waiting in a multithread apartment, the caller is blocked until <b>WaitMultiple</b> returns.</para>
    </remarks>
    <seealso cref="CoWaitForMultipleHandles" />
    <seealso cref="ISynchronizeContainer" />
  </member>
  <member name="ISynchronizeContainer">
    <summary>
      <para>Manages a group of unsignaled synchronization objects.</para>
    </summary>
    <seealso cref="ISynchronize" />
  </member>
</doc>