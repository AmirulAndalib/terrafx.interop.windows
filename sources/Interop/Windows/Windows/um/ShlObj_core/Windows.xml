<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AssocGetDetailsOfPropKey">
    <summary>Retrieves the value for a given property key using the file association information provided by the <a href="https://docs.microsoft.com//windows/desktop/shell/nse-works">Namespace Extensions</a>.</summary>
    <param name="psf">A pointer to the shell folder for which the details of the property key of the file association are being retrieved.</param>
    <param name="pidl">The PIDL of the child item for which the file associations are being requested.</param>
    <param name="pkey">A pointer to the property key that is being retrieved.</param>
    <param name="pv">When this function returns, contains the details of the given property key.</param>
    <param name="pfFoundPropKey">When this function returns, contains a flag that is <b>TRUE</b> if the property key was found, otherwise <b>FALSE</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.CDefFolderMenu_Create2">
    <summary>Creates a context menu for a selected group of file folder objects.</summary>
    <param name="pidlFolder">An <see cref="ITEMIDLIST" /> structure for the parent folder. This value can be <b>NULL</b>.</param>
    <param name="hwnd">A handle to the parent window. This value can be <b>NULL</b>.</param>
    <param name="cidl">The number of <see cref="ITEMIDLIST" /> structures in the array pointed to by <i>apidl</i>.</param>
    <param name="apidl">A pointer to an array of <see cref="ITEMIDLIST" /> structures, one for each item that is selected.</param>
    <param name="psf">A pointer to the parent folder's <see cref="IShellFolder" /> interface. This <b>IShellFolder</b> must support the <see cref="IDataObject" /> interface. If it does not, <b>CDefFolderMenu_Create2</b> fails and returns E_NOINTERFACE. This value can be <b>NULL</b>.</param>
    <param name="pfn">The <a href="https://docs.microsoft.com//windows/desktop/api/shlobj_core/nc-shlobj_core-lpfndfmcallback">LPFNDFMCALLBACK</a> callback object. This value can be <b>NULL</b> if the callback object is not needed.</param>
    <param name="nKeys">
      <para>The number of registry keys in the array pointed to by <i>ahkeys</i>.</para>
      <div>
        <b>Note</b>  The maximum number of registry keys is 16. Callers must enforce this limit as the API does not. Failing to do so can result in memory corruption.</div>
    </param>
    <param name="ahkeys">A pointer to an array of registry keys that specify the context menu handlers used with the menu's entries. For more information on context menu handlers, see <a href="https://docs.microsoft.com//windows/desktop/shell/context-menu-handlers">Creating Context Menu Handlers</a>. This array can contain a maximum of 16 registry keys.</param>
    <param name="ppcm">The address of an <see cref="IContextMenu" /> interface pointer that, when this function returns successfully, points to the <b>IContextMenu</b> object that represents the context menu.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.IDListContainerIsConsistent">
    <summary>Verifies that the container structure of an IDList is valid.</summary>
    <param name="pidl">A pointer to the IDList to validate.</param>
    <param name="cbAlloc">The size, in bytes, of the PIDL specified in the <i>pidl</i> parameter.</param>
    <returns>
      <b>TRUE</b> if the IDList structure is valid; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ILAppendID">
    <summary>Appends or prepends an <see cref="SHITEMID" /> structure to an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure. When the function returns, the <see cref="SHITEMID" /> structure specified by <i>pmkid</i> is appended or prepended.</param>
    <param name="pmkid">A pointer to a <see cref="SHITEMID" /> structure to be appended or prepended to <i>pidl</i>.</param>
    <param name="fAppend">Value that is set to <b>TRUE</b> to append <i>pmkid</i> to <i>pidl</i>. Set this value to <b>FALSE</b> to prepend <i>pmkid</i> to <i>pidl</i>.</param>
    <returns>Returns the <see cref="ITEMIDLIST" /> structure specified by <i>pidl</i>, with <i>pmkid</i> appended or prepended. Returns <b>NULL</b> on failure.</returns>
  </member>
  <member name="Windows.ILClone">
    <summary>Clones an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be cloned.</param>
    <returns>Returns a pointer to a copy of the <see cref="ITEMIDLIST" /> structure pointed to by <i>pidl</i>.</returns>
  </member>
  <member name="Windows.ILCloneChild">
    <summary>Clones a child <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to the child <see cref="ITEMIDLIST" /> structure to be cloned.</param>
    <returns>A pointer to a copy of the child <see cref="ITEMIDLIST" /> structure pointed to by <i>pidl</i>.</returns>
  </member>
  <member name="Windows.ILCloneFirst">
    <summary>Clones the first <see cref="SHITEMID" /> structure in an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure that you want to clone.</param>
    <returns>A pointer to an <see cref="ITEMIDLIST" /> structure that contains the first <see cref="SHITEMID" /> structure from the <b>ITEMIDLIST</b> structure specified by <i>pidl</i>. Returns <b>NULL</b> on failure.</returns>
  </member>
  <member name="Windows.ILCloneFull">
    <summary>Clones a full, or absolute, <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to the full, or absolute, <see cref="ITEMIDLIST" /> structure to be cloned.</param>
    <returns>A pointer to a copy of the <see cref="ITEMIDLIST" /> structure pointed to by <i>pidl</i>.</returns>
  </member>
  <member name="Windows.ILCombine">
    <summary>Combines two <see cref="ITEMIDLIST" /> structures.</summary>
    <param name="pidl1">A pointer to the first <see cref="ITEMIDLIST" /> structure.</param>
    <param name="pidl2">A pointer to the second <see cref="ITEMIDLIST" /> structure. This structure is appended to the structure pointed to by <i>pidl1</i>.</param>
    <returns>Returns an <see cref="ITEMIDLIST" /> containing the combined structures. If you set either <i>pidl1</i> or <i>pidl2</i> to <b>NULL</b>, the returned <b>ITEMIDLIST</b> structure is a clone of the non-<b>NULL</b> parameter. Returns <b>NULL</b> if <i>pidl1</i> and <i>pidl2</i> are both set to <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ILCreateFromPath">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathA">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathW">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPath">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathA">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathW">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPath">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathA">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILCreateFromPathW">
    <summary>Returns the <see cref="ITEMIDLIST" /> structure associated with a specified file path.</summary>
    <param name="pszPath">A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns a pointer to an <see cref="ITEMIDLIST" /> structure that corresponds to the path.</returns>
  </member>
  <member name="Windows.ILFindChild">
    <summary>Determines whether a specified <see cref="ITEMIDLIST" /> structure is the child of another <b>ITEMIDLIST</b> structure.</summary>
    <param name="pidlParent">A pointer to the parent <see cref="ITEMIDLIST" /> structure.</param>
    <param name="pidlChild">A pointer to the child <see cref="ITEMIDLIST" /> structure.</param>
    <returns>
      <para>Returns a pointer to the child's simple <see cref="ITEMIDLIST" /> structure if <i>pidlChild</i> is a child of <i>pidlParent</i>. The returned structure consists of <i>pidlChild</i>, minus the <see cref="SHITEMID" /> structures that make up <i>pidlParent</i>. Returns <b>NULL</b> if <i>pidlChild</i> is not a child of <i>pidlParent</i>.</para>
      <div>
        <b>Note</b>  The returned pointer is a pointer into the existing parent structure. It is an alias for <i>pidlChild</i>. No new memory is allocated in association with the returned pointer. It is not the caller's responsibility to free the returned value.</div>
    </returns>
  </member>
  <member name="Windows.ILFindLastID">
    <summary>Returns a pointer to the last <see cref="SHITEMID" /> structure in an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure.</param>
    <returns>A pointer to the last <see cref="SHITEMID" /> structure in <i>pidl</i>.</returns>
  </member>
  <member name="Windows.HashTable_CoTaskMemFreeCB">
    <summary>Frees an <see cref="ITEMIDLIST" /> structure allocated by the Shell.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be freed. This parameter can be <b>NULL</b>.</param>
  </member>
  <member name="Windows.ILFree">
    <summary>Frees an <see cref="ITEMIDLIST" /> structure allocated by the Shell.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be freed. This parameter can be <b>NULL</b>.</param>
  </member>
  <member name="Windows.ILGetNext">
    <summary>Retrieves the next <see cref="SHITEMID" /> structure in an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to a particular <see cref="SHITEMID" /> structure in a larger <see cref="ITEMIDLIST" /> structure.</param>
    <returns>Returns a pointer to the <see cref="SHITEMID" /> structure that follows the one specified by <i>pidl</i>. Returns <b>NULL</b> if <i>pidl</i> points to the last <b>SHITEMID</b> structure.</returns>
  </member>
  <member name="Windows.ILGetSize">
    <summary>Returns the size, in bytes, of an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure.</param>
    <returns>The size of the <see cref="ITEMIDLIST" /> structure specified by <i>pidl</i>, in bytes.</returns>
  </member>
  <member name="Windows.ILIsAligned">
    <summary>Verifies whether a constant <see cref="ITEMIDLIST" /> is aligned on a pointer boundary, which is a <b>DWORD</b> on 32-bit architectures and a <b>QWORD</b> on 64-bit architectures.</summary>
    <param name="pidl">A constant PIDL relative to a parent folder that is being checked for alignment.</param>
    <returns>Returns <b>TRUE</b> if aligned; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ILIsChild">
    <summary>Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one <see cref="SHITEMID" />.</summary>
    <param name="pidl">A constant, unaligned, relative PIDL that is being checked.</param>
    <returns>Returns <b>TRUE</b> if the given PIDL is a child PIDL; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ILIsEmpty">
    <summary>Verifies whether an <see cref="ITEMIDLIST" /> structure is empty.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be checked.</param>
    <returns>
      <b>TRUE</b> if the <i>pidl</i> parameter is <b>NULL</b> or the <see cref="ITEMIDLIST" /> structure pointed to by <i>pidl</i> is empty; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ILIsEqual">
    <summary>Tests whether two <see cref="ITEMIDLIST" /> structures are equal in a binary comparison.</summary>
    <param name="pidl1">The first <see cref="ITEMIDLIST" /> structure.</param>
    <param name="pidl2">The second <see cref="ITEMIDLIST" /> structure.</param>
    <returns>Returns <b>TRUE</b> if the two structures are equal, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.ILIsParent">
    <summary>Tests whether an <see cref="ITEMIDLIST" /> structure is the parent of another <b>ITEMIDLIST</b> structure.</summary>
    <param name="pidl1">A pointer to an <see cref="ITEMIDLIST" /> (PIDL) structure that specifies the parent. This must be an absolute PIDL.</param>
    <param name="pidl2">A pointer to an <see cref="ITEMIDLIST" /> (PIDL) structure that specifies the child. This must be an absolute PIDL.</param>
    <param name="fImmediate">A Boolean value that is set to <b>TRUE</b> to test for immediate parents of <i>pidl2</i>, or <b>FALSE</b> to test for any parents of <i>pidl2</i>.</param>
    <returns>Returns <b>TRUE</b> if <i>pidl1</i> is a parent of <i>pidl2</i>. If <i>fImmediate</i> is set to <b>TRUE</b>, the function only returns <b>TRUE</b> if <i>pidl1</i> is the immediate parent of <i>pidl2</i>. Otherwise, the function returns <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ILNext">
    <summary>Retrieves the next <see cref="SHITEMID" /> structure in an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A constant, unaligned, relative PIDL for which the next <see cref="SHITEMID" /> structure is being retrieved.</param>
    <returns>When this function returns, contains one of three results: If <i>pidl</i> is valid and not the last <see cref="SHITEMID" /> in the <see cref="ITEMIDLIST" />, then it contains a pointer to the next <b>ITEMIDLIST</b> structure. If the last <b>ITEMIDLIST</b> structure is passed, it contains <b>NULL</b>, which signals the end of the PIDL. For other values of <i>pidl</i>, the return value is meaningless.</returns>
  </member>
  <member name="Windows.ILRemoveLastID">
    <summary>Removes the last <see cref="SHITEMID" /> structure from an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be shortened. When the function returns, this variable points to the shortened structure.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.ILSaveToStream">
    <summary>Saves an <see cref="ITEMIDLIST" /> structure to a stream.</summary>
    <param name="pstm">A pointer to the <see cref="IStream" /> interface where the <see cref="ITEMIDLIST" /> is saved.</param>
    <param name="pidl">A pointer to the <see cref="ITEMIDLIST" /> structure to be saved.</param>
    <returns>Returns S_OK if successful, or a COM error value otherwise.</returns>
  </member>
  <member name="Windows.ILSkip">
    <summary>Skips a given number of bytes in a constant, unaligned, relative <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="pidl">A constant, unaligned, relative PIDL in which bytes are to be skipped.</param>
    <param name="cb">The number of bytes to skip.</param>
    <returns>When this function returns, if <i>pidl</i> and <i>cb</i> are valid, contains a constant pointer to the <see cref="ITEMIDLIST" /> structure that results after the skip. Otherwise, the value is meaningless.</returns>
  </member>
  <member name="Windows.PathMakeUniqueName">
    <summary>Creates a unique path name from a template.</summary>
    <param name="pszUniqueName">A buffer that receives a null-terminated Unicode string that contains the unique path name. It should be at least MAX_PATH characters in length.</param>
    <param name="cchMax">The number of characters in the buffer pointed to by <i>pszUniqueName</i>.</param>
    <param name="pszTemplate">A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that require file names with the 8.3 format. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <param name="pszLongPlate">A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that support long file names. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <param name="pszDir">A null-terminated string that contains the directory in which the new file resides. This string should be no more than MAX_PATH characters in length, including the terminating null character.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.PathYetAnotherMakeUniqueName">
    <summary>Creates a unique filename based on an existing filename.</summary>
    <param name="pszUniqueName">A string buffer that receives a null-terminated Unicode string that contains the fully qualified path of the unique file name. This buffer should be at least MAX_PATH characters long to avoid causing a buffer overrun.</param>
    <param name="pszPath">A null-terminated Unicode string that contains the fully qualified path of folder that will contain the new file. If <i>pszShort</i> is set to <b>NULL</b>, this string must contain a full destination path, ending with the long file name that the new file name will be base on.</param>
    <param name="pszShort">A null-terminated Unicode string that contains the short file name that the unique name will be based on. Set this value to <b>NULL</b> to create a name based on the long file name.</param>
    <param name="pszFileSpec">A null-terminated Unicode string that contains the long file name that the unique name will be based on.</param>
    <returns>Returns <b>TRUE</b> if a unique name was successfully created; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHAddToRecentDocs">
    <summary>Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.</summary>
    <param name="uFlags">A value from the <see cref="SHARD" /> enumeration that indicates the form of the information pointed to by the <i>pv</i> parameter.</param>
    <param name="pv">
      <para>A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:</para>
      <list type="bullet">
        <item>
          <description>A null-terminated string that contains the path and file name of the item.</description>
        </item>
        <item>
          <description>A PIDL that identifies the item's file object.</description>
        </item>
        <item>
          <description>
            <b>Windows 7 and later only</b>. A <see cref="SHARDAPPIDINFO" />, <see cref="SHARDAPPIDINFOIDLIST" />, or <see cref="SHARDAPPIDINFOLINK" /> structure that identifies the item through an AppUserModelID. See <a href="https://docs.microsoft.com//windows/desktop/shell/appids">Application User Model IDs (AppUserModelIDs)</a> for more information.</description>
        </item>
        <item>
          <description>
            <b>Windows 7 and later only</b>. An <see cref="IShellLink" /> object that identifies the item through a shortcut.</description>
        </item>
      </list>
      <para>Set this parameter to <b>NULL</b> to clear all usage data on all items.</para>
    </param>
  </member>
  <member name="Windows.SHBindToFolderIDListParent">
    <summary>Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.</summary>
    <param name="psfRoot">A pointer to a Shell folder object. If <i>psfRoot</i> is <b>NULL</b>, indicates that the IDList passed is relative to the desktop.</param>
    <param name="pidl">A PIDL to bind to, relative to <i>psfRoot</i>. If <i>psfRoot</i> is <b>NULL</b>, this is an absolute IDList relative to the desktop folder.</param>
    <param name="riid">Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder.</param>
    <param name="ppv">When this function returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellFolder" /> or <see cref="IShellFolder2" />, but can be anything supported by the target folder.</param>
    <param name="ppidlLast">A pointer to the last ID of the <i>pidl</i> parameter, and is a child ID relative to the parent folder returned in <i>ppv</i>. This value can be <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHBindToFolderIDListParentEx">
    <summary>Extends the <see cref="SHBindToFolderIDListParent" /> function by allowing the caller to specify a bind context.</summary>
    <param name="psfRoot">A pointer to a Shell folder object. If <i>psfRoot</i> is <b>NULL</b>, indicates that the IDList passed is relative to the desktop.</param>
    <param name="pidl">A PIDL to bind to, relative to <i>psfRoot</i>. If <i>psfRoot</i> is <b>NULL</b>, this is an absolute IDList relative to the desktop folder.</param>
    <param name="ppbc">A pointer to <see cref="IBindCtx" /> interface on a bind context object to be used during this operation. If this parameter is not used, set it to <b>NULL</b>, which is equivalent to calling the <see cref="SHBindToFolderIDListParent" /> function. Because support for <i>pbc</i> is optional for folder object implementations, some folders may not support the use of bind contexts.</param>
    <param name="riid">Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder.</param>
    <param name="ppv">When this function returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IShellFolder" /> or <see cref="IShellFolder2" />, but can be anything supported by the target folder.</param>
    <param name="ppidlLast">A pointer to the last ID of the <i>pidl</i> parameter, and is a child ID relative to the parent folder returned in <i>ppv</i>. This value can be <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHBindToObject">
    <summary>Retrieves and binds to a specified object by using the Shell namespace <see cref="IShellFolder.BindToObject" /> method.</summary>
    <param name="psf">A pointer to <see cref="IShellFolder" />. This parameter can be <b>NULL</b>. If <i>psf</i> is <b>NULL</b>, this indicates parameter <i>pidl</i> is relative to the desktop. In this case, <i>pidl</i> must specify an absolute <see cref="ITEMIDLIST" />.</param>
    <param name="pidl">A pointer to a constant <see cref="ITEMIDLIST" /> to bind to that is relative to <i>psf</i>. If <i>psf</i> is <b>NULL</b>, this is an absolute <b>ITEMIDLIST</b> relative to the desktop folder.</param>
    <param name="pbc">A pointer to <see cref="IBindCtx" /> interface on a bind context object to be used during this operation. If this parameter is not used, set it to <b>NULL</b>. Because support for <i>pbc</i> is optional for folder object implementations, some folders may not support the use of bind contexts.</param>
    <param name="riid">Identifier of the interface to return.</param>
    <param name="ppv">When this method returns, contains the interface pointer as specified in <i>riid</i> to the bound object. If an error occurs, contains a <b>NULL</b> pointer.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHBindToParent">
    <summary>Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.</summary>
    <param name="pidl">The item's PIDL.</param>
    <param name="riid">The <b>REFIID</b> of one of the interfaces exposed by the item's parent object.</param>
    <param name="ppv">A pointer to the interface specified by <i>riid</i>. You must release the object when you are finished.</param>
    <param name="ppidlLast">
      <para>The item's PIDL relative to the parent folder. This PIDL can be used with many of the methods supported by the parent folder's interfaces. If you set <i>ppidlLast</i> to <b>NULL</b>, the PIDL is not returned.</para>
      <div>
        <b>Note</b>  <b>SHBindToParent</b> does not allocate a new PIDL; it simply receives a pointer through this parameter. Therefore, you are not responsible for freeing this resource.</div>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHBrowseForFolder">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHBrowseForFolderA">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHBrowseForFolderW">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHBrowseForFolder">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHBrowseForFolderA">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHBrowseForFolderW">
    <summary>Displays a dialog box that enables the user to select a Shell folder.</summary>
    <param name="lpbi">A pointer to a <see cref="BROWSEINFO" /> structure that contains information used to display the dialog box.</param>
    <returns>
      <para>Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the <b>Cancel</b> button in the dialog box, the return value is <b>NULL</b>.</para>
      <para>It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section.</para>
    </returns>
  </member>
  <member name="Windows.SHChangeNotification_Lock">
    <summary>Locks the shared memory associated with a Shell change notification event.</summary>
    <param name="hChange">A handle to a window received as a <i>wParam</i> in the specified Shell change notification message.</param>
    <param name="dwProcId">The process ID (<i>lParam</i> in the message callback).</param>
    <param name="pppidl">The address of a pointer to a PIDLIST_ABSOLUTE that, when this function returns successfully, receives the list of affected PIDLs.</param>
    <param name="plEvent">A pointer to a LONG value that, when this function returns successfully, receives the Shell change notification ID of the event that took place.</param>
    <returns>Returns a handle (HLOCK) to the locked memory. Pass this value to <see cref="SHChangeNotification_Unlock" /> when finished.</returns>
  </member>
  <member name="Windows.SHChangeNotification_Unlock">
    <summary>Unlocks shared memory for a change notification.</summary>
    <param name="hLock">A handle to the memory lock. This is the handle returned by <see cref="SHChangeNotification_Lock" /> when it locked the memory.</param>
    <returns>Returns <b>TRUE</b> on success; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHChangeNotify">
    <summary>Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell.</summary>
    <param name="wEventId">
      <para>Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the <i>dwItem1</i> and <i>dwItem2</i> parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values:</para>
      <h4>SHCNE_ALLEVENTS</h4>
      <para>All events have occurred.</para>
      <h4>SHCNE_ASSOCCHANGED</h4>
      <para>A file type association has changed. <b>SHCNF_IDLIST</b> must be specified in the <i>uFlags</i> parameter. <i>dwItem1</i> and <i>dwItem2</i> are not used and must be <b>NULL</b>. This event should also be sent for registered protocols.</para>
      <h4>SHCNE_ATTRIBUTES</h4>
      <para>The attributes of an item or folder have changed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the item or folder that has changed. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_CREATE</h4>
      <para>A nonfolder item has been created. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the item that was created. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_DELETE</h4>
      <para>A nonfolder item has been deleted. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the item that was deleted. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_DRIVEADD</h4>
      <para>A drive has been added. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the root of the drive that was added. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_DRIVEADDGUI</h4>
      <para>
        <b>Windows XP and later</b>: Not used.</para>
      <h4>SHCNE_DRIVEREMOVED</h4>
      <para>A drive has been removed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the root of the drive that was removed. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_EXTENDED_EVENT</h4>
      <para>Not currently used.</para>
      <h4>SHCNE_FREESPACE</h4>
      <para>The amount of free space on a drive has changed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the root of the drive on which the free space changed. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_MEDIAINSERTED</h4>
      <para>Storage media has been inserted into a drive. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the root of the drive that contains the new media. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_MEDIAREMOVED</h4>
      <para>Storage media has been removed from a drive. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the root of the drive from which the media was removed. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_MKDIR</h4>
      <para>A folder has been created. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the folder that was created. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_NETSHARE</h4>
      <para>A folder on the local computer is being shared via the network. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the folder that is being shared. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_NETUNSHARE</h4>
      <para>A folder on the local computer is no longer being shared via the network. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the folder that is no longer being shared. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_RENAMEFOLDER</h4>
      <para>The name of a folder has changed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the previous PIDL or name of the folder. <i>dwItem2</i> contains the new PIDL or name of the folder.</para>
      <h4>SHCNE_RENAMEITEM</h4>
      <para>The name of a nonfolder item has changed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the previous PIDL or name of the item. <i>dwItem2</i> contains the new PIDL or name of the item.</para>
      <h4>SHCNE_RMDIR</h4>
      <para>A folder has been removed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the folder that was removed. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_SERVERDISCONNECT</h4>
      <para>The computer has disconnected from a server. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the server from which the computer was disconnected. <i>dwItem2</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_UPDATEDIR</h4>
      <para>The contents of an existing folder have changed, but the folder still exists and has not been renamed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the folder that has changed. <i>dwItem2</i> is not used and should be <b>NULL</b>. If a folder has been created, deleted, or renamed, use <b>SHCNE_MKDIR</b>, <b>SHCNE_RMDIR</b>, or <b>SHCNE_RENAMEFOLDER</b>, respectively.</para>
      <h4>SHCNE_UPDATEIMAGE</h4>
      <para>An image in the system image list has changed. <b>SHCNF_DWORD</b> must be specified in <i>uFlags</i>.</para>
      <para>
        <i>dwItem2</i> contains the index in the system image list that has changed. <i>dwItem1</i> is not used and should be <b>NULL</b>.</para>
      <h4>SHCNE_UPDATEITEM</h4>
      <para>An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. <b>SHCNF_IDLIST</b> or <b>SHCNF_PATH</b> must be specified in <i>uFlags</i>. <i>dwItem1</i> contains the item that has changed. <i>dwItem2</i> is not used and should be <b>NULL</b>. If a nonfolder item has been created, deleted, or renamed, use <b>SHCNE_CREATE</b>, <b>SHCNE_DELETE</b>, or <b>SHCNE_RENAMEITEM</b>, respectively, instead.</para>
      <h4>SHCNE_DISKEVENTS</h4>
      <para>Specifies a combination of all of the disk event identifiers.</para>
      <h4>SHCNE_GLOBALEVENTS</h4>
      <para>Specifies a combination of all of the global event identifiers.</para>
      <h4>SHCNE_INTERRUPT</h4>
      <para>The specified event occurred as a result of a system interrupt. As this value modifies other event values, it cannot be used alone.</para>
    </param>
    <param name="uFlags">
      <para>Flags that, when combined bitwise with <b>SHCNF_TYPE</b>, indicate the meaning of the <i>dwItem1</i> and <i>dwItem2</i> parameters. The <i>uFlags</i> parameter must be one of the following values.</para>
      <h4>SHCNF_DWORD</h4>
      <para>The <i>dwItem1</i> and <i>dwItem2</i> parameters are <b>DWORD</b> values.</para>
      <h4>SHCNF_IDLIST</h4>
      <para>
        <i>dwItem1</i> and <i>dwItem2</i> are the addresses of <see cref="ITEMIDLIST" /> structures that represent the item(s) affected by the change. Each <b>ITEMIDLIST</b> must be relative to the desktop folder.</para>
      <h4>SHCNF_PATH</h4>
      <para>
        <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings of maximum length <b>MAX_PATH</b> that contain the full path names of the items affected by the change.</para>
      <h4>SHCNF_PRINTER</h4>
      <para>
        <i>dwItem1</i> and <i>dwItem2</i> are the addresses of null-terminated strings that represent the friendly names of the printer(s) affected by the change.</para>
      <h4>SHCNF_FLUSH</h4>
      <para>The function should not return until the notification has been delivered to all affected components. As this flag modifies other data-type flags, it cannot be used by itself.</para>
      <h4>SHCNF_FLUSHNOWAIT</h4>
      <para>The function should begin delivering notifications to all affected components but should return as soon as the notification process has begun. As this flag modifies other data-type flags, it cannot by used by itself. This flag includes <b>SHCNF_FLUSH</b>.</para>
      <h4>SHCNF_NOTIFYRECURSIVE</h4>
      <para>Notify clients registered for all children.</para>
    </param>
    <param name="dwItem1">Optional. First event-dependent value.</param>
    <param name="dwItem2">Optional. Second event-dependent value.</param>
  </member>
  <member name="Windows.NTSHChangeNotifyDeregister">
    <summary>Unregisters the client's window process from receiving <see cref="SHChangeNotify" /> messages.</summary>
    <param name="ulID">A value of type <b>ULONG</b> that specifies the registration ID returned by <see cref="SHChangeNotifyRegister" />.</param>
    <returns>Returns <b>TRUE</b> if the specified client was found and removed; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHChangeNotifyDeregister">
    <summary>Unregisters the client's window process from receiving <see cref="SHChangeNotify" /> messages.</summary>
    <param name="ulID">A value of type <b>ULONG</b> that specifies the registration ID returned by <see cref="SHChangeNotifyRegister" />.</param>
    <returns>Returns <b>TRUE</b> if the specified client was found and removed; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.NTSHChangeNotifyRegister">
    <summary>Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.</summary>
    <param name="hwnd">A handle to the window that receives the change or notification messages.</param>
    <param name="fSources">
      <para>One or more of the following values that indicate the type of events for which to receive notifications.</para>
      <div>
        <b>Note</b>  In earlier versions of the SDK, these flags are not defined in a header file and implementers must define these values themselves or use their numeric values directly. As of Windows Vista, these flags are defined in Shlobj.h.</div>
      <h4>SHCNRF_InterruptLevel (0x0001)</h4>
      <para>Interrupt level notifications from the file system.</para>
      <h4>SHCNRF_ShellLevel (0x0002)</h4>
      <para>Shell-level notifications from the shell.</para>
      <h4>SHCNRF_RecursiveInterrupt (0x1000)</h4>
      <para>Interrupt events on the whole subtree. This flag must be combined with the <b>SHCNRF_InterruptLevel</b> flag. When using this flag, notifications must also be made recursive by setting the <b>fRecursive</b> member of the corresponding <see cref="SHChangeNotifyEntry" /> structure referenced by <i>pshcne</i> to <b>TRUE</b>. Use of <b>SHCNRF_RecursiveInterrupt</b> on a single level view—for example, a PIDL that is relative and contains only one <see cref="SHITEMID" />—will block event notification at the highest level and thereby prevent a recursive, child update. Thus, an icon dragged into the lowest level of a folder hierarchy may fail to appear in the view as expected.</para>
      <h4>SHCNRF_NewDelivery (0x8000)</h4>
      <para>Messages received use shared memory. Call <see cref="SHChangeNotification_Lock" /> to access the actual data. Call <see cref="SHChangeNotification_Unlock" /> to release the memory when done.</para>
      <div>
        <b>Note</b>  We recommend this flag because it provides a more robust delivery method. All clients should specify this flag.</div>
    </param>
    <param name="fEvents">Change notification events for which to receive notification. See the SHCNE flags listed in <see cref="SHChangeNotify" /> for possible values.</param>
    <param name="wMsg">Message to be posted to the window procedure.</param>
    <param name="cEntries">Number of entries in the <i>pshcne</i> array.</param>
    <param name="pshcne">Array of <see cref="SHChangeNotifyEntry" /> structures that contain the notifications. This array should always be set to one when calling <b>SHChangeNotifyRegister</b> or <see cref="SHChangeNotifyDeregister" /> will not work properly.</param>
    <returns>Returns a positive integer registration ID. Returns 0 if out of memory or in response to invalid parameters.</returns>
  </member>
  <member name="Windows.SHChangeNotifyRegister">
    <summary>Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.</summary>
    <param name="hwnd">A handle to the window that receives the change or notification messages.</param>
    <param name="fSources">
      <para>One or more of the following values that indicate the type of events for which to receive notifications.</para>
      <div>
        <b>Note</b>  In earlier versions of the SDK, these flags are not defined in a header file and implementers must define these values themselves or use their numeric values directly. As of Windows Vista, these flags are defined in Shlobj.h.</div>
      <h4>SHCNRF_InterruptLevel (0x0001)</h4>
      <para>Interrupt level notifications from the file system.</para>
      <h4>SHCNRF_ShellLevel (0x0002)</h4>
      <para>Shell-level notifications from the shell.</para>
      <h4>SHCNRF_RecursiveInterrupt (0x1000)</h4>
      <para>Interrupt events on the whole subtree. This flag must be combined with the <b>SHCNRF_InterruptLevel</b> flag. When using this flag, notifications must also be made recursive by setting the <b>fRecursive</b> member of the corresponding <see cref="SHChangeNotifyEntry" /> structure referenced by <i>pshcne</i> to <b>TRUE</b>. Use of <b>SHCNRF_RecursiveInterrupt</b> on a single level view—for example, a PIDL that is relative and contains only one <see cref="SHITEMID" />—will block event notification at the highest level and thereby prevent a recursive, child update. Thus, an icon dragged into the lowest level of a folder hierarchy may fail to appear in the view as expected.</para>
      <h4>SHCNRF_NewDelivery (0x8000)</h4>
      <para>Messages received use shared memory. Call <see cref="SHChangeNotification_Lock" /> to access the actual data. Call <see cref="SHChangeNotification_Unlock" /> to release the memory when done.</para>
      <div>
        <b>Note</b>  We recommend this flag because it provides a more robust delivery method. All clients should specify this flag.</div>
    </param>
    <param name="fEvents">Change notification events for which to receive notification. See the SHCNE flags listed in <see cref="SHChangeNotify" /> for possible values.</param>
    <param name="wMsg">Message to be posted to the window procedure.</param>
    <param name="cEntries">Number of entries in the <i>pshcne</i> array.</param>
    <param name="pshcne">Array of <see cref="SHChangeNotifyEntry" /> structures that contain the notifications. This array should always be set to one when calling <b>SHChangeNotifyRegister</b> or <see cref="SHChangeNotifyDeregister" /> will not work properly.</param>
    <returns>Returns a positive integer registration ID. Returns 0 if out of memory or in response to invalid parameters.</returns>
  </member>
  <member name="Windows.SHCreateDataObject">
    <summary>Creates a data object in a parent folder.</summary>
    <param name="pidlFolder">A pointer to an <see cref="ITEMIDLIST" /> (PIDL) of the parent folder that contains the data object.</param>
    <param name="cidl">The number of file objects or subfolders specified in the <i>apidl</i> parameter.</param>
    <param name="apidl">An array of pointers to constant <see cref="ITEMIDLIST" /> structures, each of which uniquely identifies a file object or subfolder relative to the parent folder. Each item identifier list must contain exactly one <see cref="SHITEMID" /> structure followed by a terminating zero.</param>
    <param name="pdtInner">A pointer to interface <see cref="IDataObject" />. This parameter can be <b>NULL</b>. Specify <i>pdtInner</i> only if the data object created needs to support additional <see cref="FORMATETC" /> clipboard formats beyond the default formats it is assigned at creation. Alternatively, provide support for populating the created data object using non-default clipboard formats by calling method <see cref="IDataObject.SetData" /> and specifying the format in the <b>FORMATETC</b> structure passed in parameter <i>pFormatetc</i>.</param>
    <param name="riid">A reference to the IID of the interface to retrieve through <i>ppv</i>. This must be IID_IDataObject.</param>
    <param name="ppv">When this method returns successfully, contains the <see cref="IDataObject" /> interface pointer requested in <i>riid</i>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHCreateDefaultContextMenu">
    <summary>Creates an object that represents the Shell's default context menu implementation.</summary>
    <param name="pdcm">A pointer to a constant <see cref="DEFCONTEXTMENU" /> structure.</param>
    <param name="riid">Reference to the interface ID of the interface on which to base the object. This is typically the IID of <see cref="IContextMenu" />, <see cref="IContextMenu2" />, or <see cref="IContextMenu3" />.</param>
    <param name="ppv">When this method returns, contains the interface pointer requested in <i>riid</i>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHCreateShellFolderView">
    <summary>Creates a new instance of the default Shell folder view object (DefView).</summary>
    <param name="pcsfv">Pointer to a <see cref="SFV_CREATE" /> structure that describes the particulars used in creating this instance of the Shell folder view object.</param>
    <param name="ppsv">When this function returns successfully, contains an interface pointer to the new <see cref="IShellView" /> object. On failure, this value is <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHCreateShellFolderViewEx">
    <summary>Creates a new instance of the default Shell folder view object. It is recommended that you use <see cref="SHCreateShellFolderView" /> rather than this function.</summary>
    <param name="pcsfv">Pointer to a structure that describes the details used in creating this instance of the Shell folder view object.</param>
    <param name="ppsv">The address of an <see cref="IShellView" /> interface pointer that, when this function returns successfully, points to the new view object. On failure, this value is <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHCreateShellItem">
    <summary>
      <para>Creates an <see cref="IShellItem" /> object.</para>
      <div>
        <b>Note</b>  It is recommended that you use <see cref="SHCreateItemWithParent" /> or <see cref="SHCreateItemFromIDList" /> instead of this function.</div>
    </summary>
    <param name="pidlParent">A PIDL to the parent. This value can be <b>NULL</b>.</param>
    <param name="psfParent">A pointer to the parent <see cref="IShellFolder" />. This value can be <b>NULL</b>.</param>
    <param name="pidl">A PIDL to the requested item. If parent information is not included in <i>pidlParent</i> or <i>psfParent</i>, this must be an absolute PIDL.</param>
    <param name="ppsi">When this method returns, contains the interface pointer to the new <see cref="IShellItem" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHDefExtractIcon">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDefExtractIconA">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDefExtractIconW">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDefExtractIcon">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">
      <para>A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</para>
      <h5>- uFlags.GIL_SIMULATEDOC</h5>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDefExtractIconA">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">
      <para>A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</para>
      <h5>- uFlags.GIL_SIMULATEDOC</h5>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDefExtractIconW">
    <summary>Provides a default handler to extract an icon from a file.</summary>
    <param name="pszIconFile">A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted.</param>
    <param name="iIndex">The location of the icon within the file named in <i>pszIconFile</i>. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID.</param>
    <param name="uFlags">
      <para>A flag that controls the icon extraction.</para>
      <h4>GIL_SIMULATEDOC</h4>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <param name="phiconLarge">A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> of <i>nIconSize</i>. This value can be <b>NULL</b>.</param>
    <param name="phiconSmall">A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> of <i>nIconSize</i>.</param>
    <param name="nIconSize">
      <para>A value that contains the large icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632659(v=vs.85)">LOWORD</a> and the small icon size in its <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a>. Size is measured in pixels. Pass 0 to specify default large and small sizes.</para>
      <h5>- uFlags.GIL_SIMULATEDOC</h5>
      <para>Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested icon is not present.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file cannot be accessed, or is being accessed through a slow link.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHDoDragDrop">
    <summary>Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.</summary>
    <param name="hwnd">The handle of the window used to obtain the drag image. This value can be <b>NULL</b>. See Remarks for more details.</param>
    <param name="pdata">A pointer to the <see cref="IDataObject" /> interface on a data object that contains the data being dragged.</param>
    <param name="pdsrc">
      <para>A pointer to an implementation of the <see cref="IDropSource" /> interface, which is used to communicate with the source during the drag operation.</para>
      <para>As of Windows Vista, if this value is <b>NULL</b>, the Shell creates a drop source object for you.</para>
    </param>
    <param name="dwEffect">The effects that the source allows in the drag-and-drop operation. The most significant effect is whether the drag-and-drop operation permits a move. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/dropeffect-constants">DROPEFFECT</a>.</param>
    <param name="pdwEffect">A pointer to a value that indicates how the drag-and-drop operation affected the source data. The <i>pdwEffect</i> parameter is set only if the operation is not canceled. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/dropeffect-constants">DROPEFFECT</a>.</param>
    <returns>
      <para>This function supports the standard return value E_OUTOFMEMORY, as well as the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAGDROP_S_DROP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The drag-and-drop operation was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAGDROP_S_CANCEL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The drag-and-drop operation was canceled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNSPEC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unexpected error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetDataFromIDList">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">Size of the buffer at <i>pv</i>, in bytes.</param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDataFromIDListA">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">Size of the buffer at <i>pv</i>, in bytes.</param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDataFromIDListW">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">Size of the buffer at <i>pv</i>, in bytes.</param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDataFromIDList">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>Size of the buffer at <i>pv</i>, in bytes.</para>
      <h5>- nFormat.SHGDFIL_DESCRIPTIONID</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
      <h5>- nFormat.SHGDFIL_FINDDATA</h5>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h5>- nFormat.SHGDFIL_NETRESOURCE</h5>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
    </param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDataFromIDListA">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>Size of the buffer at <i>pv</i>, in bytes.</para>
      <h5>- nFormat.SHGDFIL_DESCRIPTIONID</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
      <h5>- nFormat.SHGDFIL_FINDDATA</h5>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h5>- nFormat.SHGDFIL_NETRESOURCE</h5>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
    </param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDataFromIDListW">
    <summary>Retrieves extended property data from a relative identifier list.</summary>
    <param name="psf">The address of the parent <see cref="IShellFolder" /> interface. This must be the immediate parent of the <see cref="ITEMIDLIST" /> structure referenced by the <i>pidl</i> parameter.</param>
    <param name="pidl">A pointer to an <see cref="ITEMIDLIST" /> structure that identifies the object relative to the folder specified in <i>psf</i>.</param>
    <param name="nFormat">
      <para>The format in which the data is being requested. This parameter must be set to one of the following values.</para>
      <h4>SHGDFIL_FINDDATA</h4>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h4>SHGDFIL_NETRESOURCE</h4>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
      <h4>SHGDFIL_DESCRIPTIONID</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
    </param>
    <param name="pv">
      <para>A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by <i>nFormat</i>.</para>
      <para>If <i>nFormat</i> is <b>SHGDFIL_NETRESOURCE</b>, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>Size of the buffer at <i>pv</i>, in bytes.</para>
      <h5>- nFormat.SHGDFIL_DESCRIPTIONID</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 4.71</a>. Format used for network resources. The <i>pv</i> parameter is the address of an <see cref="SHDESCRIPTIONID" /> structure.</para>
      <h5>- nFormat.SHGDFIL_FINDDATA</h5>
      <para>Format used for file system objects. The <i>pv</i> parameter is the address of a <see cref="WIN32_FIND_DATA" /> structure.</para>
      <h5>- nFormat.SHGDFIL_NETRESOURCE</h5>
      <para>Format used for network resources. The <i>pv</i> parameter is the address of a <see cref="NETRESOURCE" /> structure.</para>
    </param>
    <returns>Returns S_OK if successful, or E_INVALIDARG otherwise.</returns>
  </member>
  <member name="Windows.SHGetDesktopFolder">
    <summary>Retrieves the <see cref="IShellFolder" /> interface for the desktop folder, which is the root of the Shell's namespace.</summary>
    <param name="ppshf">When this method returns, receives an <see cref="IShellFolder" /> interface pointer for the desktop folder. The calling application is responsible for eventually freeing the interface by calling its <see cref="IUnknown.Release" /> method.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderLocation">
    <summary>Deprecated. Retrieves the path of a folder as an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder to be located. The folders associated with the CSIDLs might not exist on a particular system.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. It is usually set to <b>NULL</b>, but it may be needed when there are multiple users for those folders that are treated as belonging to a single user. The most commonly used folder of this type is <b>My Documents</b>. The calling application is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. It must have appropriate security privileges for the particular user, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHGetFolderLocation</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>My Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="ppidl">The address of a pointer to an item identifier list structure that specifies the folder's location relative to the root of the namespace (the desktop). The <i>ppidl</i> parameter is set to <b>NULL</b> on failure. The calling application is responsible for freeing this resource by calling <see cref="ILFree" />.</param>
    <returns>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> in <i>nFolder</i> is valid but the folder does not exist.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> in <i>nFolder</i> is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFolderPath">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathA">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathW">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDir">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDirA">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDirW">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDir">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">
      <para>When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Return the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Return the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDirA">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">
      <para>When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Return the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Return the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathAndSubDirW">
    <summary>Gets the path of a folder and appends a user-provided subfolder path.</summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with <b>SHGetFolderPathAndSubDir</b> by combining the folder's <b>CSIDL</b> with CSIDL_FLAG_CREATE.</param>
    <param name="hToken">An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. For systems earlier than Windows 2000, set this value to <b>NULL</b>. For later systems, <i>hToken</i> is usually, but not always, set to <b>NULL</b>. You might need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <a href="https://docs.microsoft.com//windows/desktop/shell/manage">My Documents</a>.</param>
    <param name="dwFlags">
      <para>Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value may be moved or renamed by the user.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Return the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Return the folder's default path.</para>
    </param>
    <param name="pszSubDir">A pointer to the subpath to be appended to the folder's path. This is a <b>null</b>-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be <b>NULL</b> if no subpath is to be appended.</param>
    <param name="pszPath">
      <para>When this function returns, this value points to the directory path and appended subpath. This is a <b>null</b>-terminated string of length MAX_PATH. This string is empty when the function returns an error code.</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Return the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Return the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPath">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Retrieve the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Retrieve the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathA">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Retrieve the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Retrieve the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFolderPathW">
    <summary>
      <para>Deprecated. Gets the path of a folder identified by a <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value.</para>
      <div>
        <b>Note</b>  As of Windows Vista, this function is merely a wrapper for <see cref="SHGetKnownFolderPath" />. The CSIDL value is translated to its associated <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> and then <b>SHGetKnownFolderPath</b> is called. New applications should use the known folder system rather than the older CSIDL system, which is supported only for backward compatibility.</div>
    </summary>
    <param name="hwnd">Reserved.</param>
    <param name="csidl">A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's <b>CSIDL</b> with <b>CSIDL_FLAG_CREATE</b>.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user.</para>
      <para>
        <b>Microsoft Windows 2000 and earlier:</b> Always set this parameter to <b>NULL</b>.</para>
      <para>
        <b>Windows XP and later:</b> This parameter is usually set to <b>NULL</b>, but you might need to assign a non-<b>NULL</b> value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling process is responsible for correct impersonation when <i>hToken</i> is non-<b>NULL</b>. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This enables clients of <b>SHGetFolderPath</b> to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account.</para>
    </param>
    <param name="dwFlags">
      <para>Flags that specify the path to be returned. This value is used in cases where the folder associated with a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> (or <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a>) can be moved, renamed, redirected, or roamed across languages by a user or administrator.</para>
      <para>The known folder system that underlies <b>SHGetFolderPath</b> allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling <see cref="IKnownFolderManager.Redirect" />, which sets the "current" value of the folder associated with the SHGFP_TYPE_CURRENT flag.</para>
      <para>The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a "restore defaults" feature for a known folder.</para>
      <para>For example, the default value (SHGFP_TYPE_DEFAULT) for <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">FOLDERID_Music</a> (<a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_MYMUSIC</a>) is "C:\Users\<b>user name</b>\Music". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be "D:\Music". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.</para>
      <h4>SHGFP_TYPE_CURRENT</h4>
      <para>Retrieve the folder's current path.</para>
      <h4>SHGFP_TYPE_DEFAULT</h4>
      <para>Retrieve the folder's default path.</para>
    </param>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</para>
      <h5>- dwFlags.SHGFP_TYPE_CURRENT</h5>
      <para>Retrieve the folder's current path.</para>
      <h5>- dwFlags.SHGFP_TYPE_DEFAULT</h5>
      <para>Retrieve the folder's default path.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndex">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndexA">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndexW">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndex">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h5>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_LINK (0x0FFFFFFE)</h5>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SHARE (0x0FFFFFFF)</h5>
      <para>The overlay icon that indicates a shared folder.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h5>
      <para>The overlay icon that indicates a slow file.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndexA">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h5>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_LINK (0x0FFFFFFE)</h5>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SHARE (0x0FFFFFFF)</h5>
      <para>The overlay icon that indicates a shared folder.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h5>
      <para>The overlay icon that indicates a slow file.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetIconOverlayIndexW">
    <summary>Returns the index of the overlay icon in the system image list.</summary>
    <param name="pszIconPath">A pointer to a null-terminated string of maximum length <b>MAX_PATH</b> that contains the fully qualified path of the file that contains the icon.</param>
    <param name="iIconIndex">
      <para>The icon's index in the file pointed to by <i>pszIconPath</i>. To request a standard overlay icon, set <i>pszIconPath</i> to <b>NULL</b>, and <i>iIconIndex</i> to one of the following:</para>
      <h4>IDO_SHGIOI_SHARE (0x0FFFFFFF)</h4>
      <para>The overlay icon that indicates a shared folder.</para>
      <h4>IDO_SHGIOI_LINK (0x0FFFFFFE)</h4>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h4>IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h4>
      <para>The overlay icon that indicates a slow file.</para>
      <h4>IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h4>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_DEFAULT (0x0FFFFFFC)</h5>
      <para>
        <b>Windows 7 and later</b>. The overlay icon that indicates that the item is the default in a set. One example is the default printer.</para>
      <h5>- iIconIndex.IDO_SHGIOI_LINK (0x0FFFFFFE)</h5>
      <para>The overlay icon that indicates a linked folder or file.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SHARE (0x0FFFFFFF)</h5>
      <para>The overlay icon that indicates a shared folder.</para>
      <h5>- iIconIndex.IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)</h5>
      <para>The overlay icon that indicates a slow file.</para>
    </param>
    <returns>Returns the index of the overlay icon in the system image list if successful, or -1 otherwise.</returns>
  </member>
  <member name="Windows.SHGetInstanceExplorer">
    <summary>Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.</summary>
    <param name="ppunk">When this function returns successfully, contains the address of the host process' <see cref="IUnknown" /> interface pointer. This is a free-threaded interface used to prevent the host process from terminating. If the function call fails, this value is set to <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetKnownFolderIDList">
    <summary>Retrieves the path of a known folder as an <see cref="ITEMIDLIST" /> structure.</summary>
    <param name="rfid">A reference to the <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that identifies the folder. The folders associated with the known folder IDs might not exist on a particular system.</param>
    <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, it is one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHGetKnownFolderIDList</b> to find folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
    </param>
    <param name="ppidl">When this method returns, contains a pointer to the PIDL of the folder. This parameter is passed uninitialized. The caller is responsible for freeing the returned PIDL when it is no longer needed by calling <see cref="ILFree" />.</param>
    <returns>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Among other things, this value can indicate that the <i>rfid</i> parameter references a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that is not present on the system. Not all <b>KNOWNFOLDERID</b> values are present on all systems. Use <see cref="IKnownFolderManager.GetFolderIds" /> to retrieve the set of <b>KNOWNFOLDERID</b> values for the current system.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetKnownFolderItem">
    <summary>Retrieves an <see cref="IShellItem" /> object that represents a known folder.</summary>
    <param name="rfid">A reference to the <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a>, a <b>GUID</b> that identifies the folder that contains the item.</param>
    <param name="flags">Flags that specify special options used in the retrieval of the known folder <see cref="IShellItem" />. This value can be <b>KF_FLAG_DEFAULT</b>; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-<b>null</b>. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <see cref="SHSetKnownFolderPath" /> to set folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
    </param>
    <param name="riid">A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2.</param>
    <param name="ppv">When this method returns, contains the interface pointer requested in <i>riid</i>.</param>
    <returns>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Among other things, this value can indicate that the <i>rfid</i> parameter references a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that is not present on the system. Not all <b>KNOWNFOLDERID</b> values are present on all systems. Use <see cref="IKnownFolderManager.GetFolderIds" /> to retrieve the set of <b>KNOWNFOLDERID</b> values for the current system.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetKnownFolderPath">
    <summary>Retrieves the full path of a known folder identified by the folder's <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a>.</summary>
    <param name="rfid">A reference to the <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that identifies the folder.</param>
    <param name="dwFlags">Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the <see cref="KNOWN_FOLDER_FLAG" /> values.</param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that represents a particular user. If this parameter is <b>NULL</b>, which is the most common usage, the function requests the known folder for the current user.</para>
      <para>Request a specific user's folder by passing the <i>hToken</i> of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_QUERY</a> and <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_IMPERSONATE</a> rights. In some cases, you also need to include <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-rights-for-access-token-objects">TOKEN_DUPLICATE</a>. In addition to passing the user's <i>hToken</i>, the registry hive of that specific user must be mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHGetKnownFolderPath</b> to find folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
    </param>
    <param name="ppszPath">When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling <see cref="CoTaskMemFree" />, whether <b>SHGetKnownFolderPath</b> succeeds or not. The returned path does not include a trailing backslash. For example, "C:\Users" is returned rather than "C:\Users\".</param>
    <returns>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Among other things, this value can indicate that the <i>rfid</i> parameter references a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> which does not have a path (such as a folder marked as <see cref="KF_CATEGORY_VIRTUAL" />).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Among other things, this value can indicate that the <i>rfid</i> parameter references a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that is not present on the system. Not all <b>KNOWNFOLDERID</b> values are present on all systems. Use <see cref="IKnownFolderManager.GetFolderIds" /> to retrieve the set of <b>KNOWNFOLDERID</b> values for the current system.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetPathFromIDList">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDListA">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDListW">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDListEx">
    <summary>Converts an item identifier list to a file system path. This function extends <see cref="SHGetPathFromIDList" /> by allowing you to set the initial size of the string buffer and declare the options below.</summary>
    <param name="pidl">A pointer to an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">
      <para>When this function is called it is passed a null-terminated, Unicode buffer to receive the file system path. This buffer is of size <i>cchPath</i>.</para>
      <para>When this function returns, contains the address of a null-terminated, Unicode buffer that contains the file system path. This buffer is of size <i>cchPath</i>.</para>
    </param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="uOpts">
      <para>These flags determine the type of path returned.</para>
      <h4>GPFIDL_DEFAULT (0x0000)</h4>
      <para>Win32 file names, servers, and root drives are included.</para>
      <h4>GPFIDL_ALTNAME (0x0001)</h4>
      <para>Uses short file names.</para>
      <h4>GPFIDL_UNCPRINTER (0x0002)</h4>
      <para>Include UNC printer names items.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDList">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDListA">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPathFromIDListW">
    <summary>Converts an item identifier list to a file system path.</summary>
    <param name="pidl">The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
    <param name="pszPath">The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetSettings">
    <summary>Retrieves the current Shell option settings.</summary>
    <param name="psfs">The address of a <see cref="SHELLFLAGSTATE" /> structure that receives the Shell option settings.</param>
    <param name="dwMask">
      <para>A set of flags that determine which members of <i>lpsfs</i> are being requested. This can be one or more of the following values.</para>
      <h4>SSF_DESKTOPHTML</h4>
      <para>The <b>fDesktopHTML</b> member is being requested.</para>
      <h4>SSF_DONTPRETTYPATH</h4>
      <para>The <b>fDontPrettyPath</b> member is being requested.</para>
      <h4>SSF_DOUBLECLICKINWEBVIEW</h4>
      <para>The <b>fDoubleClickInWebView</b> member is being requested.</para>
      <h4>SSF_HIDEICONS</h4>
      <para>The <b>fHideIcons</b> member is being requested.</para>
      <h4>SSF_MAPNETDRVBUTTON</h4>
      <para>The<b>fMapNetDrvBtn</b> member is being requested.</para>
      <h4>SSF_NOCONFIRMRECYCLE</h4>
      <para>The<b>fNoConfirmRecycle</b> member is being requested.</para>
      <h4>SSF_SHOWALLOBJECTS</h4>
      <para>The<b>fShowAllObjects</b> member is being requested.</para>
      <h4>SSF_SHOWATTRIBCOL</h4>
      <para>The<b>fShowAttribCol</b> member is being requested.</para>
      <para>
        <b>Windows Vista:</b> Not used.</para>
      <h4>SSF_SHOWCOMPCOLOR</h4>
      <para>The<b>fShowCompColor</b> member is being requested.</para>
      <h4>SSF_SHOWEXTENSIONS</h4>
      <para>The<b>fShowExtensions</b> member is being requested.</para>
      <h4>SSF_SHOWINFOTIP</h4>
      <para>The<b>fShowInfoTip</b> member is being requested.</para>
      <h4>SSF_SHOWSYSFILES</h4>
      <para>The<b>fShowSysFiles</b> member is being requested.</para>
      <h4>SSF_WIN95CLASSIC</h4>
      <para>The<b>fWin95Classic</b> member is being requested.</para>
    </param>
  </member>
  <member name="Windows.SHLoadInProc">
    <summary>
      <para>Creates an instance of the specified object class from within the context of the Shell's process.</para>
      <para>
        <b>Windows Vista</b> and later: This function has been disabled and returns E_NOTIMPL.</para>
    </summary>
    <param name="rclsid">The CLSID of the object class to be created.</param>
    <returns>Returns S_OK if successful, or an error value otherwise. In Windows Vista and later versions, always returns E_NOTIMPL.</returns>
  </member>
  <member name="Windows.SHOpenFolderAndSelectItems">
    <summary>Opens a Windows Explorer window with specified items in a particular folder selected.</summary>
    <param name="pidlFolder">A pointer to a fully qualified item ID list that specifies the folder.</param>
    <param name="cidl">A count of items in the selection array, <i>apidl</i>. If <i>cidl</i> is zero, then <i>pidlFolder</i> must point to a fully specified <see cref="ITEMIDLIST" /> describing a single item to select. This function opens the parent folder and selects that item.</param>
    <param name="apidl">A pointer to an array of PIDL structures, each of which is an item to select in the target folder referenced by <i>pidlFolder</i>.</param>
    <param name="dwFlags">
      <para>The optional flags. Under Windows XP this parameter is ignored. In Windows Vista, the following flags are defined.</para>
      <h4>OFASI_EDIT (0x0001)</h4>
      <para>Select an item and put its name in edit mode. This flag can only be used when a single item is being selected. For multiple item selections, it is ignored.</para>
      <h4>OFASI_OPENDESKTOP (0x0002)</h4>
      <para>Select the item or items on the desktop rather than in a Windows Explorer window. Note that if the desktop is obscured behind open windows, it will not be made visible.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHOpenWithDialog">
    <summary>Displays the <b>Open With</b> dialog box.</summary>
    <param name="hwndParent">The handle of the parent window. This value can be <b>NULL</b>.</param>
    <param name="poainfo">A pointer to an <see cref="OPENASINFO" /> structure, which specifies the contents of the resulting dialog.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHParseDisplayName">
    <summary>Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).</summary>
    <param name="pszName">A pointer to a zero-terminated wide string that contains the display name to parse.</param>
    <param name="pbc">A bind context that controls the parsing operation. This parameter is normally set to <b>NULL</b>.</param>
    <param name="ppidl">The address of a pointer to a variable of type <see cref="ITEMIDLIST" /> that receives the item identifier list for the object. If an error occurs, then this parameter is set to <b>NULL</b>.</param>
    <param name="sfgaoIn">A <b>ULONG</b> value that specifies the attributes to query. To query for one or more attributes, initialize this parameter with the flags that represent the attributes of interest. For a list of available SFGAO flags, see <a href="https://docs.microsoft.com//windows/win32/shell/sfgao">SFGAO</a>.</param>
    <param name="psfgaoOut">A pointer to a <b>ULONG</b>. On return, those attributes that are true for the object and were requested in <i>sfgaoIn</i> are set. An object's attribute flags can be zero or a combination of SFGAO flags. For a list of available SFGAO flags, see <a href="https://docs.microsoft.com//windows/win32/shell/sfgao">SFGAO</a>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWrite">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWriteA">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWriteW">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWrite">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_ASKDIRCREATE</h5>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DEFAULT</h5>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DIRCREATE</h5>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_IGNOREFILENAME</h5>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h5>- dwFlags.SHPPFW_MEDIACHECKONLY</h5>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_NONE</h5>
      <para>Do not create new directories.</para>
      <h5>- dwFlags.SHPPFW_NOWRITECHECK</h5>
      <para>Not currently implemented.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWriteA">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_ASKDIRCREATE</h5>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DEFAULT</h5>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DIRCREATE</h5>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_IGNOREFILENAME</h5>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h5>- dwFlags.SHPPFW_MEDIACHECKONLY</h5>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_NONE</h5>
      <para>Do not create new directories.</para>
      <h5>- dwFlags.SHPPFW_NOWRITECHECK</h5>
      <para>Not currently implemented.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHPathPrepareForWriteW">
    <summary>Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.</summary>
    <param name="hwnd">A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to <b>NULL</b>, user interface windows are not created.</param>
    <param name="punkEnableModless">A pointer to an <see cref="IUnknown" /> interface that specifies the <see cref="IOleInPlaceActiveObject" /> object that implements the <see cref="EnableModeless" /> method.</param>
    <param name="pszPath">A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path.</param>
    <param name="dwFlags">
      <para>Flags that determine behavior options. This parameter can be a combination of the following values.</para>
      <h4>SHPPFW_NONE</h4>
      <para>Do not create new directories.</para>
      <h4>SHPPFW_DEFAULT</h4>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_DIRCREATE</h4>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h4>SHPPFW_ASKDIRCREATE</h4>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h4>SHPPFW_IGNOREFILENAME</h4>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h4>SHPPFW_NOWRITECHECK</h4>
      <para>Not currently implemented.</para>
      <h4>SHPPFW_MEDIACHECKONLY</h4>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_ASKDIRCREATE</h5>
      <para>Prompt the user before creating directories. Do not pass with <b>SHPPFW_DIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DEFAULT</h5>
      <para>Default. Do not prompt the user if a directory needs to be created. This is identical to <b>SHPPFW_DIRCREATE</b>. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_DIRCREATE</h5>
      <para>Create directories without prompting the user. Do not pass with <b>SHPPFW_ASKDIRCREATE</b>.</para>
      <h5>- dwFlags.SHPPFW_IGNOREFILENAME</h5>
      <para>Last item in <i>pszPath</i> is a file name, so ignore. For example, if <i>pszPath</i>="C:\MyDir\MyFile.doc", only use "C:\MyDir". If <i>pszPath</i>="C:\MyFirDir\MySecDir", only use "C:\MyFirDir".</para>
      <h5>- dwFlags.SHPPFW_MEDIACHECKONLY</h5>
      <para>
        <b>Windows XP or later.</b> Suppresses the "not accessible" error message box, which displays when a failure other than a user cancellation occurs, and <i>hwnd</i> is not <b>NULL</b>.</para>
      <h5>- dwFlags.SHPPFW_NONE</h5>
      <para>Do not create new directories.</para>
      <h5>- dwFlags.SHPPFW_NOWRITECHECK</h5>
      <para>Not currently implemented.</para>
    </param>
    <returns>Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available.</returns>
  </member>
  <member name="Windows.SHSetFolderPath">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetFolderPathA">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetFolderPathW">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetFolderPath">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetFolderPathA">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetFolderPathW">
    <summary>Deprecated. Assigns a new path to a system folder identified by its CSIDL.</summary>
    <param name="csidl">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL</a> value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails.</para>
      <para>Add the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the <a href="https://docs.microsoft.com//windows/desktop/shell/csidl">CSIDL_FLAG_DONT_UNEXPAND</a> flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> that can be used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
    </param>
    <param name="dwFlags">Reserved. Must be set to 0.</param>
    <param name="pszPath">A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be <b>NULL</b>, and the string cannot be of zero length.</param>
    <returns>
      <para>Returns standard <b>HRESULT</b> codes, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The folder's path was successfully updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Several error conditions cause the return of this value, including the following:<list type="bullet"><item><description>The <i>csidl</i> value is not valid.</description></item><item><description>The <i>csidl</i> value does not refer to a virtual folder.</description></item><item><description>The <i>csidl</i> value does not refer to a system folder.</description></item><item><description>The <i>csidl</i> value refers to a folder that cannot be renamed or moved.</description></item><item><description>The <i>dwFlags</i> value is not 0 (zero).</description></item><item><description>The <i>pszPath</i> value is <b>NULL</b>.</description></item><item><description>The string pointed to by <i>pszPath</i> value is an empty string ("") of length zero.</description></item></list></description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetInstanceExplorer">
    <summary>Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.</summary>
    <param name="punk">A pointer to a free-threaded <see cref="IUnknown" />. Components can use this interface (through <see cref="SHGetInstanceExplorer" />) to prevent the host process from terminating. This value can be <b>NULL</b>, in which case the process reference is no longer made available to components.</param>
  </member>
  <member name="Windows.SHSetKnownFolderPath">
    <summary>Redirects a known folder to a new location.</summary>
    <param name="rfid">A <b>GUID</b> that identifies the known folder.</param>
    <param name="dwFlags">
      <para>Either 0 or the following value.</para>
      <h4>KF_FLAG_DONT_UNEXPAND</h4>
      <para>If this flag is set, portions of the path referenced by <i>pszPath</i> may be represented by environment strings such as <code>%USERPROFILE%</code>.</para>
    </param>
    <param name="hToken">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-tokens">access token</a> used to represent a particular user. This parameter is usually set to <b>NULL</b>, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to <i>hToken</i> for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is <b>Documents</b>.</para>
      <para>The calling application is responsible for correct impersonation when <i>hToken</i> is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</a> for further discussion of access control issues.</para>
      <para>Assigning the <i>hToken</i> parameter a value of -1 indicates the Default User. This allows clients of <b>SHSetKnownFolderPath</b> to set folder locations (such as the <b>Desktop</b> folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as <b>Documents</b> and <b>Desktop</b>. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges.</para>
    </param>
    <param name="pszPath">A pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length.</param>
    <returns>
      <para>Returns S_OK if successful, or an error value otherwise, including the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Among other things, this value can indicate that the <i>rfid</i> parameter references a <a href="https://docs.microsoft.com//windows/desktop/shell/knownfolderid">KNOWNFOLDERID</a> that is not present on the system. Not all <b>KNOWNFOLDERID</b> values are present on all systems. Use <see cref="IKnownFolderManager.GetFolderIds" /> to retrieve the set of <b>KNOWNFOLDERID</b> values for the current system.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHUpdateImage">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.SHUpdateImageA">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.SHUpdateImageW">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.SHUpdateImage">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.SHUpdateImageA">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.SHUpdateImageW">
    <summary>Notifies the Shell that an image in the system image list has changed.</summary>
    <param name="pszHashItem">A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the <i>szIconFile</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="iIndex">An integer that specifies the zero-based index of the icon in the file specified by <i>pszHashItem</i>. Use the value that is pointed to by the <i>piIndex</i> parameter of <see cref="IExtractIcon.GetIconLocation" />.</param>
    <param name="uFlags">An unsigned integer that specifies the flags that determine the icon attributes. Set <i>uFlags</i> to the value that is pointed to by the <i>pwFlags</i> parameter of <see cref="IExtractIcon.GetIconLocation" />. The flags that are relevant to <b>SHUpdateImage</b> are <b>GIL_NOTFILENAME</b> and <b>GIL_SIMULATEDOC</b>.</param>
    <param name="iImageIndex">An integer that specifies the index in the system image list of the icon that is being updated.</param>
  </member>
  <member name="Windows.StgMakeUniqueName">
    <summary>Creates a unique name for a stream or storage object from a template.</summary>
    <param name="pstgParent">A pointer to an <see cref="IStorage" /> object.</param>
    <param name="pszFileSpec">The format or template for the name of the stream or storage object.</param>
    <param name="grfMode">The access mode to use when opening the stream or storage object. For more information and descriptions of the possible values, see STGM Constants.</param>
    <param name="riid">A reference to the IID of the interface to retrieve through <i>ppv</i>, typically IID_IStorage or IID_IStream.</param>
    <param name="ppv">When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IStorage" /> or <see cref="IStream" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
</doc>