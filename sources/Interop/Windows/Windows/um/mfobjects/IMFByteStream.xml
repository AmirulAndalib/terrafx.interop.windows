<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMFByteStream.BeginRead">
    <summary>Begins an asynchronous read operation from the stream.</summary>
    <param name="pb">Pointer to a buffer that receives the data. The caller must allocate the buffer.</param>
    <param name="cb">Size of the buffer in bytes.</param>
    <param name="pCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="punkState">Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.BeginWrite">
    <summary>Begins an asynchronous write operation to the stream.</summary>
    <param name="pb">Pointer to a buffer containing the data to write.</param>
    <param name="cb">Size of the buffer in bytes.</param>
    <param name="pCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="punkState">Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.Close">
    <summary>Closes the stream and releases any resources associated with the stream, such as sockets or file handles. This method also cancels any pending asynchronous I/O requests.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.EndRead">
    <summary>Completes an asynchronous read operation.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</param>
    <param name="pcbRead">Receives the number of bytes that were read.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.EndWrite">
    <summary>Completes an asynchronous write operation.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</param>
    <param name="pcbWritten">Receives the number of bytes that were written.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.Flush">
    <summary>Clears any internal buffers used by the stream. If you are writing to the stream, the buffered data is written to the underlying file or device.</summary>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.GetCapabilities">
    <summary>Retrieves the characteristics of the byte stream.</summary>
    <param name="pdwCapabilities">
      <para>Receives a bitwise <b>OR</b> of zero or more flags. The following flags are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_READABLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream can be read.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_WRITABLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream can be written to.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_SEEKABLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream can be seeked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_REMOTE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream is from a remote source, such as a network.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_DIRECTORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream represents a file directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_HAS_SLOW_SEEK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Seeking within this stream might be slow. For example, the byte stream might download from a network.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_IS_PARTIALLY_DOWNLOADED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream is currently downloading data to a local cache. Read operations on the byte stream might take longer until the data is completely downloaded.<para>This flag is cleared after all of the data has been downloaded.</para><para>If the <b>MFBYTESTREAM_HAS_SLOW_SEEK</b> flag is also set, it means the byte stream must download the entire file sequentially. Otherwise, the byte stream can respond to seek requests by restarting the download from a new point in the stream.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_SHARE_WRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>Another thread or process can open this byte stream for writing. If this flag is present, the length of the byte stream could change while it is being read. <para>This flag can affect the behavior of byte-stream handlers. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-bytestreamhandler-accepts-share-write">MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE</a>.</para><div><b>Note</b>  Requires Windows 7 or later.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_DOES_NOT_USE_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>The byte stream is not currently using the network to receive the content. Networking hardware may enter a power saving state when this bit is set.<div><b>Note</b>  Requires Windows 8 or later.</div></description>
        </listheader>
      </list>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.GetCurrentPosition">
    <summary>Retrieves the current read or write position in the stream.</summary>
    <param name="pqwPosition">Receives the current position, in bytes.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.GetLength">
    <summary>Retrieves the length of the stream.</summary>
    <param name="pqwLength">Receives the length of the stream, in bytes. If the length is unknown, this value is -1.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.IsEndOfStream">
    <summary>Queries whether the current position has reached the end of the stream.</summary>
    <param name="pfEndOfStream">Receives the value <b>TRUE</b> if the end of the stream has been reached, or <b>FALSE</b> otherwise.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.Read">
    <summary>Reads data from the stream.</summary>
    <param name="pb">Pointer to a buffer that receives the data. The caller must allocate the buffer.</param>
    <param name="cb">Size of the buffer in bytes.</param>
    <param name="pcbRead">Receives the number of bytes that are copied into the buffer. This parameter cannot be <b>NULL</b>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.Seek">
    <summary>Moves the current position in the stream by a specified offset.</summary>
    <param name="SeekOrigin">Specifies the origin of the seek as a member of the <see cref="MFBYTESTREAM_SEEK_ORIGIN" /> enumeration. The offset is calculated relative to this position.</param>
    <param name="llSeekOffset">Specifies the new position, as a byte offset from the seek origin.</param>
    <param name="dwSeekFlags">
      <para>Specifies zero or more flags. The following flags are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All pending I/O requests are canceled after the seek request completes successfully.</description>
        </listheader>
      </list>
    </param>
    <param name="pqwCurrentPosition">Receives the new position after the seek.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.SetCurrentPosition">
    <summary>Sets the current read or write position.</summary>
    <param name="qwPosition">New position in the stream, as a byte offset from the start of the stream.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid argument.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMFByteStream.SetLength">
    <summary>Sets the length of the stream.</summary>
    <param name="qwLength">Length of the stream in bytes.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream.Write">
    <summary>Writes data to the stream.</summary>
    <param name="pb">Pointer to a buffer that contains the data to write.</param>
    <param name="cb">Size of the buffer in bytes.</param>
    <param name="pcbWritten">Receives the number of bytes that are written.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IMFByteStream">
    <summary>Represents a byte stream from some data source, which might be a local file, a network file, or some other source. The <b>IMFByteStream</b> interface supports the typical stream operations, such as reading, writing, and seeking.</summary>
  </member>
</doc>