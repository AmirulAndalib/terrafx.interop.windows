<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IWICComponentFactory.CreateEncoderPropertyBag">
    <summary>Creates an encoder property bag.</summary>
    <param name="ppropOptions">Pointer to an array of <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768188(v=vs.85)">PROPBAG2</a> options used to create the encoder property bag.</param>
    <param name="cCount">The number of <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768188(v=vs.85)">PROPBAG2</a> structures in the <i>ppropOptions</i> array.</param>
    <param name="ppIPropertyBag">A pointer that receives a pointer to an encoder <a href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa768192(v=vs.85)">IPropertyBag2</a>.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateMetadataReader">
    <summary>Creates an <see cref="IWICMetadataReader" /> based on the given parameters.</summary>
    <param name="guidMetadataFormat">The GUID of the desired metadata format.</param>
    <param name="pguidVendor">Pointer to the GUID of the desired metadata reader vendor.</param>
    <param name="dwOptions">The <see cref="WICPersistOptions" /> and <see cref="WICMetadataCreationOptions" /> options to use when creating the metadata reader.</param>
    <param name="pIStream">Pointer to a stream in which to initialize the reader with. If <b>NULL</b>, the metadata reader will be empty.</param>
    <param name="ppIReader">A pointer that receives a pointer to the new metadata reader.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateMetadataReaderFromContainer">
    <summary>Creates an <see cref="IWICMetadataReader" /> based on the given parameters.</summary>
    <param name="guidContainerFormat">The container format GUID to base the reader on.</param>
    <param name="pguidVendor">Pointer to the vendor GUID of the metadata reader.</param>
    <param name="dwOptions">The <see cref="WICPersistOptions" /> and <see cref="WICMetadataCreationOptions" /> options to use when creating the metadata reader.</param>
    <param name="pIStream">Pointer to a stream in which to initialize the reader with. If <b>NULL</b>, the metadata reader will be empty.</param>
    <param name="ppIReader">A pointer that receives a pointer to the new metadata reader</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateMetadataWriter">
    <summary>Creates an <see cref="IWICMetadataWriter" /> based on the given parameters.</summary>
    <param name="guidMetadataFormat">The GUID of the desired metadata format.</param>
    <param name="pguidVendor">Pointer to the GUID of the desired metadata reader vendor.</param>
    <param name="dwMetadataOptions">The <see cref="WICPersistOptions" /> and <see cref="WICMetadataCreationOptions" /> options to use when creating the metadata reader.</param>
    <param name="ppIWriter">A pointer that receives a pointer to the new metadata writer.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateMetadataWriterFromReader">
    <summary>Creates an <see cref="IWICMetadataWriter" /> from the given <see cref="IWICMetadataReader" />.</summary>
    <param name="pIReader">Pointer to the metadata reader to base the metadata writer on.</param>
    <param name="pguidVendor">Pointer to the GUID of the desired metadata reader vendor.</param>
    <param name="ppIWriter">A pointer that receives a pointer to the new metadata writer.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateQueryReaderFromBlockReader">
    <summary>Creates a <see cref="IWICMetadataQueryReader" /> from the given <see cref="IWICMetadataBlockReader" />.</summary>
    <param name="pIBlockReader">Pointer to the block reader to base the query reader on.</param>
    <param name="ppIQueryReader">A pointer that receives a pointer to the new metadata query reader.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory.CreateQueryWriterFromBlockWriter">
    <summary>Creates a <see cref="IWICMetadataQueryWriter" /> from the given <see cref="IWICMetadataBlockWriter" />.</summary>
    <param name="pIBlockWriter">Pointer to the metadata block reader to base the metadata query writer on.</param>
    <param name="ppIQueryWriter">A pointer that receives a pointer to the new metadata query writer.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IWICComponentFactory">
    <summary>Exposes methods that create components used by component developers. This includes metadata readers, writers and other services for use by codec and metadata handler developers.</summary>
  </member>
</doc>