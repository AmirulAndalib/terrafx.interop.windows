<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CommitComplete">
    <summary>Indicates that a resource manager (RM) has finished committing a transaction that was requested by the transaction manager (TM).</summary>
    <param name="EnlistmentHandle">A handle to the enlistment for which the commit operation is completed.</param>
    <param name="TmVirtualClock">
      <para>The latest virtual clock value received for this transaction. If you specify <b>NULL</b>, the virtual clock value is not changed. See <see cref="LARGE_INTEGER" />.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CommitEnlistment">
    <summary>Commits the transaction associated with this enlistment handle. This function is used by communication resource managers (sometimes called superior transaction managers).</summary>
    <param name="EnlistmentHandle">A handle to the enlistment to commit.</param>
    <param name="TmVirtualClock">
      <para>A pointer to the latest virtual clock value received for this enlistment. If you specify<b>NULL</b>, the virtual clock value is not changed.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned by a subordinate TM.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CommitTransaction">
    <summary>Requests that the specified transaction be committed.</summary>
    <param name="TransactionHandle">
      <para>A handle to the transaction to be committed.</para>
      <para>This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Ktm/ktm-security-and-access-rights">KTM Security and Access Rights</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CommitTransactionAsync">
    <summary>Requests that the specified transaction be committed.</summary>
    <param name="TransactionHandle">
      <para>A handle to the transaction to be committed.</para>
      <para>This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Ktm/ktm-security-and-access-rights">KTM Security and Access Rights</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. Success means that the function completed synchronously, and the calling application does not need to wait for pending results.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CreateEnlistment">
    <summary>Creates an enlistment, sets its initial state, and opens a handle to the enlistment with the specified access.</summary>
    <param name="lpEnlistmentAttributes">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>structure that contains the security attributes for the enlistment manager. Specify<b>NULL</b> to obtain the default attributes.</param>
    <param name="ResourceManagerHandle">A handle to the resource manager (RM) to enlist.</param>
    <param name="TransactionHandle">A handle to the transaction in which the RM is enlisting.</param>
    <param name="NotificationMask">The notifications this RM is requesting for the <i>TransactionHandle</i> parameter. For a list of valid values, see <a href="https://docs.microsoft.com//windows/desktop/Ktm/notification-mask">NOTIFICATION_MASK</a>.</param>
    <param name="CreateOptions">
      <para>Any optional enlistment instructions.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENLISTMENT_SUPERIOR</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Enlist as a superior transaction manager.</description>
        </listheader>
      </list>
    </param>
    <param name="EnlistmentKey">A pointer to a user-defined structure used by the RM that is returned when a notification is sent in the<see cref="TRANSACTION_NOTIFICATION" /> structure. This is typically used to associate a private structure with this specific transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enlistment.</para>
      <para>If the function fails, the return value is <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CreateResourceManager">
    <summary>Creates a new resource manager (RM) object, and associates the RM with a transaction manager (TM).</summary>
    <param name="lpResourceManagerAttributes">A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains the security attributes for the resource manager. Specify <b>NULL</b> to obtain the default attributes.</param>
    <param name="ResourceManagerId">A pointer the resource manager GUID. This parameter is required and must not be <b>NULL</b>.</param>
    <param name="CreateOptions">
      <para>Any optional attributes for the new RM.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RESOURCE_MANAGER_VOLATILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the RM is volatile, and does not perform recovery.</description>
        </listheader>
      </list>
    </param>
    <param name="TmHandle">A handle to the TM that will manage the transactions for this RM.</param>
    <param name="Description">A description for this RM.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the RM.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CreateTransaction">
    <summary>Creates a new transaction object.</summary>
    <param name="lpTransactionAttributes">
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>structure that determines whether the returned handle can be inherited by child processes. If this parameter is<b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">security descriptor</a> for the new event. If <i>lpTransactionAttributes</i> is <b>NULL</b>, the object gets a default security descriptor. The access control lists (ACL) in the default security descriptor for a transaction come from the primary or impersonation token of the creator.</para>
    </param>
    <param name="UOW">Reserved. Must be zero (0).</param>
    <param name="CreateOptions">
      <para>Any optional transaction instructions.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRANSACTION_DO_NOT_PROMOTE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The transaction cannot be distributed.</description>
        </listheader>
      </list>
    </param>
    <param name="IsolationLevel">Reserved; specify zero (0).</param>
    <param name="IsolationFlags">Reserved; specify zero (0).</param>
    <param name="Timeout">
      <para>The time-out interval, in milliseconds. If a nonzero value is specified, the transaction will be aborted when the interval elapses if it has not already reached the prepared state.</para>
      <para>Specify zero (0) or INFINITE to provide an infinite time-out.</para>
    </param>
    <param name="Description">A user-readable description of the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the transaction.</para>
      <para>If the function fails, the return value is <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.CreateTransactionManager">
    <summary>Creates a new transaction manager (TM) object and returns a handle with the specified access.</summary>
    <param name="lpTransactionAttributes">The transaction <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> (ACLs) for the TM object.</param>
    <param name="LogFileName">The log file stream name. If the stream does not exist in the log, it is created. To create a volatile TM, this parameter must be <b>NULL</b> and <i>CreateOptions</i> must specify TRANSACTION_MANAGER_VOLATILE, this transaction manager is considered volatile.</param>
    <param name="CreateOptions">
      <para>Any optional attributes for the new TM.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRANSACTION_MANAGER_VOLATILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the TM is volatile, and does not perform recovery.</description>
        </listheader>
      </list>
    </param>
    <param name="CommitStrength">Reserved; specify zero.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the transaction manager.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetCurrentClockTransactionManager">
    <summary>Obtains a virtual clock value from a transaction manager.</summary>
    <param name="TransactionManagerHandle">A handle to the transaction manager to obtain a virtual clock value for.</param>
    <param name="TmVirtualClock">The latest virtual clock value for the transaction manager. See <see cref="LARGE_INTEGER" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetEnlistmentId">
    <summary>Obtains the identifier (ID) for the specified enlistment.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="EnlistmentId">A pointer to a variables that receives the ID of the enlistment.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetEnlistmentRecoveryInformation">
    <summary>Retrieves an opaque structure of recovery data from KTM. Recovery information is stored in a log on behalf of a resource manager (RM) by calling the <see cref="SetEnlistmentRecoveryInformation" /> function. After a failure, the RM can use the <b>GetEnlistmentRecoveryInformation</b> function to retrieve the information.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="BufferSize">The size of the <i>Buffer</i> parameter, in bytes.</param>
    <param name="Buffer">A pointer to a buffer that receives the enlistment recovery information.</param>
    <param name="BufferUsed">A pointer to a variable that receives the actual number of bytes returned in the <i>Buffer</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetNotificationResourceManager">
    <summary>Requests and receives a notification for a resource manager (RM). This function is used by the RM register to receive notifications when a transaction changes state.</summary>
    <param name="ResourceManagerHandle">A handle to the resource manager.</param>
    <param name="TransactionNotification">A pointer to a <see cref="TRANSACTION_NOTIFICATION" />structure that receives the first available notification.</param>
    <param name="NotificationLength">The size of the <i>TransactionNotification</i> buffer, in bytes.</param>
    <param name="dwMilliseconds">The time, in milliseconds, for which the calling application is blocking while waiting for the notification to become available. If no notifications are available when the timeout expires,<b>ERROR_TIMEOUT</b> is returned.</param>
    <param name="ReturnLength">A pointer to a variable that receives the actual size of the notification received by the<i>TransactionNotification</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetNotificationResourceManagerAsync">
    <summary>Requests and receives asynchronous notification for a resource manager (RM). This function is used by the RM register to receive notifications when a transaction changes state.</summary>
    <param name="ResourceManagerHandle">A handle to the resource manager.</param>
    <param name="TransactionNotification">A pointer to a<see cref="TRANSACTION_NOTIFICATION" /> structure that receives the first available notification.</param>
    <param name="TransactionNotificationLength">The size of the <i>TransactionNotification</i> buffer, in bytes.</param>
    <param name="ReturnLength">A pointer to a variable that receives the actual size of the notification received by the<i>TransactionNotification</i> parameter.</param>
    <param name="lpOverlapped">A pointer to an <see cref="OVERLAPPED" /> structure that is required for asynchronous operation.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetTransactionId">
    <summary>Obtains the identifier (ID) for the specified transaction.</summary>
    <param name="TransactionHandle">A handle to the transaction.</param>
    <param name="TransactionId">A pointer to a variable that receives the ID of the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetTransactionInformation">
    <summary>Returns the requested information about the specified transaction.</summary>
    <param name="TransactionHandle">A handle to the transaction. The handle must have the TRANSACTION_QUERY_INFORMATION permission to retrieve the information.</param>
    <param name="Outcome">A pointer to a buffer that receives the current outcome of the transaction. If the call to the <b>GetTransactionInformation</b> function is successful, this value will be one of the <see cref="TRANSACTION_OUTCOME" /> enumeration values.</param>
    <param name="IsolationLevel">Reserved.</param>
    <param name="IsolationFlags">Reserved.</param>
    <param name="Timeout">A pointer to a variable that receives the timeout value, in milliseconds, for this transaction.</param>
    <param name="BufferLength">The size of the <i>Description</i> parameter, in bytes. The buffer length value cannot be longer than the value of MAX_TRANSACTION_DESCRIPTION_LENGTH.</param>
    <param name="Description">A pointer to a buffer that receives the user-defined description of the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.GetTransactionManagerId">
    <summary>Obtains an identifier for the specified transaction manager.</summary>
    <param name="TransactionManagerHandle">A handle to the transaction manager.</param>
    <param name="TransactionManagerId">A pointer to a variable that receives the identifier for the transaction manager.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.OpenEnlistment">
    <summary>Opens an existing enlistment object, and returns a handle to the enlistment.</summary>
    <param name="dwDesiredAccess">The access requested for this enlistment. See <a href="https://docs.microsoft.com//windows/desktop/Ktm/enlistment-access-masks">Enlistment Access Masks</a> for a list of valid values.</param>
    <param name="ResourceManagerHandle">A handle to the resource manager.</param>
    <param name="EnlistmentId">The enlistment identifier.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the enlistment.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.OpenResourceManager">
    <summary>Opens an existing resource manager (RM).</summary>
    <param name="dwDesiredAccess">The access requested for the RM. See <a href="https://docs.microsoft.com//windows/desktop/Ktm/resource-manager-access-masks">Resource Manager Access Masks</a> for a list of valid values.</param>
    <param name="TmHandle">A handle to the transaction manager.</param>
    <param name="ResourceManagerId">The identifier for this resource manager.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the resource manager.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.OpenTransaction">
    <summary>Opens an existing transaction.</summary>
    <param name="dwDesiredAccess">The access to the transaction object. You must have read and write access to work with a transaction. See <a href="https://docs.microsoft.com//windows/desktop/Ktm/transaction-access-masks">Transaction Access Masks</a> for a list of valid values.</param>
    <param name="TransactionId">The GUID that identifies the transaction to be opened. This is commonly referred to as a unit of work for the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the transaction.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.OpenTransactionManager">
    <summary>Opens an existing transaction manager.</summary>
    <param name="LogFileName">The name of the log stream. This stream must exist within a CLFS log file.</param>
    <param name="DesiredAccess">The access requested. See <a href="https://docs.microsoft.com//windows/desktop/Ktm/transaction-manager-access-masks">Transaction Manager Access Masks</a> for a list of valid values.</param>
    <param name="OpenOptions">Reserved; specify zero.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the transaction manager.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.OpenTransactionManagerById">
    <summary>Opens an existing transaction manager.</summary>
    <param name="TransactionManagerId">The identifier of the transaction to open.</param>
    <param name="DesiredAccess">The access requested. See <a href="https://docs.microsoft.com//windows/desktop/Ktm/transaction-manager-access-masks">Transaction Manager Access Masks</a> for a list of valid values.</param>
    <param name="OpenOptions">Reserved; specify zero.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the transaction manager.</para>
      <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.PrepareComplete">
    <summary>Indicates that the resource manager (RM) has completed all processing necessary to guarantee that a commit or abort operation will succeed for the specified transaction.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="TmVirtualClock">
      <para>The latest virtual clock value received for this prepare complete notification. If you specify <b>NULL</b>, the virtual clock value is not changed. See <see cref="LARGE_INTEGER" />.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.PrepareEnlistment">
    <summary>Prepares the transaction associated with this enlistment handle. This function is used by communication resource managers (sometimes called superior transaction managers).</summary>
    <param name="EnlistmentHandle">A handle to the enlistment for which the prepare operation has completed.</param>
    <param name="TmVirtualClock">A pointer to the latest virtual clock value received for this transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.PrePrepareComplete">
    <summary>Signals that this resource manager has completed its prepare work, so that other resource managers can now begin their prepare operations.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="TmVirtualClock">
      <para>The latest virtual clock value received for this prepare operation. If you specify <b>NULL</b>, the virtual clock value is not changed. See <see cref="LARGE_INTEGER" />.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.PrePrepareEnlistment">
    <summary>Pre-prepares the transaction associated with this enlistment handle. This function is used by communication resource managers (sometimes called superior transaction managers).</summary>
    <param name="EnlistmentHandle">A handle to the enlistment for which the prepare operation has completed.</param>
    <param name="TmVirtualClock">A pointer to the latest virtual clock value received for this transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.ReadOnlyEnlistment">
    <summary>Requests that the specified enlistment be converted to a read-only enlistment. A read-only enlistment cannot participate in the outcome of the transaction and is not durably recorded for recovery.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="TmVirtualClock">
      <para>The latest virtual clock value received for this enlistment. If you specify <b>NULL</b>, the virtual clock value is not changed. See <see cref="LARGE_INTEGER" />.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RecoverEnlistment">
    <summary>Recovers an enlistment's state.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="EnlistmentKey">The key to the enlistment to be recovered.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RecoverResourceManager">
    <summary>Recovers a resource manager's state from its log file.</summary>
    <param name="ResourceManagerHandle">A handle to the resource manager.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RecoverTransactionManager">
    <summary>Recovers a transaction manager's state from its log file.</summary>
    <param name="TransactionManagerHandle">A handle to the transaction manager.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RenameTransactionManager">
    <summary>Renames a transaction manager (TM) object. This function can only be used on named TM handles. A new <b>GUID</b> for the TM is selected and can be retrieved using the<see cref="GetTransactionManagerID" /> function.</summary>
    <param name="LogFileName">The name of the log stream. This stream must exist within a CLFS log file.</param>
    <param name="ExistingTransactionManagerGuid">A value that specifies the current name of the TM.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RollbackComplete">
    <summary>Indicates that the resource manager (RM) has successfully completed rolling back a transaction.</summary>
    <param name="EnlistmentHandle">A handle the enlistment.</param>
    <param name="TmVirtualClock">The latest virtual clock value received for this transaction. See <see cref="LARGE_INTEGER" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RollbackEnlistment">
    <summary>Rolls back the specified transaction that is associated with an enlistment. This function cannot be called for read-only enlistments.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="TmVirtualClock">The latest virtual clock value received for this enlistment. See <see cref="LARGE_INTEGER" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RollbackTransaction">
    <summary>
      <code> Requests that the specified transaction be rolled back. This function is synchronous.</code>
    </summary>
    <param name="TransactionHandle">A handle to the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function. The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RollbackTransactionAsync">
    <summary>Requests that the specified transaction be rolled back. This function returns asynchronously.</summary>
    <param name="TransactionHandle">A handle to the transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero, and <see cref="GetLastError" /> returns ERROR_IO_PENDING.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function. The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.RollforwardTransactionManager">
    <summary>Recovers information only to the specified virtual clock value.</summary>
    <param name="TransactionManagerHandle">A handle to the transaction manager.</param>
    <param name="TmVirtualClock">A pointer to the latest virtual clock value received for this transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the<see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.SetEnlistmentRecoveryInformation">
    <summary>Sets an opaque, user-defined structure of recovery data from KTM. Recovery information is stored in a log on behalf of a resource manager (RM) by calling <b>SetEnlistmentRecoveryInformation</b>. After a failure, the RM can use <see cref="GetEnlistmentRecoveryInformation" /> to retrieve the information.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="BufferSize">The size of <i>Buffer</i>, in bytes.</param>
    <param name="Buffer">The recovery information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.SetResourceManagerCompletionPort">
    <summary>Associates the specified I/O completion port with the specified resource manager (RM). This port receives all notifications for the RM.</summary>
    <param name="ResourceManagerHandle">A handle to the resource manager.</param>
    <param name="IoCompletionPortHandle">A handle to the I/O completion port.</param>
    <param name="CompletionKey">The user-defined identifier. Typically, it is used to associate the receive notification with a specific resource manager.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.SetTransactionInformation">
    <summary>Sets the transaction information for the specified transaction.</summary>
    <param name="TransactionHandle">A handle to the transaction. The handle must have the TRANSACTION_SET_INFORMATION permission to set the transaction information.</param>
    <param name="IsolationLevel">Reserved; specify zero.</param>
    <param name="IsolationFlags">Reserved.</param>
    <param name="Timeout">The timeout value, in milliseconds, for this transaction.</param>
    <param name="Description">The user-defined description of this transaction.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is 0 (zero). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
  <member name="Windows.SinglePhaseReject">
    <summary>Indicates that the resource manager (RM) is refusing a single-phase request. When a transaction manager (TM) receives this call, it initiates a two-phase commit and sends a prepare request to all enlisted RMs.</summary>
    <param name="EnlistmentHandle">A handle to the enlistment.</param>
    <param name="TmVirtualClock">
      <para>The latest virtual clock value received from the single-phase request notification. If you specify <b>NULL</b>, the virtual clock value is not changed. See <see cref="LARGE_INTEGER" />.</para>
      <para>To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero (0). To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The following list identifies the possible error codes:</para>
    </returns>
  </member>
</doc>