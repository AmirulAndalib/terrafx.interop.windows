<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.PathAllocCanonicalize">
    <summary>
      <para>Converts a path string into a canonical form.</para>
      <para>This function differs from <see cref="PathCchCanonicalize" /> and <see cref="PathCchCanonicalizeEx" /> in that it returns the result on the heap. This means that the caller does not have to declare the size of the returned string and reduces stack use.</para>
      <para>This function differs from <see cref="PathCanonicalize" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b> This function, <see cref="PathCchCanonicalize" />, or <see cref="PathCchCanonicalizeEx" />, should be used in place of <see cref="PathCanonicalize" />.</div>
    </summary>
    <param name="pszPathIn">A pointer to a buffer that contains the original string. This value cannot be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_NONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000</term>
              </listheader>
            </list>
          </description>
          <description>Do not allow for the construction of \\?\ paths (ie, long paths) longer than <b>MAX_PATH</b> .</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ALLOW_LONG_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Allow the building of \\?\ paths longer than <b>MAX_PATH</b> .</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path enabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path disabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Disables the normalization of path segments that includes removing trailing dots and spaces. This enables access to paths that win32 path normalization will block.<para><b>Note</b>  This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Converts the input path into the extended length DOS device path form (with the \\?\ prefix) if not already in that form. This enables access to paths that are otherwise not addressable due to Win32 normalization rules (that can strip trailing dots and spaces) and path length limitations. This option implies the same behavior of <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_TRAILING_SLASH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>When combining or normalizing a path, ensure there is a trailing backslash.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
      </list>
    </param>
    <param name="ppszPathOut">The address of a pointer to a buffer that, when this function returns successfully, receives the canonicalized path string. It is the responsibility of the caller to free this resource, when it is no longer needed, by calling the <see cref="LocalFree" /> function. This value cannot be <b>NULL</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PathCchAddBackslash">
    <summary>
      <para>Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.</para>
      <para>This function differs from <see cref="PathCchAddBackslashEx" /> in that you are restricted to a final path of length MAX_PATH.</para>
      <para>This function differs from <see cref="PathAddBackslash" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, or <see cref="PathCchAddBackslashEx" />, should be used in place of <see cref="PathAddBackslash" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be <b>NULL</b>.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if the path string already ends in a backslash, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchAddBackslashEx">
    <summary>
      <para>Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.</para>
      <para>This function differs from <see cref="PathCchAddBackslash" /> in that it can return a pointer to the new end of the string and report the number of unused characters remaining in the buffer.</para>
      <para>This function differs from <see cref="PathAddBackslash" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, or <b><see cref="PathCchAddBackslash" /></b>, should be used in place of <see cref="PathAddBackslash" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be <b>NULL</b>.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="ppszEnd">A value that, when this function returns successfully, receives the address of a pointer to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">A pointer to a value that, when this function returns successfully, is set to the number of unused characters in the destination buffer, including the terminating null character.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if the path string already ends in a backslash, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchAddExtension">
    <summary>
      <para>Adds a file name extension to a path string.</para>
      <para>This function differs from <see cref="PathAddExtension" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function should be used in place of <see cref="PathAddExtension" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">
      <para>A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended extension. This value should not be <b>NULL</b>.</para>
      <div>
        <b>Note</b>  If the original string already has a file name extension present, no new extension will be added and the original string will be unchanged.</div>
    </param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="pszExt">A pointer to the file name extension string. This string can be given either with or without a preceding period (".ext" or "ext").</param>
    <returns>
      <para>This function returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded. Note that this also includes the case of an empty extension, such as a period with no characters following it. In that case, the original string is returned unaltered.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value can be caused by several things, such as the <i>pszPath</i> param being set to <b>NULL</b>, the <i>cchPath</i> being set to 0 or a value greater than <b>PATHCCH_MAX_CCH</b>, or the extension string containing illegal characters or otherwise not being a valid extension.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The original string already has an extension.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is too small to hold the returned string.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchAppend">
    <summary>
      <para>Appends one path to the end of another.</para>
      <para>This function differs from <see cref="PathCchAppendEx" /> in that you are restricted to a final path of length MAX_PATH.</para>
      <para>This function differs from <see cref="PathAppend" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, or <see cref="PathCchAppendEx" />, should be used in place of <see cref="PathAppend" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="pszMore">A pointer to the path to append to the end of the path pointed to by <i>pszPath</i>. UNC paths and paths beginning with the "\?" sequence are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by <i>pszPath</i> instead of being appended to it.</param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszPath</i> or <i>pszMore</i> is <b>NULL</b>, <i>cchPath</i> is 0, or <i>cchPath</i> is greater than <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The resulting string would exceed <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate a buffer of the necessary size.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchAppendEx">
    <summary>
      <para>Appends one path to the end of another.</para>
      <para>This function differs from <see cref="PathCchAppend" /> in that it allows for a longer final path to be constructed.</para>
      <para>This function differs from <see cref="PathAppend" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b> This function, or <see cref="PathCchAppend" />, should be used in place of <see cref="PathAppend" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="pszMore">A pointer the path to append to the end of the path pointed to by <i>pszPath</i>. UNC paths and paths that begin with the sequence \?\ are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by <i>pszPath</i> instead of being appended to it.</param>
    <param name="dwFlags">
      <para>One or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_NONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000</term>
              </listheader>
            </list>
          </description>
          <description>Do not allow for the construction of \\?\ paths (ie, long paths) longer than <b>MAX_PATH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ALLOW_LONG_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Allow the building of \\?\ paths longer than <b>MAX_PATH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path enabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>. <para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path disabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Disables the normalization of path segments that includes removing trailing dots and spaces. This enables access to paths that win32 path normalization will block.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Converts the input path into the extended length DOS device path form (with the \\?\ prefix) if not already in that form. This enables access to paths that are otherwise not addressable due to Win32 normalization rules (that can strip trailing dots and spaces) and path length limitations. This option implies the same behavior of <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszPath</i> or <i>pszMore</i> is <b>NULL</b>, <i>cchPath</i> is 0, or <i>cchPath</i> is greater than <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The resulting string would exceed <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate a buffer of the necessary size.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchCanonicalize">
    <summary>
      <para>Converts a path string into a canonical form.</para>
      <para>This function differs from <see cref="PathCchCanonicalizeEx" /> in that you are restricted to a final path of length MAX_PATH.</para>
      <para>This function differs from <see cref="PathAllocCanonicalize" /> in that the caller must declare the size of the returned string, which is stored on the stack.</para>
      <para>This function differs from <see cref="PathCanonicalize" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, <see cref="PathCchCanonicalizeEx" />, or <see cref="PathAllocCanonicalize" /> should be used in place of <see cref="PathCanonicalize" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPathOut">A pointer to a buffer that, when this function returns successfully, receives the canonicalized path string.</param>
    <param name="cchPathOut">The size of the buffer pointed to by <i>pszPathOut</i>, in characters.</param>
    <param name="pszPathIn">A pointer to the original path string. If this value points to an empty string, or results in an empty string once the "." and ".." elements are removed, a single backslash is copied to the buffer pointed to by <i>pszPathOut</i>.</param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>cchPathOut</i> value is greater than <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A path segment exceeds the standard path segment length limit of 256 characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate a buffer of the necessary size.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchCanonicalizeEx">
    <summary>
      <para>Simplifies a path by removing navigation elements such as "." and ".." to produce a direct, well-formed path.</para>
      <para>This function differs from <see cref="PathCchCanonicalize" /> in that it allows for a longer final path to be constructed.</para>
      <para>This function differs from <see cref="PathAllocCanonicalize" /> in that the caller must declare the size of the returned string, which is stored on the stack.</para>
      <para>This function differs from <see cref="PathCanonicalize" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b> This function, <see cref="PathCchCanonicalize" />, or <see cref="PathAllocCanonicalize" /> should be used in place of <see cref="PathCanonicalize" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPathOut">A pointer to a buffer that, when this function returns successfully, receives the edited path string.</param>
    <param name="cchPathOut">The size of the buffer pointed to by <i>pszPathOut</i>, in characters.</param>
    <param name="pszPathIn">A pointer to the original path string. If this value is <b>NULL</b>, points to an empty string, or results in an empty string once the "." and ".." elements are removed, a single backslash is copied to the buffer pointed to by <i>pszPathOut</i>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_NONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000</term>
              </listheader>
            </list>
          </description>
          <description>Do not allow for the construction of \\?\ paths (ie, long paths) longer than <b>MAX_PATH</b> .</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ALLOW_LONG_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Allow the building of \\?\ paths longer than <b>MAX_PATH</b> . Note that <i>cchPathOut</i> must be greater than <b>MAX_PATH</b> . If it is not, this flag is ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path enabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path disabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Disables the normalization of path segments that includes removing trailing dots and spaces. This enables access to paths that win32 path normalization will block.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Converts the input path into the extended length DOS device path form (with the \\?\ prefix) if not already in that form. This enables access to paths that are otherwise not addressable due to Win32 normalization rules (that can strip trailing dots and spaces) and path length limitations. This option implies the same behavior of <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_TRAILING_SLASH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>When combining or normalizing a path, ensure there is a trailing backslash.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> code, including but not limited to the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>cchPathOut</i> value is greater than <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A path segment has more than <b>PATHCCH_MAX_CCH</b> characters, or, if the <b>PATHCCH_ALLOW_LONG_PATHS</b> flag is not set, exceeds the standard path segment length limit of 256 characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate a buffer of the necessary size.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchCombine">
    <summary>
      <para>Combines two path fragments into a single path. This function also canonicalizes any relative path elements, removing "." and ".." elements to simplify the final path.</para>
      <para>This function differs from <see cref="PathCchCombineEx" /> in that you are restricted to a final path of length MAX_PATH.</para>
      <para>This function differs from <see cref="PathAllocCombine" /> in that the caller must declare the size of the returned string, which is stored on the stack.</para>
      <para>This function differs from <see cref="PathCombine" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, <see cref="PathCchCombineEx" />, or <see cref="PathAllocCombine" /> should be used in place of <see cref="PathCombine" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPathOut">A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as <i>pszPathIn</i> or <i>pszMore</i>.</param>
    <param name="cchPathOut">The size of the buffer pointed to by <i>pszPathOut</i>, in characters.</param>
    <param name="pszPathIn">A pointer to the first path string. This value can be <b>NULL</b>.</param>
    <param name="pszMore">A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by <i>pszPathIn</i>. If this path is fully qualified, it is copied directly to the output buffer without being combined with the other path. This value can be <b>NULL</b>.</param>
    <returns>
      <para>This function returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded. Note that this also includes the case of an empty extension, such as a period with no characters following it. In that case, the original string is returned unaltered.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value can be caused by several things, such as the <i>pszPathOut</i> param being set to <b>NULL</b>, or the <i>cchPathOut</i> value being set to 0 or a value greater than <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate enough memory to perform the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of one or both of the original paths exceeded <b>PATHCCH_MAX_CCH</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchCombineEx">
    <summary>
      <para>Combines two path fragments into a single path. This function also canonicalizes any relative path elements, removing "." and ".." elements to simplify the final path.</para>
      <para>This function differs from <see cref="PathCchCombine" /> in that it allows for a longer final path to be constructed.</para>
      <para>This function differs from <see cref="PathAllocCombine" /> in that the caller must declare the size of the returned string, which is stored on the stack.</para>
      <para>This function differs from <see cref="PathCombine" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b> This function, <see cref="PathCchCombine" />, or <see cref="PathAllocCombine" /> should be used in place of <see cref="PathCombine" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPathOut">A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as <i>pszPathIn</i> or <i>pszMore</i>.</param>
    <param name="cchPathOut">The size of the buffer pointed to by <i>pszPathOut</i>, in characters.</param>
    <param name="pszPathIn">A pointer to the first path string. This value can be <b>NULL</b>.</param>
    <param name="pszMore">A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by <i>pszPathIn</i>. If this path is fully qualified, it is copied directly to the output buffer without being combined with the other path. This value can be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>One or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_NONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000</term>
              </listheader>
            </list>
          </description>
          <description>Do not allow for the construction of \\?\ paths (ie, long paths) longer than <b>MAX_PATH</b> .</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ALLOW_LONG_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Allow the construction of \\?\ paths longer than <b>MAX_PATH</b>. Note that <i>cchPathOut</i> must be greater than <b>MAX_PATH</b>. If it is not, this flag is ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path enabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Forces the API to treat the caller as long path disabled, independent of the process's long name enabled state. This option can be used only when <b>PATHCCH_ALLOW_LONG_PATHS</b> is specified, and cannot be used with <b>PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Disables the normalization of path segments that includes removing trailing dots and spaces. This enables access to paths that win32 path normalization will block.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Converts the input path into the extended length DOS device path form (with the \\?\ prefix) if not already in that form. This enables access to paths that are otherwise not addressable due to Win32 normalization rules (that can strip trailing dots and spaces) and path length limitations. This option implies the same behavior of <b>PATHCCH_DO_NOT_NORMALIZE_SEGMENTS</b>.<para><b>Note</b> This value is available starting in Windows 10, version 1703.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function returns an <b>HRESULT</b> code, including the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded. Note that this also includes the case of an empty extension, such as a period with no characters following it. In that case, the original string is returned unaltered.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This value can be caused by several things, such as the <i>pszPathOut</i> param being set to <b>NULL</b>, or the <i>cchPathOut</i> value being set to 0 or a value greater than <b>PATHCCH_MAX_CCH</b> .</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not allocate enough memory to perform the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PATHCCH_E_FILENAME_TOO_LONG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of one or both of the original paths exceeded <b>PATHCCH_MAX_CCH</b> .</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PathCchFindExtension">
    <summary>
      <para>Searches a path to find its file name extension, such as ".exe" or ".ini". This function does not search for a specific extension; it searches for the presence of any extension.</para>
      <para>This function differs from <see cref="PathFindExtension" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function should be used in place of <see cref="PathFindExtension" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path to search.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="ppszExt">The address of a pointer that, when this function returns successfully, points to the "." character that precedes the extension within <i>pszPath</i>. If no extension is found, it points to the string's terminating null character.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PathCchIsRoot">
    <summary>
      <para>Determines whether a path string refers to the root of a volume.</para>
      <para>This function differs from <see cref="PathIsRoot" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
    </summary>
    <param name="pszPath">A pointer to the path string.</param>
    <returns>Returns <b>TRUE</b> if the specified path is a root, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.PathCchRemoveBackslash">
    <summary>
      <para>Removes the trailing backslash from the end of a path string.</para>
      <para>This function differs from <see cref="PathRemoveBackslash" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, or <see cref="PathCchRemoveBackslashEx" />, should be used in place of <see cref="PathRemoveBackslash" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if the string was a root path or if no backslash was found, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchRemoveBackslashEx">
    <summary>
      <para>Removes the trailing backslash from the end of a path string.</para>
      <para>This function differs from <see cref="PathCchRemoveBackslash" /> in that it can return a pointer to the new end of the string and report the number of unused characters remaining in the buffer.</para>
      <para>This function differs from <see cref="PathRemoveBackslash" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function, or <see cref="PathCchRemoveBackslash" />, should be used in place of <see cref="PathRemoveBackslash" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="ppszEnd">A value that, when this function returns successfully, receives the address of a pointer to end of the new string. If the string is a root path such as "C:", the pointer points to the backslash; otherwise the pointer points to the string's terminating null character.</param>
    <param name="pcchRemaining">A pointer to a value that, when this function returns successfully, receives the number of unused characters in the destination buffer, including the terminating null character. If the string is a root path such as "C:", this count includes the backslash in that string.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if the string was a root path or if no backslash was found, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchRemoveExtension">
    <summary>
      <para>Removes the file name extension from a path, if one is present.</para>
      <para>This function differs from <see cref="PathRemoveExtension" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>This function, should be used in place of <see cref="PathRemoveExtension" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the string contains the path with any extension removed. If no extension was found, the string is unchanged.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if no extension was found, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchRemoveFileSpec">
    <summary>
      <para>Removes the last element in a path string, whether that element is a file name or a directory name. The element's leading backslash is also removed.</para>
      <para>This function differs from <see cref="PathRemoveFileSpec" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>This function should be used in place of <see cref="PathRemoveFileSpec" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the fully-qualified path string. When this function returns successfully, the string will have had its last element and its leading backslash removed. This function does not affect root paths such as "C:". In the case of a root path, the path string is returned unaltered. If a path string ends with a trailing backslash, only that backslash is removed.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the function was successful, <b>S_FALSE</b> if there was nothing to remove, or an error code otherwise.</returns>
  </member>
  <member name="Windows.PathCchRenameExtension">
    <summary>
      <para>Replaces a file name's extension at the end of a path string with a new extension. If the path string does not end with an extension, the new extension is added.</para>
      <para>This function differs from <see cref="PathRenameExtension" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function should be used in place of <see cref="PathRenameExtension" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, this value points to the same string, but with the renamed or added extension.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <param name="pszExt">A pointer to the new extension string. The leading '.' character is optional. In the case of an empty string (""), any existing extension in the path string is removed.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PathCchSkipRoot">
    <summary>
      <para>Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.</para>
      <para>This function differs from <see cref="PathSkipRoot" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
    </summary>
    <param name="pszPath">A pointer to the path string.</param>
    <param name="ppszRootEnd">The address of a pointer that, when this function returns successfully, points to the first character in a path following the drive letter or UNC server/share path elements. If the path consists of only a root, this value will point to the string's terminating null character.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.PathCchStripPrefix">
    <summary>Removes the "\?" prefix, if present, from a file path.</summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, the same path string will have had the prefix removed, if the prefix was present. If no prefix was present, the string will be unchanged.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the prefix was removed, <b>S_FALSE</b> if the path did not have a prefix to remove, or an <b>HRESULT</b> failure code.</returns>
  </member>
  <member name="Windows.PathCchStripToRoot">
    <summary>
      <para>Removes all file and directory elements in a path except for the root information.</para>
      <para>This function differs from <see cref="PathStripToRoot" /> in that it accepts paths with "\", "\?" and "\?\UNC" prefixes.</para>
      <div>
        <b>Note</b>  This function should be used in place of <see cref="PathStripToRoot" /> to prevent the possibility of a buffer overrun.</div>
    </summary>
    <param name="pszPath">A pointer to the path string. When this function returns successfully, this string contains only the root information taken from that path.</param>
    <param name="cchPath">The size of the buffer pointed to by <i>pszPath</i>, in characters.</param>
    <returns>This function returns <b>S_OK</b> if the path was truncated, <b>S_FALSE</b> if the path was already just a root, or an <b>HRESULT</b> failure code.</returns>
  </member>
  <member name="Windows.PathIsUNCEx">
    <summary>
      <para>Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.</para>
      <para>This function differs from <see cref="PathIsUNC" /> in that it also allows you to extract the name of the server from the path.</para>
    </summary>
    <param name="pszPath">A pointer to the path string.</param>
    <param name="ppszServer">A pointer to a string that, when this function returns successfully, receives the server portion of the UNC path. This value can be <b>NULL</b> if you don't need this information.</param>
    <returns>Returns <b>TRUE</b> if the string is a valid UNC path; otherwise, <b>FALSE</b>.</returns>
  </member>
</doc>