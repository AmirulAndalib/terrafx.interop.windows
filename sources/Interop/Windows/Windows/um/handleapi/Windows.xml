<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CloseHandle">
    <summary>Closes an open object handle.</summary>
    <param name="hObject">A valid handle to an open object.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>If the application is running under a debugger, the function will throw an exception if it receives either a handle value that is not valid or a pseudo-handle value. This can happen if you close a handle twice, or if you call<b>CloseHandle</b> on a handle returned by the<see cref="FindFirstFile" /> function instead of calling the <see cref="FindClose" /> function.</para>
    </returns>
  </member>
  <member name="Windows.CompareObjectHandles">
    <summary>Compares two object handles to determine if they refer to the same underlying kernel object.</summary>
    <param name="hFirstObjectHandle">The first object handle to compare.</param>
    <param name="hSecondObjectHandle">The second object handle to compare.</param>
    <returns>A Boolean value that indicates if the two handles refer to the same underlying kernel object. TRUE if the same, otherwise FALSE.</returns>
  </member>
  <member name="Windows.DuplicateHandle">
    <summary>Duplicates an object handle.</summary>
    <param name="hSourceProcessHandle">
      <para>A handle to the process with the handle to be duplicated.</para>
      <para>The handle must have the PROCESS_DUP_HANDLE access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hSourceHandle">The handle to be duplicated. This is an open object handle that is valid in the context of the source process. For a list of objects whose handles can be duplicated, see the following Remarks section.</param>
    <param name="hTargetProcessHandle">
      <para>A handle to the process that is to receive the duplicated handle. The handle must have the PROCESS_DUP_HANDLE access right.</para>
      <para>This parameter is optional and can be specified as NULL if the <b>DUPLICATE_CLOSE_SOURCE</b> flag is set in <i>Options</i>.</para>
    </param>
    <param name="lpTargetHandle">
      <para>A pointer to a variable that receives the duplicate handle. This handle value is valid in the context of the target process.</para>
      <para>If <i>hSourceHandle</i> is a pseudo handle returned by <see cref="GetCurrentProcess" /> or <see cref="GetCurrentThread" />, <b>DuplicateHandle</b> converts it to a real handle to a process or thread, respectively.</para>
      <para>If <i>lpTargetHandle</i> is <b>NULL</b>, the function duplicates the handle, but does not return the duplicate handle value to the caller. This behavior exists only for backward compatibility with previous versions of this function. You should not use this feature, as you will lose system resources until the target process terminates.</para>
      <para>This parameter is ignored if <i>hTargetProcessHandle</i> is <b>NULL</b>.</para>
    </param>
    <param name="dwDesiredAccess">
      <para>The access requested for the new handle. For the flags that can be specified for each object type, see the following Remarks section.</para>
      <para>This parameter is ignored if the <i>dwOptions</i> parameter specifies the DUPLICATE_SAME_ACCESS flag. Otherwise, the flags that can be specified depend on the type of object whose handle is to be duplicated.</para>
      <para>This parameter is ignored if <i>hTargetProcessHandle</i> is <b>NULL</b>.</para>
    </param>
    <param name="bInheritHandle">
      <para>A variable that indicates whether the handle is inheritable. If <b>TRUE</b>, the duplicate handle can be inherited by new processes created by the target process. If <b>FALSE</b>, the new handle cannot be inherited.</para>
      <para>This parameter is ignored if <i>hTargetProcessHandle</i> is <b>NULL</b>.</para>
    </param>
    <param name="dwOptions">
      <para>Optional actions. This parameter can be zero, or any combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DUPLICATE_CLOSE_SOURCE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Closes the source handle. This occurs regardless of any error status returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DUPLICATE_SAME_ACCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Ignores the <i>dwDesiredAccess</i> parameter. The duplicate handle has the same access as the source handle.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetHandleInformation">
    <summary>Retrieves certain properties of an object handle.</summary>
    <param name="hObject">
      <para>A handle to an object whose information is to be retrieved.</para>
      <para>You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job, mailslot, mutex, pipe, printer, process, registry key, semaphore, serial communication device, socket, thread, or waitable timer.</para>
    </param>
    <param name="lpdwFlags">
      <para>A pointer to a variable that receives a set of bit flags that specify properties of the object handle or 0. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HANDLE_FLAG_INHERIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, a child process created with the <i>bInheritHandles</i> parameter of <see cref="CreateProcess" /> set to <b>TRUE</b> will inherit the object handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HANDLE_FLAG_PROTECT_FROM_CLOSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, calling the <see cref="CloseHandle" /> function will not close the object handle.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetHandleInformation">
    <summary>Sets certain properties of an object handle.</summary>
    <param name="hObject">
      <para>A handle to an object whose information is to be set.</para>
      <para>You can specify a handle to one of the following types of objects: access token, console input buffer, console screen buffer, event, file, file mapping, job, mailslot, mutex, pipe, printer, process, registry key, semaphore, serial communication device, socket, thread, or waitable timer.</para>
    </param>
    <param name="dwMask">A mask that specifies the bit flags to be changed. Use the same constants shown in the description of <i>dwFlags</i>.</param>
    <param name="dwFlags">
      <para>Set of bit flags that specifies properties of the object handle. This parameter can be 0 or one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HANDLE_FLAG_INHERIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, a child process created with the <i>bInheritHandles</i> parameter of <see cref="CreateProcess" /> set to <b>TRUE</b> will inherit the object handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HANDLE_FLAG_PROTECT_FROM_CLOSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, calling the <see cref="CloseHandle" /> function will not close the object handle.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
</doc>