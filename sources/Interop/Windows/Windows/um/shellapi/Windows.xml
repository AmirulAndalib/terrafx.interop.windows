<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AssocCreateForClasses">
    <summary>Retrieves an object that implements an <see cref="IQueryAssociations" /> interface.</summary>
    <param name="rgClasses">A pointer to an array of <see cref="ASSOCIATIONELEMENT" /> structures.</param>
    <param name="cClasses">The number of elements in the array pointed to by <i>rgClasses</i>.</param>
    <param name="riid">Reference to the desired IID, normally IID_IQueryAssociations.</param>
    <param name="ppv">When this method returns, contains the interface pointer requested in <i>riid</i>. This is normally <see cref="IQueryAssociations" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DragAcceptFiles">
    <summary>Registers whether a window accepts dropped files.</summary>
    <param name="hWnd">The identifier of the window that is registering whether it will accept dropped files.</param>
    <param name="fAccept">A value that indicates if the window identified by the <i>hWnd</i> parameter accepts dropped files. This value is <b>TRUE</b> to accept dropped files or <b>FALSE</b> to discontinue accepting dropped files.</param>
  </member>
  <member name="Windows.DragFinish">
    <summary>Releases memory that the system allocated for use in transferring file names to the application.</summary>
    <param name="hDrop">Identifier of the structure that describes dropped files. This handle is retrieved from the <i>wParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/shell/wm-dropfiles">WM_DROPFILES</a> message.</param>
  </member>
  <member name="Windows.DragQueryFile">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryFileA">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryFileW">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryFile">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryFileA">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryFileW">
    <summary>Retrieves the names of dropped files that result from a successful drag-and-drop operation.</summary>
    <param name="hDrop">Identifier of the structure that contains the file names of the dropped files.</param>
    <param name="iFile">Index of the file to query. If the value of this parameter is 0xFFFFFFFF, <b>DragQueryFile</b> returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, <b>DragQueryFile</b> copies the file name with the corresponding value to the buffer pointed to by the <i>lpszFile</i> parameter.</param>
    <param name="lpszFile">The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is <b>NULL</b>, <b>DragQueryFile</b> returns the required size, in characters, of this buffer.</param>
    <param name="cch">The size, in characters, of the <i>lpszFile</i> buffer.</param>
    <returns>
      <para>A nonzero value indicates a successful call.</para>
      <para>When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character.</para>
      <para>If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF.</para>
      <para>If the index value is between zero and the total number of dropped files, and the <i>lpszFile</i> buffer address is <b>NULL</b>, the return value is the required size, in characters, of the buffer, <i>not including</i> the terminating null character.</para>
    </returns>
  </member>
  <member name="Windows.DragQueryPoint">
    <summary>Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.</summary>
    <param name="hDrop">Handle of the drop structure that describes the dropped file.</param>
    <param name="ppt">Pointer to a <see cref="POINT" /> structure that, when this function returns successfully, receives the coordinates of the mouse pointer at the time the file was dropped.</param>
    <returns>
      <b>TRUE</b> if the drop occurred in the client area of the window; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.DuplicateIcon">
    <summary>Creates a duplicate of a specified icon.</summary>
    <param name="hIcon">Handle to the icon to be duplicated.</param>
    <returns>If successful, the function returns the handle to the new icon that was created; otherwise, <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractAssociatedIcon">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractAssociatedIconA">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractAssociatedIconW">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractAssociatedIcon">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractAssociatedIconA">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractAssociatedIconW">
    <summary>Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.</summary>
    <param name="hInst">A handle to the instance of the calling application.</param>
    <param name="pszIconPath">
      <para>Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.</para>
      <para>When this function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter.</para>
    </param>
    <param name="piIcon">
      <para>Pointer to a <b>WORD</b> value that, on entry, specifies the index of the icon whose handle is to be obtained.</para>
      <para>When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by <i>lpIconPath</i> or an associated executable file), this value points to the icon's index in that file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an icon handle. If the icon is extracted from an associated executable file, the function stores the full path and file name of the executable file in the string pointed to by <i>lpIconPath</i>, and stores the icon's identifier in the <b>WORD</b> pointed to by <i>lpiIcon</i>.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.ExtractIcon">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractIconA">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractIconW">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractIconEx">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIconExA">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIconExW">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIconEx">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIconExA">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIconExW">
    <summary>The <b>ExtractIconEx</b> function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.</summary>
    <param name="lpszFile">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file from which icons will be extracted.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the first icon to extract. For example, if this value is zero, the function extracts the first icon in the specified file.</para>
      <para>If this value is –1 and <i>phiconLarge</i> and <i>phiconSmall</i> are both <b>NULL</b>, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the return value is 1.</para>
      <para>If this value is a negative number and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the function begins by extracting the icon whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, use -3 to extract the icon whose resource identifier is 3.</para>
    </param>
    <param name="phiconLarge">Pointer to an array of icon handles that receives handles to the large icons extracted from the file. If this parameter is <b>NULL</b>, no large icons are extracted from the file.</param>
    <param name="phiconSmall">Pointer to an array of icon handles that receives handles to the small icons extracted from the file. If this parameter is <b>NULL</b>, no small icons are extracted from the file.</param>
    <param name="nIcons">The number of icons to extract from the file.</param>
    <returns>
      <para>If the <i>nIconIndex</i> parameter is -1 and both the <i>phiconLarge</i> and <i>phiconSmall</i> parameters are <b>NULL</b>, then the return value is the number of icons contained in the specified file.</para>
      <para>If the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>, the return value is the number of icons successfully extracted from the file.</para>
      <blockquote>[!NOTE] If the function encounters an error, it returns <b>UINT_MAX</b>. In this case, you can call <see cref="GetLastError" /> to retrieve the error code. For example, this function returns <b>UINT_MAX</b> if the file specified by <i>lpszFile</i> cannot be found while the <i>nIconIndex</i> parameter is any value other than -1 and either <i>phiconLarge</i> or <i>phiconSmall</i> is not <b>NULL</b>. In this case, <b>GetLastError</b> returns <b>ERROR_FILE_NOT_FOUND</b> (2).</blockquote>
    </returns>
  </member>
  <member name="Windows.ExtractIcon">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractIconA">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ExtractIconW">
    <summary>
      <para>Gets a handle to an icon from the specified executable file, DLL, or icon file.</para>
      <para>To retrieve an array of handles to large or small icons, use the <see cref="ExtractIconEx" /> function.</para>
    </summary>
    <param name="hInst">Handle to the instance of the application that calls the function.</param>
    <param name="pszExeFileName">Pointer to a null-terminated string that specifies the name of an executable file, DLL, or icon file.</param>
    <param name="nIconIndex">
      <para>Specifies the zero-based index of the icon to retrieve. For example, if this value is 0, the function returns a handle to the first icon in the specified file.</para>
      <para>If this value is -1, the function returns the total number of icons in the specified file. If the file is an executable file or DLL, the return value is the number of RT_GROUP_ICON resources. If the file is an .ICO file, the return value is 1.</para>
      <para>If this value is a negative number not equal to –1, the function returns a handle to the icon in the specified file whose resource identifier is equal to the absolute value of <i>nIconIndex</i>. For example, you should use –3 to extract the icon whose resource identifier is 3. To extract the icon whose resource identifier is 1, use the <see cref="ExtractIconEx" /> function.</para>
    </param>
    <returns>The return value is a handle to an icon. If the file specified was not an executable file, DLL, or icon file, the return is 1. If no icons were found in the file, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.FindExecutable">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FindExecutableA">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FindExecutableW">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FindExecutable">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FindExecutableA">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FindExecutableW">
    <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.</summary>
    <param name="lpFile">The address of a <b>null</b>-terminated string that specifies a file name. This file should be a document.</param>
    <param name="lpDirectory">The address of a <b>null</b>-terminated string that specifies the default directory. This value can be <b>NULL</b>.</param>
    <param name="lpResult">The address of a buffer that receives the file name of the associated executable file. This file name is a <b>null</b>-terminated string that specifies the executable file started when an "open" by association is run on the file specified in the <i>lpFile</i> parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when <b>Open</b> is chosen from the file's shortcut menu. This parameter must contain a valid non-<b>null</b> value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer.</param>
    <returns>
      <para>Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error.</para>
      <para>The following table lists possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The specified path is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be accessed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>There is no association for the specified file type with an executable file.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InitNetworkAddressControl">
    <summary>Initializes the network address control window class.</summary>
    <returns>
      <b>TRUE</b> if the initialization succeeded; or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.NetAddr_DisplayErrorTip">
    <summary>Displays an error message in the balloon tip associated with the network address control.</summary>
    <param name="hwnd">A handle to the network address control.</param>
  </member>
  <member name="Windows.NetAddr_GetAddress">
    <summary>Indicates whether a network address conforms to a specified type and format.</summary>
    <param name="hwnd">A handle to the network address control that contains the address to validate.</param>
    <param name="pv">A pointer to an <see cref="NC_ADDRESS" /> structure to receive network address information in parsed form, if the address format and type in the control specified by <i>hwnd</i> are validated. The calling application is responsible for allocating the memory for this structure.</param>
  </member>
  <member name="Windows.NetAddr_GetAllowType">
    <summary>Retrieves the network address types that a specified network address control accepts.</summary>
    <param name="hwnd">A handle to the network address control.</param>
  </member>
  <member name="Windows.NetAddr_SetAllowType">
    <summary>Sets the network address types that a specified network address control accepts.</summary>
    <param name="hwnd">A handle to the network address control.</param>
    <param name="addrMask">Specifies the network address types as one or more of the <a href="https://docs.microsoft.com//windows/desktop/shell/net-string">NET_STRING</a> constants.</param>
  </member>
  <member name="Windows.SHAppBarMessage">
    <summary>Sends an appbar message to the system.</summary>
    <param name="dwMessage">
      <para>Appbar message value to send. This parameter can be one of the following values.</para>
      <h4>ABM_NEW (0x00000000)</h4>
      <para>Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar.</para>
      <h4>ABM_REMOVE (0x00000001)</h4>
      <para>Unregisters an appbar, removing the bar from the system's internal list.</para>
      <h4>ABM_QUERYPOS (0x00000002)</h4>
      <para>Requests a size and screen position for an appbar.</para>
      <h4>ABM_SETPOS (0x00000003)</h4>
      <para>Sets the size and screen position of an appbar.</para>
      <h4>ABM_GETSTATE (0x00000004)</h4>
      <para>Retrieves the autohide and always-on-top states of the Windows taskbar.</para>
      <h4>ABM_GETTASKBARPOS (0x00000005)</h4>
      <para>Retrieves the bounding rectangle of the Windows taskbar. Note that this applies only to the system taskbar. Other objects, particularly toolbars supplied with third-party software, also can be present. As a result, some of the screen area not covered by the Windows taskbar might not be visible to the user. To retrieve the area of the screen not covered by both the taskbar and other app bars—the working area available to your application—, use the <see cref="GetMonitorInfo" /> function.</para>
      <h4>ABM_ACTIVATE (0x00000006)</h4>
      <para>Notifies the system to activate or deactivate an appbar. The <b>lParam</b> member of the <see cref="APPBARDATA" /> pointed to by <i>pData</i> is set to <b>TRUE</b> to activate or <b>FALSE</b> to deactivate.</para>
      <h4>ABM_GETAUTOHIDEBAR (0x00000007)</h4>
      <para>Retrieves the handle to the autohide appbar associated with a particular edge of the screen.</para>
      <h4>ABM_SETAUTOHIDEBAR (0x00000008)</h4>
      <para>Registers or unregisters an autohide appbar for an edge of the screen.</para>
      <h4>ABM_WINDOWPOSCHANGED (0x00000009)</h4>
      <para>Notifies the system when an appbar's position has changed.</para>
      <h4>ABM_SETSTATE (0x0000000A)</h4>
      <para>
        <b>Windows XP and later:</b> Sets the state of the appbar's autohide and always-on-top attributes.</para>
      <h4>ABM_GETAUTOHIDEBAREX (0x0000000B)</h4>
      <para>
        <b>Windows XP and later:</b> Retrieves the handle to the autohide appbar associated with a particular edge of a particular monitor.</para>
      <h4>ABM_SETAUTOHIDEBAREX (0x0000000C)</h4>
      <para>
        <b>Windows XP and later:</b> Registers or unregisters an autohide appbar for an edge of a particular monitor.</para>
    </param>
    <param name="pData">A pointer to an <see cref="APPBARDATA" /> structure. The content of the structure on entry and on exit depends on the value set in the <i>dwMessage</i> parameter. See the individual message pages for specifics.</param>
    <returns>This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent. Links to those documents are given in the See Also section.</returns>
  </member>
  <member name="Windows.ShellAbout">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellAboutA">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellAboutW">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellAbout">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellAboutA">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellAboutW">
    <summary>Displays a <b>ShellAbout</b> dialog box.</summary>
    <param name="hWnd">A window handle to a parent window. This parameter can be <b>NULL</b>.</param>
    <param name="szApp">
      <para>A pointer to a null-terminated string that contains text to be displayed in the title bar of the <b>ShellAbout</b> dialog box and on the first line of the dialog box after the text "Microsoft". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text "Microsoft".</para>
      <para>
        <b>Windows 2000, Windows XP, Windows Server 2003</b>: If the string pointed to by this parameter contains a separator (#), then the string must be writable.</para>
      <para>
        <b>Windows Vista, Windows Server 2008</b>: This string cannot exceed 200 characters in length.</para>
    </param>
    <param name="szOtherStuff">A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be <b>NULL</b>.</param>
    <param name="hIcon">The handle of an icon that the function displays in the dialog box. This parameter can be <b>NULL</b>, in which case the function displays the Windows icon.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ShellExecute">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.ShellExecuteA">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.ShellExecuteW">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.ShellExecuteEx">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecuteExA">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecuteExW">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecuteEx">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecuteExA">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecuteExW">
    <summary>Performs an operation on a specified file.</summary>
    <param name="pExecInfo">A pointer to a <see cref="SHELLEXECUTEINFO" /> structure that contains and receives information about the application being executed.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for extended error information.</returns>
  </member>
  <member name="Windows.ShellExecute">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.ShellExecuteA">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.ShellExecuteW">
    <summary>Performs an operation on a specified file.</summary>
    <param name="hwnd">A handle to the parent window used for displaying a UI or error messages. This value can be <b>NULL</b> if the operation is not associated with a window.</param>
    <param name="lpOperation">
      <para>A pointer to a <b>null</b>-terminated string, referred to in this case as a <i>verb</i>, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:</para>
      <h4>edit</h4>
      <para>Launches an editor and opens the document for editing. If <i>lpFile</i> is not a document file, the function will fail.</para>
      <h4>explore</h4>
      <para>Explores a folder specified by <i>lpFile</i>.</para>
      <h4>find</h4>
      <para>Initiates a search beginning in the directory specified by <i>lpDirectory</i>.</para>
      <h4>open</h4>
      <para>Opens the item specified by the <i>lpFile</i> parameter. The item can be a file or folder.</para>
      <h4>print</h4>
      <para>Prints the file specified by <i>lpFile</i>. If <i>lpFile</i> is not a document file, the function fails.</para>
      <h4>runas</h4>
      <para>Launches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.</para>
      <h4>NULL</h4>
      <para>The default verb is used, if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</para>
    </param>
    <param name="lpFile">A pointer to a <b>null</b>-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the "print" verb. If a relative path is used for the <i>lpDirectory</i> parameter do not use a relative path for <i>lpFile</i>.</param>
    <param name="lpParameters">If <i>lpFile</i> specifies an executable file, this parameter is a pointer to a <b>null</b>-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If <i>lpFile</i> specifies a document file, <i>lpParameters</i> should be <b>NULL</b>.</param>
    <param name="lpDirectory">A pointer to a <b>null</b>-terminated string that specifies the default (working) directory for the action. If this value is <b>NULL</b>, the current working directory is used. If a relative path is provided at <i>lpFile</i>, do not use a relative path for <i>lpDirectory</i>.</param>
    <param name="nShowCmd">The flags that specify how an application is to be displayed when it is opened. If <i>lpFile</i> specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the <i>nCmdShow</i> parameter for the <see cref="ShowWindow" /> function.</param>
    <returns>
      <para>If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an <b>INT_PTR</b> and compared to either 32 or the following error codes below.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system is out of memory or resources.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_PATH_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The .exe file is invalid (non-Win32 .exe or error in .exe image).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operating system denied access to the specified file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_ASSOCINCOMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file name association is incomplete or invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEBUSY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because other DDE transactions were being processed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDEFAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DDETIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DDE transaction could not be completed because the request timed out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified DLL was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_FNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_NOASSOC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no application associated with the given file name extension. This error will also be returned if you attempt to print a file that is not printable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_OOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was not enough memory to complete the operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_PNF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified path was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SE_ERR_SHARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A sharing violation occurred.</description>
        </listheader>
      </list>
      <para>Call <see cref="GetLastError" /> for extended error information.</para>
    </returns>
  </member>
  <member name="Windows.Shell_NotifyIcon">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.Shell_NotifyIconA">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.Shell_NotifyIconW">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.Shell_NotifyIconGetRect">
    <summary>Gets the screen coordinates of the bounding rectangle of a notification icon.</summary>
    <param name="identifier">Pointer to a <see cref="NOTIFYICONIDENTIFIER" /> structure that identifies the icon.</param>
    <param name="iconLocation">Pointer to a <see cref="RECT" /> structure that, when this function returns successfully, receives the coordinates of the icon.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.Shell_NotifyIcon">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">
      <para>A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</para>
      <h5>- dwMessage.NIM_ADD (0x00000000)</h5>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h5>- dwMessage.NIM_DELETE (0x00000002)</h5>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h5>- dwMessage.NIM_MODIFY (0x00000001)</h5>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h5>- dwMessage.NIM_SETFOCUS (0x00000003)</h5>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h5>- dwMessage.NIM_SETVERSION (0x00000004)</h5>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD)&gt;. It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.Shell_NotifyIconA">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">
      <para>A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</para>
      <h5>- dwMessage.NIM_ADD (0x00000000)</h5>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h5>- dwMessage.NIM_DELETE (0x00000002)</h5>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h5>- dwMessage.NIM_MODIFY (0x00000001)</h5>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h5>- dwMessage.NIM_SETFOCUS (0x00000003)</h5>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h5>- dwMessage.NIM_SETVERSION (0x00000004)</h5>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD)&gt;. It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.Shell_NotifyIconW">
    <summary>Sends a message to the taskbar's status area.</summary>
    <param name="dwMessage">
      <para>A value that specifies the action to be taken by this function. It can have one of the following values:</para>
      <h4>NIM_ADD (0x00000000)</h4>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h4>NIM_MODIFY (0x00000001)</h4>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h4>NIM_DELETE (0x00000002)</h4>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h4>NIM_SETFOCUS (0x00000003)</h4>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h4>NIM_SETVERSION (0x00000004)</h4>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD). It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <param name="lpData">
      <para>A pointer to a <see cref="NOTIFYICONDATA" /> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</para>
      <h5>- dwMessage.NIM_ADD (0x00000000)</h5>
      <para>0x00000000. Adds an icon to the status area. The icon is given an identifier in the <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i>—either through its <b>uID</b> or <b>guidItem</b> member. This identifier is used in subsequent calls to <b>Shell_NotifyIcon</b> to perform later actions on the icon.</para>
      <h5>- dwMessage.NIM_DELETE (0x00000002)</h5>
      <para>0x00000002. Deletes an icon from the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be deleted.</para>
      <h5>- dwMessage.NIM_MODIFY (0x00000001)</h5>
      <para>0x00000001. Modifies an icon in the status area. <see cref="NOTIFYICONDATA" /> structure pointed to by <i>lpdata</i> uses the ID originally assigned to the icon when it was added to the notification area (NIM_ADD) to identify the icon to be modified.</para>
      <h5>- dwMessage.NIM_SETFOCUS (0x00000003)</h5>
      <para>0x00000003. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <b>NIM_SETFOCUS</b> to return focus to the notification area.</para>
      <h5>- dwMessage.NIM_SETVERSION (0x00000004)</h5>
      <para>0x00000004. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Shell32.dll version 5.0 and later only</a>. Instructs the notification area to behave according to the version number specified in the <b>uVersion</b> member of the structure pointed to by <i>lpdata</i>. The version number specifies which members are recognized.</para>
      <para>NIM_SETVERSION must be called every time a notification area icon is added (NIM_ADD)&gt;. It does not need to be called with NIM_MODIFY. The version setting is not persisted once a user logs off.</para>
      <para>For details, see the Remarks section.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBin">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBinA">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBinW">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBin">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
      <h5>- dwFlags.SHERB_NOCONFIRMATION</h5>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h5>- dwFlags.SHERB_NOPROGRESSUI</h5>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h5>- dwFlags.SHERB_NOSOUND</h5>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBinA">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
      <h5>- dwFlags.SHERB_NOCONFIRMATION</h5>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h5>- dwFlags.SHERB_NOPROGRESSUI</h5>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h5>- dwFlags.SHERB_NOSOUND</h5>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEmptyRecycleBinW">
    <summary>Empties the Recycle Bin on the specified drive.</summary>
    <param name="hwnd">A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be <b>NULL</b>.</param>
    <param name="pszRootPath">The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\windows\system. It can also contain an empty string or <b>NULL</b>. If this value is an empty string or <b>NULL</b>, all Recycle Bins on all drives will be emptied.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <h4>SHERB_NOCONFIRMATION</h4>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h4>SHERB_NOPROGRESSUI</h4>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h4>SHERB_NOSOUND</h4>
      <para>No sound will be played when the operation is complete.</para>
      <h5>- dwFlags.SHERB_NOCONFIRMATION</h5>
      <para>No dialog box confirming the deletion of the objects will be displayed.</para>
      <h5>- dwFlags.SHERB_NOPROGRESSUI</h5>
      <para>No dialog box indicating the progress will be displayed.</para>
      <h5>- dwFlags.SHERB_NOSOUND</h5>
      <para>No sound will be played when the operation is complete.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccounts">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccountsA">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccountsW">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccounts">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccountsA">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEnumerateUnreadMailAccountsW">
    <summary>Enumerates the user accounts that have unread email.</summary>
    <param name="hKeyUser">A valid HKEY for a given user.</param>
    <param name="dwIndex">The index of the user account.</param>
    <param name="pszMailAddress">A pointer to a Unicode string that specifies the email address of an account belonging to the specified user.</param>
    <param name="cchMailAddress">The number of characters in the email address.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHEvaluateSystemCommandTemplate">
    <summary>Enforces strict validation of parameters used in a call to <see cref="CreateProcess" /> or <see cref="ShellExecute" />.</summary>
    <param name="pszCmdTemplate">A command line, which may or may not include parameters. If the parameters are substitution parameters, then <b>SHEvaluateSystemCommandTemplate</b> should be called before parameters have been replaced.</param>
    <param name="ppszApplication">A pointer to the verified path to the application. This value should be passed as the <i>lpApplication</i> parameter in a call to <see cref="CreateProcess" /> or as the <i>lpFile</i> parameter in a call to <see cref="ShellExecute" />. This resource is allocated using <see cref="CoTaskMemAlloc" />, and it is the responsibility of the caller to free the resource when it is no longer needed by calling <see cref="CoTaskMemFree" />.</param>
    <param name="ppszCommandLine">
      <para>A pointer to a command-line string template to be used in a call to <see cref="CreateProcess" />. Command-line parameters should be specified based on this template, and then passed as the <i>lpCommandLine</i> parameter to <b>CreateProcess</b>. It is guaranteed to be of a form that <see cref="PathGetArgs" /> can always read correctly. This resource is allocated using <see cref="CoTaskMemAlloc" />, and it is the responsibility of the caller to free the resource when it is no longer needed by calling <see cref="CoTaskMemFree" />.</para>
      <para>This parameter can be <b>NULL</b> if this function is not being used in association with a call to <see cref="CreateProcess" />.</para>
    </param>
    <param name="ppszParameters">
      <para>A pointer to a command-line string template to be used in a call to <see cref="ShellExecute" />. Command-line parameters should be specified based on this template, and then passed as the <i>lpParameters</i> parameter to <b>ShellExecute</b>. This parameter is identical to calling <see cref="PathGetArgs" />. This resource is allocated using <see cref="CoTaskMemAlloc" />, and it is the responsibility of the caller to free the resource when it is no longer needed by calling <see cref="CoTaskMemFree" />.</para>
      <para>This parameter can be <b>NULL</b> if this function is not being used in association with a call to <see cref="CreateProcess" />.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHFileOperation">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFileOperationA">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFileOperationW">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFileOperation">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFileOperationA">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFileOperationW">
    <summary>Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by <see cref="IFileOperation" />.</summary>
    <param name="lpFileOp">A pointer to an <see cref="SHFILEOPSTRUCT" /> structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not <b>NULL</b>. You are responsible for validating the value. If you do not validate it, you will experience unexpected results.</param>
    <returns>
      <para>Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero.</para>
      <para>It is good practice to examine the value of the <b>fAnyOperationsAborted</b> member of the <see cref="SHFILEOPSTRUCT" />. <b>SHFileOperation</b> can return 0 for success if the user cancels the operation. If you do not check <b>fAnyOperationsAborted</b> as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions.</para>
      <para>Do not use <see cref="GetLastError" /> with the return values of this function.</para>
      <para>To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and <i>for these specific values only</i> these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:</para>
      <list type="bullet">
        <item>
          <description>These are pre-Win32 error codes and are no longer supported or defined in any public header file. To use them, you must either define them yourself or compare against the numerical value.</description>
        </item>
        <item>
          <description>These error codes are subject to change and have historically done so.</description>
        </item>
        <item>
          <description>These values are provided only as an aid in debugging. They should not be regarded as definitive.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <description>Error Code</description>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>DE_SAMEFILE</description>
          <description>0x71</description>
          <description>The source and destination files are the same file.</description>
        </listheader>
        <listheader>
          <description>DE_MANYSRC1DEST</description>
          <description>0x72</description>
          <description>Multiple file paths were specified in the source buffer, but only one destination file path.</description>
        </listheader>
        <listheader>
          <description>DE_DIFFDIR</description>
          <description>0x73</description>
          <description>Rename operation was specified but the destination path is a different directory. Use the move operation instead.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR</description>
          <description>0x74</description>
          <description>The source is a root directory, which cannot be moved or renamed.</description>
        </listheader>
        <listheader>
          <description>DE_OPCANCELLED</description>
          <description>0x75</description>
          <description>The operation was canceled by the user, or silently canceled if the appropriate flags were supplied to <b>SHFileOperation</b>.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSUBTREE</description>
          <description>0x76</description>
          <description>The destination is a subtree of the source.</description>
        </listheader>
        <listheader>
          <description>DE_ACCESSDENIEDSRC</description>
          <description>0x78</description>
          <description>Security settings denied access to the source.</description>
        </listheader>
        <listheader>
          <description>DE_PATHTOODEEP</description>
          <description>0x79</description>
          <description>The source or destination path exceeded or would exceed MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_MANYDEST</description>
          <description>0x7A</description>
          <description>The operation involved multiple destination paths, which can fail in the case of a move operation.</description>
        </listheader>
        <listheader>
          <description>DE_INVALIDFILES</description>
          <description>0x7C</description>
          <description>The path in the source or destination or both was invalid.</description>
        </listheader>
        <listheader>
          <description>DE_DESTSAMETREE</description>
          <description>0x7D</description>
          <description>The source and destination have the same parent folder.</description>
        </listheader>
        <listheader>
          <description>DE_FLDDESTISFILE</description>
          <description>0x7E</description>
          <description>The destination path is an existing file.</description>
        </listheader>
        <listheader>
          <description>DE_FILEDESTISFLD</description>
          <description>0x80</description>
          <description>The destination path is an existing folder.</description>
        </listheader>
        <listheader>
          <description>DE_FILENAMETOOLONG</description>
          <description>0x81</description>
          <description>The name of the file exceeds MAX_PATH.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDROM</description>
          <description>0x82</description>
          <description>The destination is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_DVD</description>
          <description>0x83</description>
          <description>The destination is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_DEST_IS_CDRECORD</description>
          <description>0x84</description>
          <description>The destination is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_FILE_TOO_LARGE</description>
          <description>0x85</description>
          <description>The file involved in the operation is too large for the destination media or file system.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDROM</description>
          <description>0x86</description>
          <description>The source is a read-only CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_DVD</description>
          <description>0x87</description>
          <description>The source is a read-only DVD, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_SRC_IS_CDRECORD</description>
          <description>0x88</description>
          <description>The source is a writable CD-ROM, possibly unformatted.</description>
        </listheader>
        <listheader>
          <description>DE_ERROR_MAX</description>
          <description>0xB7</description>
          <description>MAX_PATH was exceeded during the operation.</description>
        </listheader>
        <listheader>
          <description>0x402</description>
          <description>An unknown error occurred. This is typically due to an invalid path in the source or destination. This error does not occur on Windows Vista and later.</description>
        </listheader>
        <listheader>
          <description>ERRORONDEST</description>
          <description>0x10000</description>
          <description>An unspecified error occurred on the destination.</description>
        </listheader>
        <listheader>
          <description>DE_ROOTDIR | ERRORONDEST</description>
          <description>0x10074</description>
          <description>Destination is a root directory and cannot be renamed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHFreeNameMappings">
    <summary>Frees a file name mapping object that was retrieved by the <see cref="SHFileOperation" /> function.</summary>
    <param name="hNameMappings">A handle to the file name mapping object to be freed.</param>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceEx">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceExA">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceExW">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceEx">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceExA">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDiskFreeSpaceExW">
    <summary>Retrieves disk space information for a disk volume.</summary>
    <param name="pszDirectoryName">A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use <b>NULL</b> to represent the current drive.</param>
    <param name="pulFreeBytesAvailableToCaller">Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume.</param>
    <param name="pulTotalNumberOfBytes">Pointer to a value that receives the total size of the volume, in bytes.</param>
    <param name="pulTotalNumberOfFreeBytes">Pointer to a value that receives the number of bytes of free space on the volume.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.SHGetDriveMedia">
    <summary>Returns the type of media that is in the given drive.</summary>
    <param name="pszDrive">The drive in which to check the media type.</param>
    <param name="pdwMediaContent">A pointer to the type of media in the given drive. A combination of <see cref="ARCONTENT" /> flags.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetFileInfo">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFileInfoA">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFileInfoW">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFileInfo">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
      <h5>- uFlags.SHGFI_ADDOVERLAYS (0x000000020)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_ATTRIBUTES (0x000000800)</h5>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h5>- uFlags.SHGFI_ATTR_SPECIFIED (0x000020000)</h5>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h5>- uFlags.SHGFI_DISPLAYNAME (0x000000200)</h5>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h5>- uFlags.SHGFI_EXETYPE (0x000002000)</h5>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h5>- uFlags.SHGFI_ICON (0x000000100)</h5>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_ICONLOCATION (0x000001000)</h5>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_LARGEICON (0x000000000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_LINKOVERLAY (0x000008000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OPENICON (0x000000002)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OVERLAYINDEX (0x000000040)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h5>- uFlags.SHGFI_PIDL (0x000000008)</h5>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h5>- uFlags.SHGFI_SELECTED (0x000010000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SHELLICONSIZE (0x000000004)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SMALLICON (0x000000001)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SYSICONINDEX (0x000004000)</h5>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h5>- uFlags.SHGFI_TYPENAME (0x000000400)</h5>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h5>- uFlags.SHGFI_USEFILEATTRIBUTES (0x000000010)</h5>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFileInfoA">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
      <h5>- uFlags.SHGFI_ADDOVERLAYS (0x000000020)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_ATTRIBUTES (0x000000800)</h5>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h5>- uFlags.SHGFI_ATTR_SPECIFIED (0x000020000)</h5>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h5>- uFlags.SHGFI_DISPLAYNAME (0x000000200)</h5>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h5>- uFlags.SHGFI_EXETYPE (0x000002000)</h5>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h5>- uFlags.SHGFI_ICON (0x000000100)</h5>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_ICONLOCATION (0x000001000)</h5>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_LARGEICON (0x000000000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_LINKOVERLAY (0x000008000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OPENICON (0x000000002)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OVERLAYINDEX (0x000000040)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h5>- uFlags.SHGFI_PIDL (0x000000008)</h5>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h5>- uFlags.SHGFI_SELECTED (0x000010000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SHELLICONSIZE (0x000000004)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SMALLICON (0x000000001)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SYSICONINDEX (0x000004000)</h5>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h5>- uFlags.SHGFI_TYPENAME (0x000000400)</h5>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h5>- uFlags.SHGFI_USEFILEATTRIBUTES (0x000000010)</h5>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetFileInfoW">
    <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
    <param name="pszPath">
      <para>A pointer to a <b>null</b>-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_PIDL</b> flag, this parameter must be the address of an <see cref="ITEMIDLIST" /> (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
      <para>If the <i>uFlags</i> parameter includes the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the <i>dwFileAttributes</i> parameter. This allows you to obtain information about a file type by passing just the extension for <i>pszPath</i> and passing <b>FILE_ATTRIBUTE_NORMAL</b> in <i>dwFileAttributes</i>.</para>
      <para>This string can use either short (the 8.3 form) or long file names.</para>
    </param>
    <param name="dwFileAttributes">A combination of one or more <a href="https://docs.microsoft.com//windows/desktop/FileIO/retrieving-and-changing-file-attributes">file attribute flags</a> (FILE_ATTRIBUTE_ values as defined in Winnt.h). If <i>uFlags</i> does not include the <b>SHGFI_USEFILEATTRIBUTES</b> flag, this parameter is ignored.</param>
    <param name="psfi">Pointer to a <see cref="SHFILEINFO" /> structure to receive the file information.</param>
    <param name="cbFileInfo">The size, in bytes, of the <see cref="SHFILEINFO" /> structure pointed to by the <i>psfi</i> parameter.</param>
    <param name="uFlags">
      <para>The flags that specify the file information to retrieve. This parameter can be a combination of the following values.</para>
      <h4>SHGFI_ADDOVERLAYS (0x000000020)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_ATTR_SPECIFIED (0x000020000)</h4>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h4>SHGFI_ATTRIBUTES (0x000000800)</h4>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h4>SHGFI_DISPLAYNAME (0x000000200)</h4>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h4>SHGFI_EXETYPE (0x000002000)</h4>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h4>SHGFI_ICON (0x000000100)</h4>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h4>SHGFI_ICONLOCATION (0x000001000)</h4>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h4>SHGFI_LARGEICON (0x000000000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_LINKOVERLAY (0x000008000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_OPENICON (0x000000002)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_OVERLAYINDEX (0x000000040)</h4>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h4>SHGFI_PIDL (0x000000008)</h4>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h4>SHGFI_SELECTED (0x000010000)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SHELLICONSIZE (0x000000004)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h4>SHGFI_SMALLICON (0x000000001)</h4>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h4>SHGFI_SYSICONINDEX (0x000004000)</h4>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h4>SHGFI_TYPENAME (0x000000400)</h4>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h4>SHGFI_USEFILEATTRIBUTES (0x000000010)</h4>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
      <h5>- uFlags.SHGFI_ADDOVERLAYS (0x000000020)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Apply the appropriate overlays to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_ATTRIBUTES (0x000000800)</h5>
      <para>Retrieve the item attributes. The attributes are copied to the <b>dwAttributes</b> member of the structure specified in the <i>psfi</i> parameter. These are the same attributes that are obtained from <see cref="IShellFolder.GetAttributesOf" />.</para>
      <h5>- uFlags.SHGFI_ATTR_SPECIFIED (0x000020000)</h5>
      <para>Modify <b>SHGFI_ATTRIBUTES</b> to indicate that the <b>dwAttributes</b> member of the <see cref="SHFILEINFO" /> structure at <i>psfi</i> contains the specific attributes that are desired. These attributes are passed to <see cref="IShellFolder.GetAttributesOf" />. If this flag is not specified, 0xFFFFFFFF is passed to <b>IShellFolder.GetAttributesOf</b>, requesting all attributes. This flag cannot be specified with the <b>SHGFI_ICON</b> flag.</para>
      <h5>- uFlags.SHGFI_DISPLAYNAME (0x000000200)</h5>
      <para>Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the <b>szDisplayName</b> member of the structure specified in <i>psfi</i>. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.</para>
      <h5>- uFlags.SHGFI_EXETYPE (0x000002000)</h5>
      <para>Retrieve the type of the executable file if <i>pszPath</i> identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</para>
      <h5>- uFlags.SHGFI_ICON (0x000000100)</h5>
      <para>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <b>hIcon</b> member of the structure specified by <i>psfi</i>, and the index is copied to the <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_ICONLOCATION (0x000001000)</h5>
      <para>Retrieve the name of the file that contains the icon representing the file specified by <i>pszPath</i>, as returned by the <see cref="IExtractIcon.GetIconLocation" /> method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the <b>szDisplayName</b> member of the structure specified by <i>psfi</i>. The icon's index is copied to that structure's <b>iIcon</b> member.</para>
      <h5>- uFlags.SHGFI_LARGEICON (0x000000000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's large icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_LINKOVERLAY (0x000008000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to add the link overlay to the file's icon. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OPENICON (0x000000002)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's open icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_OVERLAYINDEX (0x000000040)</h5>
      <para>
        <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a>. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the <b>iIcon</b> member of the structure specified by <i>psfi</i>. This flag requires that the <b>SHGFI_ICON</b> be set as well.</para>
      <h5>- uFlags.SHGFI_PIDL (0x000000008)</h5>
      <para>Indicate that <i>pszPath</i> is the address of an <see cref="ITEMIDLIST" /> structure rather than a path name.</para>
      <h5>- uFlags.SHGFI_SELECTED (0x000010000)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to blend the file's icon with the system highlight color. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SHELLICONSIZE (0x000000004)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <b>SHGFI_ICON</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SMALLICON (0x000000001)</h5>
      <para>Modify <b>SHGFI_ICON</b>, causing the function to retrieve the file's small icon. Also used to modify <b>SHGFI_SYSICONINDEX</b>, causing the function to return the handle to the system image list that contains small icon images. The <b>SHGFI_ICON</b> and/or <b>SHGFI_SYSICONINDEX</b> flag must also be set.</para>
      <h5>- uFlags.SHGFI_SYSICONINDEX (0x000004000)</h5>
      <para>Retrieve the index of a system image list icon. If successful, the index is copied to the <b>iIcon</b> member of <i>psfi</i>. The return value is a handle to the system image list. Only those images whose indices are successfully copied to <b>iIcon</b> are valid. Attempting to access other images in the system image list will result in undefined behavior.</para>
      <h5>- uFlags.SHGFI_TYPENAME (0x000000400)</h5>
      <para>Retrieve the string that describes the file's type. The string is copied to the <b>szTypeName</b> member of the structure specified in <i>psfi</i>.</para>
      <h5>- uFlags.SHGFI_USEFILEATTRIBUTES (0x000000010)</h5>
      <para>Indicates that the function should not attempt to access the file specified by <i>pszPath</i>. Rather, it should act as if the file specified by <i>pszPath</i> exists with the file attributes passed in <i>dwFileAttributes</i>. This flag cannot be combined with the <b>SHGFI_ATTRIBUTES</b>, <b>SHGFI_EXETYPE</b>, or <b>SHGFI_PIDL</b> flags.</para>
    </param>
    <returns>
      <para>Returns a value whose meaning depends on the <i>uFlags</i> parameter.</para>
      <para>If <i>uFlags</i> does not contain <b>SHGFI_EXETYPE</b> or <b>SHGFI_SYSICONINDEX</b>, the return value is nonzero if successful, or zero otherwise.</para>
      <para>If <i>uFlags</i> contains the <b>SHGFI_EXETYPE</b> flag, the return value specifies the type of the executable file. It will be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Nonexecutable file or an error condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = NE or PE and HIWORD = Windows version</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Windows application.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = MZ and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>MS-DOS .exe or .com file</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LOWORD = PE and HIWORD = 0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Console application or .bat file</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHGetImageList">
    <summary>Retrieves an image list.</summary>
    <param name="iImageList">
      <para>The image type contained in the list. One of the following values:</para>
      <h4>SHIL_LARGE (0x0)</h4>
      <para>0x0. The image size is normally 32x32 pixels. However, if the <b>Use large icons</b> option is selected from the <b>Effects</b> section of the <b>Appearance</b> tab in <b>Display Properties</b>, the image is 48x48 pixels.</para>
      <h4>SHIL_SMALL (0x1)</h4>
      <para>0x1. These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.</para>
      <h4>SHIL_EXTRALARGE (0x2)</h4>
      <para>0x2. These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.</para>
      <h4>SHIL_SYSSMALL (0x3)</h4>
      <para>0x3. These images are the size specified by <see cref="GetSystemMetrics" /> called with <b>SM_CXSMICON</b> and <b>GetSystemMetrics</b> called with <b>SM_CYSMICON</b>.</para>
      <h4>SHIL_JUMBO (0x4)</h4>
      <para>0x4. <b>Windows Vista and later.</b> The image is normally 256x256 pixels.</para>
      <h4>SHIL_LAST</h4>
      <para>The largest valid flag value, for validation purposes.</para>
    </param>
    <param name="riid">Reference to the image list interface identifier, normally IID_IImageList.</param>
    <param name="ppvObj">When this method returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IImageList" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetLocalizedName">
    <summary>Retrieves the localized name of a file in a Shell folder.</summary>
    <param name="pszPath">A pointer to a string that specifies the fully qualified path of the file.</param>
    <param name="pszResModule">When this function returns, contains a pointer to a string resource that specifies the localized version of the file name.</param>
    <param name="cch">When this function returns, contains the size of the string, in <b>WCHARs</b>, at <i>pszResModule</i>.</param>
    <param name="pidsRes">When this function returns, contains a pointer to the ID of the localized file name in the resource file.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfo">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfoA">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfoW">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfo">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
      <h5>- uFlags.SHGNLI_NOLNK (0x000000008)</h5>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h5>- uFlags.SHGNLI_NOLOCNAME (0x000000010)</h5>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h5>- uFlags.SHGNLI_NOUNIQUE (0x000000002)</h5>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h5>- uFlags.SHGNLI_PIDL (0x000000001)</h5>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h5>- uFlags.SHGNLI_PREFIXNAME (0x000000004)</h5>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h5>- uFlags.SHGNLI_USEURLEXT (0x000000020)</h5>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfoA">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
      <h5>- uFlags.SHGNLI_NOLNK (0x000000008)</h5>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h5>- uFlags.SHGNLI_NOLOCNAME (0x000000010)</h5>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h5>- uFlags.SHGNLI_NOUNIQUE (0x000000002)</h5>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h5>- uFlags.SHGNLI_PIDL (0x000000001)</h5>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h5>- uFlags.SHGNLI_PREFIXNAME (0x000000004)</h5>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h5>- uFlags.SHGNLI_USEURLEXT (0x000000020)</h5>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetNewLinkInfoW">
    <summary>Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.</summary>
    <param name="pszLinkTo">A pointer to the path and file name of the shortcut's target. If <i>uFlags</i> does not contain the <b>SHGNLI_PIDL</b> value, this parameter is the address of a null-terminated string that contains the target. If <i>uFlags</i> contains the <b>SHGNLI_PIDL</b> value, this parameter is a PIDL that represents the target.</param>
    <param name="pszDir">A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created.</param>
    <param name="pszName">A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size.</param>
    <param name="pfMustCopy">The address of a <b>BOOL</b> value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in <i>pszLinkTo</i> specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied.</param>
    <param name="uFlags">
      <para>The options for the function. This can be zero or a combination of the following values.</para>
      <h4>SHGNLI_PIDL (0x000000001)</h4>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h4>SHGNLI_NOUNIQUE (0x000000002)</h4>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h4>SHGNLI_PREFIXNAME (0x000000004)</h4>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h4>SHGNLI_NOLNK (0x000000008)</h4>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h4>SHGNLI_NOLOCNAME (0x000000010)</h4>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h4>SHGNLI_USEURLEXT (0x000000020)</h4>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
      <h5>- uFlags.SHGNLI_NOLNK (0x000000008)</h5>
      <para>0x000000008. <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/bb776779(v=vs.85)">Version 5.0</a> Do not add the .lnk file name extension. You must set the <b>_WIN32_IE</b> macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.</para>
      <h5>- uFlags.SHGNLI_NOLOCNAME (0x000000010)</h5>
      <para>0x000000010. <b>Windows Vista and later</b>. Use the non-localized parsing name of the target pointed to by <i>pszLinkTo</i> as the name of the shortcut file. If this flag is not set, the localized name is used.</para>
      <h5>- uFlags.SHGNLI_NOUNIQUE (0x000000002)</h5>
      <para>0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.</para>
      <h5>- uFlags.SHGNLI_PIDL (0x000000001)</h5>
      <para>0x000000001. The target pointed to by <i>pszLinkTo</i> is a PIDL that represents the target. If this flag is not included, <i>pszLinkTo</i> is regarded as the address of a string that contains the path and file name of the target.</para>
      <h5>- uFlags.SHGNLI_PREFIXNAME (0x000000004)</h5>
      <para>0x000000004. The created name will be preceded by the string "Shortcut to ".</para>
      <h5>- uFlags.SHGNLI_USEURLEXT (0x000000020)</h5>
      <para>0x000000020. <b>Windows 7 and later</b>. Append a .url file name extension (rather than .lnk) to the name pointed to by <i>pszName</i>. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHGetPropertyStoreForWindow">
    <summary>Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.</summary>
    <param name="hwnd">A handle to the window whose properties are being retrieved.</param>
    <param name="riid">A reference to the IID of the property store object to retrieve through <i>ppv</i>. This is typically IID_IPropertyStore.</param>
    <param name="ppv">When this function returns, contains the interface pointer requested in <i>riid</i>. This is typically <see cref="IPropertyStore" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetStockIconInfo">
    <summary>Retrieves information about system-defined Shell icons.</summary>
    <param name="siid">One of the values from the <see cref="SHSTOCKICONID" /> enumeration that specifies which icon should be retrieved.</param>
    <param name="uFlags">
      <para>A combination of zero or more of the following flags that specify which information is requested.</para>
      <h4>SHGSI_ICONLOCATION</h4>
      <para>The <b>szPath</b> and <b>iIcon</b> members of the <see cref="SHSTOCKICONINFO" /> structure receive the path and icon index of the requested icon, in a format suitable for passing to the <see cref="ExtractIcon" /> function. The numerical value of this flag is zero, so you always get the icon location regardless of other flags.</para>
      <h4>SHGSI_ICON</h4>
      <para>The <b>hIcon</b> member of the <see cref="SHSTOCKICONINFO" /> structure receives a handle to the specified icon.</para>
      <h4>SHGSI_SYSICONINDEX</h4>
      <para>The <b>iSysImageImage</b> member of the <see cref="SHSTOCKICONINFO" /> structure receives the index of the specified icon in the system imagelist.</para>
      <h4>SHGSI_LINKOVERLAY</h4>
      <para>Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.</para>
      <h4>SHGSI_SELECTED</h4>
      <para>Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.</para>
      <h4>SHGSI_LARGEICON</h4>
      <para>Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the SM_CXICON and SM_CYICON system metrics.</para>
      <h4>SHGSI_SMALLICON</h4>
      <para>Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the SM_CXSMICON and SM_CYSMICON system metrics.</para>
      <h4>SHGSI_SHELLICONSIZE</h4>
      <para>Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than the sizes specified by the system metrics.</para>
    </param>
    <param name="psii">A pointer to a <see cref="SHSTOCKICONINFO" /> structure. When this function is called, the <b>cbSize</b> member of this structure needs to be set to the size of the <b>SHSTOCKICONINFO</b> structure. When this function returns, contains a pointer to a <b>SHSTOCKICONINFO</b> structure that contains the requested information.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetUnreadMailCount">
    <summary>Retrieves a specified user's unread message count for any or all email accounts.</summary>
    <param name="hKeyUser">A valid HKEY for a given user. This parameter should be <b>NULL</b> if the function is called in a user's environment, in which case <b>HKEY_CURRENT_USER</b> is used. This parameter should be <b>NULL</b> if the function is called from the SYSTEM context, in which case <b>HKEY_USERS</b>\<i>{SID}</i> is used.</param>
    <param name="pszMailAddress">A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is <b>NULL</b>, <i>pdwCount</i> returns the total count of unread messages for all accounts owned by the designated user.</param>
    <param name="pdwCount">Pointer to a DWORD value which receives the unread message count.</param>
    <param name="pFileTime">A pointer to a <see cref="FILETIME" /> structure. The use of this parameter is determined by whether <i>pszMailAddress</i> is <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If <i>pszMailAddress</i> is not <b>NULL</b>, then this parameter is treated as an [out] parameter, which points to a <b>FILETIME</b> structure into which the function places the <b>timestamp</b> of the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account.</param>
    <param name="pszShellExecuteCommand">A pointer to a string that returns the ShellExecute command statement passed into the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account. This command string starts the email application that owns the account referenced by <i>pszMailAddress</i>. If the ShellExecute command is not required, this parameter can be <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, this parameter is ignored and must be <b>NULL</b>.</param>
    <param name="cchShellExecuteCommand">The maximum size, in characters, of the ShellExecute command buffer pointed to by <i>pszShellExecuteCommand</i>. This parameter must be zero for total counts when <i>pszMailAddress</i> is <b>NULL</b>. It can also be <b>NULL</b> whenever the ShellExecute command string is not required.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetUnreadMailCountA">
    <summary>Retrieves a specified user's unread message count for any or all email accounts.</summary>
    <param name="hKeyUser">A valid HKEY for a given user. This parameter should be <b>NULL</b> if the function is called in a user's environment, in which case <b>HKEY_CURRENT_USER</b> is used. This parameter should be <b>NULL</b> if the function is called from the SYSTEM context, in which case <b>HKEY_USERS</b>\<i>{SID}</i> is used.</param>
    <param name="pszMailAddress">A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is <b>NULL</b>, <i>pdwCount</i> returns the total count of unread messages for all accounts owned by the designated user.</param>
    <param name="pdwCount">Pointer to a DWORD value which receives the unread message count.</param>
    <param name="pFileTime">A pointer to a <see cref="FILETIME" /> structure. The use of this parameter is determined by whether <i>pszMailAddress</i> is <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If <i>pszMailAddress</i> is not <b>NULL</b>, then this parameter is treated as an [out] parameter, which points to a <b>FILETIME</b> structure into which the function places the <b>timestamp</b> of the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account.</param>
    <param name="pszShellExecuteCommand">A pointer to a string that returns the ShellExecute command statement passed into the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account. This command string starts the email application that owns the account referenced by <i>pszMailAddress</i>. If the ShellExecute command is not required, this parameter can be <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, this parameter is ignored and must be <b>NULL</b>.</param>
    <param name="cchShellExecuteCommand">The maximum size, in characters, of the ShellExecute command buffer pointed to by <i>pszShellExecuteCommand</i>. This parameter must be zero for total counts when <i>pszMailAddress</i> is <b>NULL</b>. It can also be <b>NULL</b> whenever the ShellExecute command string is not required.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetUnreadMailCount">
    <summary>Retrieves a specified user's unread message count for any or all email accounts.</summary>
    <param name="hKeyUser">A valid HKEY for a given user. This parameter should be <b>NULL</b> if the function is called in a user's environment, in which case <b>HKEY_CURRENT_USER</b> is used. This parameter should be <b>NULL</b> if the function is called from the SYSTEM context, in which case <b>HKEY_USERS</b>\<i>{SID}</i> is used.</param>
    <param name="pszMailAddress">A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is <b>NULL</b>, <i>pdwCount</i> returns the total count of unread messages for all accounts owned by the designated user.</param>
    <param name="pdwCount">Pointer to a DWORD value which receives the unread message count.</param>
    <param name="pFileTime">A pointer to a <see cref="FILETIME" /> structure. The use of this parameter is determined by whether <i>pszMailAddress</i> is <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If <i>pszMailAddress</i> is not <b>NULL</b>, then this parameter is treated as an [out] parameter, which points to a <b>FILETIME</b> structure into which the function places the <b>timestamp</b> of the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account.</param>
    <param name="pszShellExecuteCommand">A pointer to a string that returns the ShellExecute command statement passed into the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account. This command string starts the email application that owns the account referenced by <i>pszMailAddress</i>. If the ShellExecute command is not required, this parameter can be <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, this parameter is ignored and must be <b>NULL</b>.</param>
    <param name="cchShellExecuteCommand">The maximum size, in characters, of the ShellExecute command buffer pointed to by <i>pszShellExecuteCommand</i>. This parameter must be zero for total counts when <i>pszMailAddress</i> is <b>NULL</b>. It can also be <b>NULL</b> whenever the ShellExecute command string is not required.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHGetUnreadMailCountW">
    <summary>Retrieves a specified user's unread message count for any or all email accounts.</summary>
    <param name="hKeyUser">A valid HKEY for a given user. This parameter should be <b>NULL</b> if the function is called in a user's environment, in which case <b>HKEY_CURRENT_USER</b> is used. This parameter should be <b>NULL</b> if the function is called from the SYSTEM context, in which case <b>HKEY_USERS</b>\<i>{SID}</i> is used.</param>
    <param name="pszMailAddress">A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is <b>NULL</b>, <i>pdwCount</i> returns the total count of unread messages for all accounts owned by the designated user.</param>
    <param name="pdwCount">Pointer to a DWORD value which receives the unread message count.</param>
    <param name="pFileTime">A pointer to a <see cref="FILETIME" /> structure. The use of this parameter is determined by whether <i>pszMailAddress</i> is <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If <i>pszMailAddress</i> is not <b>NULL</b>, then this parameter is treated as an [out] parameter, which points to a <b>FILETIME</b> structure into which the function places the <b>timestamp</b> of the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account.</param>
    <param name="pszShellExecuteCommand">A pointer to a string that returns the ShellExecute command statement passed into the last <see cref="SHSetUnreadMailCount" /> call for the specified user and email account. This command string starts the email application that owns the account referenced by <i>pszMailAddress</i>. If the ShellExecute command is not required, this parameter can be <b>NULL</b>. If <i>pszMailAddress</i> is <b>NULL</b>, this parameter is ignored and must be <b>NULL</b>.</param>
    <param name="cchShellExecuteCommand">The maximum size, in characters, of the ShellExecute command buffer pointed to by <i>pszShellExecuteCommand</i>. This parameter must be zero for total counts when <i>pszMailAddress</i> is <b>NULL</b>. It can also be <b>NULL</b> whenever the ShellExecute command string is not required.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommand">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommandA">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommandW">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommand">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <para>
        <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</para>
      <h5>- uAction.PRINTACTION_DOCUMENTDEFAULTS (6)</h5>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALL (2)</h5>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALLLINK (3)</h5>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h5>- uAction.PRINTACTION_OPEN (0)</h5>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_OPENNETPRN (5)</h5>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_PROPERTIES (1)</h5>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h5>- uAction.PRINTACTION_SERVERPROPERTIES (7)</h5>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_TESTPAGE (4)</h5>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommandA">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <para>
        <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</para>
      <h5>- uAction.PRINTACTION_DOCUMENTDEFAULTS (6)</h5>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALL (2)</h5>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALLLINK (3)</h5>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h5>- uAction.PRINTACTION_OPEN (0)</h5>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_OPENNETPRN (5)</h5>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_PROPERTIES (1)</h5>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h5>- uAction.PRINTACTION_SERVERPROPERTIES (7)</h5>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_TESTPAGE (4)</h5>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHInvokePrinterCommandW">
    <summary>
      <para>Executes a command on a printer object.</para>
      <div>
        <b>Note</b>  This function has been deprecated as of Windows Vista. It is recommended that, in its place, you invoke verbs on printers through <see cref="IContextMenu" /> or <see cref="ShellExecute" />.</div>
    </summary>
    <param name="hwnd">The handle of the parent window of any windows or dialog boxes that are created during the operation.</param>
    <param name="uAction">
      <para>The type of printer operation to perform. One of the following values:</para>
      <h4>PRINTACTION_OPEN (0)</h4>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_PROPERTIES (1)</h4>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h4>PRINTACTION_NETINSTALL (2)</h4>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_NETINSTALLLINK (3)</h4>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h4>PRINTACTION_TESTPAGE (4)</h4>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_OPENNETPRN (5)</h4>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_DOCUMENTDEFAULTS (6)</h4>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h4>PRINTACTION_SERVERPROPERTIES (7)</h4>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <param name="lpBuf1">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="lpBuf2">Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of <i>uAction</i>.</param>
    <param name="fModal">
      <para>
        <b>TRUE</b> to specify that <b>SHInvokePrinterCommand</b> should not return until the command is completed; <b>FALSE</b> if the function should return as soon as the command is initialized.</para>
      <h5>- uAction.PRINTACTION_DOCUMENTDEFAULTS (6)</h5>
      <para>0x6. Display the default document properties for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALL (2)</h5>
      <para>0x2. Install the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_NETINSTALLLINK (3)</h5>
      <para>0x3. Create a shortcut to the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.</para>
      <h5>- uAction.PRINTACTION_OPEN (0)</h5>
      <para>0x0. Open the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_OPENNETPRN (5)</h5>
      <para>0x5. Open the network printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_PROPERTIES (1)</h5>
      <para>0x1. Display the property pages for the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter can be <b>NULL</b> or can name a specific property sheet to display, either by name or number. If the high <b>WORD</b> of <i>lpBuf2</i> is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, <i>lpBuf2</i> is seen as the zero-based index of the property sheet to open.</para>
      <h5>- uAction.PRINTACTION_SERVERPROPERTIES (7)</h5>
      <para>0x7. Display the properties for the printer server specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
      <h5>- uAction.PRINTACTION_TESTPAGE (4)</h5>
      <para>0x4. Print a test page on the printer specified by <i>lpBuf1</i>. The <i>lpBuf2</i> parameter is ignored.</para>
    </param>
    <returns>Returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SHIsFileAvailableOffline">
    <summary>Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.</summary>
    <param name="pwszPath">A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If <i>pszPath</i> is not a network path, the function returns E_INVALIDARG.</param>
    <param name="pdwStatus">
      <para>A pointer to a variable of type <b>DWORD</b> that receives one or more of the following flags if the function succeeds.</para>
      <h4>OFFLINE_STATUS_LOCAL (0x01)</h4>
      <para>If the file is open, it is open in the cache.</para>
      <h4>OFFLINE_STATUS_REMOTE (0x02)</h4>
      <para>If the file is open, it is open on the server.</para>
      <h4>OFFLINE_STATUS_INCOMPLETE (0x04)</h4>
      <para>The local copy is currently incomplete. The file cannot be opened in offline mode until it has been synchronized.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file or directory is cached. It is available offline unless <b>OFFLINE_STATUS_INCOMPLETE</b> is set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The path is invalid or not a network path. The file or directory is not cached.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The file or directory is not cached.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHLoadNonloadedIconOverlayIdentifiers">
    <summary>Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.</summary>
    <returns>Always returns S_OK.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBin">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBinA">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBinW">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBin">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBinA">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryRecycleBinW">
    <summary>Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.</summary>
    <param name="pszRootPath">The address of a <b>null</b>-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\Windows\System...).</param>
    <param name="pSHQueryRBInfo">The address of a <see cref="SHQUERYRBINFO" /> structure that receives the Recycle Bin information. The <b>cbSize</b> member of the structure must be set to the size of the structure before calling this API.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHQueryUserNotificationState">
    <summary>Checks the state of the computer for the current user to determine whether sending a notification is appropriate.</summary>
    <param name="pquns">When this function returns, contains a pointer to one of the values of the <see cref="QUERY_USER_NOTIFICATION_STATE" /> enumeration.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHRemoveLocalizedName">
    <summary>Removes the localized name of a file in a Shell folder.</summary>
    <param name="pszPath">A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHSetLocalizedName">
    <summary>Sets the localized name of a file in a Shell folder.</summary>
    <param name="pszPath">A pointer to a string that specifies the fully qualified path of the target file.</param>
    <param name="pszResModule">A pointer to a string resource that specifies the localized version of the file name.</param>
    <param name="idsRes">An integer ID that specifies the localized file name in the string resource.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.SHSetUnreadMailCount">
    <summary>Stores the current user's unread message count for a specified email account in the registry.</summary>
    <param name="pszMailAddress">A pointer to a string in Unicode that contains the current user's full email address.</param>
    <param name="dwCount">The number of unread messages.</param>
    <param name="pszShellExecuteCommand">A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by <i>pszMailAddress</i>.</param>
    <returns>
      <para>
        <b>HRESULT</b>, which includes the following possible values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid string argument in either the <i>pszMailAddress</i> or <i>pszShellExecuteCommand</i> parameters.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetUnreadMailCountA">
    <summary>Stores the current user's unread message count for a specified email account in the registry.</summary>
    <param name="pszMailAddress">A pointer to a string in Unicode that contains the current user's full email address.</param>
    <param name="dwCount">The number of unread messages.</param>
    <param name="pszShellExecuteCommand">A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by <i>pszMailAddress</i>.</param>
    <returns>
      <para>
        <b>HRESULT</b>, which includes the following possible values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid string argument in either the <i>pszMailAddress</i> or <i>pszShellExecuteCommand</i> parameters.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetUnreadMailCount">
    <summary>Stores the current user's unread message count for a specified email account in the registry.</summary>
    <param name="pszMailAddress">A pointer to a string in Unicode that contains the current user's full email address.</param>
    <param name="dwCount">The number of unread messages.</param>
    <param name="pszShellExecuteCommand">A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by <i>pszMailAddress</i>.</param>
    <returns>
      <para>
        <b>HRESULT</b>, which includes the following possible values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid string argument in either the <i>pszMailAddress</i> or <i>pszShellExecuteCommand</i> parameters.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHSetUnreadMailCountW">
    <summary>Stores the current user's unread message count for a specified email account in the registry.</summary>
    <param name="pszMailAddress">A pointer to a string in Unicode that contains the current user's full email address.</param>
    <param name="dwCount">The number of unread messages.</param>
    <param name="pszShellExecuteCommand">A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by <i>pszMailAddress</i>.</param>
    <returns>
      <para>
        <b>HRESULT</b>, which includes the following possible values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid string argument in either the <i>pszMailAddress</i> or <i>pszShellExecuteCommand</i> parameters.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SHTestTokenMembership">
    <summary>Uses <see cref="CheckTokenMembership" /> to test whether the given token is a member of the local group with the specified RID.</summary>
    <param name="hToken">A handle to the token. This value can be <b>NULL</b>.</param>
    <param name="ulRID">The RID of the local group for which membership is tested.</param>
    <returns>Returns <b>TRUE</b> on success, <b>FALSE</b> on failure.</returns>
  </member>
</doc>