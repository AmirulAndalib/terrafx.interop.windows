<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.auxGetDevCaps">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsA">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsW">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCaps">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsA">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsW">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCaps">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsA">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetDevCapsW">
    <summary>
      <para>The <b>auxGetDevCaps</b> function retrieves the capabilities of a given auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Specify a valid device identifier (see the following comments section), or use the following constant:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>AUX_MAPPER</description>
          <description>Auxiliary audio mapper. The function returns an error if no auxiliary audio mapper is installed.</description>
        </item>
      </list>
    </param>
    <param name="pac">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbac">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The device identifier in <i>uDeviceID</i> varies from zero to one less than the number of devices present. AUX_MAPPER may also be used. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary output devices present in the system.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines auxGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetNumDevs">
    <summary>
      <para>The <b>auxGetNumDevs</b> function retrieves the number of auxiliary output devices present in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of device. A return value of zero means that no devices are present or that an error occurred.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxGetVolume">
    <summary>
      <para>The <b>auxGetVolume</b> function retrieves the current volume setting of the specified auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried.</para>
    </param>
    <param name="pdwVolume">
      <para>Pointer to a variable to be filled with the current volume setting. The low-order word of this location contains the left channel volume setting, and the high-order word contains the right channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of the specified location contains the volume level.</para>
      <para>The full 16-bit setting(s) set with the <a href="https://docs.microsoft.com//previous-versions/dd756717(v=vs.85)">auxSetVolume</a> function are returned, regardless of whether the device supports the full 16 bits of volume-level control.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Not all devices support volume control. To determine whether a device supports volume control, use the AUXCAPS_VOLUME flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure (filled by the <a href="https://docs.microsoft.com//previous-versions/dd756712(v=vs.85)">auxGetDevCaps</a> function).</para>
      <para>To determine whether a device supports volume control on both the left and right channels, use the AUXCAPS_LRVOLUME flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure (filled by <a href="https://docs.microsoft.com//previous-versions/dd756712(v=vs.85)">auxGetDevCaps</a>).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxOutMessage">
    <summary>
      <para>The <b>auxOutMessage</b> function sends a message to the given auxiliary output device. This function also performs error checking on the device identifier passed as part of the message.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to receive the message.</para>
    </param>
    <param name="uMsg">
      <para>Message to send.</para>
    </param>
    <param name="dw1">
      <para>Message parameter.</para>
    </param>
    <param name="dw2">
      <para>Message parameter.</para>
    </param>
    <returns>
      <para>Returns the message return value.</para>
    </returns>
    <remarks>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> and <b>auxOutMessage</b> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, or <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>,  <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> and  <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.auxSetVolume">
    <summary>
      <para>The <b>auxSetVolume</b> function sets the volume of the specified auxiliary output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the auxiliary output device to be queried. Device identifiers are determined implicitly from the number of devices present in the system. Device identifier values range from zero to one less than the number of devices present. Use the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function to determine the number of auxiliary devices in the system.</para>
    </param>
    <param name="dwVolume">
      <para>Specifies the new volume setting. The low-order word specifies the left-channel volume setting, and the high-order word specifies the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of <i>dwVolume</i> specifies the volume level, and the high-order word is ignored.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Not all devices support volume control. To determine whether the device supports volume control, use the AUXCAPS_VOLUME flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure (filled by the <a href="https://docs.microsoft.com//previous-versions/dd756712(v=vs.85)">auxGetDevCaps</a> function).</para>
      <para>To determine whether the device supports volume control on both the left and right channels, use the AUXCAPS_LRVOLUME flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd756711(v=vs.85)">AUXCAPS</a> structure (filled by <a href="https://docs.microsoft.com//previous-versions/dd756712(v=vs.85)">auxGetDevCaps</a>).</para>
      <para>Most devices do not support the full 16 bits of volume-level control and will use only the high-order bits of the requested volume setting. For example, for a device that supports 4 bits of volume control, requested volume level values of 0x4000, 0x4FFF, and 0x43BE will produce the same physical volume setting, 0x4000. The <a href="https://docs.microsoft.com//previous-versions/dd756714(v=vs.85)">auxGetVolume</a> function will return the full 16-bit setting set with <b>auxSetVolume</b>.</para>
      <para>Volume settings are interpreted logarithmically. This means the perceived volume increase is the same when increasing the volume level from 0x5000 to 0x6000 as it is from 0x4000 to 0x5000.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.MEVT_EVENTPARM">
    <summary>
      <para>The <b>MEVT_EVENTPARM</b> macro retrieves the event parameters or length from the value specified in the <b>dwEvent</b> member of a <a href="https://docs.microsoft.com//previous-versions/dd798448(v=vs.85)">MIDIEVENT</a> structure.</para>
    </summary>
    <param name="x">
      <para>Code for the MIDI event and the event parameters or length, as specified in the dwEvent member of the MIDIEVENT structure. <i></i></para>
    </param>
    <remarks>
      <para>The <b>MEVT_EVENTPARM</b> macro is defined as follows:</para>
      <code>
#define MEVT_EVENTPARM(x) ((DWORD) ((x)&amp;amp;amp;amp;amp;amp;0x00FFFFFFL))

</code>
    </remarks>
  </member>
  <member name="Windows.MEVT_EVENTTYPE">
    <summary>
      <para>The <b>MEVT_EVENTTYPE</b> macro retrieves the event type from the value specified in the <b>dwEvent</b> member of a <a href="https://docs.microsoft.com//previous-versions/dd798448(v=vs.85)">MIDIEVENT</a> structure.</para>
    </summary>
    <param name="x">
      <para>Code for the MIDI event and the event parameters or length, as specified in the dwEvent member of the MIDIEVENT structure. <i></i></para>
    </param>
    <remarks>
      <para>The <b>MEVT_EVENTTYPE</b> macro is defined as follows:</para>
      <code>
#define MEVT_EVENTTYPE(x) ((BYTE) (((x)&gt;&gt;24)&amp;amp;amp;amp;amp;amp;0xFF))

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-macros">MIDI Macros</seealso>
  </member>
  <member name="Windows.midiConnect">
    <summary>
      <para>The <b>midiConnect</b> function connects a MIDI input device to a MIDI thru or output device, or connects a MIDI thru device to a MIDI output device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to a MIDI input device or a MIDI thru device. (For thru devices, this handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.)</para>
    </param>
    <param name="hmo">
      <para>Handle to the MIDI output or thru device.</para>
    </param>
    <param name="pReserved">
      <para>Reserved; must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_NOTREADY</b>
            </para>
          </description>
          <description>
            <para>Specified input device is already connected to an output device.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>After calling this function, the MIDI input device receives event data in an MIM_DATA message whenever a message with the same event data is sent to the output device driver.</para>
      <para>A thru driver is a special form of MIDI output driver. The system will allow only one MIDI output device to be connected to a MIDI input device, but multiple MIDI output devices can be connected to a MIDI thru device. Whenever the given MIDI input device receives event data in an MIM_DATA message, a message with the same event data is sent to the given output device driver (or through the thru driver to the output drivers).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiDisconnect">
    <summary>
      <para>The <b>midiDisconnect</b> function disconnects a MIDI input device from a MIDI thru or output device, or disconnects a MIDI thru device from a MIDI output device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to a MIDI input device or a MIDI thru device.</para>
    </param>
    <param name="hmo">
      <para>Handle to the MIDI output device to be disconnected.</para>
    </param>
    <param name="pReserved">
      <para>Reserved; must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following:.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>MIDI input, output, and thru devices can be connected by using the <b>midiConnect</b> function. Thereafter, whenever the MIDI input device receives event data in an MIM_DATA message, a message with the same event data is sent to the output device driver (or through the thru driver to the output drivers).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInAddBuffer">
    <summary>
      <para>The <b>midiInAddBuffer</b> function sends an input buffer to a specified opened MIDI input device. This function is used for system-exclusive messages.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure that identifies the buffer.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by <i>lpMidiInHdr</i> is still in the queue.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIDIERR_UNPREPARED</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by <i>lpMidiInHdr</i> has not been prepared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the buffer is filled, it is sent back to the application.</para>
      <para>The buffer must be prepared by using the <a href="https://docs.microsoft.com//previous-versions/dd798459(v=vs.85)">midiInPrepareHeader</a> function before it is passed to the <b>midiInAddBuffer</b> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInClose">
    <summary>
      <para>The <b>midiInClose</b> function closes the specified MIDI input device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device. If the function is successful, the handle is no longer valid after the call to this function.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>Buffers are still in the queue.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there are input buffers that have been sent by using the <a href="https://docs.microsoft.com//previous-versions/dd798450(v=vs.85)">midiInAddBuffer</a> function and have not been returned to the application, the close operation will fail. To return all pending buffers through the callback function, use the <a href="https://docs.microsoft.com//previous-versions/dd798461(v=vs.85)">midiInReset</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCaps">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsA">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsW">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCaps">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsA">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsW">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCaps">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsA">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetDevCapsW">
    <summary>
      <para>The <b>midiInGetDevCaps</b> function determines the capabilities of a specified MIDI input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure that is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmic">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798451(v=vs.85)">MIDIINCAPS</a> structure. Only <i>cbMidiInCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiInCaps</i>. If <i>cbMidiInCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present on the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorText">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextA">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextW">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorText">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextA">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextW">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorText">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextA">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetErrorTextW">
    <summary>
      <para>The <b>midiInGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiInGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetID">
    <summary>
      <para>The <b>midiInGetID</b> function gets the device identifier for the given MIDI input device.</para>
      <para>This function is supported for backward compatibility. New applications can cast a handle of the device rather than retrieving the device identifier.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <param name="puDeviceID">
      <para>Pointer to a variable to be filled with the device identifier.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hwi</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInGetNumDevs">
    <summary>
      <para>The <b>midiInGetNumDevs</b> function retrieves the number of MIDI input devices in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of MIDI input devices present in the system. A return value of zero means that there are no devices (not that there is no error).</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInMessage">
    <summary>
      <para>The <b>midiInMessage</b> function sends a message to the MIDI device driver.</para>
    </summary>
    <param name="hmi">
      <para>Identifier of the MIDI device that receives the message. You must cast the device ID to the <b>HMIDIIN</b> handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.</para>
    </param>
    <param name="uMsg">
      <para>Message to send.</para>
    </param>
    <param name="dw1">
      <para>Message parameter.</para>
    </param>
    <param name="dw2">
      <para>Message parameter.</para>
    </param>
    <returns>
      <para>Returns the value returned by the audio device driver.</para>
    </returns>
    <remarks>
      <para>This function is used only for driver-specific messages that are not supported by the MIDI API.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <b>midiInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <b>midiInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <b>midiInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <b>midiInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd756716(v=vs.85)">auxOutMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <b>midiInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, or <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>,  <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> and  <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInOpen">
    <summary>
      <para>The <b>midiInOpen</b> function opens a specified MIDI input device.</para>
    </summary>
    <param name="phmi">
      <para>Pointer to an <b>HMIDIIN</b> handle. This location is filled with a handle identifying the opened MIDI input device. The handle is used to identify the device in calls to other MIDI input functions.</para>
    </param>
    <param name="uDeviceID">
      <para>Identifier of the MIDI input device to be opened.</para>
    </param>
    <param name="dwCallback">
      <para>Pointer to a callback function, a thread identifier, or a handle of a window called with information about incoming MIDI messages. For more information on the callback function, see <a href="https://docs.microsoft.com//previous-versions/dd798460(v=vs.85)">MidiInProc</a>.</para>
    </param>
    <param name="dwInstance">
      <para>User instance data passed to the callback function. This parameter is not used with window callback functions or threads.</para>
    </param>
    <param name="fdwOpen">
      <para>Callback flag for opening the device and, optionally, a status flag that helps regulate rapid data transfers. It can be the following values.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>CALLBACK_FUNCTION</description>
          <description>The <i>dwCallback</i> parameter is a callback procedure address.</description>
        </item>
        <item>
          <description>CALLBACK_NULL</description>
          <description>There is no callback mechanism. This value is the default setting.</description>
        </item>
        <item>
          <description>CALLBACK_THREAD</description>
          <description>The <i>dwCallback</i> parameter is a thread identifier.</description>
        </item>
        <item>
          <description>CALLBACK_WINDOW</description>
          <description>The <i>dwCallback</i> parameter is a window handle.</description>
        </item>
        <item>
          <description>MIDI_IO_STATUS</description>
          <description>When this parameter also specifies CALLBACK_FUNCTION, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-moredata">MIM_MOREDATA</a> messages are sent to the callback function as well as <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-data">MIM_DATA</a> messages. Or, if this parameter also specifies CALLBACK_WINDOW, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-moredata">MM_MIM_MOREDATA</a> messages are sent to the window as well as <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-data">MM_MIM_DATA</a> messages. This flag does not affect event or thread callbacks.</description>
        </item>
      </list>
      <para>Most applications that use a callback mechanism will specify CALLBACK_FUNCTION for this parameter.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following/</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_ALLOCATED</b>
            </para>
          </description>
          <description>
            <para>The specified resource is already allocated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>The flags specified by <i>dwFlags</i> are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI input devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function. The device identifier specified by <i>wDeviceID</i> varies from zero to one less than the number of devices present.</para>
      <para>If a window or thread is chosen to receive callback information, the following messages are sent to the window procedure or thread to indicate the progress of MIDI input: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-open">MM_MIM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-close">MM_MIM_CLOSE</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-data">MM_MIM_DATA</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-longdata">MM_MIM_LONGDATA</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-error">MM_MIM_ERROR</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-longerror">MM_MIM_LONGERROR</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mim-moredata">MM_MIM_MOREDATA</a>.</para>
      <para>If a function is chosen to receive callback information, the following messages are sent to the function to indicate the progress of MIDI input: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-open">MIM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-close">MIM_CLOSE</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-data">MIM_DATA</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-longdata">MIM_LONGDATA</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-error">MIM_ERROR</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-longerror">MIM_LONGERROR</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mim-moredata">MIM_MOREDATA</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInPrepareHeader">
    <summary>
      <para>The <b>midiInPrepareHeader</b> function prepares a buffer for MIDI input.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.
To get the device handle, call <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a>.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure that identifies the buffer to be prepared.</para>
      <para>Before calling the function, set the <b>lpData</b>, <b>dwBufferLength</b>, and <b>dwFlags</b> members of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure. The <b>dwFlags</b> member must be set to zero.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified address is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before you pass a MIDI data block to a device driver, you must prepare the buffer by passing it to the <b>midiInPrepareHeader</b> function. After the header has been prepared, do not modify the buffer. After the driver is done using the buffer, call the <a href="https://docs.microsoft.com//previous-versions/dd798464(v=vs.85)">midiInUnprepareHeader</a> function.</para>
      <para>The application can re-use the same buffer, or allocate multiple buffers and  call <b>midiInPrepareHeader</b> for each buffer. If you re-use the same buffer, it is not necessary to prepare the buffer each time. You can call  <b>midiInPrepareHeader</b> once at the beginning and then call <a href="https://docs.microsoft.com//previous-versions/dd798464(v=vs.85)">midiInUnprepareHeader</a> once at the end.</para>
      <para>Preparing a header that has already been prepared has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/allocating-and-preparing-midi-data-blocks">Allocating and Preparing MIDI Data Blocks</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/dd798464(v=vs.85)">midiInUnprepareHeader</seealso>
  </member>
  <member name="Windows.midiInReset">
    <summary>
      <para>The <b>midiInReset</b> function stops input on a given MIDI input device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function returns all pending input buffers to the callback function and sets the MHDR_DONE flag in the <b>dwFlags</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInStart">
    <summary>
      <para>The <b>midiInStart</b> function starts MIDI input on the specified MIDI input device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function resets the time stamp to zero; time stamp values for subsequently received messages are relative to the time that this function was called.</para>
      <para>All messages except system-exclusive messages are sent directly to the client when they are received. System-exclusive messages are placed in the buffers supplied by the <a href="https://docs.microsoft.com//previous-versions/dd798450(v=vs.85)">midiInAddBuffer</a> function. If there are no buffers in the queue, the system-exclusive data is thrown away without notification to the client and input continues. Buffers are returned to the client when they are full, when a complete system-exclusive message has been received, or when the <a href="https://docs.microsoft.com//previous-versions/dd798461(v=vs.85)">midiInReset</a> function is used. The <b>dwBytesRecorded</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure will contain the actual length of data received.</para>
      <para>Calling this function when input is already started has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInStop">
    <summary>
      <para>The <b>midiInStop</b> function stops MIDI input on the specified MIDI input device.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there are any system-exclusive messages or stream buffers in the queue, the current buffer is marked as done (the <b>dwBytesRecorded</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure will contain the actual length of data), but any empty buffers in the queue remain there and are not marked as done.</para>
      <para>Calling this function when input is not started has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiInUnprepareHeader">
    <summary>
      <para>The <b>midiInUnprepareHeader</b> function cleans up the preparation performed by the <a href="https://docs.microsoft.com//previous-versions/dd798459(v=vs.85)">midiInPrepareHeader</a> function.</para>
    </summary>
    <param name="hmi">
      <para>Handle to the MIDI input device.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure identifying the buffer to be cleaned up.</para>
    </param>
    <param name="cbmh">
      <para>Size of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by <i>lpMidiInHdr</i> is still in the queue.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is complementary to <a href="https://docs.microsoft.com//previous-versions/dd798459(v=vs.85)">midiInPrepareHeader</a>. You must use this function before freeing the buffer. After passing a buffer to the device driver by using the <a href="https://docs.microsoft.com//previous-versions/dd798450(v=vs.85)">midiInAddBuffer</a> function, you must wait until the driver is finished with the buffer before using <b>midiInUnprepareHeader</b>. Unpreparing a buffer that has not been prepared has no effect, and the function returns MMSYSERR_NOERROR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/allocating-and-preparing-midi-data-blocks">Allocating and Preparing MIDI Data Blocks</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutCacheDrumPatches">
    <summary>
      <para>The <b>midiOutCacheDrumPatches</b> function requests that an internal MIDI synthesizer device preload and cache a specified set of key-based percussion patches.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the opened MIDI output device. This device should be an internal MIDI synthesizer. This parameter can also be the handle of a MIDI stream, cast to <b>HMIDIOUT</b>.</para>
    </param>
    <param name="uPatch">
      <para>Drum patch number that should be used. This parameter should be set to zero to cache the default drum patch.</para>
    </param>
    <param name="pwkya">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/keyarray">KEYARRAY</a> array indicating the key numbers of the specified percussion patches to be cached or uncached.</para>
    </param>
    <param name="fuCache">
      <para>Options for the cache operation. It can be one of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIDI_CACHE_ALL</description>
          <description>Caches all of the specified patches. If they cannot all be cached, it caches none, clears the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/keyarray">KEYARRAY</a> array, and returns MMSYSERR_NOMEM.</description>
        </item>
        <item>
          <description>MIDI_CACHE_BESTFIT</description>
          <description>Caches all of the specified patches. If they cannot all be cached, it caches as many patches as possible, changes the KEYARRAY array to reflect which patches were cached, and returns MMSYSERR_NOMEM.</description>
        </item>
        <item>
          <description>MIDI_CACHE_QUERY</description>
          <description>Changes the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/keyarray">KEYARRAY</a> array to indicate which patches are currently cached.</description>
        </item>
        <item>
          <description>MIDI_UNCACHE</description>
          <description>Uncaches the specified patches and clears the KEYARRAY array.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>The flag specified by <i>wFlags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The array pointed to by the <i>lpKeyArray</i> array is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The device does not have enough memory to cache all of the requested patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The specified device does not support patch caching.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Some synthesizers are not capable of keeping all percussion patches loaded simultaneously. Caching patches ensures that the specified patches are available.</para>
      <para>Each element of the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/keyarray">KEYARRAY</a> array represents one of the 128 key-based percussion patches and has bits set for each of the 16 MIDI channels that use the particular patch. The least-significant bit represents physical channel 0, and the most-significant bit represents physical channel 15. For example, if the patch on key number 60 is used by physical channels 9 and 15, element 60 would be set to 0x8200.</para>
      <para>This function applies only to internal MIDI synthesizer devices. Not all internal synthesizers support patch caching. To see if a device supports patch caching, use the MIDICAPS_CACHE flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure filled by the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutCachePatches">
    <summary>
      <para>The <b>midiOutCachePatches</b> function requests that an internal MIDI synthesizer device preload and cache a specified set of patches.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the opened MIDI output device. This device must be an internal MIDI synthesizer. This parameter can also be the handle of a MIDI stream, cast to <b>HMIDIOUT</b>.</para>
    </param>
    <param name="uBank">
      <para>Bank of patches that should be used. This parameter should be set to zero to cache the default patch bank.</para>
    </param>
    <param name="pwpa">
      <para>Pointer to a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/patcharray">PATCHARRAY</a> array indicating the patches to be cached or uncached.</para>
    </param>
    <param name="fuCache">
      <para>Options for the cache operation. It can be one of the following flags.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIDI_CACHE_ALL</description>
          <description>Caches all of the specified patches. If they cannot all be cached, it caches none, clears the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/patcharray">PATCHARRAY</a> array, and returns MMSYSERR_NOMEM.</description>
        </item>
        <item>
          <description>MIDI_CACHE_BESTFIT</description>
          <description>Caches all of the specified patches. If they cannot all be cached, it caches as many patches as possible, changes the PATCHARRAY array to reflect which patches were cached, and returns MMSYSERR_NOMEM.</description>
        </item>
        <item>
          <description>MIDI_CACHE_QUERY</description>
          <description>Changes the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/patcharray">PATCHARRAY</a> array to indicate which patches are currently cached.</description>
        </item>
        <item>
          <description>MIDI_UNCACHE</description>
          <description>Uncaches the specified patches and clears the PATCHARRAY array.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>The flag specified by <i>wFlags</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The array pointed to by <i>lpPatchArray</i> is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The device does not have enough memory to cache all of the requested patches.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The specified device does not support patch caching.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Some synthesizers are not capable of keeping all patches loaded simultaneously and must load data from disk when they receive MIDI program change messages. Caching patches ensures that the specified patches are immediately available.</para>
      <para>Each element of the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/patcharray">PATCHARRAY</a> array represents one of the 128 patches and has bits set for each of the 16 MIDI channels that use the particular patch. The least-significant bit represents physical channel 0, and the most-significant bit represents physical channel 15 (0x0F). For example, if patch 0 is used by physical channels 0 and 8, element 0 would be set to 0x0101.</para>
      <para>This function applies only to internal MIDI synthesizer devices. Not all internal synthesizers support patch caching. To see if a device supports patch caching, use the MIDICAPS_CACHE flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure filled by the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutClose">
    <summary>
      <para>The <b>midiOutClose</b> function closes the specified MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. If the function is successful, the handle is no longer valid after the call to this function.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>Buffers are still in the queue.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there are output buffers that have been sent by using the <a href="https://docs.microsoft.com//previous-versions/dd798474(v=vs.85)">midiOutLongMsg</a> function and have not been returned to the application, the close operation will fail. To mark all pending buffers as being done, use the <a href="https://docs.microsoft.com//previous-versions/dd798479(v=vs.85)">midiOutReset</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCaps">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsA">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsW">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCaps">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsA">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsW">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCaps">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsA">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetDevCapsW">
    <summary>
      <para>The <b>midiOutGetDevCaps</b> function queries a specified MIDI output device to determine its capabilities.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device. The device identifier specified by this parameter varies from zero to one less than the number of devices present. The MIDI_MAPPER constant is also a valid device identifier.</para>
      <para>This parameter can also be a properly cast device handle.</para>
    </param>
    <param name="pmoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. This structure is filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbmoc">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798467(v=vs.85)">MIDIOUTCAPS</a> structure. Only <i>cbMidiOutCaps</i> bytes (or less) of information is copied to the location pointed to by <i>lpMidiOutCaps</i>. If <i>cbMidiOutCaps</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>The driver is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to load mapper string description.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorText">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextA">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextW">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorText">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextA">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextW">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorText">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextA">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetErrorTextW">
    <summary>
      <para>The <b>midiOutGetErrorText</b> function retrieves a textual description for an error identified by the specified error code.</para>
    </summary>
    <param name="mmrError">
      <para>Error code.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Length, in characters, of the buffer pointed to by <i>lpText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>The specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied, and the function returns MMSYSERR_NOERROR. All error descriptions are less than MAXERRORLENGTH characters long.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines midiOutGetErrorText as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetID">
    <summary>
      <para>The <b>midiOutGetID</b> function retrieves the device identifier for the given MIDI output device.</para>
      <para>This function is supported for backward compatibility. New applications can cast a handle of the device rather than retrieving the device identifier.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device.</para>
    </param>
    <param name="puDeviceID">
      <para>Pointer to a variable to be filled with the device identifier.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmo</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetNumDevs">
    <summary>
      <para>The <b>midiOutGetNumDevs</b> function retrieves the number of MIDI output devices present in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of MIDI output devices. A return value of zero means that there are no devices (not that there is no error).</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutGetVolume">
    <summary>
      <para>The <b>midiOutGetVolume</b> function retrieves the current volume setting of a MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to an open MIDI output device. This parameter can also contain the handle of a MIDI stream, as long as it is cast to <b>HMIDIOUT</b>. This parameter can also be a device identifier.</para>
    </param>
    <param name="pdwVolume">
      <para>Pointer to the location to contain the current volume setting. The low-order word of this location contains the left-channel volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of the specified location contains the mono volume level.</para>
      <para>Any value set by using the <a href="https://docs.microsoft.com//previous-versions/dd798480(v=vs.85)">midiOutSetVolume</a> function is returned, regardless of whether the device supports that value.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The function is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a device identifier is used, then the result of the <b>midiOutGetVolume</b> call and the information returned in <i>lpdwVolume</i> applies to all instances of the device. If a device handle is used, then the result and information returned applies only to the instance of the device referenced by the device handle.</para>
      <para>Not all devices support volume control. You can determine whether a device supports volume control by querying the device by using the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function and specifying the MIDICAPS_VOLUME flag.</para>
      <para>You can also determine whether the device supports volume control on both the left and right channels by querying the device by using the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function and specifying the MIDICAPS_LRVOLUME flag.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutLongMsg">
    <summary>
      <para>The <b>midiOutLongMsg</b> function sends a system-exclusive MIDI message to the specified MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to <b>HMIDIOUT</b>.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure that identifies the MIDI buffer.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_NOTREADY</b>
            </para>
          </description>
          <description>
            <para>The hardware is busy with other data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIDIERR_UNPREPARED</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by <i>lpMidiOutHdr</i> has not been prepared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before the buffer is passed to <b>midiOutLongMsg</b>, it must be prepared by using the <a href="https://docs.microsoft.com//previous-versions/dd798477(v=vs.85)">midiOutPrepareHeader</a> function. The MIDI output device driver determines whether the data is sent synchronously or asynchronously.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutMessage">
    <summary>
      <para>The <b>midiOutMessage</b> function sends a message to the MIDI device drivers. This function is used only for driver-specific messages that are not supported by the MIDI API.</para>
    </summary>
    <param name="hmo">
      <para>Identifier of the MIDI device that receives the message. You must cast the device ID to the <b>HMIDIOUT</b> handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.</para>
    </param>
    <param name="uMsg">
      <para>Message to send.</para>
    </param>
    <param name="dw1">
      <para>Message parameter.</para>
    </param>
    <param name="dw2">
      <para>Message parameter.</para>
    </param>
    <returns>
      <para>Returns the value returned by the audio device driver.</para>
    </returns>
    <remarks>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <b>midiOutMessage</b>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <b>midiOutMessage</b>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <b>midiOutMessage</b>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <b>midiOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd756716(v=vs.85)">auxOutMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <b>midiOutMessage</b>, or <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>,  <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> and  <b>midiOutMessage</b> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutOpen">
    <summary>
      <para>The <b>midiOutOpen</b> function opens a MIDI output device for playback.</para>
    </summary>
    <param name="phmo">
      <para>Pointer to an <b>HMIDIOUT</b> handle. This location is filled with a handle identifying the opened MIDI output device. The handle is used to identify the device in calls to other MIDI output functions.</para>
    </param>
    <param name="uDeviceID">
      <para>Identifier of the MIDI output device that is to be opened.</para>
    </param>
    <param name="dwCallback">
      <para>Pointer to a callback function, an event handle, a thread identifier, or a handle of a window or thread called during MIDI playback to process messages related to the progress of the playback. If no callback is desired, specify <b>NULL</b> for this parameter. For more information on the callback function, see <a href="https://docs.microsoft.com//previous-versions/dd798478(v=vs.85)">MidiOutProc</a>.</para>
    </param>
    <param name="dwInstance">
      <para>User instance data passed to the callback. This parameter is not used with window callbacks or threads.</para>
    </param>
    <param name="fdwOpen">
      <para>Callback flag for opening the device. It can be the following values.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>CALLBACK_EVENT</description>
          <description>The <i>dwCallback</i> parameter is an event handle. This callback mechanism is for output only.</description>
        </item>
        <item>
          <description>CALLBACK_FUNCTION</description>
          <description>The <i>dwCallback</i> parameter is a callback function address.</description>
        </item>
        <item>
          <description>CALLBACK_NULL</description>
          <description>There is no callback mechanism. This value is the default setting.</description>
        </item>
        <item>
          <description>CALLBACK_THREAD</description>
          <description>The <i>dwCallback</i> parameter is a thread identifier.</description>
        </item>
        <item>
          <description>CALLBACK_WINDOW</description>
          <description>The <i>dwCallback</i> parameter is a window handle.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_NODEVICE</b>
            </para>
          </description>
          <description>
            <para>No MIDI port was found. This error occurs only when the mapper is opened.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_ALLOCATED</b>
            </para>
          </description>
          <description>
            <para>The specified resource is already allocated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To determine the number of MIDI output devices present in the system, use the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function. The device identifier specified by <i>wDeviceID</i> varies from zero to one less than the number of devices present. MIDI_MAPPER can also be used as the device identifier.</para>
      <para>If a window or thread is chosen to receive callback information, the following messages are sent to the window procedure or thread to indicate the progress of MIDI output: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mom-open">MM_MOM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mom-close">MM_MOM_CLOSE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mom-done">MM_MOM_DONE</a>.</para>
      <para>If a function is chosen to receive callback information, the following messages are sent to the function to indicate the progress of MIDI output: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mom-open">MOM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mom-close">MOM_CLOSE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mom-done">MOM_DONE</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutPrepareHeader">
    <summary>
      <para>The <b>midiOutPrepareHeader</b> function prepares a MIDI system-exclusive or stream buffer for output.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. To get the device handle, call <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a>. This parameter can also be the handle of a MIDI stream cast to a <b>HMIDIOUT</b> type.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure that identifies the buffer to be prepared.</para>
      <para>Before calling the function, set the <b>lpData</b>, <b>dwBufferLength</b>, and <b>dwFlags</b> members of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure. The <b>dwFlags</b> member must be set to zero.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified address is invalid or the given stream buffer is greater than 64K.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before you pass a MIDI data block to a device driver, you must prepare the buffer by passing it to the <b>midiOutPrepareHeader</b> function. After the header has been prepared, do not modify the buffer. After the driver is done using the buffer, call the <a href="https://docs.microsoft.com//previous-versions/dd798482(v=vs.85)">midiOutUnprepareHeader</a> function.</para>
      <para>The application can re-use the same buffer, or allocate multiple buffers and  call <b>midiOutPrepareHeader</b> for each buffer. If you re-use the same buffer, it is not necessary to prepare the buffer each time. You can call  <b>midiOutPrepareHeader</b> once at the beginning and then call <a href="https://docs.microsoft.com//previous-versions/dd798482(v=vs.85)">midiOutUnprepareHeader</a> once at the end.</para>
      <para>A stream buffer cannot be larger than 64K.</para>
      <para>Preparing a header that has already been prepared has no effect, and the function returns MMSYSERR_NOERROR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/allocating-and-preparing-midi-data-blocks">Allocating and Preparing MIDI Data Blocks</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
    <seealso href="https://docs.microsoft.com//previous-versions/dd798482(v=vs.85)">midiOutUnprepareHeader</seealso>
  </member>
  <member name="Windows.midiOutReset">
    <summary>
      <para>The <b>midiOutReset</b> function turns off all notes on all MIDI channels for the specified MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to <b>HMIDIOUT</b>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Any pending system-exclusive or stream output buffers are returned to the callback function and the MHDR_DONE flag is set in the <b>dwFlags</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
      <para>Terminating a system-exclusive message without sending an EOX (end-of-exclusive) byte might cause problems for the receiving device. The <b>midiOutReset</b> function does not send an EOX byte when it terminates a system-exclusive message - applications are responsible for doing this.</para>
      <para>To turn off all notes, a note-off message for each note in each channel is sent. In addition, the sustain controller is turned off for each channel.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutSetVolume">
    <summary>
      <para>The <b>midiOutSetVolume</b> function sets the volume of a MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to an open MIDI output device. This parameter can also contain the handle of a MIDI stream, as long as it is cast to <b>HMIDIOUT</b>. This parameter can also be a device identifier.</para>
    </param>
    <param name="dwVolume">
      <para>New volume setting. The low-order word contains the left-channel volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of <i>dwVolume</i> specifies the mono volume level, and the high-order word is ignored.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The function is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a device identifier is used, then the result of the <b>midiOutSetVolume</b> call applies to all instances of the device. If a device handle is used, then the result applies only to the instance of the device referenced by the device handle.</para>
      <para>Not all devices support volume changes. You can determine whether a device supports it by querying the device using the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function and the MIDICAPS_VOLUME flag.</para>
      <para>You can also determine whether the device supports volume control on both the left and right channels by querying the device using the <a href="https://docs.microsoft.com//previous-versions/dd798469(v=vs.85)">midiOutGetDevCaps</a> function and the MIDICAPS_LRVOLUME flag.</para>
      <para>Devices that do not support a full 16 bits of volume-level control use the high-order bits of the requested volume setting. For example, a device that supports 4 bits of volume control produces the same volume setting for the following volume-level values: 0x4000, 0x43be, and 0x4fff. The <a href="https://docs.microsoft.com//previous-versions/dd798473(v=vs.85)">midiOutGetVolume</a> function returns the full 16-bit value, as set by <b>midiOutSetVolume</b>, irrespective of the device's capabilities.</para>
      <para>Volume settings are interpreted logarithmically. This means that the perceived increase in volume is the same when increasing the volume level from 0x5000 to 0x6000 as it is from 0x4000 to 0x5000.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutShortMsg">
    <summary>
      <para>The <b>midiOutShortMsg</b> function sends a short MIDI message to the specified MIDI output device.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to <b>HMIDIOUT</b>.</para>
    </param>
    <param name="dwMsg">
      <para>MIDI message. The message is packed into a <b>DWORD</b> value with the first byte of the message in the low-order byte. The message is packed into this parameter as follows.</para>
      <list type="table">
        <listheader>
          <description>Word
</description>
          <description>Byte
</description>
          <description>Usage
</description>
        </listheader>
        <item>
          <description>High</description>
          <description>High-order</description>
          <description>Not used.</description>
        </item>
        <item>
          <description></description>
          <description>Low-order</description>
          <description>The second byte of MIDI data (when needed).</description>
        </item>
        <item>
          <description>Low</description>
          <description>High-order</description>
          <description>The first byte of MIDI data (when needed).</description>
        </item>
        <item>
          <description></description>
          <description>Low-order</description>
          <description>The MIDI status.</description>
        </item>
      </list>
      <para>The two MIDI data bytes are optional, depending on the MIDI status byte. When a series of messages have the same status byte, the status byte can be omitted from messages after the first one in the series, creating a running status. Pack a message for running status as follows:</para>
      <list type="table">
        <listheader>
          <description>Word
</description>
          <description>Byte
</description>
          <description>Usage
</description>
        </listheader>
        <item>
          <description>High</description>
          <description>High-order</description>
          <description>Not used.</description>
        </item>
        <item>
          <description></description>
          <description>Low-order</description>
          <description>Not used.</description>
        </item>
        <item>
          <description>Low</description>
          <description>High-order</description>
          <description>The second byte of MIDI data (when needed).</description>
        </item>
        <item>
          <description></description>
          <description>Low-order</description>
          <description>The first byte of MIDI data.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_BADOPENMODE</b>
            </para>
          </description>
          <description>
            <para>The application sent a message without a status byte to a stream handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIDIERR_NOTREADY</b>
            </para>
          </description>
          <description>
            <para>The hardware is busy with other data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is used to send any MIDI message except for system-exclusive or stream messages.</para>
      <para>This function might not return until the message has been sent to the output device. You can send short messages while streams are playing on the same device (although you cannot use a running status in this case).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiOutUnprepareHeader">
    <summary>
      <para>The <b>midiOutUnprepareHeader</b> function cleans up the preparation performed by the <a href="https://docs.microsoft.com//previous-versions/dd798477(v=vs.85)">midiOutPrepareHeader</a> function.</para>
    </summary>
    <param name="hmo">
      <para>Handle to the MIDI output device. This parameter can also be the handle of a MIDI stream cast to <b>HMIDIOUT</b>.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure identifying the buffer to be cleaned up.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by <i>lpMidiOutHdr</i> is still in the queue.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is complementary to the <a href="https://docs.microsoft.com//previous-versions/dd798477(v=vs.85)">midiOutPrepareHeader</a> function. You must call <b>midiOutUnprepareHeader</b> before freeing the buffer. After passing a buffer to the device driver with the <a href="https://docs.microsoft.com//previous-versions/dd798474(v=vs.85)">midiOutLongMsg</a> function, you must wait until the device driver is finished with the buffer before calling <b>midiOutUnprepareHeader</b>.</para>
      <para>Unpreparing a buffer that has not been prepared has no effect, and the function returns MMSYSERR_NOERROR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/allocating-and-preparing-midi-data-blocks">Allocating and Preparing MIDI Data Blocks</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamClose">
    <summary>
      <para>The <b>midiStreamClose</b> function closes an open MIDI stream.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream, as retrieved by using the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamOpen">
    <summary>
      <para>The <b>midiStreamOpen</b> function opens a MIDI stream for output. By default, the device is opened in paused mode. The stream handle retrieved by this function must be used in all subsequent references to the stream.</para>
    </summary>
    <param name="phms">
      <para>Pointer to a variable to contain the stream handle when the function returns.</para>
    </param>
    <param name="puDeviceID">
      <para>Pointer to a device identifier. The device is opened on behalf of the stream and closed again when the stream is closed.</para>
    </param>
    <param name="cMidi">
      <para>Reserved; must be 1.</para>
    </param>
    <param name="dwCallback">
      <para>Pointer to a callback function, an event handle, a thread identifier, or a handle of a window or thread called during MIDI playback to process messages related to the progress of the playback. If no callback mechanism is desired, specify <b>NULL</b> for this parameter.</para>
    </param>
    <param name="dwInstance">
      <para>Application-specific instance data that is returned to the application with every callback function.</para>
    </param>
    <param name="fdwOpen">
      <para>Callback flag for opening the device. One of the following callback flags must be specified.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>CALLBACK_EVENT</description>
          <description>The <i>dwCallback</i> parameter is an event handle. This callback mechanism is for output only.</description>
        </item>
        <item>
          <description>CALLBACK_FUNCTION</description>
          <description>The <i>dwCallback</i> parameter is a callback procedure address. For the callback signature, see <a href="https://docs.microsoft.com//previous-versions/dd798478(v=vs.85)">MidiOutProc</a>.</description>
        </item>
        <item>
          <description>CALLBACK_NULL</description>
          <description>There is no callback mechanism. This is the default setting.</description>
        </item>
        <item>
          <description>CALLBACK_THREAD</description>
          <description>The <i>dwCallback</i> parameter is a thread identifier.</description>
        </item>
        <item>
          <description>CALLBACK_WINDOW</description>
          <description>The <i>dwCallback</i> parameter is a window handle.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The given handle or flags parameter is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamOut">
    <summary>
      <para>The <b>midiStreamOut</b> function plays or queues a stream (buffer) of MIDI data to a MIDI output device.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream. This handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function. This handle identifies the output device.</para>
    </param>
    <param name="pmh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure that identifies the MIDI buffer.</para>
    </param>
    <param name="cbmh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>The system is unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIDIERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The output buffer pointed to by <i>lpMidiHdr</i> is still playing or is queued from a previous call to <a href="https://docs.microsoft.com//previous-versions/dd798487(v=vs.85)">midiStreamOut</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIDIERR_UNPREPARED</b>
            </para>
          </description>
          <description>
            <para>The header pointed to by <i>lpMidiHdr</i> has not been prepared.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The pointer specified by <i>lpMidiHdr</i> is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before the buffer is passed to <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a>, it must be prepared by using the <a href="https://docs.microsoft.com//previous-versions/dd798477(v=vs.85)">midiOutPrepareHeader</a> function.</para>
      <para>Because the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function opens the output device in paused mode, you must call the <a href="https://docs.microsoft.com//previous-versions/dd798491(v=vs.85)">midiStreamRestart</a> function before you can use <b>midiStreamOut</b> to start the playback.</para>
      <para>For the current implementation of this function, the buffer must be smaller than 64K.</para>
      <para>The buffer pointed to by the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure contains one or more MIDI events, each of which is defined by a <a href="https://docs.microsoft.com//previous-versions/dd798448(v=vs.85)">MIDIEVENT</a> structure.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamPause">
    <summary>
      <para>The <b>midiStreamPause</b> function pauses playback of a specified MIDI stream.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream. This handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798448(v=vs.85)">MIDIEVENT</a> function. This handle identifies the output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The current playback position is saved when playback is paused. To resume playback from the current position, use the <a href="https://docs.microsoft.com//previous-versions/dd798491(v=vs.85)">midiStreamRestart</a> function.</para>
      <para>Calling this function when the output is already paused has no effect, and the function returns MMSYSERR_NOERROR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamPosition">
    <summary>
      <para>The <b>midiStreamPosition</b> function retrieves the current position in a MIDI stream.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream. This handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function. This handle identifies the output device.</para>
    </param>
    <param name="lpmmt">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd757347(v=vs.85)">MMTIME</a> structure.</para>
    </param>
    <param name="cbmmt">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd757347(v=vs.85)">MMTIME</a> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>Specified pointer or structure is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before calling <b>midiStreamPosition</b>, set the <b>wType</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd757347(v=vs.85)">MMTIME</a> structure to indicate the time format you desire. After calling <b>midiStreamPosition</b>, check the <b>wType</b> member to determine if the desired time format is supported. If the desired format is not supported, <b>wType</b> will specify an alternative format.</para>
      <para>The position is set to zero when the device is opened or reset.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamProperty">
    <summary>
      <para>The <b>midiStreamProperty</b> function sets or retrieves properties of a MIDI data stream associated with a MIDI output device.</para>
    </summary>
    <param name="hms">
      <para>Handle to the MIDI device that the property is associated with.</para>
    </param>
    <param name="lppropdata">
      <para>Pointer to the property data.</para>
    </param>
    <param name="dwProperty">
      <para>Flags that specify the action to perform and identify the appropriate property of the MIDI data stream. The <b>midiStreamProperty</b> function requires setting two flags in each use. One flag (either MIDIPROP_GET or MIDIPROP_SET) specifies an action, and the other identifies a specific property to examine or edit.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIDIPROP_GET</description>
          <description>Retrieves the current setting of the given property.</description>
        </item>
        <item>
          <description>MIDIPROP_SET</description>
          <description>Sets the given property.</description>
        </item>
        <item>
          <description>MIDIPROP_TEMPO</description>
          <description>Retrieves the tempo property. The <i>lppropdata</i> parameter points to a <a href="https://docs.microsoft.com//previous-versions/dd798483(v=vs.85)">MIDIPROPTEMPO</a> structure. The current tempo value can be retrieved at any time. Output devices set the tempo by inserting MEVT_TEMPO events into the MIDI data.</description>
        </item>
        <item>
          <description>MIDIPROP_TIMEDIV</description>
          <description>Specifies the time division property. You can get or set this property. The <i>lppropdata</i> parameter points to a <a href="https://docs.microsoft.com//previous-versions/dd798484(v=vs.85)">MIDIPROPTIMEDIV</a> structure. This property can be set only when the device is stopped.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified handle is not a stream handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The given handle or flags parameter is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>These properties are the default properties defined by the system. Driver writers can implement and document their own properties.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamRestart">
    <summary>
      <para>The <b>midiStreamRestart</b> function restarts a paused MIDI stream.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream. This handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function. This handle identifies the output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Calling this function when the output is not paused has no effect, and the function returns MMSYSERR_NOERROR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.midiStreamStop">
    <summary>
      <para>The <b>midiStreamStop</b> function turns off all notes on all MIDI channels for the specified MIDI output device.</para>
    </summary>
    <param name="hms">
      <para>Handle to a MIDI stream. This handle must have been returned by a call to the <a href="https://docs.microsoft.com//previous-versions/dd798486(v=vs.85)">midiStreamOpen</a> function. This handle identifies the output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you call this function, any pending system-exclusive or stream output buffers are returned to the callback mechanism and the MHDR_DONE bit is set in the <b>dwFlags</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd798449(v=vs.85)">MIDIHDR</a> structure.</para>
      <para>While the <a href="https://docs.microsoft.com//previous-versions/dd798479(v=vs.85)">midiOutReset</a> function turns off all notes, <b>midiStreamStop</b> turns off only those notes that have been turned on by a MIDI note-on message.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/midi-functions">MIDI Functions</seealso>
  </member>
  <member name="Windows.mixerClose">
    <summary>
      <para>The <b>mixerClose</b> function closes the specified mixer device.</para>
    </summary>
    <param name="hmx">
      <para>Handle to the mixer device. This handle must have been returned successfully by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. If <b>mixerClose</b> is successful, <i>hmx</i> is no longer valid.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetails">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsA">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsW">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetails">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsA">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsW">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetails">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsA">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetControlDetailsW">
    <summary>
      <para>The <b>mixerGetControlDetails</b> function retrieves details about a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object being queried.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure, which is filled with state information about the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for retrieving control details. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_LISTTEXT</description>
          <description>The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more <a href="https://docs.microsoft.com//previous-versions/dd757296(v=vs.85)">MIXERCONTROLDETAILS_LISTTEXT</a> structures to receive text labels for multiple-item controls. An application must get all list text items for a multiple-item control at once. This flag cannot be used with MIXERCONTROL_CONTROLTYPE_CUSTOM controls.</description>
        </item>
        <item>
          <description>MIXER_GETCONTROLDETAILSF_VALUE</description>
          <description>Current values for a control are retrieved. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more details structures appropriate for the control class.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI (Musical Instrument Digital Interface) input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling this function.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetControlDetails as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCaps">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsA">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsW">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCaps">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsA">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsW">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCaps">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsA">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetDevCapsW">
    <summary>
      <para>The <b>mixerGetDevCaps</b> function queries a specified mixer device to determine its capabilities.</para>
    </summary>
    <param name="uMxId">
      <para>Identifier or handle of an open mixer device.</para>
    </param>
    <param name="pmxcaps">
      <para>Pointer to a <see cref="MIXERCAPS" /> structure that receives information about the capabilities of the device.</para>
    </param>
    <param name="cbmxcaps">
      <para>Size, in bytes, of the <see cref="MIXERCAPS" /> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The mixer device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of mixer devices present.</para>
      <para>Only the number of bytes (or less) of information specified in <i>cbmxcaps</i> is copied to the location pointed to by <i>pmxcaps</i>. If <i>cbmxcaps</i> is zero, nothing is copied, and the function returns successfully.</para>
      <para>This function also accepts a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function as the <i>uMxId</i> parameter. The application should cast the <b>HMIXER</b> handle to a <b>UINT</b>.</para>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetDevCaps as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetID">
    <summary>
      <para>The <b>mixerGetID</b> function retrieves the device identifier for a mixer device associated with a specified device handle.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the audio mixer object to map to a mixer device identifier.</para>
    </param>
    <param name="puMxId">
      <para>Pointer to a variable that receives the mixer device identifier. If no mixer device is available for the <i>hmxobj</i> object, the value -1 is placed in this location and the MMSYSERR_NODRIVER error value is returned.</para>
    </param>
    <param name="fdwId">
      <para>Flags for mapping the mixer object <i>hmxobj</i>. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No audio mixer device is available for the object specified by <i>hmxobj</i>. The location referenced by <i>puMxId</i> also contains the value -1.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControls">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsA">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsW">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControls">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsA">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsW">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControls">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsA">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineControlsW">
    <summary>
      <para>The <b>mixerGetLineControls</b> function retrieves one or more controls associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that is being queried.</para>
    </param>
    <param name="pmxlc">
      <para>Pointer to a <see cref="MIXERLINECONTROLS" /> structure. This structure is used to reference one or more <see cref="MIXERCONTROL" /> structures to be filled with information about the controls associated with an audio line. The <b>cbStruct</b> member of the <b>MIXERLINECONTROLS</b> structure must always be initialized to be the size, in bytes, of the <b>MIXERLINECONTROLS</b> structure.</para>
    </param>
    <param name="fdwControls">
      <para>Flags for retrieving information about one or more controls associated with an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINECONTROLSF_ALL</description>
          <description>The <i>pmxlc</i> parameter references a list of <see cref="MIXERCONTROL" /> structures that will receive information on all controls associated with the audio line identified by the <b>dwLineID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to the number of controls associated with the line. This number is retrieved from the <b>cControls</b> member of the <see cref="MIXERLINE" /> structure returned by the <a href="https://docs.microsoft.com//previous-versions/dd757303(v=vs.85)">mixerGetLineInfo</a> function. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to the first <b>MIXERCONTROL</b> structure to be filled. The <b>dwControlID</b> and <b>dwControlType</b> members are ignored for this query.</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYID</description>
          <description>The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information on the control identified by the <b>dwControlID</b> member of the <see cref="MIXERLINECONTROLS" /> structure. The <b>cControls</b> member must be initialized to 1. The <b>cbmxctrl</b> member must be initialized to the size, in bytes, of a single <b>MIXERCONTROL</b> structure. The <b>pamxctrl</b> member must point to a <b>MIXERCONTROL</b> structure to be filled. The <b>dwLineID</b> and <b>dwControlType</b> members are ignored for this query. This query is usually used to refresh a control after receiving a <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> control change notification message by the user-defined callback (see <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a>).</description>
        </item>
        <item>
          <description>MIXER_GETLINECONTROLSF_ONEBYTYPE</description>
          <description>The <b>mixerGetLineControls</b> function retrieves information about the first control of a specific class for the audio line that is being queried. The <i>pmxlc</i> parameter references a single <see cref="MIXERCONTROL" /> structure that will receive information about the specific control. The audio line is identified by the <b>dwLineID</b> member. The control class is specified in the <b>dwControlType</b> member of the <see cref="MIXERLINECONTROLS" /> structure.The <b>dwControlID</b> member is ignored for this query. This query can be used by an application to get information on a single control associated with a line. For example, you might want your application to use a peak meter only from a waveform-audio output line.
</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a mixer device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineControls as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfo">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoA">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoW">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfo">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoA">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoW">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfo">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoA">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetLineInfoW">
    <summary>
      <para>The <b>mixerGetLineInfo</b> function retrieves information about a specific line of a mixer device.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object that controls the specific audio line.</para>
    </param>
    <param name="pmxl">
      <para>Pointer to a <see cref="MIXERLINE" /> structure. This structure is filled with information about the audio line for the mixer device. The <b>cbStruct</b> member must always be initialized to be the size, in bytes, of the <b>MIXERLINE</b> structure.</para>
    </param>
    <param name="fdwInfo">
      <para>Flags for retrieving information about an audio line. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_GETLINEINFOF_COMPONENTTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the first audio line of the type specified in the <b>dwComponentType</b> member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line of a specific component type. Remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_DESTINATION</description>
          <description>The <i>pmxl</i> parameter will receive information about the destination audio line specified by the <b>dwDestination</b> member of the <see cref="MIXERLINE" /> structure. This index ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_LINEID</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line specified by the <b>dwLineID</b> member of the <see cref="MIXERLINE" /> structure. This is usually used to retrieve updated information about the state of an audio line. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_SOURCE</description>
          <description>The <i>pmxl</i> parameter will receive information about the source audio line specified by the <b>dwDestination</b> and <b>dwSource</b> members of the <see cref="MIXERLINE" /> structure. The index specified by <b>dwDestination</b> ranges from zero to one less than the value in the <b>cDestinations</b> member of the <see cref="MIXERCAPS" /> structure. The index specified by <b>dwSource</b> ranges from zero to one less than the value in the <b>cConnections</b> member of the <b>MIXERLINE</b> structure returned for the audio line stored in the <b>dwDestination</b> member. All remaining structure members except <b>cbStruct</b> require no further initialization.</description>
        </item>
        <item>
          <description>MIXER_GETLINEINFOF_TARGETTYPE</description>
          <description>The <i>pmxl</i> parameter will receive information about the audio line that is for the <b>dwType</b> member of the <b>Target</b> structure, which is a member of the <see cref="MIXERLINE" /> structure. This flag is used to retrieve information about an audio line that handles the target type (for example, <b>MIXERLINE_TARGETTYPE_WAVEOUT</b>). The application must initialize the <b>dwType</b>, <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b> and <b>szPname</b> members of the <see cref="MIXERLINE" /> structure before calling <b>mixerGetLineInfo</b>. All of these values can be retrieved from the device capabilities structures for all media devices. Remaining structure members except <b>cbStruct</b> require no further initialization.
<para><b>Note</b>  In the ANSI version of this function (<b>mixerGetLineInfoA</b>), you cannot use the ANSI string returned from <b>mixerGetLineInfo</b> or <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> for the value of the <b>psPname</b> string when calling <b>mixerGetLineInfo</b> with the <b>MIXER_GETLINEINFOF_TARGETTYPE</b> flag. The reason is that an internal conversion to and from Unicode is performed, which might  result in loss of data.</para></description>
        </item>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALLINE</b>
            </para>
          </description>
          <description>
            <para>The audio line reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The mmeapi.h header defines mixerGetLineInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerGetNumDevs">
    <summary>
      <para>The <b>mixerGetNumDevs</b> function retrieves the number of mixer devices present in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of mixer devices or zero if no mixer devices are available.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerMessage">
    <summary>
      <para>The <b>mixerMessage</b> function sends a custom mixer driver message directly to a mixer driver.</para>
    </summary>
    <param name="hmx">
      <para>Identifier of the mixer that receives the message. You must cast the device ID to the <b>HMIXER</b> handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.</para>
    </param>
    <param name="uMsg">
      <para>Custom mixer driver message to send to the mixer driver. This message must be above or equal to the MXDM_USER constant.</para>
    </param>
    <param name="dwParam1">
      <para>Parameter associated with the message being sent.</para>
    </param>
    <param name="dwParam2">
      <para>Parameter associated with the message being sent.</para>
    </param>
    <returns>
      <para>Returns a value that is specific to the custom mixer driver message. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>The <i>uMsg</i> parameter specified in the MXDM_USER message is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOSUPPORT</b>
            </para>
          </description>
          <description>
            <para>The <i>deviceID</i> parameter must be a valid device ID.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>The mixer device did not process the message.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>User-defined messages must be sent only to a mixer driver that supports the messages. The application should verify that the mixer driver is the driver that supports the message by retrieving the mixer capabilities and checking the <b>wMid</b>, <b>wPid</b>, <b>vDriverVersion</b>, and <b>szPname</b> members of the <see cref="MIXERCAPS" /> structure.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <b>mixerMessage</b> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <b>mixerMessage</b> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <b>mixerMessage</b> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, <b>mixerMessage</b> and <a href="https://docs.microsoft.com//previous-versions/dd756716(v=vs.85)">auxOutMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, or <b>mixerMessage</b> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>,  <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> and  <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerOpen">
    <summary>
      <para>The <b>mixerOpen</b> function opens a specified mixer device and ensures that the device will not be removed until the application closes the handle.</para>
    </summary>
    <param name="phmx">
      <para>Pointer to a variable that will receive a handle identifying the opened mixer device. Use this handle to identify the device when calling other audio mixer functions. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="uMxId">
      <para>Identifier of the mixer device to open. Use a valid device identifier or any <b>HMIXEROBJ</b> (see the <a href="https://docs.microsoft.com//previous-versions/dd757301(v=vs.85)">mixerGetID</a> function for a description of mixer object handles). A "mapper" for audio mixer devices does not currently exist, so a mixer device identifier of -1 is not valid.</para>
    </param>
    <param name="dwCallback">
      <para>Handle to a window called when the state of an audio line and/or control associated with the device being opened is changed. Specify <b>NULL</b> for this parameter if no callback mechanism is to be used.</para>
    </param>
    <param name="dwInstance">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="fdwOpen">
      <para>Flags for opening the device. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>
            <b>CALLBACK_WINDOW</b>
          </description>
          <description>The <i>dwCallback</i> parameter is assumed to be a window handle (<b>HWND</b>).</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_AUX</b>
          </description>
          <description>The <i>uMxId</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_HMIDIIN</b>
          </description>
          <description>The <i>uMxId</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_HMIDIOUT</b>
          </description>
          <description>The <i>uMxId</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_HMIXER</b>
          </description>
          <description>The <i>uMxId</i> parameter is a mixer device handle returned by the <b>mixerOpen</b> function. This flag is optional.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_HWAVEIN</b>
          </description>
          <description>The <i>uMxId</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_HWAVEOUT</b>
          </description>
          <description>The <i>uMxId</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_MIDIIN</b>
          </description>
          <description>The <i>uMxId</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_MIDIOUT</b>
          </description>
          <description>The <i>uMxId</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_MIXER</b>
          </description>
          <description>The <i>uMxId</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_WAVEIN</b>
          </description>
          <description>The <i>uMxId</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>
            <b>MIXER_OBJECTF_WAVEOUT</b>
          </description>
          <description>The <i>uMxId</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns <b>MMSYSERR_NOERROR</b> if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_ALLOCATED</b>
            </para>
          </description>
          <description>
            <para>The specified resource is already allocated by the maximum number of clients possible.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>uMxId</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>uMxId</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>uMxId</i>. Note that the location referenced by <i>uMxId</i> will also contain the value –1.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate resources.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function to determine the number of audio mixer devices present in the system. The device identifier specified by <i>uMxId</i> varies from zero to one less than the number of devices present.</para>
      <para>If a window is chosen to receive callback information, the <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-line-change">MM_MIXM_LINE_CHANGE</a> and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-mixm-control-change">MM_MIXM_CONTROL_CHANGE</a> messages are sent to the window procedure function to indicate when an audio line or control state changes. For both messages, the <i>wParam</i> parameter is the handle of the mixer device. The <i>lParam</i> parameter is the line identifier for <b>MM_MIXM_LINE_CHANGE</b> or the control identifier for <b>MM_MIXM_CONTROL_CHANGE</b> that changed state.</para>
      <para>To query for audio mixer support or a media device, use the <a href="https://docs.microsoft.com//previous-versions/dd757301(v=vs.85)">mixerGetID</a> function.</para>
      <para>On 64-bit systems, this function may not work as expected in situations where you pass a 64-bit <b>LPHWAVEOUT</b> pointer in the <i>uMxId</i> parameter, because the <i>uMxId</i> parameter is truncated to 32 bits.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.mixerSetControlDetails">
    <summary>
      <para>The <b>mixerSetControlDetails</b> function sets properties of a single control associated with an audio line.</para>
    </summary>
    <param name="hmxobj">
      <para>Handle to the mixer device object for which properties are being set.</para>
    </param>
    <param name="pmxcd">
      <para>Pointer to a <see cref="MIXERCONTROLDETAILS" /> structure. This structure is used to reference control detail structures that contain the desired state for the control.</para>
    </param>
    <param name="fdwDetails">
      <para>Flags for setting properties for a control. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>MIXER_OBJECTF_AUX</description>
          <description>The <i>hmxobj</i> parameter is an auxiliary device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd756713(v=vs.85)">auxGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI input device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798458(v=vs.85)">midiInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the handle of a MIDI output device. This handle must have been returned by the <a href="https://docs.microsoft.com//previous-versions/dd798476(v=vs.85)">midiOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HMIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd757308(v=vs.85)">mixerOpen</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEIN</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio input handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743847(v=vs.85)">waveInOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_HWAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is a waveform-audio output handle returned by the <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI input device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798456(v=vs.85)">midiInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIDIOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a MIDI output device. This identifier must be in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd798472(v=vs.85)">midiOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_MIXER</description>
          <description>The <i>hmxobj</i> parameter is a mixer device identifier in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd757304(v=vs.85)">mixerGetNumDevs</a> function. This flag is optional.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEIN</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio input device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_OBJECTF_WAVEOUT</description>
          <description>The <i>hmxobj</i> parameter is the identifier of a waveform-audio output device in the range of zero to one less than the number of devices returned by the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function.</description>
        </item>
        <item>
          <description>MIXER_SETCONTROLDETAILSF_CUSTOM</description>
          <description>A custom dialog box for the specified custom mixer control is displayed. The mixer device gathers the required information from the user and returns the data in the specified buffer. The handle for the owning window is specified in the <b>hwndOwner</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure. (This handle can be set to <b>NULL</b>.) The application can then save the data from the dialog box and use it later to reset the control to the same state by using the MIXER_SETCONTROLDETAILSF_VALUE flag.</description>
        </item>
        <item>
          <description>MIXER_SETCONTROLDETAILSF_VALUE</description>
          <description>The current value(s) for a control are set. The <b>paDetails</b> member of the <see cref="MIXERCONTROLDETAILS" /> structure points to one or more mixer-control details structures of the appropriate class for the control.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MIXERR_INVALCONTROL</b>
            </para>
          </description>
          <description>
            <para>The control reference is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid device identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALFLAG</b>
            </para>
          </description>
          <description>
            <para>One or more flags are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hmxobj</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALPARAM</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No mixer device is available for the object specified by <i>hmxobj</i>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All members of the <see cref="MIXERCONTROLDETAILS" /> structure must be initialized before calling <b>mixerSetControlDetails</b>.</para>
      <para>If an application needs to retrieve only the current state of a custom mixer control and not display a dialog box, then <a href="https://docs.microsoft.com//previous-versions/dd757299(v=vs.85)">mixerGetControlDetails</a> can be used with the MIXER_GETCONTROLDETAILSF_VALUE flag.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixer-functions">Audio Mixer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/audio-mixers">Audio Mixers</seealso>
  </member>
  <member name="Windows.waveInAddBuffer">
    <summary>
      <para>The <b>waveInAddBuffer</b> function sends an input buffer to the given waveform-audio input device. When the buffer is filled, the application is notified.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure that identifies the buffer.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <b>WAVEHDR</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_UNPREPARED</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by the <i>pwh</i> parameter hasn't been prepared.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the buffer is filled, the WHDR_DONE bit is set in the <b>dwFlags</b> member of the <b>WAVEHDR</b> structure.</para>
      <para>The buffer must be prepared with the <b>waveInPrepareHeader</b> function before it is passed to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInClose">
    <summary>
      <para>The <b>waveInClose</b> function closes the given waveform-audio input device.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device. If the function succeeds, the handle is no longer valid after this call.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>There are still buffers in the queue.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there are input buffers that have been sent with the <b>waveInAddBuffer</b> function and that haven't been returned to the application, the close operation will fail. Call the <b>waveInReset</b> function to mark all pending buffers as done.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInGetDevCaps">
    <summary>
      <para>The <b>waveInGetDevCaps</b> function retrieves the capabilities of a given waveform-audio input device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the waveform-audio output device. It can be either a device identifier or a handle of an open waveform-audio input device.</para>
    </param>
    <param name="pwic">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743839(v=vs.85)">WAVEINCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbwic">
      <para>Size, in bytes, of the <b>WAVEINCAPS</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this function to determine the number of waveform-audio input devices present in the system. If the value specified by the <i>uDeviceID</i> parameter is a device identifier, it can vary from zero to one less than the number of devices present. The WAVE_MAPPER constant can also be used as a device identifier. Only <i>cbwic</i> bytes (or less) of information is copied to the location pointed to by <i>pwic</i>. If <i>cbwic</i> is zero, nothing is copied and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInGetErrorText">
    <summary>
      <para>The <b>waveInGetErrorText</b> function retrieves a textual description of the error identified by the given error number.</para>
    </summary>
    <param name="mmrError">
      <para>Error number.</para>
    </param>
    <param name="pszText">
      <para>Pointer to the buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Size, in characters, of the buffer pointed to by <i>pszText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>Specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInGetID">
    <summary>
      <para>The <b>waveInGetID</b> function gets the device identifier for the given waveform-audio input device.</para>
      <para>This function is supported for backward compatibility. New applications can cast a handle of the device rather than retrieving the device identifier.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <param name="puDeviceID">
      <para>Pointer to a variable to be filled with the device identifier.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hwi</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInGetNumDevs">
    <summary>
      <para>The <b>waveInGetNumDevs</b> function returns the number of waveform-audio input devices present in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of devices. A return value of zero means that no devices are present or that an error occurred.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInMessage">
    <summary>
      <para>The <b>waveInMessage</b> function sends messages to the waveform-audio input device drivers.</para>
    </summary>
    <param name="hwi">
      <para>Identifier of the waveform device that receives the message. You must cast the device ID to the <b>HWAVEIN</b> handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.</para>
    </param>
    <param name="uMsg">
      <para>Message to send.</para>
    </param>
    <param name="dw1">
      <para>Message parameter.</para>
    </param>
    <param name="dw2">
      <para>Message parameter.</para>
    </param>
    <returns>
      <para>Returns the value returned from the driver.</para>
    </returns>
    <remarks>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <b>waveInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <b>waveInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <b>waveInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <b>waveInMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd756716(v=vs.85)">auxOutMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <b>waveInMessage</b> and <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, or <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <b>waveInMessage</b>,  <a href="https://docs.microsoft.com//previous-versions/dd743865(v=vs.85)">waveOutMessage</a> and  <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInOpen">
    <summary>
      <para>The <b>waveInOpen</b> function opens the given waveform-audio input device for recording.</para>
    </summary>
    <param name="phwi">
      <para>Pointer to a buffer that receives a handle identifying the open waveform-audio input device. Use this handle to identify the device when calling other waveform-audio input functions. This parameter can be <b>NULL</b> if <b>WAVE_FORMAT_QUERY</b> is specified for <i>fdwOpen</i>.</para>
    </param>
    <param name="uDeviceID">
      <para>Identifier of the waveform-audio input device to open. It can be either a device identifier or a handle of an open waveform-audio input device. You can use the following flag instead of a device identifier.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>WAVE_MAPPER</description>
          <description>The function selects a waveform-audio input device capable of recording in the specified format.</description>
        </item>
      </list>
    </param>
    <param name="pwfx">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd757713(v=vs.85)">WAVEFORMATEX</a> structure that identifies the desired format for recording waveform-audio data. You can free this structure immediately after <b>waveInOpen</b> returns.</para>
    </param>
    <param name="dwCallback">
      <para>Pointer to a fixed callback function, an event handle, a handle to a window, or the identifier of a thread to be called during waveform-audio recording to process messages related to the progress of recording. If no callback function is required, this value can be zero. For more information on the callback function, see <a href="https://docs.microsoft.com//previous-versions/dd743849(v=vs.85)">waveInProc</a>.</para>
    </param>
    <param name="dwInstance">
      <para>User-instance data passed to the callback mechanism. This parameter is not used with the window callback mechanism.</para>
    </param>
    <param name="fdwOpen">
      <para>Flags for opening the device. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>
            <b>CALLBACK_EVENT</b>
          </description>
          <description>The <i>dwCallback</i> parameter is an event handle.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_FUNCTION</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a callback procedure address.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_NULL</b>
          </description>
          <description>No callback mechanism. This is the default setting.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_THREAD</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a thread identifier.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_WINDOW</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a window handle.</description>
        </item>
        <item>
          <description>
            <b>WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE</b>
          </description>
          <description>
            <para>If this flag is specified and the  <i>uDeviceID</i> parameter is <b>WAVE_MAPPER</b>, the function opens the default communication device.</para>
            <para>This flag applies only when <i>uDeviceID</i> equals <b>WAVE_MAPPER</b>.</para>
            <para>
              <b>Note</b>  Requires Windows 7</para>
          </description>
        </item>
        <item>
          <description>
            <b>WAVE_FORMAT_DIRECT</b>
          </description>
          <description>If this flag is specified, the ACM driver does not perform conversions on the audio data.</description>
        </item>
        <item>
          <description>
            <b>WAVE_FORMAT_QUERY</b>
          </description>
          <description>The function queries the device to determine whether it supports the given format, but it does not open the device.</description>
        </item>
        <item>
          <description>
            <b>WAVE_MAPPED</b>
          </description>
          <description>The <i>uDeviceID</i> parameter specifies a waveform-audio device to be mapped to by the wave mapper.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns <b>MMSYSERR_NOERROR</b> if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_ALLOCATED</b>
            </para>
          </description>
          <description>
            <para>Specified resource is already allocated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_BADFORMAT</b>
            </para>
          </description>
          <description>
            <para>Attempted to open with an unsupported waveform-audio format.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd743844(v=vs.85)">waveInGetNumDevs</a> function to determine the number of waveform-audio input devices present on the system. The device identifier specified by <i>uDeviceID</i> varies from zero to one less than the number of devices present. The WAVE_MAPPER constant can also be used as a device identifier.</para>
      <para>If you choose to have a window or thread receive callback information, the following messages are sent to the window procedure or thread to indicate the progress of waveform-audio input: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wim-open">MM_WIM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wim-close">MM_WIM_CLOSE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wim-data">MM_WIM_DATA</a>.</para>
      <para>If you choose to have a function receive callback information, the following messages are sent to the function to indicate the progress of waveform-audio input: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wim-open">WIM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wim-close">WIM_CLOSE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wim-data">WIM_DATA</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInPrepareHeader">
    <summary>
      <para>The <b>waveInPrepareHeader</b> function prepares a buffer for waveform-audio input.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure that identifies the buffer to be prepared.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <b>WAVEHDR</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>lpData</b>, <b>dwBufferLength</b>, and <b>dwFlags</b> members of the <b>WAVEHDR</b> structure must be set before calling this function (<b>dwFlags</b> must be zero).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInReset">
    <summary>
      <para>The <b>waveInReset</b> function stops input on the given waveform-audio input device and resets the current position to zero. All pending buffers are marked as done and returned to the application.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInStart">
    <summary>
      <para>The <b>waveInStart</b> function starts input on the given waveform-audio input device.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Buffers are returned to the application when full or when the <b>waveInReset</b> function is called (the <b>dwBytesRecorded</b> member in the header will contain the length of data). If there are no buffers in the queue, the data is thrown away without notifying the application, and input continues.</para>
      <para>Calling this function when input is already started has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInStop">
    <summary>
      <para>The <b>waveInStop</b> function stops waveform-audio input.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If there are any buffers in the queue, the current buffer will be marked as done (the <b>dwBytesRecorded</b> member in the header will contain the length of data), but any empty buffers in the queue will remain there.</para>
      <para>Calling this function when input is not started has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveInUnprepareHeader">
    <summary>
      <para>The <b>waveInUnprepareHeader</b> function cleans up the preparation performed by the <a href="https://docs.microsoft.com//previous-versions/dd743848(v=vs.85)">waveInPrepareHeader</a> function. This function must be called after the device driver fills a buffer and returns it to the application. You must call this function before freeing the buffer.</para>
    </summary>
    <param name="hwi">
      <para>Handle to the waveform-audio input device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure identifying the buffer to be cleaned up.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <b>WAVEHDR</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The buffer pointed to by the <i>pwh</i> parameter is still in the queue.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function complements the <b>waveInPrepareHeader</b> function.</para>
      <para>You must call this function before freeing the buffer. After passing a buffer to the device driver with the <b>waveInAddBuffer</b> function, you must wait until the driver is finished with the buffer before calling <b>waveInUnprepareHeader</b>. Unpreparing a buffer that has not been prepared has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutBreakLoop">
    <summary>
      <para>The <b>waveOutBreakLoop</b> function breaks a loop on the given waveform-audio output device and allows playback to continue with the next block in the driver list.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The blocks making up the loop are played to the end before the loop is terminated.</para>
      <para>Calling this function when nothing is playing or looping has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutClose">
    <summary>
      <para>The <b>waveOutClose</b> function closes the given waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device. If the function succeeds, the handle is no longer valid after this call.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>There are still buffers in the queue.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The close operation fails if the device is still playing a waveform-audio buffer that was previously sent by calling <b>waveOutWrite</b>. Before calling <b>waveOutClose</b>, the application must wait for all buffers to finish playing or call the <b>waveOutReset</b> function to terminate playback.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetDevCaps">
    <summary>
      <para>The <b>waveOutGetDevCaps</b> function retrieves the capabilities of a given waveform-audio output device.</para>
    </summary>
    <param name="uDeviceID">
      <para>Identifier of the waveform-audio output device. It can be either a device identifier or a handle of an open waveform-audio output device.</para>
    </param>
    <param name="pwoc">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743855(v=vs.85)">WAVEOUTCAPS</a> structure to be filled with information about the capabilities of the device.</para>
    </param>
    <param name="cbwoc">
      <para>Size, in bytes, of the <b>WAVEOUTCAPS</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <b>waveOutGetNumDevs</b> function to determine the number of waveform-audio output devices present in the system. If the value specified by the <i>uDeviceID</i> parameter is a device identifier, it can vary from zero to one less than the number of devices present. The WAVE_MAPPER constant can also be used as a device identifier. Only <i>cbwoc</i> bytes (or less) of information is copied to the location pointed to by <i>pwoc</i>. If <i>cbwoc</i> is zero, nothing is copied and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetErrorText">
    <summary>
      <para>The <b>waveOutGetErrorText</b> function retrieves a textual description of the error identified by the given error number.</para>
    </summary>
    <param name="mmrError">
      <para>Error number.</para>
    </param>
    <param name="pszText">
      <para>Pointer to a buffer to be filled with the textual error description.</para>
    </param>
    <param name="cchText">
      <para>Size, in characters, of the buffer pointed to by <i>pszText</i>.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADERRNUM</b>
            </para>
          </description>
          <description>
            <para>Specified error number is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the textual error description is longer than the specified buffer, the description is truncated. The returned error string is always null-terminated. If <i>cchText</i> is zero, nothing is copied and the function returns zero. All error descriptions are less than MAXERRORLENGTH characters long.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetID">
    <summary>
      <para>The <b>waveOutGetID</b> function retrieves the device identifier for the given waveform-audio output device.</para>
      <para>This function is supported for backward compatibility. New applications can cast a handle of the device rather than retrieving the device identifier.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="puDeviceID">
      <para>Pointer to a variable to be filled with the device identifier.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>The <i>hwo</i> parameter specifies an invalid handle.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetNumDevs">
    <summary>
      <para>The <b>waveOutGetNumDevs</b> function retrieves the number of waveform-audio output devices present in the system.</para>
    </summary>
    <returns>
      <para>Returns the number of devices. A return value of zero means that no devices are present or that an error occurred.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetPitch">
    <summary>
      <para>The <b>waveOutGetPitch</b> function retrieves the current pitch setting for the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pdwPitch">
      <para>Pointer to a variable to be filled with the current pitch multiplier setting. The pitch multiplier indicates the current change in pitch from the original authored setting. The pitch multiplier must be a positive value.</para>
      <para>The pitch multiplier is specified as a fixed-point value. The high-order word of the variable contains the signed integer part of the number, and the low-order word contains the fractional part. A value of 0x8000 in the low-order word represents one-half, and 0x4000 represents one-quarter. For example, the value 0x00010000 specifies a multiplier of 1.0 (no pitch change), and a value of 0x000F8000 specifies a multiplier of 15.5.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function isn't supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Changing the pitch does not change the playback rate, sample rate, or playback time. Not all devices support pitch changes. To determine whether the device supports pitch control, use the WAVECAPS_PITCH flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by the <b>waveOutGetDevCaps</b> function).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetPlaybackRate">
    <summary>
      <para>The <b>waveOutGetPlaybackRate</b> function retrieves the current playback rate for the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pdwRate">
      <para>Pointer to a variable to be filled with the current playback rate. The playback rate setting is a multiplier indicating the current change in playback rate from the original authored setting. The playback rate multiplier must be a positive value.</para>
      <para>The rate is specified as a fixed-point value. The high-order word of the variable contains the signed integer part of the number, and the low-order word contains the fractional part. A value of 0x8000 in the low-order word represents one-half, and 0x4000 represents one-quarter. For example, the value 0x00010000 specifies a multiplier of 1.0 (no playback rate change), and a value of 0x000F8000 specifies a multiplier of 15.5.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function isn't supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Changing the playback rate does not change the sample rate but does change the playback time. Not all devices support playback rate changes. To determine whether a device supports playback rate changes, use the WAVECAPS_PLAYBACKRATE flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by the <b>waveOutGetDevCaps</b> function).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetPosition">
    <summary>
      <para>The <b>waveOutGetPosition</b> function retrieves the current playback position of the given waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pmmt">
      <para>Pointer to an <a href="https://docs.microsoft.com//previous-versions/dd757347(v=vs.85)">MMTIME</a> structure.</para>
    </param>
    <param name="cbmmt">
      <para>Size, in bytes, of the <b>MMTIME</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before calling this function, set the <b>wType</b> member of the <b>MMTIME</b> structure to indicate the time format you want. After calling this function, check <b>wType</b> to determine whether the time format is supported. If the format is not supported, <b>wType</b> will specify an alternative format.</para>
      <para>The position is set to zero when the device is opened or reset.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutGetVolume">
    <summary>
      <para>The <b>waveOutGetVolume</b> function retrieves the current volume level of the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to an open waveform-audio output device. This parameter can also be a device identifier.</para>
    </param>
    <param name="pdwVolume">
      <para>Pointer to a variable to be filled with the current volume setting. The low-order word of this location contains the left-channel volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of the specified location contains the mono volume level.</para>
      <para>The full 16-bit setting(s) set with the <a href="https://docs.microsoft.com//previous-versions/dd743874(v=vs.85)">waveOutSetVolume</a> function is returned, regardless of whether the device supports the full 16 bits of volume-level control.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function isn't supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a device identifier is used, then the result of the <b>waveOutGetVolume</b> call and the information returned in <i>pdwVolume</i> applies to all instances of the device. If a device handle is used, then the result and information returned applies only to the instance of the device referenced by the device handle.</para>
      <para>Not all devices support volume changes. To determine whether the device supports volume control, use the WAVECAPS_VOLUME flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by the <b>waveOutGetDevCaps</b> function).</para>
      <para>To determine whether the device supports left- and right-channel volume control, use the WAVECAPS_LRVOLUME flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by <b>waveOutGetDevCaps</b>).</para>
      <para>Volume settings are interpreted logarithmically. This means the perceived increase in volume is the same when increasing the volume level from 0x5000 to 0x6000 as it is from 0x4000 to 0x5000.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutMessage">
    <summary>
      <para>The <b>waveOutMessage</b> function sends messages to the waveform-audio output device drivers.</para>
    </summary>
    <param name="hwo">
      <para>Identifier of the waveform device that receives the message. You must cast the device ID to the <b>HWAVEOUT</b> handle type. If you supply a handle instead of a device ID, the function fails and returns the MMSYSERR_NOSUPPORT error code.</para>
    </param>
    <param name="uMsg">
      <para>Message to send.</para>
    </param>
    <param name="dw1">
      <para>Message parameter.</para>
    </param>
    <param name="dw2">
      <para>Message parameter.</para>
    </param>
    <returns>
      <para>Returns the value returned from the driver.</para>
    </returns>
    <remarks>
      <para>The <code>DRV_QUERYDEVICEINTERFACE</code> message queries for the device-interface name of a <b>waveIn</b>, <b>waveOut</b>, <b>midiIn</b>, <b>midiOut</b>, or <b>mixer</b> device.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam1</i> is a pointer to a caller-allocated buffer into which the function writes a null-terminated Unicode string containing the device-interface name. If the device has no device interface, the string length is zero.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACE</code>, <i>dwParam2</i> specifies the buffer size in bytes. This is an input parameter to the function. The caller should specify a size that is greater than or equal to the buffer size retrieved by the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536364(v=vs.85)">DRV_QUERYDEVICEINTERFACESIZE</a> message.</para>
      <para>The DRV_QUERYDEVICEINTERFACE message is supported in Windows Me, and Windows 2000 and later. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The following two message constants are used together for the purpose of obtaining device interface names:</para>
      <list type="bullet">
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACESIZE</para>
          </description>
        </item>
        <item>
          <description>
            <para>DRV_QUERYDEVICEINTERFACE</para>
          </description>
        </item>
      </list>
      <para>The first message obtains the size in bytes of the buffer needed to hold the string containing the device interface name. The second message retrieves the name string in a buffer of the required size.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVICEINTERFACESIZE</code> message queries for the size of the buffer required to hold the device-interface name.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam1</i> is a pointer to buffer size. This parameter points to a ULONG variable into which the function writes the required buffer size in bytes. The size includes storage space for the name string's terminating null. The size is zero if the device ID identifies a device that has no device interface.</para>
      <para>For <code>DRV_QUERYDEVICEINTERFACESIZE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The buffer size retrieved by this message is expressed as a byte count. It specifies the size of the buffer needed to hold the null-terminated Unicode string that contains the device-interface name. The caller allocates a buffer of the specified size and uses the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536363(v=vs.85)">DRV_QUERYDEVICEINTERFACE</a> message to retrieve the device-interface name string.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/obtaining-a-device-interface-name">Obtaining a Device Interface Name</a>.</para>
      <para>The <code>DRV_QUERYDEVNODE</code> message queries for the <a href="https://docs.microsoft.com//windows-hardware/drivers/">devnode</a> number assigned to the device by the Plug and Play manager.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam1</i> is a pointer to a caller-allocated DWORD variable into which the function writes the devnode number. If no devnode is assigned to the device, the function sets this variable to zero.</para>
      <para>For <code>DRV_QUERYDEVNODE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>In Windows 2000 and later, the message always returns MMSYSERR_NOTSUPPORTED. This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, and <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions.  The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>The <code>DRV_QUERYMAPPABLE</code> message queries for whether the specified device can be used by a mapper.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam1</i> is unused. Set this parameter to zero.</para>
      <para>For <code>DRV_QUERYMAPPABLE</code>, <i>dwParam2</i> is unused. Set this parameter to zero.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> and <a href="https://docs.microsoft.com//previous-versions/dd756716(v=vs.85)">auxOutMessage</a> functions. The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>When an application program opens a mapper instead of a specific audio device, the system inserts a mapper between the application and the available devices. The mapper selects an appropriate device by mapping the application's requirements to one of the available devices. For more information about mappers, see the Microsoft Windows SDK documentation.</para>
      <para>The <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code> message retrieves the device ID of the preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred voice-communications device. The function writes the value (-1) if no device is available that qualifies as a preferred voice-communications device.</para>
      <para>For <code>DRVM_MAPPER_CONSOLEVOICECOM_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined: DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a> and <b>waveOutMessage</b> functions. When a caller calls these two functions with the DRVM_MAPPER_CONSOLEVOICECOM_GET message, the caller must specify the device ID as WAVE_MAPPER, and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, <a href="https://docs.microsoft.com//previous-versions/dd798457(v=vs.85)">midiInMessage</a>, <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a>, or <a href="https://docs.microsoft.com//previous-versions/dd757307(v=vs.85)">mixerMessage</a> functions, the caller must cast the device ID to a handle of type HWAVEIN, HWAVEOUT, HMIDIIN, HMIDIOUT, or HMIXER, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred specifically for voice communications, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536362(v=vs.85)">DRVM_MAPPER_PREFERRED_GET</a> message, which determines which device is preferred for all other audio functions.</para>
      <para>For example, the preferred <b>waveOut</b> device for voice communications might be the earpiece in a headset, but the preferred <b>waveOut</b> device for all other audio functions might be a set of stereo speakers.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred voice-communications device and do not search for other available devices if the preferred device is unavailable. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred voice-communications device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/preferred-voice-communications-device-id">Preferred Voice-Communications Device ID</a>.</para>
      <para>The <code>DRVM_MAPPER_PREFERRED_GET</code> message retrieves the device ID of the preferred audio device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam1</i> is a pointer to device ID. This parameter points to a DWORD variable into which the function writes the device ID of the current preferred device. The function writes the value (-1) if no device is available that qualifies as a preferred device.</para>
      <para>For <code>DRVM_MAPPER_PREFERRED_GET</code>, <i>dwParam2</i> is a pointer to status flags. This parameter points to a DWORD variable into which the function writes the device-status flags. Only one flag bit is currently defined (for <b>waveInMessage</b> and <b>waveOutMessage</b> calls only): DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY.</para>
      <para>This message is valid only for the <a href="https://docs.microsoft.com//previous-versions/dd743846(v=vs.85)">waveInMessage</a>,  <b>waveOutMessage</b> and  <a href="https://docs.microsoft.com//previous-versions/dd798475(v=vs.85)">midiOutMessage</a> functions. When the caller calls these functions with the DRVM_MAPPER_PREFERRED_GET message, the caller must first specify the device ID as WAVE_MAPPER (for <b>waveInMessage</b> or <b>waveOutMessage</b>) or MIDI_MAPPER (for <b>midiOutMessage</b>), and then cast this value to the appropriate handle type. For the <b>waveInMessage</b>, <b>waveOutMessage</b>, or <b>midiOutMessage</b> functions, the caller must cast the device ID to a handle type HWAVEIN, HWAVEOUT or HMIDIOUT, respectively. Note that if the caller supplies a valid handle instead of a device ID for this parameter, the function fails and returns error code MMSYSERR_NOSUPPORT.</para>
      <para>The system intercepts this message and returns the appropriate value without sending the message to the device driver. For general information about system-intercepted <b>xxxMessage</b> functions, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/system-intercepted-device-messages">System-Intercepted Device Messages</a>.</para>
      <para>This message provides a way to determine which device is preferred for audio functions in general, in contrast to the <a href="https://docs.microsoft.com//previous-versions/windows/hardware/drivers/ff536361(v=vs.85)">DRVM_MAPPER_CONSOLEVOICECOM_GET</a> message, which determines which device is preferred specifically for voice communications.</para>
      <para>When the DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY flag bit is set in the DWORD location pointed to by <i>dwParam2</i>, the <b>waveIn</b> and <b>waveOut</b> APIs use only the current preferred device and do not search for other available devices if the preferred device is unavailable. Note that the <b>midiOutMessage</b> function does not output this flag--the <b>midiOut</b> API always uses only the preferred device. The flag that is output by either the <b>waveInMessage</b> or <b>waveOutMessage</b> call applies to the preferred device for both the <b>waveIn</b> and <b>waveOut</b> APIs, regardless of whether the call is made to <b>waveInMessage</b> or <b>waveOutMessage</b>.</para>
      <para>The <i>xxx</i>Message functions accept this value in place of a valid device handle in order to allow an application to determine the default device ID without first having to open a device. For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/audio/accessing-the-preferred-device-id">Accessing the Preferred Device ID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutOpen">
    <summary>
      <para>The <b>waveOutOpen</b> function opens the given waveform-audio output device for playback.</para>
    </summary>
    <param name="phwo">
      <para>Pointer to a buffer that receives a handle identifying the open waveform-audio output device. Use the handle to identify the device when calling other waveform-audio output functions. This parameter might be <b>NULL</b> if the <b>WAVE_FORMAT_QUERY</b> flag is specified for <i>fdwOpen</i>.</para>
    </param>
    <param name="uDeviceID">
      <para>Identifier of the waveform-audio output device to open. It can be either a device identifier or a handle of an open waveform-audio input device. You can also use the following flag instead of a device identifier:</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>
            <b>WAVE_MAPPER</b>
          </description>
          <description>The function selects a waveform-audio output device capable of playing the given format.</description>
        </item>
      </list>
    </param>
    <param name="pwfx">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd757713(v=vs.85)">WAVEFORMATEX</a> structure that identifies the format of the waveform-audio data to be sent to the device. You can free this structure immediately after passing it to <b>waveOutOpen</b>.</para>
    </param>
    <param name="dwCallback">
      <para>Specifies the callback mechanism. The value must be one of the following:</para>
      <list type="bullet">
        <item>
          <description>A pointer to a callback function. For the function signature, see <a href="https://docs.microsoft.com//previous-versions/dd743869(v=vs.85)">waveOutProc</a>.</description>
        </item>
        <item>
          <description>A handle to a window.</description>
        </item>
        <item>
          <description>A thread identifier.</description>
        </item>
        <item>
          <description>A handle to an event.</description>
        </item>
        <item>
          <description>The value <b>NULL</b>.</description>
        </item>
      </list>
      <para>The <i>fdwOpen</i> parameter specifies how the <i>dwCallback</i> parameter is interpreted. For more information, see Remarks.</para>
    </param>
    <param name="dwInstance">
      <para>User-instance data passed to the callback mechanism. This parameter is not used with the window callback mechanism.</para>
    </param>
    <param name="fdwOpen">
      <para>Flags for opening the device. The following values are defined.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Meaning
</description>
        </listheader>
        <item>
          <description>
            <b>CALLBACK_EVENT</b>
          </description>
          <description>The <i>dwCallback</i> parameter is an event handle.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_FUNCTION</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a callback procedure address.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_NULL</b>
          </description>
          <description>No callback mechanism. This is the default setting.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_THREAD</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a thread identifier.</description>
        </item>
        <item>
          <description>
            <b>CALLBACK_WINDOW</b>
          </description>
          <description>The <i>dwCallback</i> parameter is a window handle.</description>
        </item>
        <item>
          <description>
            <b>WAVE_ALLOWSYNC</b>
          </description>
          <description>If this flag is specified, a synchronous waveform-audio device can be opened. If this flag is not specified while opening a synchronous driver, the device will fail to open.</description>
        </item>
        <item>
          <description>
            <b>WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE</b>
          </description>
          <description>
            <para>If this flag is specified and the  <i>uDeviceID</i> parameter is <b>WAVE_MAPPER</b>, the function opens the default communication device.</para>
            <para>This flag applies only when <i>uDeviceID</i> equals <b>WAVE_MAPPER</b>.</para>
            <para>
              <b>Note</b>  Requires Windows 7</para>
          </description>
        </item>
        <item>
          <description>
            <b>WAVE_FORMAT_DIRECT</b>
          </description>
          <description>If this flag is specified, the ACM driver does not perform conversions on the audio data.</description>
        </item>
        <item>
          <description>
            <b>WAVE_FORMAT_QUERY</b>
          </description>
          <description>If this flag is specified, <b>waveOutOpen</b> queries the device to determine if it supports the given format, but the device is not actually opened.</description>
        </item>
        <item>
          <description>
            <b>WAVE_MAPPED</b>
          </description>
          <description>If this flag is specified, the <i>uDeviceID</i> parameter specifies a waveform-audio device to be mapped to by the wave mapper.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns <b>MMSYSERR_NOERROR</b> if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_ALLOCATED</b>
            </para>
          </description>
          <description>
            <para>Specified resource is already allocated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_BADDEVICEID</b>
            </para>
          </description>
          <description>
            <para>Specified device identifier is out of range.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_BADFORMAT</b>
            </para>
          </description>
          <description>
            <para>Attempted to open with an unsupported waveform-audio format.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_SYNC</b>
            </para>
          </description>
          <description>
            <para>The device is synchronous but <a href="https://docs.microsoft.com//previous-versions/dd743866(v=vs.85)">waveOutOpen</a> was called without using the <b>WAVE_ALLOWSYNC</b> flag.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use the <a href="https://docs.microsoft.com//previous-versions/dd743860(v=vs.85)">waveOutGetNumDevs</a> function to determine the number of waveform-audio output devices present in the system. If the value specified by the <i>uDeviceID</i> parameter is a device identifier, it can vary from zero to one less than the number of devices present. The <b>WAVE_MAPPER</b> constant can also be used as a device identifier.</para>
      <para>The structure pointed to by <i>pwfx</i> can be extended to include type-specific information for certain data formats. For example, for PCM data, an extra <b>UINT</b> is added to specify the number of bits per sample. Use the <a href="https://docs.microsoft.com//previous-versions/dd743663(v=vs.85)">PCMWAVEFORMAT</a> structure in this case. For all other waveform-audio formats, use the <a href="https://docs.microsoft.com//previous-versions/dd757713(v=vs.85)">WAVEFORMATEX</a> structure to specify the length of the additional data.</para>
      <para>If you choose to have a window or thread receive callback information, the following messages are sent to the window procedure function to indicate the progress of waveform-audio output: <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-open">MM_WOM_OPEN</a>, <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-close">MM_WOM_CLOSE</a>, and <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-done">MM_WOM_DONE</a>.</para>
      <h3>Callback Mechanism</h3>
      <para>The <i>dwCallback</i> and <i>fdwOpen</i> parameters specify how the application is notified about  the progress of waveform-audio output.</para>
      <para>If <i>fdwOpen</i> contains the <b>CALLBACK_FUNCTION</b> flag, <i>dwCallback</i> is a pointer to a callback function. For the function signature, see <a href="https://docs.microsoft.com//previous-versions/dd743869(v=vs.85)">waveOutProc</a>. The <i>uMsg</i> parameter of the callback indicates the progress of the audio output:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wom-open">WOM_OPEN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wom-close">WOM_CLOSE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/wom-done">WOM_DONE</a>
          </description>
        </item>
      </list>
      <para>If <i>fdwOpen</i> contains the <b>CALLBACK_WINDOW</b> flag, <i>dwCallback</i> is a handle to a window.The window receives the following messages, indicating the progress:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-open">MM_WOM_OPEN</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-close">MM_WOM_CLOSE</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Multimedia/mm-wom-done">MM_WOM_DONE</a>
          </description>
        </item>
      </list>
      <para>If <i>fdwOpen</i> contains the <b>CALLBACK_THREAD</b> flag, <i>dwCallback</i> is a thread identifier. The thread receives the messages listed previously for <b>CALLBACK_WINDOW</b>.</para>
      <para>If <i>fdwOpen</i> contains the <b>CALLBACK_EVENT</b> flag, <i>dwCallback</i> is a handle to an event. The event is signaled whenever the state of the waveform buffer changes. The application can use <see cref="WaitForSingleObject" /> or <see cref="WaitForMultipleObjects" /> to wait for the event. When the event is signaled, you can get the current state of the waveform buffer by checking the <b>dwFlags</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure. (See <a href="https://docs.microsoft.com//previous-versions/dd743868(v=vs.85)">waveOutPrepareHeader</a>.)</para>
      <para>If <i>fdwOpen</i> contains the <b>CALLBACK_NULL</b> flag, <i>dwCallback</i> must be <b>NULL</b>. In that case, no callback mechanism is used.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/using-a-callback-function-to-process-driver-messages">Using a Callback Function to Process Driver Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/using-a-window-or-thread-to-process-driver-messages">Using a Window or Thread to Process Driver Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/using-an-callback-to-process-driver-messages">Using an Event Callback to Process Driver Messages</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutPause">
    <summary>
      <para>The <b>waveOutPause</b> function pauses playback on the given waveform-audio output device. The current position is saved. Use the <a href="https://docs.microsoft.com//previous-versions/dd743871(v=vs.85)">waveOutRestart</a> function to resume playback from the current position.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Specified device is synchronous and does not support pausing.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Calling this function when the output is already paused has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutPrepareHeader">
    <summary>
      <para>The <b>waveOutPrepareHeader</b> function prepares a waveform-audio data block for playback.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure that identifies the data block to be prepared.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure.</para>
    </param>
    <returns>
      <para>Returns <b>MMSYSERR_NOERROR</b> if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Set the <b>lpData</b>, <b>dwBufferLength</b>, and <b>dwFlags</b> members of the <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure before calling this function. Set the <b>dwFlags</b> member to zero.</para>
      <para>The <b>dwFlags</b>, <b>dwBufferLength</b>, and <b>dwLoops</b> members of the <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure can change between calls to this function and the <a href="https://docs.microsoft.com//previous-versions/dd743876(v=vs.85)">waveOutWrite</a> function. If you change the size specified by <b>dwBufferLength</b> before the call to <b>waveOutWrite</b>, the new value must be less than the prepared value.</para>
      <para>If the method succeeds, the <b>WHDR_PREPARED</b> flag is set in the <b>dwFlags</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure.</para>
      <para>Preparing a header that has already been prepared has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutReset">
    <summary>
      <para>The <b>waveOutReset</b> function stops playback on the given waveform-audio output device and resets the current position to zero. All pending playback buffers are marked as done (WHDR_DONE) and returned to the application.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Specified device is synchronous and does not support pausing.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>After this function returns, the application can send new playback buffers to the device by calling <a href="https://docs.microsoft.com//previous-versions/dd743876(v=vs.85)">waveOutWrite</a>, or close the device by calling <a href="https://docs.microsoft.com//previous-versions/dd743856(v=vs.85)">waveOutClose</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutRestart">
    <summary>
      <para>The <b>waveOutRestart</b> function resumes playback on a paused waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Specified device is synchronous and does not support pausing.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Calling this function when the output is not paused has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutSetPitch">
    <summary>
      <para>The <b>waveOutSetPitch</b> function sets the pitch for the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="dwPitch">
      <para>New pitch multiplier setting. This setting indicates the current change in pitch from the original authored setting. The pitch multiplier must be a positive value.</para>
      <para>The pitch multiplier is specified as a fixed-point value. The high-order word contains the signed integer part of the number, and the low-order word contains the fractional part. A value of 0x8000 in the low-order word represents one-half, and 0x4000 represents one-quarter. For example, the value 0x00010000 specifies a multiplier of 1.0 (no pitch change), and a value of 0x000F8000 specifies a multiplier of 15.5.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function isn't supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Changing the pitch does not change the playback rate or the sample rate, nor does it change the playback time. Not all devices support pitch changes. To determine whether the device supports pitch control, use the WAVECAPS_PITCH flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by the <b>waveOutGetDevCaps</b> function).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutSetPlaybackRate">
    <summary>
      <para>The <b>waveOutSetPlaybackRate</b> function sets the playback rate for the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="dwRate">
      <para>New playback rate setting. This setting is a multiplier indicating the current change in playback rate from the original authored setting. The playback rate multiplier must be a positive value.</para>
      <para>The rate is specified as a fixed-point value. The high-order word contains the signed integer part of the number, and the low-order word contains the fractional part. A value of 0x8000 in the low-order word represents one-half, and 0x4000 represents one-quarter. For example, the value 0x00010000 specifies a multiplier of 1.0 (no playback rate change), and a value of 0x000F8000 specifies a multiplier of 15.5.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function isn't supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Changing the playback rate does not change the sample rate but does change the playback time. Not all devices support playback rate changes. To determine whether a device supports playback rate changes, use the WAVECAPS_PLAYBACKRATE flag to test the <b>dwSupport</b> member of the <b>WAVEOUTCAPS</b> structure (filled by the <b>waveOutGetDevCaps</b> function).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutSetVolume">
    <summary>
      <para>The <b>waveOutSetVolume</b> function sets the volume level of the specified waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to an open waveform-audio output device. This parameter can also be a device identifier.</para>
    </param>
    <param name="dwVolume">
      <para>New volume setting. The low-order word contains the left-channel volume setting, and the high-order word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0000 is silence.</para>
      <para>If a device does not support both left and right volume control, the low-order word of <i>dwVolume</i> specifies the volume level, and the high-order word is ignored.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOTSUPPORTED</b>
            </para>
          </description>
          <description>
            <para>Function is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a device identifier is used, then the result of the <b>waveOutSetVolume</b> call applies to all instances of the device. If a device handle is used, then the result applies only to the instance of the device referenced by the device handle.</para>
      <para>Not all devices support volume changes. To determine whether the device supports volume control, use the WAVECAPS_VOLUME flag to test the <b>dwSupport</b> member of the <a href="https://docs.microsoft.com//previous-versions/dd743855(v=vs.85)">WAVEOUTCAPS</a> structure (filled by the <a href="https://docs.microsoft.com//previous-versions/dd743857(v=vs.85)">waveOutGetDevCaps</a> function). To determine whether the device supports volume control on both the left and right channels, use the WAVECAPS_LRVOLUME flag.</para>
      <para>Most devices do not support the full 16 bits of volume-level control and will not use the least-significant bits of the requested volume setting. For example, if a device supports 4 bits of volume control, the values 0x4000, 0x4FFF, and 0x43BE will all be truncated to 0x4000. The <b>waveOutGetVolume</b> function returns the full 16-bit setting set with <b>waveOutSetVolume</b>.</para>
      <para>Volume settings are interpreted logarithmically. This means the perceived increase in volume is the same when increasing the volume level from 0x5000 to 0x6000 as it is from 0x4000 to 0x5000.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutUnprepareHeader">
    <summary>
      <para>The <b>waveOutUnprepareHeader</b> function cleans up the preparation performed by the <a href="https://docs.microsoft.com//previous-versions/dd743868(v=vs.85)">waveOutPrepareHeader</a> function. This function must be called after the device driver is finished with a data block. You must call this function before freeing the buffer.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure identifying the data block to be cleaned up.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <b>WAVEHDR</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_STILLPLAYING</b>
            </para>
          </description>
          <description>
            <para>The data block pointed to by the <i>pwh</i> parameter is still in the queue.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function complements <b>waveOutPrepareHeader</b>. You must call this function before freeing the buffer. After passing a buffer to the device driver with the <b>waveOutWrite</b> function, you must wait until the driver is finished with the buffer before calling <b>waveOutUnprepareHeader</b>.</para>
      <para>Unpreparing a buffer that has not been prepared has no effect, and the function returns zero.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
  <member name="Windows.waveOutWrite">
    <summary>
      <para>The <b>waveOutWrite</b> function sends a data block to the given waveform-audio output device.</para>
    </summary>
    <param name="hwo">
      <para>Handle to the waveform-audio output device.</para>
    </param>
    <param name="pwh">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/dd743837(v=vs.85)">WAVEHDR</a> structure containing information about the data block.</para>
    </param>
    <param name="cbwh">
      <para>Size, in bytes, of the <b>WAVEHDR</b> structure.</para>
    </param>
    <returns>
      <para>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MMSYSERR_INVALHANDLE</b>
            </para>
          </description>
          <description>
            <para>Specified device handle is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NODRIVER</b>
            </para>
          </description>
          <description>
            <para>No device driver is present.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MMSYSERR_NOMEM</b>
            </para>
          </description>
          <description>
            <para>Unable to allocate or lock memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>WAVERR_UNPREPARED</b>
            </para>
          </description>
          <description>
            <para>The data block pointed to by the <i>pwh</i> parameter hasn't been prepared.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the buffer is finished, the WHDR_DONE bit is set in the <b>dwFlags</b> member of the <b>WAVEHDR</b> structure.</para>
      <para>The buffer must be prepared with the <b>waveOutPrepareHeader</b> function before it is passed to <b>waveOutWrite</b>. Unless the device is paused by calling the <b>waveOutPause</b> function, playback begins when the first data block is sent to the device.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-audio">Waveform Audio</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Multimedia/waveform-functions">Waveform Functions</seealso>
  </member>
</doc>