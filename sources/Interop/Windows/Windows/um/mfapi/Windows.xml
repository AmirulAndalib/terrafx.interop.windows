<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.DEFINE_MEDIATYPE_GUID">
    <summary>Defines a media subtype GUID from a FOURCC code, <b>D3DFORMAT</b> value, or audio format type.</summary>
    <param name="name">The name of the GUID constant to be defined.</param>
    <param name="format">A FOURCC code, D3DFORMAT value, or audio format type.</param>
  </member>
  <member name="Windows.MFAddPeriodicCallback">
    <summary>Sets a callback function to be called at a fixed interval.</summary>
    <param name="Callback">Pointer to the callback function, of type <a href="https://docs.microsoft.com//windows/desktop/api/mfapi/nc-mfapi-mfperiodiccallback">MFPERIODICCALLBACK</a>.</param>
    <param name="pContext">Pointer to a caller-provided object that implements <b>IUnknown</b>, or <b>NULL</b>. This parameter is passed to the callback function.</param>
    <param name="pdwKey">Receives a key that can be used to cancel the callback. To cancel the callback, call <see cref="MFRemovePeriodicCallback" /> and pass this key as the <i>dwKey</i> parameter.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFAllocateSerialWorkQueue">
    <summary>Creates a work queue that is guaranteed to serialize work items. The serial work queue wraps an existing multithreaded work queue. The serial work queue enforces a first-in, first-out (FIFO) execution order.</summary>
    <param name="dwWorkQueue">
      <para>The identifier of an existing work queue. This must be either a multithreaded queue or another serial work queue. Any of the following can be used:</para>
      <list type="bullet">
        <item>
          <description>The default work queue (<b>MFASYNC_CALLBACK_QUEUE_STANDARD</b>)</description>
        </item>
        <item>
          <description>The platform multithreaded queue (<b>MFASYNC_CALLBACK_QUEUE_MULTITHREADED</b>)</description>
        </item>
        <item>
          <description>A multithreaded queue returned by the <see cref="MFLockSharedWorkQueue" /> function.</description>
        </item>
        <item>
          <description>A serial queue created by the <b>MFAllocateSerialWorkQueue</b> function.</description>
        </item>
      </list>
    </param>
    <param name="pdwWorkQueue">Receives an identifier for the new serial work queue. Use this identifier when queuing work items.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application exceeded the maximum number of work queues.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFAllocateWorkQueue">
    <summary>Creates a new work queue.</summary>
    <param name="pdwWorkQueue">Receives an identifier for the work queue.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application exceeded the maximum number of work queues.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFAllocateWorkQueueEx">
    <summary>Creates a new work queue. This function extends the capabilities of the <see cref="MFAllocateWorkQueue" /> function by making it possible to create a work queue that has a message loop.</summary>
    <param name="WorkQueueType">
      <para>A member of the <see cref="MFASYNC_WORKQUEUE_TYPE" /> enumeration, specifying the type of work queue to create.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MULTITHREADED_WORKQUEUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Create a multithreaded work queue. Generally, applications should not create private multithreaded queues. Use the platform multithreaded queues instead. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STANDARD_WORKQUEUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Create a work queue without a message loop. Using this flag is equivalent to calling <see cref="MFAllocateWorkQueue" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_WINDOW_WORKQUEUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Create a work queue with a message loop. The thread that dispatches the work items for this queue will also call <see cref="PeekMessage" /> and <see cref="DispatchMessage" />. Use this option if your callback performs any actions that require a message loop.</description>
        </listheader>
      </list>
    </param>
    <param name="pdwWorkQueue">Receives an identifier for the work queue that was created.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application exceeded the maximum number of work queues.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid argument.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFAverageTimePerFrameToFrameRate">
    <summary>Calculates the frame rate, in frames per second, from the average duration of a video frame.</summary>
    <param name="unAverageTimePerFrame">The average duration of a video frame, in 100-nanosecond units.</param>
    <param name="punNumerator">Receives the numerator of the frame rate.</param>
    <param name="punDenominator">Receives the denominator of the frame rate.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFBeginCreateFile">
    <summary>Begins an asynchronous request to create a byte stream from a file.</summary>
    <param name="AccessMode">The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</param>
    <param name="OpenMode">The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</param>
    <param name="fFlags">Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</param>
    <param name="pwszFilePath">Pointer to a null-terminated string containing the file name.</param>
    <param name="pCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface</param>
    <param name="pState">Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <param name="ppCancelCookie">Receives an <b>IUnknown</b> pointer or the value <b>NULL</b>. If the value is not <b>NULL</b>, you can cancel the asynchronous operation by passing this pointer to the <see cref="MFCancelCreateFile" /> function. The caller must release the interface. This parameter is optional and can be <b>NULL</b>.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFBeginRegisterWorkQueueWithMMCSS">
    <summary>Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <param name="dwWorkQueueId">The identifier of the work queue. For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</param>
    <param name="wszClass">The name of the MMCSS task.For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/multimedia-class-scheduler-service">Multimedia Class Scheduler Service</a>.</param>
    <param name="dwTaskId">The unique task identifier. To obtain a new task identifier, set this value to zero.</param>
    <param name="pDoneCallback">A pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="pDoneState">A pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFBeginRegisterWorkQueueWithMMCSSEx">
    <summary>Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <param name="dwWorkQueueId">The identifier of the work queue. For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</param>
    <param name="wszClass">The name of the MMCSS task. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/multimedia-class-scheduler-service">Multimedia Class Scheduler Service</a>.</param>
    <param name="dwTaskId">The unique task identifier. To obtain a new task identifier, set this value to zero.</param>
    <param name="lPriority">The base relative priority for the work-queue threads. For more information, see <see cref="AvSetMmThreadPriority" />.</param>
    <param name="pDoneCallback">A pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="pDoneState">A pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFBeginUnregisterWorkQueueWithMMCSS">
    <summary>Unregisters a work queue from a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <param name="dwWorkQueueId">The identifier of the work queue. For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</param>
    <param name="pDoneCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</param>
    <param name="pDoneState">Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCalculateBitmapImageSize">
    <summary>Retrieves the image size for a video format. Given a <see cref="BITMAPINFOHEADER" /> structure, this function calculates the correct value of the <b>biSizeImage</b> member.</summary>
    <param name="pBMIH">Pointer to a <b>BITMAPINFOHEADER</b> structure that describes the format.</param>
    <param name="cbBufSize">Size of the <i>pBMIH</i> buffer, in bytes. The size includes any color masks or palette entries that follow the <b>BITMAPINFOHEADER</b> structure.</param>
    <param name="pcbImageSize">Receives the image size, in bytes.</param>
    <param name="pbKnown">Receives the value <b>TRUE</b> if the function recognizes the video format. Otherwise, receives the value <b>FALSE</b>. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>BITMAPINFOHEADER</b> structure is not valid, or the value of <i>cbBufSize</i> is too small.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCalculateImageSize">
    <summary>Retrieves the image size, in bytes, for an uncompressed video format.</summary>
    <param name="guidSubtype">Media subtype for the video format. For a list of subtypes, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-type-guids">Media Type GUIDs</a>.</param>
    <param name="unWidth">Width of the image, in pixels.</param>
    <param name="unHeight">Height of the image, in pixels.</param>
    <param name="pcbImageSize">Receives the size of each frame, in bytes. If the format is compressed or is not recognized, the value is zero.</param>
    <returns>
      <para>The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCancelCreateFile">
    <summary>Cancels an asynchronous request to create a byte stream from a file.</summary>
    <param name="pCancelCookie">A pointer to the <b>IUnknown</b> interface of the cancellation object. This pointer is received in the <i>ppCancelCookie</i> parameter of the <see cref="MFBeginCreateFile" /> function.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCancelWorkItem">
    <summary>Attempts to cancel an asynchronous operation that was scheduled with <see cref="MFScheduleWorkItem" /> or <see cref="MFScheduleWorkItemEx" />.</summary>
    <param name="Key">The key that was received in the <i>pKey</i> parameter of the <see cref="MFScheduleWorkItem" />, <see cref="MFScheduleWorkItemEx" />, or <see cref="MFPutWaitingWorkItem" /> functions.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCombineSamples">
    <summary>Concatenates a media sample onto another sample if their combined duration does not exceed the specified duration.</summary>
    <param name="pSample">A pointer to an <see cref="IMFSample" /> to which the sample provided in the <i>pSampleToAdd</i> parameter is appended.</param>
    <param name="pSampleToAdd">A pointer to an <see cref="IMFSample" /> to append to the sample provided in the <i>pSample</i> parameter.</param>
    <param name="dwMaxMergedDurationInMS">The maximum duration in milliseconds that the combined sample can fill for the operation to be successful.</param>
    <param name="pMerged">Output parameter that receives a BOOL indicating whether the sample was successfully appended.</param>
    <returns>Returns HRESULT.</returns>
  </member>
  <member name="Windows.MFCompareFullToPartialMediaType">
    <summary>Compares a full media type to a partial media type.</summary>
    <param name="pMFTypeFull">Pointer to the <see cref="IMFMediaType" /> interface of the full media type.</param>
    <param name="pMFTypePartial">Pointer to the <see cref="IMFMediaType" /> interface of the partial media type.</param>
    <returns>If the full media type is compatible with the partial media type, the function returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.MFConvertFromFP16Array">
    <summary>Converts an array of 16-bit floating-point numbers into an array of 32-bit floating-point numbers.</summary>
    <param name="pDest">Pointer to an array of <b>float</b> values. The array must contain at least <i>dwCount</i> elements.</param>
    <param name="pSrc">Pointer to an array of 16-bit floating-point values, typed as <b>WORD</b> values. The array must contain at least <i>dwCount</i> elements.</param>
    <param name="dwCount">Number of elements in the <i>pSrc</i> array to convert.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFConvertToFP16Array">
    <summary>Converts an array of 32-bit floating-point numbers into an array of 16-bit floating-point numbers.</summary>
    <param name="pDest">Pointer to an array of 16-bit floating-point values, typed as <b>WORD</b> values. The array must contain at least <i>dwCount</i> elements.</param>
    <param name="pSrc">Pointer to an array of <b>float</b> values. The array must contain at least <i>dwCount</i> elements.</param>
    <param name="dwCount">Number of elements in the <i>pSrc</i> array to convert.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCopyImage">
    <summary>Copies an image or image plane from one buffer to another.</summary>
    <param name="pDest">Pointer to the start of the first row of pixels in the destination buffer.</param>
    <param name="lDestStride">Stride of the destination buffer, in bytes.</param>
    <param name="pSrc">Pointer to the start of the first row of pixels in the source image.</param>
    <param name="lSrcStride">Stride of the source image, in bytes.</param>
    <param name="dwWidthInBytes">Width of the image, in bytes.</param>
    <param name="dwLines">Number of rows of pixels to copy.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreate2DMediaBuffer">
    <summary>Creates a system-memory buffer object to hold 2D image data.</summary>
    <param name="dwWidth">Width of the image, in pixels.</param>
    <param name="dwHeight">Height of the image, in pixels.</param>
    <param name="dwFourCC">A <b>FOURCC</b> code or <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a> value that specifies the video format. If you have a video subtype GUID, you can use the first <b>DWORD</b> of the subtype.</param>
    <param name="fBottomUp">
      <para>If <b>TRUE,</b> the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with DirectX.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDMEDIATYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unrecognized video format.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateAlignedMemoryBuffer">
    <summary>Allocates system memory with a specified byte alignment and creates a media buffer to manage the memory.</summary>
    <param name="cbMaxLength">Size of the buffer, in bytes.</param>
    <param name="cbAligment">
      <para>Specifies the memory alignment for the buffer. Use one of the following constants.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_1_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Align to 1 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_2_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Align to 2 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_4_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003</term>
              </listheader>
            </list>
          </description>
          <description>Align to 4 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_8_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000007</term>
              </listheader>
            </list>
          </description>
          <description>Align to 8 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_16_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000000F</term>
              </listheader>
            </list>
          </description>
          <description>Align to 16 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_32_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000001F</term>
              </listheader>
            </list>
          </description>
          <description>Align to 32 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_64_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000003F</term>
              </listheader>
            </list>
          </description>
          <description>Align to 64 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_128_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000007F</term>
              </listheader>
            </list>
          </description>
          <description>Align to 128 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_256_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x000000FF</term>
              </listheader>
            </list>
          </description>
          <description>Align to 256 bytes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_512_BYTE_ALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x000001FF</term>
              </listheader>
            </list>
          </description>
          <description>Align to 512 bytes.</description>
        </listheader>
      </list>
    </param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface of the media buffer. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateAMMediaTypeFromMFMediaType">
    <summary>Creates a DirectShow <b>AM_MEDIA_TYPE</b> structure from a Media Foundation media type.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to convert.</param>
    <param name="guidFormatBlockType">Format type GUID. This value corresponds to the <b>formattype</b> member of the <b>AM_MEDIA_TYPE</b> structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype.</param>
    <param name="ppAMType">Receives a pointer to an <b>AM_MEDIA_TYPE</b> structure. The caller must release the memory allocated for the structure by calling <see cref="CoTaskMemFree" />. The function also allocates memory for the format block, which the caller must release by calling <b>CoTaskMemFree</b> on the <b>pbFormat</b> member.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateAsyncResult">
    <summary>Creates an asynchronous result object. Use this function if you are implementing an asynchronous method.</summary>
    <param name="punkObject">Pointer to the object stored in the asynchronous result. This pointer is returned by the <see cref="IMFAsyncResult.GetObject" /> method. This parameter can be <b>NULL</b>.</param>
    <param name="pCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface. This interface is implemented by the caller of the asynchronous method.</param>
    <param name="punkState">Pointer to the <b>IUnknown</b> interface of a state object. This value is provided by the caller of the asynchronous method. This parameter can be <b>NULL</b>.</param>
    <param name="ppAsyncResult">Receives a pointer to the <see cref="IMFAsyncResult" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateAttributes">
    <summary>Creates an empty attribute store.</summary>
    <param name="ppMFAttributes">Receives a pointer to the <see cref="IMFAttributes" /> interface. The caller must release the interface.</param>
    <param name="cInitialSize">The initial number of elements allocated for the attribute store. The attribute store grows as needed.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateCollection">
    <summary>Creates an empty collection object.</summary>
    <param name="ppIMFCollection">Receives a pointer to the collection object's <see cref="IMFCollection" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateDXGIDeviceManager">
    <summary>Creates an instance of the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</summary>
    <param name="resetToken">Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling <see cref="IMFDXGIDeviceManager.ResetDevice" />.</param>
    <param name="ppDeviceManager">Receives a pointer to the <see cref="IMFDXGIDeviceManager" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateDXGISurfaceBuffer">
    <summary>Creates a media buffer to manage a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</summary>
    <param name="riid">Identifies the type of DXGI surface. This value must be <b>IID_ID3D11Texture2D</b>.</param>
    <param name="punkSurface">A pointer to the <see cref="IUnknown" /> interface of the DXGI surface.</param>
    <param name="uSubresourceIndex">The zero-based index of a subresource of the surface. The media buffer object is associated with this subresource.</param>
    <param name="fBottomUpWhenLinear">
      <para>If <b>TRUE</b>, the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with Direct3D.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the buffer.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateDXSurfaceBuffer">
    <summary>Creates a media buffer object that manages a Direct3D 9 surface.</summary>
    <param name="riid">Identifies the type of Direct3D 9 surface. Currently this value must be <b>IID_IDirect3DSurface9</b>.</param>
    <param name="punkSurface">A pointer to the <see cref="IUnknown" /> interface of the DirectX surface.</param>
    <param name="fBottomUpWhenLinear">
      <para>If <b>TRUE</b>, the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with DirectX.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the buffer.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid argument.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateEventQueue">
    <summary>Creates an event queue.</summary>
    <param name="ppMediaEventQueue">Receives a pointer to the <see cref="IMFMediaEventQueue" /> interface of the event queue. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateFile">
    <summary>Creates a byte stream from a file.</summary>
    <param name="AccessMode">The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</param>
    <param name="OpenMode">The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</param>
    <param name="fFlags">Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</param>
    <param name="pwszFileURL">Pointer to a null-terminated string that contains the file name.</param>
    <param name="ppIByteStream">Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateLegacyMediaBufferOnMFMediaBuffer">
    <summary>Converts a Media Foundation media buffer into a buffer that is compatible with DirectX Media Objects (DMOs).</summary>
    <param name="pSample">Pointer to the <see cref="IMFSample" /> interface of the sample that contains the Media Foundation buffer. This parameter can be <b>NULL</b>.</param>
    <param name="pMFMediaBuffer">Pointer to the <see cref="IMFMediaBuffer" /> interface of the Media Foundation buffer.</param>
    <param name="cbOffset">Offset in bytes from the start of the Media Foundation buffer. This offset defines where the DMO buffer starts. If this parameter is zero, the DMO buffer starts at the beginning of the Media Foundation buffer.</param>
    <param name="ppMediaBuffer">Receives a pointer to the <b>IMediaBuffer</b> interface. This interface is documented in the DirectShow SDK documentation. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid argument. The <i>pIMFMediaBuffer</i> parameter must not be <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMediaBufferFromMediaType">
    <summary>Allocates a system-memory buffer that is optimal for a specified media type.</summary>
    <param name="pMediaType">A pointer to the <see cref="IMFMediaType" /> interface of the media type.</param>
    <param name="llDuration">The sample duration. This value is required for audio formats.</param>
    <param name="dwMinLength">The minimum size of the buffer, in bytes. The actual buffer size might be larger. Specify zero to allocate the default buffer size for the media type.</param>
    <param name="dwMinAlignment">The minimum memory alignment for the buffer. Specify zero to use the default memory alignment.</param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMediaBufferWrapper">
    <summary>Creates a media buffer that wraps an existing media buffer. The new media buffer points to the same memory as the original media buffer, or to an offset from the start of the memory.</summary>
    <param name="pBuffer">A pointer to the <see cref="IMFMediaBuffer" /> interface of the original media buffer.</param>
    <param name="cbOffset">The start of the new buffer, as an offset in bytes from the start of the original buffer.</param>
    <param name="dwLength">The size of the new buffer. The value of <i>cbOffset</i> + <i>dwLength</i> must be less than or equal to the size of valid data the original buffer. (The size of the valid data is returned by the <see cref="IMFMediaBuffer.GetCurrentLength" /> method.)</param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested offset or the requested length is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMediaEvent">
    <summary>Creates a media event object.</summary>
    <param name="met">The event type. See <see cref="IMFMediaEvent.GetType" />. For a list of event types, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-events">Media Foundation Events</a>.</param>
    <param name="guidExtendedType">The extended type. See <see cref="IMFMediaEvent.GetExtendedType" />. If the event type does not have an extended type, use the value GUID_NULL.</param>
    <param name="hrStatus">The event status. See <see cref="IMFMediaEvent.GetStatus" /></param>
    <param name="pvValue">The value associated with the event, if any. See <see cref="IMFMediaEvent.GetValue" />. This parameter can be <b>NULL</b>.</param>
    <param name="ppEvent">Receives a pointer to the <see cref="IMFMediaEvent" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMediaExtensionActivate">
    <summary>Creates an activation object for a Windows Runtime class.</summary>
    <param name="szActivatableClassId">The class identifier that is associated with the activatable runtime class.</param>
    <param name="pConfiguration">A pointer to an optional <a href="https://docs.microsoft.com//uwp/api/windows.foundation.collections.ipropertyset">IPropertySet</a> object, which is used to configure the Windows Runtime class. This parameter can be <b>NULL</b>.</param>
    <param name="riid">
      <para>The interface identifier (IID) of the interface being requested. The activation object created by this function supports the following interfaces:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IClassFactory" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFActivate" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IPersistStream" />
          </description>
        </item>
      </list>
    </param>
    <param name="ppvObject">Receives a pointer to the requested interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMediaType">
    <summary>Creates an empty media type.</summary>
    <param name="ppMFType">Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMediaTypeFromRepresentation">
    <summary>Creates a Media Foundation media type from another format representation.</summary>
    <param name="guidRepresentation">
      <para>GUID that specifies which format representation to convert. The following value is defined.</para>
      <list type="table">
        <listheader>
          <description>GUID</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>AM_MEDIA_TYPE_REPRESENTATION</description>
          <description>Convert a DirectShow <b>AM_MEDIA_TYPE</b> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pvRepresentation">Pointer to a buffer that contains the format representation to convert. The layout of the buffer depends on the value of <i>guidRepresentation</i>.</param>
    <param name="ppIMediaType">Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_UNSUPPORTED_REPRESENTATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The GUID specified in <i>guidRepresentation</i> is not supported.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMemoryBuffer">
    <summary>Allocates system memory and creates a media buffer to manage it.</summary>
    <param name="cbMaxLength">Size of the buffer, in bytes.</param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface of the media buffer. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMFByteStreamWrapper">
    <summary>Creates a wrapper for a byte stream.</summary>
    <param name="pStream">A pointer to the <see cref="IMFByteStream" /> interface of the original byte stream.</param>
    <param name="ppStreamWrapper">Receives a pointer to the <see cref="IMFByteStream" /> interface of the wrapper. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateMuxStreamAttributes">
    <summary>Creates an <see cref="IMFAttributes" /> describing the content of multiplexed substreams.</summary>
    <param name="pAttributesToMux">The collection containing the <see cref="IMFAttributes" /> for each multiplexed substream.</param>
    <param name="ppMuxAttribs">The <see cref="IMFAttributes" /> containing the attributes for the multiplexed substreams.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pAttributesToMux</i> parameter in null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMuxStreamMediaType">
    <summary>Creates an <see cref="IMFMediaType" /> describing the media types of multiplexed substreams.</summary>
    <param name="pMediaTypesToMux">The collection containing the <see cref="IMFMediaType" /> for each multiplexed substream.</param>
    <param name="ppMuxMediaType">The <see cref="IMFMediaType" /> containing the media types for the multiplexed substreams.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pMediaTypesToMux</i> parameter in null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMuxStreamSample">
    <summary>Creates an <see cref="IMFSample" /> containing the samples of multiplexed substreams.</summary>
    <param name="pSamplesToMux">The collection containing the <see cref="IMFSample" /> for each multiplexed substream.</param>
    <param name="ppMuxSample">The <see cref="IMFSample" /> containing the samples for the multiplexed substreams.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pSamplesToMux</i> parameter in null.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSample">
    <summary>Creates an empty media sample.</summary>
    <param name="ppIMFSample">Receives a pointer to the <see cref="IMFSample" /> interface of the media sample. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateTempFile">
    <summary>Creates a byte stream that is backed by a temporary local file.</summary>
    <param name="AccessMode">The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</param>
    <param name="OpenMode">The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</param>
    <param name="fFlags">Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</param>
    <param name="ppIByteStream">Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromBitMapInfoHeader">
    <summary>This function is not implemented.</summary>
    <param name="pbmihBitMapInfoHeader">Reserved.</param>
    <param name="dwPixelAspectRatioX">Reserved.</param>
    <param name="dwPixelAspectRatioY">Reserved.</param>
    <param name="InterlaceMode">Reserved.</param>
    <param name="VideoFlags">Reserved.</param>
    <param name="qwFramesPerSecondNumerator">Reserved.</param>
    <param name="qwFramesPerSecondDenominator">Reserved.</param>
    <param name="dwMaxBitRate">Reserved.</param>
    <param name="ppIVideoMediaType">Reserved.</param>
    <returns>Returns <b>E_FAIL</b>.</returns>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromBitMapInfoHeaderEx">
    <summary>Creates a video media type from a <see cref="BITMAPINFOHEADER" /> structure.</summary>
    <param name="pbmihBitMapInfoHeader">A pointer to the <see cref="BITMAPINFOHEADER" /> structure to convert.</param>
    <param name="cbBitMapInfoHeader">The size of the <see cref="BITMAPINFOHEADER" /> structure in bytes, including the size of any palette entries or color masks that follow the structure.</param>
    <param name="dwPixelAspectRatioX">The X dimension of the pixel aspect ratio.</param>
    <param name="dwPixelAspectRatioY">The Y dimension of the pixel aspect ratio.</param>
    <param name="InterlaceMode">A member of the <see cref="MFVideoInterlaceMode" /> enumeration, specifying how the video is interlaced.</param>
    <param name="VideoFlags">A bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration.</param>
    <param name="dwFramesPerSecondNumerator">The numerator of the frame rate in frames per second.</param>
    <param name="dwFramesPerSecondDenominator">The denominator of the frame rate in frames per second</param>
    <param name="dwMaxBitRate">The approximate data rate of the video stream, in bits per second. If the rate is unknown, set this parameter to zero.</param>
    <param name="ppIVideoMediaType">Receives a pointer to the<see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</param>
    <returns>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromSubtype">
    <summary>Creates a partial video media type with a specified subtype.</summary>
    <param name="pAMSubtype">Pointer to a GUID that specifies the subtype. See <a href="https://docs.microsoft.com//windows/desktop/medfound/video-subtype-guids">Video Subtype GUIDs</a>.</param>
    <param name="ppIVideoMediaType">Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromVideoInfoHeader">
    <summary>Creates a media type from a <b>KS_VIDEOINFOHEADER</b> structure.</summary>
    <param name="pVideoInfoHeader">Pointer to the <b>KS_VIDEOINFOHEADER</b> structure to convert. (This structure is identical to the DirectShow <b>VIDEOINFOHEADER</b> structure.)</param>
    <param name="cbVideoInfoHeader">Size of the <b>KS_VIDEOINFOHEADER</b> structure in bytes.</param>
    <param name="dwPixelAspectRatioX">The X dimension of the pixel aspect ratio. The pixel aspect ratio is <i>dwPixelAspectRatioX</i>:<i>dwPixelAspectRatioY</i>.</param>
    <param name="dwPixelAspectRatioY">The Y dimension of the pixel aspect ratio.</param>
    <param name="InterlaceMode">Member of the <see cref="MFVideoInterlaceMode" /> enumeration that specifies how the video is interlaced.</param>
    <param name="VideoFlags">Bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>KS_VIDEOINFOHEADER</b> structure.</param>
    <param name="ppIVideoMediaType">Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromVideoInfoHeader2">
    <summary>Creates a media type from a <b>KS_VIDEOINFOHEADER2</b> structure.</summary>
    <param name="pVideoInfoHeader">Pointer to the <b>KS_VIDEOINFOHEADER2</b> structure to convert. (This structure is identical to the DirectShow <b>VIDEOINFOHEADER2</b> structure.)</param>
    <param name="cbVideoInfoHeader">Size of the <b>KS_VIDEOINFOHEADER2</b> structure in bytes.</param>
    <param name="AdditionalVideoFlags">Bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration. Use this parameter for format information that is not contained in the <b>KS_VIDEOINFOHEADER2</b> structure.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>KS_VIDEOINFOHEADER2</b> structure.</param>
    <param name="ppIVideoMediaType">Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateVideoSampleAllocatorEx">
    <summary>Creates an object that allocates video samples that are compatible with Microsoft DirectX Graphics Infrastructure (DXGI).</summary>
    <param name="riid">
      <para>The identifier of the interface to retrieve. Specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>IID_IUnknown</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve an <see cref="IUnknown" /> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>IID_IMFVideoSampleAllocator</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve an <see cref="IMFVideoSampleAllocator" /> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>IID_IMFVideoSampleAllocatorEx</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve an <see cref="IMFVideoSampleAllocatorEx" /> pointer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>IID_IMFVideoSampleAllocatorCallback</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve an <see cref="IMFVideoSampleAllocatorCallback" /> pointer.</description>
        </listheader>
      </list>
    </param>
    <param name="ppSampleAllocator">Receives a pointer to the requested interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFCreateWaveFormatExFromMFMediaType">
    <summary>Converts a Media Foundation audio media type to a <b>WAVEFORMATEX</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type.</param>
    <param name="ppWF">Receives a pointer to the <b>WAVEFORMATEX</b> structure. The caller must release the memory allocated for the structure by calling <see cref="CoTaskMemFree" />.</param>
    <param name="pcbSize">Receives the size of the <b>WAVEFORMATEX</b> structure.</param>
    <param name="Flags">Contains a flag from the <see cref="MFWaveFormatExConvertFlags" /> enumeration.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateWICBitmapBuffer">
    <summary>Creates a media buffer object that manages a Windows Imaging Component (WIC) bitmap.</summary>
    <param name="riid">Set this parameter to <code>__uuidof(IWICBitmap)</code>.</param>
    <param name="punkSurface">A pointer to the <see cref="IUnknown" /> interface of the bitmap surface. The bitmap surface must be a WIC bitmap that exposes the <see cref="IWICBitmap" /> interface.</param>
    <param name="ppBuffer">Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFEndCreateFile">
    <summary>Completes an asynchronous request to create a byte stream from a file.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="Invoke" /> method.</param>
    <param name="ppFile">Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFEndRegisterWorkQueueWithMMCSS">
    <summary>Completes an asynchronous request to associate a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</param>
    <param name="pdwTaskId">The unique task identifier.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFEndUnregisterWorkQueueWithMMCSS">
    <summary>Completes an asynchronous request to unregister a work queue from a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFFrameRateToAverageTimePerFrame">
    <summary>Converts a video frame rate into a frame duration.</summary>
    <param name="unNumerator">The numerator of the frame rate.</param>
    <param name="unDenominator">The denominator of the frame rate.</param>
    <param name="punAverageTimePerFrame">Receives the average duration of a video frame, in 100-nanosecond units.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetAttribute2UINT32asUINT64">
    <summary>Gets an attribute whose value is two <b>UINT32</b> values packed into a <b>UINT64</b>.</summary>
    <param name="pAttributes">A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">A <b>GUID</b> that identifies which value to retrieve. The attribute type must be <b>MF_ATTRIBUTE_UINT64</b>.</param>
    <param name="punHigh32">Receives the high-order 32 bits.</param>
    <param name="punLow32">Receives the low-order 32 bits.</param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_ATTRIBUTENOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified key was not found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDTYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The attribute value is not a <b>UINT64</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetAttributeDouble">
    <summary>Returns a <b>double</b> value from an attribute store, or a default value if the attribute is not present.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">GUID that identifies which value to retrieve.</param>
    <param name="fDefault">Default value to return if the attribute store does not contain the specified attribute.</param>
    <returns>Returns a <b>double</b> value.</returns>
  </member>
  <member name="Windows.MFGetAttributeRatio">
    <summary>Retrieves an attribute whose value is a ratio.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">
      <b>GUID</b> that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64.</param>
    <param name="punNumerator">Receives the numerator of the ratio.</param>
    <param name="punDenominator">Receives the denominator of the ratio.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetAttributesAsBlob">
    <summary>Converts the contents of an attribute store to a byte array.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="pBuf">Pointer to an array that receives the attribute data.</param>
    <param name="cbBufSize">Size of the <i>pBuf</i> array, in bytes. To get the required size of the buffer, call <see cref="MFGetAttributesAsBlobSize" />.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_BUFFERTOOSMALL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer given in <i>pBuf</i> is too small.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetAttributesAsBlobSize">
    <summary>Retrieves the size of the buffer needed for the <see cref="MFGetAttributesAsBlob" /> function.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="pcbBufSize">Receives the required size of the array, in bytes.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetAttributeSize">
    <summary>Retrieves an attribute whose value is a size, expressed as a width and height.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">
      <b>GUID</b> that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64.</param>
    <param name="punWidth">Receives the width.</param>
    <param name="punHeight">Receives the height.</param>
    <returns>This function can return one of these values.</returns>
  </member>
  <member name="Windows.MFGetAttributeString">
    <summary>Gets a string value from an attribute store.</summary>
    <param name="pAttributes">A pointer to the <see cref="IMFAttributes" /> interface.</param>
    <param name="guidKey">A GUID that identifies which value to retrieve. The attribute type must be <b>MF_ATTRIBUTE_STRING</b>.</param>
    <param name="ppsz">If the key is found and the value is a string type, this parameter receives a copy of the string. The caller must free the memory for the string by calling <see cref="CoTaskMemFree" />.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetAttributeUINT32">
    <summary>Returns a <b>UINT32</b> value from an attribute store, or a default value if the attribute is not present.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">GUID that identifies which value to retrieve.</param>
    <param name="unDefault">Default value to return if the attribute store does not contain the specified attribute.</param>
    <returns>Returns a <b>UINT32</b> value.</returns>
  </member>
  <member name="Windows.MFGetAttributeUINT64">
    <summary>Returns a <b>UINT64</b> value from an attribute store, or a default value if the attribute is not present.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">GUID that identifies which value to retrieve.</param>
    <param name="unDefault">Default value to return if the attribute store does not contain the specified attribute.</param>
    <returns>Returns a <b>UINT64</b> value.</returns>
  </member>
  <member name="Windows.MFGetContentProtectionSystemCLSID">
    <summary>Gets the class identifier for a content protection system.</summary>
    <param name="guidProtectionSystemID">The GUID that identifies the content protection system.</param>
    <param name="pclsid">Receives the class identifier to the content protection system.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetMFTMerit">
    <summary>Gets the merit value of a hardware codec.</summary>
    <param name="pMFT">A pointer to the <b>IUnknown</b> interface of the Media Foundation transform (MFT) that represents the codec.</param>
    <param name="cbVerifier">The size, in bytes, of the <i>verifier</i> array.</param>
    <param name="verifier">
      <para>The address of a buffer that contains one of the following:</para>
      <list type="bullet">
        <item>
          <description>The class identifier (CLSID) of the MFT.</description>
        </item>
        <item>
          <description>A null-terminated wide-character string that contains the symbol link for the underlying hardware device. Include the size of the terminating null in the value of <i>cbVerifier</i>.</description>
        </item>
      </list>
    </param>
    <param name="merit">Receives the merit value.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetPlaneSize">
    <summary>Retrieves the image size, in bytes, for an uncompressed video format.</summary>
    <param name="format">FOURCC code or <b>D3DFORMAT</b> value that specifies the video format.</param>
    <param name="dwWidth">Width of the image, in pixels.</param>
    <param name="dwHeight">Height of the image, in pixels.</param>
    <param name="pdwPlaneSize">Receives the size of one frame, in bytes. If the format is compressed or is not recognized, this value is zero.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetPluginControl">
    <summary>Gets a pointer to the Microsoft Media Foundation plug-in manager.</summary>
    <param name="ppPluginControl">Receives a pointer to the <see cref="IMFPluginControl" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetStrideForBitmapInfoHeader">
    <summary>Calculates the minimum surface stride for a video format.</summary>
    <param name="format">FOURCC code or <b>D3DFORMAT</b> value that specifies the video format. If you have a video subtype GUID, you can use the first <b>DWORD</b> of the subtype.</param>
    <param name="dwWidth">Width of the image, in pixels.</param>
    <param name="pStride">Receives the minimum surface stride, in pixels.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetTimerPeriodicity">
    <summary>Retrieves the timer interval for the <see cref="MFAddPeriodicCallback" /> function.</summary>
    <param name="Periodicity">Receives the timer interval, in milliseconds.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSClass">
    <summary>Retrieves the Multimedia Class Scheduler Service (MMCSS) class currently associated with this work queue.</summary>
    <param name="dwWorkQueueId">Identifier for the work queue. The identifier is retrieved by the <see cref="MFAllocateWorkQueue" /> function.</param>
    <param name="pwszClass">Pointer to a buffer that receives the name of the MMCSS class. This parameter can be <b>NULL</b>.</param>
    <param name="pcchClass">On input, specifies the size of the <i>pwszClass</i> buffer, in characters. On output, receives the required size of the buffer, in characters. The size includes the terminating null character.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_BUFFERTOOSMALL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pwszClass</i> buffer is too small to receive the task name.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSPriority">
    <summary>Gets the relative thread priority of a work queue.</summary>
    <param name="dwWorkQueueId">The identifier of the work queue. For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</param>
    <param name="lPriority">Receives the relative thread priority.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSTaskId">
    <summary>Retrieves the Multimedia Class Scheduler Service (MMCSS) task identifier currently associated with this work queue.</summary>
    <param name="dwWorkQueueId">Identifier for the work queue. The identifier is retrieved by the <see cref="MFAllocateWorkQueue" /> function.</param>
    <param name="pdwTaskId">Receives the task identifier.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFHeapAlloc">
    <summary>Allocates a block of memory.</summary>
    <param name="nSize">Number of bytes to allocate.</param>
    <param name="dwFlags">Zero or more flags. For a list of valid flags, see <b>HeapAlloc</b> in the Windows SDK documentation.</param>
    <param name="pszFile">Reserved. Set to <b>NULL</b>.</param>
    <param name="line">Reserved. Set to zero.</param>
    <param name="eat">Reserved. Set to <b>eAllocationTypeIgnore</b>.</param>
    <returns>If the function succeeds, it returns a pointer to the allocated memory block. If the function fails, it returns <b>NULL</b>.</returns>
  </member>
  <member name="Windows.MFHeapFree">
    <summary>Frees a block of memory that was allocated by calling the <see cref="MFHeapAlloc" /> function.</summary>
    <param name="pv">Pointer to the memory to free.</param>
  </member>
  <member name="Windows.MFInitAMMediaTypeFromMFMediaType">
    <summary>Initializes a DirectShow <b>AM_MEDIA_TYPE</b> structure from a Media Foundation media type.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to convert.</param>
    <param name="guidFormatBlockType">Format type GUID. This value corresponds to the <b>formattype</b> member of the <b>AM_MEDIA_TYPE</b> structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype.</param>
    <param name="pAMType">Pointer to an <b>AM_MEDIA_TYPE</b> structure. The function allocates memory for the format block. The caller must release the format block by calling <see cref="CoTaskMemFree" /> on the <b>pbFormat</b> member.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDMEDIATYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The media type is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitAttributesFromBlob">
    <summary>Initializes the contents of an attribute store from a byte array.</summary>
    <param name="pAttributes">Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="pBuf">Pointer to the array that contains the initialization data.</param>
    <param name="cbBufSize">Size of the <i>pBuf</i> array, in bytes.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer is not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromAMMediaType">
    <summary>Initializes a media type from a DirectShow <b>AM_MEDIA_TYPE</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pAMType">Pointer to an <b>AM_MEDIA_TYPE</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromMPEG1VideoInfo">
    <summary>Initializes a media type from a DirectShow <b>MPEG1VIDEOINFO</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pMP1VI">Pointer to a <b>MPEG1VIDEOINFO</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <param name="cbBufSize">Size of the <b>MPEG1VIDEOINFO</b> structure, in bytes.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>MPEG1VIDEOINFO</b> structure.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromMPEG2VideoInfo">
    <summary>Initializes a media type from a DirectShow <b>MPEG2VIDEOINFO</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pMP2VI">Pointer to a <b>MPEG2VIDEOINFO</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <param name="cbBufSize">Size of the <b>MPEG2VIDEOINFO</b> structure, in bytes.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>MPEG2VIDEOINFO</b> structure.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromVideoInfoHeader">
    <summary>Initializes a media type from a DirectShow <b>VIDEOINFOHEADER</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pVIH">Pointer to a <b>VIDEOINFOHEADER</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <param name="cbBufSize">Size of the <b>VIDEOINFOHEADER</b> structure, in bytes.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>VIDEOINFOHEADER</b> structure.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromVideoInfoHeader2">
    <summary>Initializes a media type from a DirectShow <b>VIDEOINFOHEADER2</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pVIH2">Pointer to a <b>VIDEOINFOHEADER2</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <param name="cbBufSize">Size of the <b>VIDEOINFOHEADER2</b> structure, in bytes.</param>
    <param name="pSubtype">Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>VIDEOINFOHEADER2</b> structure.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInitMediaTypeFromWaveFormatEx">
    <summary>Initializes a media type from a <b>WAVEFORMATEX</b> structure.</summary>
    <param name="pMFType">Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</param>
    <param name="pWaveFormat">Pointer to a <b>WAVEFORMATEX</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</param>
    <param name="cbBufSize">Size of the <b>WAVEFORMATEX</b> structure, in bytes.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFInvokeCallback">
    <summary>Invokes a callback method to complete an asynchronous operation.</summary>
    <param name="pAsyncResult">Pointer to the <see cref="IMFAsyncResult" /> interface. To create this object, call <see cref="MFCreateAsyncResult" />.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_INVALID_WORKQUEUE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid work queue. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_SHUTDOWN</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="MFShutdown" /> function was called to shut down the Media Foundation platform.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFIsFormatYUV">
    <summary>Queries whether a FOURCC code or <b>D3DFORMAT</b> value is a YUV format.</summary>
    <param name="Format">FOURCC code or <b>D3DFORMAT</b> value.</param>
    <returns>
      <para>The function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value specifies a YUV format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value does not specify a recognized YUV format.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFllMulDiv">
    <summary>Calculates ((a * b) + d) / c, where each term is a 64-bit signed value.</summary>
    <param name="a">A multiplier.</param>
    <param name="b">Another multiplier.</param>
    <param name="c">The divisor.</param>
    <param name="d">The rounding factor.</param>
    <returns>Returns the result of the calculation. If numeric overflow occurs, the function returns _I64_MAX (positive overflow) or LLONG_MIN (negative overflow). If Mfplat.dll cannot be loaded, the function returns _I64_MAX.</returns>
  </member>
  <member name="Windows.MFLockDXGIDeviceManager">
    <summary>Locks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</summary>
    <param name="pResetToken">Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling <see cref="IMFDXGIDeviceManager.ResetDevice" />. This parameter can be <b>NULL</b>.</param>
    <param name="ppManager">Receives a pointer to the <see cref="IMFDXGIDeviceManager" /> interface. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFLockPlatform">
    <summary>Blocks the <see cref="MFShutdown" /> function.</summary>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFLockSharedWorkQueue">
    <summary>Obtains and locks a shared work queue.</summary>
    <param name="wszClass">The name of the MMCSS task.</param>
    <param name="BasePriority">
      <para>The base priority of the work-queue threads.</para>
      <para>If the regular-priority queue is being used (<i>wszClass</i>=""), then the value 0 must be passed in.</para>
    </param>
    <param name="pdwTaskId">The MMCSS task identifier. On input, specify an existing MCCSS task group ID , or use the value zero to create a new task group. If the regular priority queue is being used (<i>wszClass</i>=""), then <b>NULL</b> must be passed in. On output, receives the actual task group ID.</param>
    <param name="pID">Receives an identifier for the new work queue. Use this identifier when queuing work items.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFLockWorkQueue">
    <summary>Locks a work queue.</summary>
    <param name="dwWorkQueue">The identifier for the work queue. The identifier is returned by the <see cref="MFAllocateWorkQueue" /> function.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFMapDX9FormatToDXGIFormat">
    <summary>Converts a Microsoft Direct3D 9 format identifier to a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier.</summary>
    <param name="dx9">The <see cref="D3DFORMAT" /> value or FOURCC code to convert.</param>
    <returns>Returns a <see cref="DXGI_FORMAT" /> value.</returns>
  </member>
  <member name="Windows.MFMapDXGIFormatToDX9Format">
    <summary>Converts a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier to a Microsoft Direct3D 9 format identifier.</summary>
    <param name="dx11">The <see cref="DXGI_FORMAT" /> value to convert.</param>
    <returns>Returns a <see cref="D3DFORMAT" /> value or FOURCC code.</returns>
  </member>
  <member name="Windows.MFPutWaitingWorkItem">
    <summary>Queues a work item that waits for an event to be signaled.</summary>
    <param name="hEvent">A handle to an event object. To create an event object, call <see cref="CreateEvent" /> or <see cref="CreateEventEx" />.</param>
    <param name="Priority">The priority of the work item. Work items are performed in order of priority.</param>
    <param name="pResult">A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</param>
    <param name="pKey">
      <para>Receives a key that can be used to cancel the wait. To cancel the wait, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFPutWorkItem">
    <summary>Puts an asynchronous operation on a work queue.</summary>
    <param name="dwQueue">The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or <see cref="MFAllocateWorkQueueEx" />.</param>
    <param name="pCallback">A pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</param>
    <param name="pState">A pointer to the <see cref="IUnknown" /> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_INVALID_WORKQUEUE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid work queue. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFPutWorkItem2">
    <summary>Puts an asynchronous operation on a work queue, with a specified priority.</summary>
    <param name="dwQueue">The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or MFAllocateWorkQueueEx.</param>
    <param name="Priority">The priority of the work item. Work items are performed in order of priority.</param>
    <param name="pCallback">A pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</param>
    <param name="pState">A pointer to the <see cref="IUnknown" /> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_INVALID_WORKQUEUE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid work queue identifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFPutWorkItemEx">
    <summary>Puts an asynchronous operation on a work queue.</summary>
    <param name="dwQueue">The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or <see cref="MFAllocateWorkQueueEx" />.</param>
    <param name="pResult">A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_INVALID_WORKQUEUE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid work queue identifier. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFPutWorkItemEx2">
    <summary>Puts an asynchronous operation on a work queue, with a specified priority.</summary>
    <param name="dwQueue">The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or <see cref="MFAllocateWorkQueueEx" />.</param>
    <param name="Priority">The priority of the work item. This value should be 1, 0, or -1. Items with a value of 1 are executed before items with a value of 0. Items with a value of -1 are executed after items with a value of 0.</param>
    <param name="pResult">A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>MF_E_INVALID_WORKQUEUE</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid work queue identifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_SHUTDOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFRegisterLocalByteStreamHandler">
    <summary>Registers a byte-stream handler in the caller's process.</summary>
    <param name="szFileExtension">A string that contains the file name extension for this handler.</param>
    <param name="szMimeType">A string that contains the MIME type for this handler.</param>
    <param name="pActivate">A pointer to the <see cref="IMFActivate" /> interface of an activation object. The caller implements this interface. The <see cref="IMFActivate.ActivateObject" /> method of the activation object must create a byte-stream handler. The byte-stream handler exposes the <see cref="IMFByteStreamHandler" /> interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFRegisterLocalSchemeHandler">
    <summary>Registers a scheme handler in the caller's process.</summary>
    <param name="szScheme">A string that contains the scheme. The scheme includes the trailing ':' character; for example, "http:".</param>
    <param name="pActivate">A pointer to the <see cref="IMFActivate" /> interface of an activation object. The caller implements this interface. The<see cref="IMFActivate.ActivateObject" />method of the activation object must create a scheme handler object. The scheme handler exposes the<see cref="IMFSchemeHandler" /> interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFRegisterPlatformWithMMCSS">
    <summary>Registers the standard Microsoft Media Foundation platform work queues with the Multimedia Class Scheduler Service (MMCSS).</summary>
    <param name="wszClass">The name of the MMCSS task.</param>
    <param name="pdwTaskId">The MMCSS task identifier. On input, specify an existing MCCSS task group ID, or use the value zero to create a new task group. On output, receives the actual task group ID.</param>
    <param name="lPriority">The base priority of the work-queue threads.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFRemovePeriodicCallback">
    <summary>Cancels a callback function that was set by the <see cref="MFAddPeriodicCallback" /> function.</summary>
    <param name="dwKey">Key that identifies the callback. This value is retrieved by the <see cref="MFAddPeriodicCallback" /> function.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFScheduleWorkItem">
    <summary>Schedules an asynchronous operation to be completed after a specified interval.</summary>
    <param name="pCallback">Pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</param>
    <param name="pState">Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</param>
    <param name="Timeout">Time-out interval, in milliseconds. Set this parameter to a negative value. The callback is invoked after −<i>Timeout</i> milliseconds. For example, if <i>Timeout</i> is −5000, the callback is invoked after 5000 milliseconds.</param>
    <param name="pKey">Receives a key that can be used to cancel the timer. To cancel the timer, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFScheduleWorkItemEx">
    <summary>Schedules an asynchronous operation to be completed after a specified interval.</summary>
    <param name="pResult">Pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</param>
    <param name="Timeout">Time-out interval, in milliseconds. Set this parameter to a negative value. The callback is invoked after −<i>Timeout</i> milliseconds. For example, if <i>Timeout</i> is −5000, the callback is invoked after 5000 milliseconds.</param>
    <param name="pKey">Receives a key that can be used to cancel the timer. To cancel the timer, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFSetAttribute2UINT32asUINT64">
    <summary>Packs two <b>UINT32</b> values into a <b>UINT64</b> attribute value.</summary>
    <param name="pAttributes">A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</param>
    <param name="unHigh32">The value to store in the high-order 32 bits of the <b>UINT64</b> value.</param>
    <param name="unLow32">The value to store in the low-order 32 bits of the <b>UINT64</b> value.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFSetAttributeRatio">
    <summary>Sets a ratio as a 64-bit attribute value.</summary>
    <param name="pAttributes">A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</param>
    <param name="unNumerator">The numerator of the ratio.</param>
    <param name="unDenominator">The denominator of the ratio.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFSetAttributeSize">
    <summary>Sets width and height as a single 64-bit attribute value.</summary>
    <param name="pAttributes">A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</param>
    <param name="guidKey">A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</param>
    <param name="unWidth">The width.</param>
    <param name="unHeight">The height.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFShutdown">
    <summary>Shuts down the Microsoft Media Foundation platform. Call this function once for every call to <see cref="MFStartup" />. Do not call this function from work queue threads.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFSplitSample">
    <summary>Split up a combined media sample back into individual samples.</summary>
    <param name="pSample">A pointer to an <see cref="IMFSample" /> representing a combined sample to be split.</param>
    <param name="pOutputSamples">Receives a pointer to an array of output samples from the split operation.</param>
    <param name="dwOutputSampleMaxCount">The maximum output array size. Call <see cref="IMFSample.GetBufferCount" /> on the sample provided in <i>pSample</i> to find out an upper bound.</param>
    <param name="pdwOutputSampleCount">Output parameter that receives the number of samples contained in the pOutputSamples array.</param>
  </member>
  <member name="Windows.MFStartup">
    <summary>Initializes Microsoft Media Foundation.</summary>
    <param name="Version">Version number. Use the value <b>MF_VERSION</b>, defined in mfapi.h.</param>
    <param name="dwFlags">
      <para>This parameter is optional when using C++ but required in C. The value must be one of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>MFSTARTUP_NOSOCKET</term>
              </listheader>
            </list>
          </description>
          <description>Do not initialize the sockets library.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>MFSTARTUP_LITE</term>
              </listheader>
            </list>
          </description>
          <description>Equivalent to MFSTARTUP_NOSOCKET.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>MFSTARTUP_FULL</term>
              </listheader>
            </list>
          </description>
          <description>Initialize the entire Media Foundation platform. This is the default value when <i>dwFlags</i> is not specified.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_BAD_STARTUP_VERSION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>Version</i> parameter requires a newer version of Media Foundation than the version that is running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_DISABLED_IN_SAFEMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The Media Foundation platform is disabled because the system was started in "Safe Mode" (fail-safe boot).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTIMPL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Media Foundation is not implemented on the system. This error can occur if the media components are not present (See <a href="https://support.microsoft.com/help/2703761">KB2703761</a> for more info).</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFTEnum">
    <summary>
      <para>Enumerates Media Foundation transforms (MFTs) in the registry.</para>
      <para>Starting in Windows 7, applications should use the <see cref="MFTEnumEx" /> function instead.</para>
    </summary>
    <param name="guidCategory">GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="Flags">Reserved. Must be zero.</param>
    <param name="pInputType">
      <para>Pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>Pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pAttributes">
      <para>Reserved. Set to <b>NULL</b>.</para>
      <div>
        <b>Note</b>  Windows Vista and Windows Server 2008: This parameter can specify a pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The <b>MFTEnum</b> function matches the attributes in this object against the attributes stored in the registry. (Registry attributes are specified in the <i>pAttributes</i> parameter of the <see cref="MFTRegister" /> function.) Only MFTs with matching attributes are returned in the enumeration results.</div>
      <div>
        <b>Note</b>  Windows 7 and later: This parameter is ignored.</div>
    </param>
    <param name="ppclsidMFT">Receives a pointer to an array of CLSIDs. To create an MFT from this list, call <b>CoCreateInstance</b> with one of the CLSIDs. To get information about a particular MFT from its CLSID, call <see cref="MFTGetInfo" />. The caller must free the memory for the array by calling <see cref="CoTaskMemFree" />.</param>
    <param name="pcMFTs">Receives the number of elements in the <i>ppclsidMFT</i> array. The value can be zero.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTEnum2">
    <summary>Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the <see cref="MFTEnumEx" /> function to allow external applications and internal components to discover the hardware MFTs that correspond to a specific video adapter.</summary>
    <param name="guidCategory">A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="Flags">The bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</param>
    <param name="pInputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pAttributes">A pointer to an <see cref="IMFAttributes" /> interface that enables access to the standard attribute store. To specify a specific hardware adapter for which MFTs are queried, set the <a href="https://docs.microsoft.com//windows/win32/medfound/mft-enum-adapter-luid">MFT_ENUM_ADAPTER_LUID</a> attribute to the LUID of the adapter. If you do this, you must also specify the MFT_ENUM_FLAG_HARDWARE flag or E_INVALIDARG is returned.</param>
    <param name="pppMFTActivate">Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the <see cref="CoTaskMemFree" /> function to free the memory for the array.</param>
    <param name="pnumMFTActivate">Receives the number of elements in the <i>pppMFTActivate</i> array. If no MFTs match the search criteria, this parameter receives the value zero.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An <see cref="IMFAttributes" /> containing the MFT_ENUM_ADAPTER_LUID attribute was provided in the <i>pAttributes</i> parameter and the MFT_ENUM_FLAG_HARDWARE flag was not specified.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFTEnumEx">
    <summary>Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the <see cref="MFTEnum" /> function.</summary>
    <param name="guidCategory">A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="Flags">The bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</param>
    <param name="pInputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pppMFTActivate">Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the <see cref="CoTaskMemFree" /> function to free the memory for the array.</param>
    <param name="pnumMFTActivate">Receives the number of elements in the <i>pppMFTActivate</i> array. If no MFTs match the search criteria, this parameter receives the value zero.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTGetInfo">
    <summary>Gets information from the registry about a Media Foundation transform (MFT).</summary>
    <param name="clsidMFT">The CLSID of the MFT.</param>
    <param name="pszName">Receives a pointer to a wide-character string containing the friendly name of the MFT. The caller must free the string by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</param>
    <param name="ppInputTypes">Receives a pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array describes an input format that the MFT supports. The caller must free the array by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</param>
    <param name="pcInputTypes">Receives the number of elements in the <i>ppInputTypes</i> array. If <i>ppInputTypes</i> is <b>NULL</b>, this parameter is ignored and can be <b>NULL</b>.</param>
    <param name="ppOutputTypes">Receives a pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array describes an output format that the MFT supports. The caller must free the array by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</param>
    <param name="pcOutputTypes">Receives the number of elements in the <i>ppOutputType</i> array. If <i>ppOutputTypes</i> is <b>NULL</b>, this parameter is ignored and can be <b>NULL</b>.</param>
    <param name="ppAttributes">
      <para>Receives a pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The caller must release the interface. The attribute store might contain attributes that are stored in the registry for the specified MFT. (For more information, see <see cref="MFTRegister" />.) If no attributes are stored in the registry for this MFT, the attribute store is empty.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTRegister">
    <summary>
      <para>Adds information about a Media Foundation transform (MFT) to the registry.</para>
      <para>Applications can enumerate the MFT by calling the <see cref="MFTEnum" /> or <see cref="MFTEnumEx" /> function.</para>
    </summary>
    <param name="clsidMFT">The CLSID of the MFT. The MFT must also be registered as a COM object using the same CLSID.</param>
    <param name="guidCategory">GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="pszName">Wide-character string that contains the friendly name of the MFT.</param>
    <param name="Flags">
      <para>Bitwise <b>OR</b> of zero or more of the following flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFT_ENUM_FLAG_ASYNCMFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT performs asynchronous processing in software. See <a href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-mfts">Asynchronous MFTs</a>. This flag does not apply to hardware transforms.<para>Requires Windows 7.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFT_ENUM_FLAG_FIELDOFUSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application must unlock the MFT in order to use it. See <see cref="IMFFieldOfUseMFTUnlock" />.<para>Requires Windows 7.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFT_ENUM_FLAG_HARDWARE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. MFTs in this category always process data asynchronously. See <a href="https://docs.microsoft.com//windows/desktop/medfound/hardware-mfts">Hardware MFTs</a>.<div><b>Note</b>  This flag applies to video codecs and video processors that perform their work entirely in hardware. It does not apply to software decoders that use DirectX Video Acceleration to assist decoding.</div>Requires Windows 7.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFT_ENUM_FLAG_SYNCMFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT performs synchronous processing in software. This flag does not apply to hardware transforms.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MFT_ENUM_FLAG_TRANSCODE_ONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT is optimized for transcoding and should not be used for playback.<para>Requires Windows 7.</para></description>
        </listheader>
      </list> <para>Setting <i>Flags</i> to zero is equivalent to setting the <b>MFT_ENUM_FLAG_SYNCMFT</b> flag. The default processing model for MFTs is synchronous processing.</para><para>Prior to Windows 7, the <i>Flags</i> parameter was reserved.</para></param>
    <param name="cInputTypes">Number of elements in the <i>pInputTypes</i> array.</param>
    <param name="pInputTypes">
      <para>Pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports. This parameter can be <b>NULL</b>.</para>
      <para>This parameter can be <b>NULL</b>. However, if the parameter is <b>NULL</b>, the MFT will be enumerated only when an application specifies <b>NULL</b> for the desired input type.</para>
    </param>
    <param name="cOutputTypes">Number of elements in the <i>pOutputTypes</i> array.</param>
    <param name="pOutputTypes">
      <para>Pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports.</para>
      <para>This parameter can be <b>NULL</b>. However, if the parameter is <b>NULL</b>, the MFT will be enumerated only when an application specifies <b>NULL</b> for the desired output type.</para>
    </param>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of an attribute store that contains additional registry information. This parameter can be <b>NULL</b>. If the parameter is non-<b>NULL</b>, the attributes are written to the registry as a byte array. You can use the <see cref="MFTGetInfo" /> function to retrieve the attributes.</para>
      <para>The following attribute is defined for this parameter:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-codec-merit-attribute">MFT_CODEC_MERIT_Attribute</a>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Contains the merit value of a hardware codec. See <a href="https://docs.microsoft.com//windows/desktop/medfound/codec-merit">Codec Merit</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTRegisterLocal">
    <summary>Registers a Media Foundation transform (MFT) in the caller's process.</summary>
    <param name="pClassFactory">A pointer to the <b>IClassFactory</b> interface of a class factory object. The class factory creates the MFT.</param>
    <param name="guidCategory">A GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="pszName">A wide-character null-terminated string that contains the friendly name of the MFT.</param>
    <param name="Flags">A bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</param>
    <param name="cInputTypes">The number of elements in the <i>pInputTypes</i> array.</param>
    <param name="pInputTypes">A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports. This parameter can be <b>NULL</b> if <i>cInputTypes</i> is zero.</param>
    <param name="cOutputTypes">The number of elements in the <i>pOutputTypes</i> array.</param>
    <param name="pOutputTypes">A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports. This parameter can be <b>NULL</b> if <i>cOutputTypes</i> is zero.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTRegisterLocalByCLSID">
    <summary>Registers a Media Foundation transform (MFT) in the caller's process.</summary>
    <param name="clisdMFT">The class identifier (CLSID) of the MFT.</param>
    <param name="guidCategory">A GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</param>
    <param name="pszName">A wide-character null-terminated string that contains the friendly name of the MFT.</param>
    <param name="Flags">A bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</param>
    <param name="cInputTypes">The number of elements in the <i>pInputTypes</i> array.</param>
    <param name="pInputTypes">A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports. This parameter can be <b>NULL</b> if <i>cInputTypes</i> is zero.</param>
    <param name="cOutputTypes">The number of elements in the <i>pOutputTypes</i> array.</param>
    <param name="pOutputTypes">A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports. This parameter can be <b>NULL</b> if <i>cOutputTypes</i> is zero.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTUnregister">
    <summary>Unregisters a Media Foundation transform (MFT).</summary>
    <param name="clsidMFT">The CLSID of the MFT.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFTUnregisterLocal">
    <summary>Unregisters one or more Media Foundation transforms (MFTs) from the caller's process.</summary>
    <param name="pClassFactory">A pointer to the <b>IClassFactory</b> interface of a class factory object. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HRESULT_FROM_WIN32(<b>ERROR_NOT_FOUND</b>)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT specified by the <i>pClassFactory</i> parameter was not registered in this process.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFTUnregisterLocalByCLSID">
    <summary>Unregisters a Media Foundation transform (MFT) from the caller's process.</summary>
    <param name="clsidMFT">The class identifier (CLSID) of the MFT.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>
                    <b>S_OK</b>
                  </b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HRESULT_FROM_WIN32(<b>ERROR_NOT_FOUND</b>)</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The MFT specified by the <i>clsidMFT</i> parameter was not registered in this process.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFUnlockDXGIDeviceManager">
    <summary>Unlocks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFUnlockPlatform">
    <summary>Unlocks the Media Foundation platform after it was locked by a call to the <see cref="MFLockPlatform" /> function.</summary>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFUnlockWorkQueue">
    <summary>Unlocks a work queue.</summary>
    <param name="dwWorkQueue">Identifier for the work queue to be unlocked. The identifier is returned by the <see cref="MFAllocateWorkQueue" /> function.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFUnregisterPlatformFromMMCSS">
    <summary>Unregisters the Microsoft Media Foundation platform work queues from a Multimedia Class Scheduler Service (MMCSS) task.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFUnwrapMediaType">
    <summary>Retrieves a media type that was wrapped in another media type by the <see cref="MFWrapMediaType" /> function.</summary>
    <param name="pWrap">Pointer to the <see cref="IMFMediaType" /> interface of the media type that was retrieved by <see cref="MFWrapMediaType" />.</param>
    <param name="ppOrig">Receives a pointer to the <see cref="IMFMediaType" /> interface of the original media type. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.MFValidateMediaTypeSize">
    <summary>Validates the size of a buffer for a video format block.</summary>
    <param name="FormatType">
      <para>GUID that specifies the type of format block. It must be one of the following values:</para>
      <h4>FORMAT_DvInfo</h4>
      <h4>FORMAT_MFVideoFormat</h4>
      <h4>FORMAT_MPEG2Video</h4>
      <h4>FORMAT_MPEGStreams</h4>
      <h4>FORMAT_MPEGVideo</h4>
      <h4>FORMAT_VideoInfo</h4>
      <h4>FORMAT_VideoInfo2</h4>
      <h4>FORMAT_WaveFormatEx</h4>
    </param>
    <param name="pBlock">Pointer to a buffer that contains the format block.</param>
    <param name="cbSize">Size of the <i>pBlock</i> buffer, in bytes.</param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer that contains the format block is large enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_INVALIDMEDIATYPE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The buffer that contains the format block is too small, or the format block is not valid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_E_UNSUPPORTED_FORMAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This function does not support the specified format type.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MFWrapMediaType">
    <summary>Creates a media type that wraps another media type.</summary>
    <param name="pOrig">A pointer to the <see cref="IMFMediaType" /> interface of the media type to wrap in a new media type.</param>
    <param name="MajorType">A GUID that specifies the major type for the new media type. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-type-guids">Major Media Types</a>.</param>
    <param name="SubType">
      <para>A GUID that specifies the subtype for the new media type. For possible values, see:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/DirectShow/audio-subtypes">Audio Subtypes</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/DirectShow/video-subtypes">Video Subtypes</a>
          </description>
        </item>
      </list>Applications can define custom subtype GUIDs.</param>
    <param name="ppWrap">Receives a pointer to the <see cref="IMFMediaType" /> interface of the new media type that wraps the original media type. The caller must release the interface.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.Pack2UINT32AsUINT64">
    <summary>Packs two <b>UINT32</b> values into a <b>UINT64</b> value.</summary>
    <param name="unHigh">Value to store in the high-order 32 bits of the <b>UINT64</b> value.</param>
    <param name="unLow">Value to store in the low-order 32 bits of the <b>UINT64</b> value.</param>
    <returns>Returns the packed <b>UINT64</b> value.</returns>
  </member>
  <member name="Windows.PackRatio">
    <summary>Packs two UINT32 values, which represent a ratio, into a UINT64 value.</summary>
    <param name="nNumerator">Value to store the <b>UINT32</b> numerator value.</param>
    <param name="unDenominator">Value to store the <b>UINT32</b> denominator value.</param>
    <returns>Returns the packed <b>UINT64</b> value.</returns>
  </member>
  <member name="Windows.PackSize">
    <summary>Packs a UINT32 width value and a UINT32 height value into a UINT64 value that represents a size.</summary>
    <param name="unWidth">Value to store the <b>UINT32</b> width value.</param>
    <param name="unHeight">Value to store the <b>UINT32</b> height value.</param>
    <returns>Returns the packed <b>UINT64</b> value.</returns>
  </member>
  <member name="Windows.Unpack2UINT32AsUINT64">
    <summary>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value.</summary>
    <param name="unPacked">The value to convert.</param>
    <param name="punHigh">Receives the high-order 32 bits.</param>
    <param name="punLow">Receives the low-order 32 bits.</param>
  </member>
  <member name="Windows.unpackratio">
    <summary>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value that represents a ratio.</summary>
    <param name="unPacked">The value to convert.</param>
    <param name="pnNumerator">Receives the high-order 32 bits.</param>
    <param name="punDenominator">Receives the low-order 32 bits.</param>
  </member>
  <member name="Windows.UnpackSize">
    <summary>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value that represents a size.</summary>
    <param name="unPacked">The value to convert.</param>
    <param name="punWidth">Receives the high-order 32 bits.</param>
    <param name="punHeight">Receives the low-order 32 bits.</param>
  </member>
</doc>