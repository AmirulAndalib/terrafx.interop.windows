<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.DEFINE_MEDIATYPE_GUID">
    <summary>
      <para>Defines a media subtype GUID from a FOURCC code, <b>D3DFORMAT</b> value, or audio format type.</para>
    </summary>
    <param name="name">
      <para>The name of the GUID constant to be defined.</para>
    </param>
    <param name="format">
      <para>A FOURCC code, D3DFORMAT value, or audio format type.</para>
    </param>
    <remarks>
      <para>Media formats are often identified by a FOURCC code (such as 'AYUV'), <b>D3DFORMAT</b> value (such as D3DFMT_X8R8G8B8), or audio format type (such as WAVE_FORMAT_PCM). The <b>DEFINE_MEDIATYPE_GUID</b> macro defines a new GUID constant from one of these values. The resulting GUID can be used as a media subtype.</para>
      <para>This macro invokes the <b>DEFINE_GUID</b> macro. The resulting GUID constant is declared <code>extern</code>, so the declaration must have global scope.</para>
      <h4>Examples</h4>
      <code>#include &lt;initguid.h&gt;

// Declares a GUID named MFVideoFormat_ABCD_Format.
DEFINE_MEDIATYPE_GUID( MFVideoFormat_ABCD_Format, FCC('ABCD') );

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-macros">Media Foundation Macros</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-guids">Media Type GUIDs</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFAddPeriodicCallback">
    <summary>
      <para>Sets a callback function to be called at a fixed interval.</para>
    </summary>
    <param name="Callback">
      <para>Pointer to the callback function, of type <a href="https://docs.microsoft.com//windows/desktop/api/mfapi/nc-mfapi-mfperiodiccallback">MFPERIODICCALLBACK</a>.</para>
    </param>
    <param name="pContext">
      <para>Pointer to a caller-provided object that implements <b>IUnknown</b>, or <b>NULL</b>. This parameter is passed to the callback function.</para>
    </param>
    <param name="pdwKey">
      <para>Receives a key that can be used to cancel the callback. To cancel the callback, call <see cref="MFRemovePeriodicCallback" /> and pass this key as the <i>dwKey</i> parameter.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To get the timer interval for the periodic callback, call <see cref="MFGetTimerPeriodicity" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFAllocateSerialWorkQueue">
    <summary>
      <para>Creates a work queue that is guaranteed to serialize work items. The serial work queue wraps an existing multithreaded work queue. The serial work queue enforces a first-in, first-out (FIFO) execution order.</para>
    </summary>
    <param name="dwWorkQueue">
      <para>The identifier of an existing work queue. This must be either a multithreaded queue or another serial work queue. Any of the following can be used:</para>
      <list type="bullet">
        <item>
          <description>The default work queue (<b>MFASYNC_CALLBACK_QUEUE_STANDARD</b>)</description>
        </item>
        <item>
          <description>The platform multithreaded queue (<b>MFASYNC_CALLBACK_QUEUE_MULTITHREADED</b>)</description>
        </item>
        <item>
          <description>A multithreaded queue returned by the <see cref="MFLockSharedWorkQueue" />  function.</description>
        </item>
        <item>
          <description>A serial queue created by the <b>MFAllocateSerialWorkQueue</b> function.</description>
        </item>
      </list>
    </param>
    <param name="pdwWorkQueue">
      <para>Receives an identifier for the new serial work queue. Use this identifier when queuing work items.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The application exceeded the maximum number of work queues.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you are done using the work queue, call <see cref="MFUnlockWorkQueue" />.</para>
      <para>Multithreaded queues use a thread pool, which  can reduce the total number of threads in the pipeline. However, they do not serialize work items. A serial work queue enables the application to get the benefits of the thread pool, without needing to perform manual serialization of its own work items.</para>
      <h3>Reply Mode</h3>
      <para>A serializer queue can also work in "reply" mode. If the caller’s <see cref="IMFAsyncCallback.GetParameters" /> method returns the <b>MFASYNC_REPLY_CALLBACK</b> flag, the serializer queue does not automatically advance to the next work item. Instead, the queue waits for a reply from the caller. The caller signals the reply by invoking the asynchronous result object that the work queue passes to the <see cref="Invoke" /> method. The following code illustrates how the caller signals the work queue.</para>
      <code>HRESULT CCallback.Invoke(IMFAsyncResult *pResult)
{
    DoSomeWork();

    // Reply to the work queue that you are done.
    MFInvokeCallback(pResult);

    // Note: This call to MFInvokeCallback does not have to occur inside the
    // Invoke method. You could call MFInvokeCallback at a later time.

    return S_OK;
}
HRESULT CCallback.GetParameters(DWORD *pdwFlags, DWORD *pdwQueue)
{
    *pdwFlags = MFASYNC_REPLY_CALLBACK;
    *pdwQueue = m_QueueId;
    return S_OK;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
  </member>
  <member name="Windows.MFAllocateWorkQueue">
    <summary>
      <para>Creates a new work queue.</para>
    </summary>
    <param name="pdwWorkQueue">
      <para>Receives an identifier for the work queue.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The application exceeded the maximum number of work queues.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you are done using the work queue, call <see cref="MFUnlockWorkQueue" />.</para>
    </remarks>
    <seealso cref="MFPutWorkItem" />
    <seealso cref="MFPutWorkItemEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFAllocateWorkQueueEx">
    <summary>
      <para>Creates a new work queue. This function extends the capabilities of the  <see cref="MFAllocateWorkQueue" /> function by making it possible to create a  work queue that has a message loop.</para>
    </summary>
    <param name="WorkQueueType">
      <para>A member of the <see cref="MFASYNC_WORKQUEUE_TYPE" /> enumeration, specifying the type of work queue to create.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MF_MULTITHREADED_WORKQUEUE</b>
          </description>
          <description>
            <para>Create a multithreaded work queue. Generally, applications should not create private multithreaded queues. Use the platform multithreaded queues instead. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MF_STANDARD_WORKQUEUE</b>
          </description>
          <description>
            <para>Create a work queue without a message loop. Using this flag is equivalent to calling <see cref="MFAllocateWorkQueue" />.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MF_WINDOW_WORKQUEUE</b>
          </description>
          <description>
            <para>Create a work queue with a message loop. The thread that dispatches the work items for this queue will also call <see cref="PeekMessage" /> and <see cref="DispatchMessage" />. Use this option if your callback performs any actions that require a message loop.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pdwWorkQueue">
      <para>Receives an identifier for the work queue that was created.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The application exceeded the maximum number of work queues.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid argument.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The application did not call <see cref="MFStartup" />, or the application has already called <see cref="MFShutdown" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When you are done using the work queue, call <see cref="MFUnlockWorkQueue" />.</para>
      <para>The <see cref="MFAllocateWorkQueue" /> function is equivalent to calling <b>MFAllocateWorkQueueEx</b> with the value MF_STANDARD_WORKQUEUE for the <i>WorkQueueType</i> parameter.</para>
      <para>This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed.</para>
    </remarks>
    <seealso cref="MFPutWorkItem" />
    <seealso cref="MFPutWorkItemEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFAverageTimePerFrameToFrameRate">
    <summary>
      <para>Calculates the frame rate, in frames per second, from the average duration of a video frame.</para>
    </summary>
    <param name="unAverageTimePerFrame">
      <para>The average duration of a video frame, in 100-nanosecond units.</para>
    </param>
    <param name="punNumerator">
      <para>Receives the numerator of the frame rate.</para>
    </param>
    <param name="punDenominator">
      <para>Receives the denominator of the frame rate.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Average time per frame is used in the older <b>VIDEOINFOHEADER</b> and <b>VIDEOINFOHEADER2</b> format structures. This function provides a standard conversion so that all components in the pipeline can use consistent values, if they need to translate between the older format structures and the media type attributes used in Media Foundation.</para>
      <para>This function uses a look-up table for certain common durations. The table is listed in the Remarks section for the <see cref="MFFrameRateToAverageTimePerFrame" /> function.</para>
    </remarks>
    <seealso cref="MFFrameRateToAverageTimePerFrame" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFBeginCreateFile">
    <summary>
      <para>Begins an asynchronous request to create a byte stream from a file.</para>
    </summary>
    <param name="AccessMode">
      <para>The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</para>
    </param>
    <param name="OpenMode">
      <para>The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</para>
    </param>
    <param name="fFlags">
      <para>Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</para>
    </param>
    <param name="pwszFilePath">
      <para>Pointer to a null-terminated string containing the file name.</para>
    </param>
    <param name="pCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface</para>
    </param>
    <param name="pState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <param name="ppCancelCookie">
      <para>Receives an <b>IUnknown</b> pointer or the value <b>NULL</b>. If the value is not <b>NULL</b>, you can cancel the asynchronous operation by passing this pointer to the <see cref="MFCancelCreateFile" /> function. The caller must release the interface. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the request is completed, the callback object's <see cref="IMFAsyncCallback.Invoke" /> method is called. The callback object should then call the <see cref="MFEndCreateFile" /> function to get a pointer to the byte stream.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFBeginRegisterWorkQueueWithMMCSS">
    <summary>
      <para>Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>The identifier of the work queue.  For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</para>
    </param>
    <param name="wszClass">
      <para>The name of the MMCSS task.For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/multimedia-class-scheduler-service">Multimedia Class Scheduler Service</a>.</para>
    </param>
    <param name="dwTaskId">
      <para>The unique task identifier. To obtain a new task identifier, set this value to zero.</para>
    </param>
    <param name="pDoneCallback">
      <para>A pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="pDoneState">
      <para>A pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is asynchronous. When the operation completes, the callback object's <see cref="IMFAsyncCallback.Invoke" /> method is called. At that point, the application should call <see cref="MFEndRegisterWorkQueueWithMMCSS" /> to complete the asynchronous request.</para>
      <para>To unregister the work queue from the MMCSS task, call <see cref="MFBeginUnregisterWorkQueueWithMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFBeginRegisterWorkQueueWithMMCSSEx">
    <summary>
      <para>Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>The identifier of the work queue.  For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</para>
    </param>
    <param name="wszClass">
      <para>The name of the MMCSS task. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/multimedia-class-scheduler-service">Multimedia Class Scheduler Service</a>.</para>
    </param>
    <param name="dwTaskId">
      <para>The unique task identifier. To obtain a new task identifier, set this value to zero.</para>
    </param>
    <param name="lPriority">
      <para>The base relative priority for the work-queue threads. For more information, see <see cref="AvSetMmThreadPriority" />.</para>
    </param>
    <param name="pDoneCallback">
      <para>A pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="pDoneState">
      <para>A pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function extends the <see cref="MFBeginRegisterWorkQueueWithMMCSS" /> function by adding the <i>lPriority</i> parameter.</para>
      <para>This function is asynchronous. When the operation completes, the callback object's <see cref="IMFAsyncCallback.Invoke" /> method is called. At that point, call <see cref="MFEndRegisterWorkQueueWithMMCSS" /> to complete the asynchronous request.</para>
      <para>To unregister the work queue from the MMCSS task, call <see cref="MFBeginUnregisterWorkQueueWithMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFBeginUnregisterWorkQueueWithMMCSS">
    <summary>
      <para>Unregisters a work queue from a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>The identifier of the work queue.  For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</para>
    </param>
    <param name="pDoneCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface of a callback object. The caller must implement this interface.</para>
    </param>
    <param name="pDoneState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function unregisters a work queue that was associated with an MMCSS class through the <see cref="MFBeginRegisterWorkQueueWithMMCSS" /> function.</para>
      <para>This function is asynchronous. When the operation completes, the callback object's <see cref="IMFAsyncCallback.Invoke" /> method is called. At that point, the application should call <see cref="MFEndUnregisterWorkQueueWithMMCSS" /> to complete the asynchronous request.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFCalculateBitmapImageSize">
    <summary>
      <para>Retrieves the image size for a video format. Given a <see cref="BITMAPINFOHEADER" /> structure, this function calculates the correct value of the <b>biSizeImage</b> member.</para>
    </summary>
    <param name="pBMIH">
      <para>Pointer to a <b>BITMAPINFOHEADER</b> structure that describes the format.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <i>pBMIH</i> buffer, in bytes. The size includes any color masks or palette entries that follow the <b>BITMAPINFOHEADER</b> structure.</para>
    </param>
    <param name="pcbImageSize">
      <para>Receives the image size, in bytes.</para>
    </param>
    <param name="pbKnown">
      <para>Receives the value <b>TRUE</b> if the function recognizes the video format. Otherwise, receives the value <b>FALSE</b>. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <b>BITMAPINFOHEADER</b> structure is not valid, or the value of <i>cbBufSize</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before calling this function, you must set at least the following members of the <b>BITMAPINFOHEADER</b> structure:</para>
      <list type="bullet">
        <item>
          <description>
            <b>biCompression</b>
          </description>
        </item>
        <item>
          <description>
            <b>biBitCount</b>
          </description>
        </item>
        <item>
          <description>
            <b>biWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>biHeight</b>
          </description>
        </item>
      </list>
      <para>Also, if <b>biCompression</b> is <b>BI_BITFIELDS</b>, the <b>BITMAPINFOHEADER</b> structure must be followed by an array of color masks.</para>
      <para>This function fails if the <b>BITMAPINFOHEADER</b> structure describes a format that is not a video format. For example, it fails if <b>biCompresson</b> is <b>BI_JPEG</b> or <b>BI_PNG</b> .</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCalculateImageSize">
    <summary>
      <para>Retrieves the image size, in bytes, for an uncompressed video format.</para>
    </summary>
    <param name="guidSubtype">
      <para>Media subtype for the video format. For a list of subtypes, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-type-guids">Media Type GUIDs</a>.</para>
    </param>
    <param name="unWidth">
      <para>Width of the image, in pixels.</para>
    </param>
    <param name="unHeight">
      <para>Height of the image, in pixels.</para>
    </param>
    <param name="pcbImageSize">
      <para>Receives the size of each frame, in bytes. If the format is compressed or is not recognized, the value is zero.</para>
    </param>
    <returns>
      <para>The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCancelCreateFile">
    <summary>
      <para>Cancels an asynchronous request to create a byte stream from a file.</para>
    </summary>
    <param name="pCancelCookie">
      <para>A pointer to the <b>IUnknown</b> interface of the cancellation object. This pointer is received in the <i>ppCancelCookie</i> parameter of the <see cref="MFBeginCreateFile" /> function.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You can use this function to cancel a previous call to <see cref="MFBeginCreateFile" />. Because that function is asynchronous, however, it might complete before the operation can be canceled. Therefore, your callback might still be invoked after you call this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCancelWorkItem">
    <summary>
      <para>Attempts to cancel an asynchronous operation that was scheduled with <see cref="MFScheduleWorkItem" /> or <see cref="MFScheduleWorkItemEx" />.</para>
    </summary>
    <param name="Key">
      <para>The key that was received in the <i>pKey</i> parameter of the <see cref="MFScheduleWorkItem" />, <see cref="MFScheduleWorkItemEx" />, or <see cref="MFPutWaitingWorkItem" /> functions.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Because work items are asynchronous, the  work-item callback might still be invoked after <b>MFCancelWorkItem</b> is called.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFCombineSamples">
    <summary>
      <para>Concatenates a media sample onto another sample if their combined duration does not exceed the specified duration.</para>
    </summary>
    <param name="pSample">
      <para>A pointer to an <see cref="IMFSample" /> to which the the sample provided in the <i>pSampleToAdd</i> parameter is appended.</para>
    </param>
    <param name="pSampleToAdd">
      <para>A pointer to an <see cref="IMFSample" /> to append to the sample provided in the  <i>pSample</i> parameter.</para>
    </param>
    <param name="dwMaxMergedDurationInMS">
      <para>The maximum duration in milliseconds that the combined sample can fill for the operation to be successful.</para>
    </param>
    <param name="pMerged">
      <para>Output parameter that receives a BOOL indicating whether the sample was successfully appended.</para>
    </param>
    <returns>
      <para>Returns HRESULT.</para>
    </returns>
    <remarks>
      <para>Split combined samples by calling <see cref="MFSplitSample" /></para>
    </remarks>
  </member>
  <member name="Windows.MFCompareFullToPartialMediaType">
    <summary>
      <para>Compares a full media type to a partial media type.</para>
    </summary>
    <param name="pMFTypeFull">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the full media type.</para>
    </param>
    <param name="pMFTypePartial">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the partial media type.</para>
    </param>
    <returns>
      <para>If the full media type is compatible with the partial media type, the function returns <b>TRUE</b>. Otherwise, the function returns <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>A pipeline component can return a partial media type to describe a range of possible formats the component might accept. A partial media type has at least a major type GUID, but might be missing some of the other attributes that are needed to fully describe the type. The missing attributes represent "don't care" values for the partial type. For example, a partial video type might be missing the attributes for the width and height of the video.</para>
      <para>This function returns <b>TRUE</b> if the following conditions are both true:</para>
      <list type="bullet">
        <item>
          <description>The partial media type contains a major type GUID.
</description>
        </item>
        <item>
          <description>All of the attributes in the partial type exist in the full type and are set to the same value.
</description>
        </item>
      </list>
      <para>Otherwise, the function returns <b>FALSE</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFConvertFromFP16Array">
    <summary>
      <para>Converts an array of 16-bit floating-point numbers into an array of 32-bit floating-point numbers.</para>
    </summary>
    <param name="pDest">
      <para>Pointer to an array of <b>float</b> values. The array must contain at least <i>dwCount</i> elements.</para>
    </param>
    <param name="pSrc">
      <para>Pointer to an array of 16-bit floating-point values, typed as <b>WORD</b> values. The array must contain at least <i>dwCount</i> elements.</para>
    </param>
    <param name="dwCount">
      <para>Number of elements in the <i>pSrc</i> array to convert.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function converts <i>dwCount</i> values in the <i>pSrc</i> array and writes them into the <i>pDest</i> array.</para>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFConvertToFP16Array">
    <summary>
      <para>Converts an array of 32-bit floating-point numbers into an array of 16-bit floating-point numbers.</para>
    </summary>
    <param name="pDest">
      <para>Pointer to an array of 16-bit floating-point values, typed as <b>WORD</b> values. The array must contain at least <i>dwCount</i> elements.</para>
    </param>
    <param name="pSrc">
      <para>Pointer to an array of <b>float</b> values. The array must contain at least <i>dwCount</i> elements.</para>
    </param>
    <param name="dwCount">
      <para>Number of elements in the <i>pSrc</i> array to convert.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function converts the values in the <i>pSrc</i> array and writes them into the <i>pDest</i> array.</para>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCopyImage">
    <summary>
      <para>Copies an image or image plane from one buffer to another.</para>
    </summary>
    <param name="pDest">
      <para>Pointer to the start of the first row of pixels in the destination buffer.</para>
    </param>
    <param name="lDestStride">
      <para>Stride of the destination buffer, in bytes.</para>
    </param>
    <param name="pSrc">
      <para>Pointer to the start of the first row of pixels in the source image.</para>
    </param>
    <param name="lSrcStride">
      <para>Stride of the source image, in bytes.</para>
    </param>
    <param name="dwWidthInBytes">
      <para>Width of the image, in bytes.</para>
    </param>
    <param name="dwLines">
      <para>Number of rows of pixels to copy.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function copies a single plane of the image. For planar YUV formats, you must call the function once for each plane. In this case, <i>pDest</i> and <i>pSrc</i> must point to the start of each plane.</para>
      <para>This function is optimized if the MMX, SSE, or SSE2 instruction sets are available on the processor. The function performs a non-temporal store (the data is written to memory directly without polluting the cache).</para>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreate2DMediaBuffer">
    <summary>
      <para>Creates a system-memory buffer object to hold 2D image data.</para>
    </summary>
    <param name="dwWidth">
      <para>Width of the image, in pixels.</para>
    </param>
    <param name="dwHeight">
      <para>Height of the image, in pixels.</para>
    </param>
    <param name="dwFourCC">
      <para>A <b>FOURCC</b> code or <a href="https://docs.microsoft.com//windows/desktop/direct3d9/d3dformat">D3DFORMAT</a> value that specifies the video format. If you have a video subtype GUID, you can use the first <b>DWORD</b> of the subtype.</para>
    </param>
    <param name="fBottomUp">
      <para>If <b>TRUE,</b> the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with DirectX.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDMEDIATYPE</b>
            </para>
          </description>
          <description>
            <para>Unrecognized video format.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The returned buffer object also exposes the <see cref="IMF2DBuffer2" /> interface.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAlignedMemoryBuffer">
    <summary>
      <para>Allocates system memory with a specified byte alignment and creates a media buffer to manage the memory.</para>
    </summary>
    <param name="cbMaxLength">
      <para>Size of the buffer, in bytes.</para>
    </param>
    <param name="cbAligment">
      <para>Specifies the memory alignment for the buffer. Use one of the following constants.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_1_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 1 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_2_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 2 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_4_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x00000003</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 4 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_8_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x00000007</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 8 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_16_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x0000000F</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 16 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_32_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x0000001F</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 32 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_64_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x0000003F</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 64 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_128_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x0000007F</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 128 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_256_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x000000FF</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 256 bytes.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MF_512_BYTE_ALIGNMENT</b>
                </description>
              </item>
              <item>
                <description>0x000001FF</description>
              </item>
            </list>
          </description>
          <description>
            <para>Align to 512 bytes.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface of the media buffer. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the media buffer object is destroyed, it releases the allocated memory.</para>
    </remarks>
    <seealso cref="MFCreateMemoryBuffer" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAMMediaTypeFromMFMediaType">
    <summary>
      <para>Creates a DirectShow <b>AM_MEDIA_TYPE</b> structure from a Media Foundation media type.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to convert.</para>
    </param>
    <param name="guidFormatBlockType">
      <para>Format type GUID. This value corresponds to the <b>formattype</b> member of the <b>AM_MEDIA_TYPE</b> structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype.</para>
    </param>
    <param name="ppAMType">
      <para>Receives a pointer to an <b>AM_MEDIA_TYPE</b> structure. The caller must release the memory allocated for the structure by calling <see cref="CoTaskMemFree" />. The function also allocates memory for the format block, which the caller must release by calling <b>CoTaskMemFree</b> on the <b>pbFormat</b> member.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function can also be used with the following format structures that are equivalent to <b>AM_MEDIA_TYPE</b>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>DMO_MEDIA_TYPE</b> (DirectX Media Objects)
</description>
        </item>
        <item>
          <description>
            <b>WM_MEDIA_TYPE</b> (Windows Media Format SDK)
</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateAsyncResult">
    <summary>
      <para>Creates an asynchronous result object. Use this function if you are implementing an asynchronous method.</para>
    </summary>
    <param name="punkObject">
      <para>Pointer to the object stored in the asynchronous result. This pointer is returned by the <see cref="IMFAsyncResult.GetObject" /> method. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface. This interface is implemented by the caller of the asynchronous method.</para>
    </param>
    <param name="punkState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object. This value is provided by the caller of the asynchronous method. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ppAsyncResult">
      <para>Receives a pointer to the <see cref="IMFAsyncResult" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To invoke the callback specified in <i>pCallback</i>, call the <see cref="MFInvokeCallback" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-callback-methods">Asynchronous Callback Methods</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateAttributes">
    <summary>
      <para>Creates an empty attribute store.</para>
    </summary>
    <param name="ppMFAttributes">
      <para>Receives a pointer to the <see cref="IMFAttributes" /> interface. The caller must release the interface.</para>
    </param>
    <param name="cInitialSize">
      <para>The initial number of elements allocated for the attribute store. The attribute store grows as needed.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Attributes are used throughout Microsoft Media Foundation to configure objects, describe media formats, query object properties, and other purposes. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes in Media Foundation</a>.</para>
      <para>For a complete list of all the defined attribute GUIDs in Media Foundation, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-attributes">Media Foundation Attributes</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes in Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateCollection">
    <summary>
      <para>Creates an empty collection object.</para>
    </summary>
    <param name="ppIMFCollection">
      <para>Receives a pointer to the collection object's <see cref="IMFCollection" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateDXGIDeviceManager">
    <summary>
      <para>Creates an instance of the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</para>
    </summary>
    <param name="resetToken">
      <para>Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling <see cref="IMFDXGIDeviceManager.ResetDevice" />.</para>
    </param>
    <param name="ppDeviceManager">
      <para>Receives a pointer to the <see cref="IMFDXGIDeviceManager" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>When you create an <see cref="IMFDXGIDeviceManager" /> with <b>MFCreateDXGIDeviceManager</b>, a Microsoft Direct3D 11 device is not associated with the device manager. To associate a Direct3D 11 device with the device manager, call <see cref="IMFDXGIDeviceManager.ResetDevice" />, passing in the pointer to the Direct3D 11 device. To create a Direct3D 11 device, call <see cref="D3D11CreateDevice" />. The device should be created with the <b>D3D11_CREATE_DEVICE_VIDEO_SUPPORT</b> device creation flag which is defined in the <see cref="D3D11_CREATE_DEVICE_FLAG" /> enumeration.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateDXGISurfaceBuffer">
    <summary>
      <para>Creates a media buffer to manage a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</para>
    </summary>
    <param name="riid">
      <para>Identifies the type of DXGI surface. This value must be <b>IID_ID3D11Texture2D</b>.</para>
    </param>
    <param name="punkSurface">
      <para>A pointer to the <see cref="IUnknown" /> interface of the DXGI surface.</para>
    </param>
    <param name="uSubresourceIndex">
      <para>The zero-based index of a subresource of the surface. The media buffer object is associated with this subresource.</para>
    </param>
    <param name="fBottomUpWhenLinear">
      <para>If <b>TRUE</b>, the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with Direct3D.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the buffer.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The returned buffer object supports the following interfaces:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IMF2DBuffer" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMF2DBuffer2" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFDXGIBuffer" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFMediaBuffer" />
          </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateDXSurfaceBuffer">
    <summary>
      <para>Creates a media buffer object that manages a Direct3D 9 surface.</para>
    </summary>
    <param name="riid">
      <para>Identifies the type of Direct3D 9 surface. Currently this value must be <b>IID_IDirect3DSurface9</b>.</para>
    </param>
    <param name="punkSurface">
      <para>A pointer to the <see cref="IUnknown" /> interface of the DirectX surface.</para>
    </param>
    <param name="fBottomUpWhenLinear">
      <para>If <b>TRUE</b>, the buffer's <see cref="IMF2DBuffer.ContiguousCopyTo" /> method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is <b>FALSE</b>, the <b>ContiguousCopyTo</b> method copies the buffer into a top-down format, which is compatible with DirectX.</para>
      <para>For more information about top-down versus bottom-up images, see <a href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</a>.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the buffer.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid argument.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a media buffer object that holds a pointer to the Direct3D surface specified in <i>punkSurface</i>. Locking the buffer gives the caller access to the surface memory. When the buffer object is destroyed, it releases the surface. For more information about media buffers, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</a>.</para>
      <para>
        <b>Note</b>  This function does not allocate the Direct3D surface itself.</para>
      <para>The buffer object created by this function also exposes the <see cref="IMF2DBuffer" /> interface. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/directx-surface-buffer">DirectX Surface Buffer</a>.</para>
      <para>This function does not support DXGI surfaces.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/directx-surface-buffer">DirectX Surface Buffer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateEventQueue">
    <summary>
      <para>Creates an event queue.</para>
    </summary>
    <param name="ppMediaEventQueue">
      <para>Receives a pointer to the <see cref="IMFMediaEventQueue" /> interface of the event queue. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates a helper object that you can use to implement the <see cref="IMFMediaEventGenerator" /> interface.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-event-generators">Media Event Generators</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateFile">
    <summary>
      <para>Creates a byte stream from a file.</para>
    </summary>
    <param name="AccessMode">
      <para>The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</para>
    </param>
    <param name="OpenMode">
      <para>The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</para>
    </param>
    <param name="fFlags">
      <para>Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</para>
    </param>
    <param name="pwszFileURL">
      <para>Pointer to a null-terminated string that contains the file name.</para>
    </param>
    <param name="ppIByteStream">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateLegacyMediaBufferOnMFMediaBuffer">
    <summary>
      <para>Converts a Media Foundation media buffer into a buffer that is compatible with DirectX Media Objects (DMOs).</para>
    </summary>
    <param name="pSample">
      <para>Pointer to the <see cref="IMFSample" /> interface of the sample that contains the Media Foundation buffer. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pMFMediaBuffer">
      <para>Pointer to the <see cref="IMFMediaBuffer" /> interface of the Media Foundation buffer.</para>
    </param>
    <param name="cbOffset">
      <para>Offset in bytes from the start of the Media Foundation buffer. This offset defines where the DMO buffer starts. If this parameter is zero, the DMO buffer starts at the beginning of the Media Foundation buffer.</para>
    </param>
    <param name="ppMediaBuffer">
      <para>Receives a pointer to the <b>IMediaBuffer</b> interface. This interface is documented in the DirectShow SDK documentation. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>Invalid argument. The <i>pIMFMediaBuffer</i> parameter must not be <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The DMO buffer created by this function also exposes the <see cref="IMFSample" /> interface. If <i>pIMFSample</i> is <b>NULL</b>, all of the <b>IMFSample</b> methods return MF_E_NOT_INITIALIZED. Otherwise, they call through to the <i>pIMFSample</i> pointer.</para>
      <para>If the Media Foundation buffer specified by <i>pIMFMediaBuffer</i> exposes the <see cref="IMF2DBuffer" /> interface, the DMO buffer also exposes <b>IMF2DBuffer</b>.</para>
    </remarks>
    <seealso cref="IMF2DBuffer" />
    <seealso cref="IMFMediaBuffer" />
    <seealso cref="IMFSample" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaBufferFromMediaType">
    <summary>
      <para>Allocates a system-memory buffer that is optimal for a specified media type.</para>
    </summary>
    <param name="pMediaType">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of the media type.</para>
    </param>
    <param name="llDuration">
      <para>The sample duration. This value is required for audio formats.</para>
    </param>
    <param name="dwMinLength">
      <para>The minimum size of the buffer, in bytes. The actual buffer size might be larger. Specify zero to allocate the default buffer size for the media type.</para>
    </param>
    <param name="dwMinAlignment">
      <para>The minimum memory alignment for the buffer. Specify zero to use the default memory alignment.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>For video formats, if the format is recognized, the function creates a 2-D buffer that implements the <see cref="IMF2DBuffer2" /> interface. Otherwise it creates a linear buffer. To get the  <b>IMF2DBuffer2</b> interface, call <see cref="QueryInterface" /> on the pointer returned in <i>ppBuffer</i>. If the <b>QueryInterface</b> method fails, use the <see cref="IMFMediaBuffer" /> interface to access the buffer memory.</para>
      <para>For audio formats, the function allocates a buffer that is large enough to contain <i>llDuration</i> audio samples, or <i>dwMinLength</i>, whichever is larger.</para>
      <para>This function always allocates system memory. For Direct3D surfaces, use the <see cref="MFCreateDXGISurfaceBuffer" /> or <see cref="MFCreateDXSurfaceBuffer" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaBufferWrapper">
    <summary>
      <para>Creates a media buffer that wraps an existing media buffer. The new media buffer points to the same memory as the original media buffer, or to an offset from the start of the memory.</para>
    </summary>
    <param name="pBuffer">
      <para>A pointer to the <see cref="IMFMediaBuffer" /> interface of the original media buffer.</para>
    </param>
    <param name="cbOffset">
      <para>The start of the new buffer, as an offset in bytes from the start of the original buffer.</para>
    </param>
    <param name="dwLength">
      <para>The size of the new buffer. The value of <i>cbOffset</i> + <i>dwLength</i> must be less than or equal to the size of valid data the original buffer. (The size of the valid data is returned by the <see cref="IMFMediaBuffer.GetCurrentLength" /> method.)</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The requested offset or the requested length is not valid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The maximum size of the wrapper buffer is limited to the size of the valid data in the original buffer. This might be less than the allocated size of the original buffer. To set the size of the valid data, call <see cref="IMFMediaBuffer.SetCurrentLength" />.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaEvent">
    <summary>
      <para>Creates a media event object.</para>
    </summary>
    <param name="met">
      <para>The event type. See <see cref="IMFMediaEvent.GetType" />. For a list of event types, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-events">Media Foundation Events</a>.</para>
    </param>
    <param name="guidExtendedType">
      <para>The extended type. See <see cref="IMFMediaEvent.GetExtendedType" />. If the event type does not have an extended type, use the value GUID_NULL.</para>
    </param>
    <param name="hrStatus">
      <para>The event status. See <see cref="IMFMediaEvent.GetStatus" /></para>
    </param>
    <param name="pvValue">
      <para>The value associated with the event, if any. See <see cref="IMFMediaEvent.GetValue" />. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ppEvent">
      <para>Receives a pointer to the <see cref="IMFMediaEvent" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="IMFMediaEvent" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaExtensionActivate">
    <summary>
      <para>Creates an activation object for a Windows Runtime class.</para>
    </summary>
    <param name="szActivatableClassId">
      <para>The class identifier that is associated with the activatable runtime class.</para>
    </param>
    <param name="pConfiguration">
      <para>A pointer to an optional <a href="https://docs.microsoft.com//uwp/api/windows.foundation.collections.ipropertyset">IPropertySet</a> object, which is used to configure the Windows Runtime class. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="riid">
      <para>The interface identifier (IID) of the interface being requested. The activation object created  by this function supports the following interfaces:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="IClassFactory" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IMFActivate" />
          </description>
        </item>
        <item>
          <description>
            <see cref="IPersistStream" />
          </description>
        </item>
      </list>
    </param>
    <param name="ppvObject">
      <para>Receives a pointer to the requested interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To create the Windows Runtime object, call <see cref="IMFActivate.ActivateObject" /> or <see cref="IClassFactory.CreateInstance" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMediaType">
    <summary>
      <para>Creates an empty media type.</para>
    </summary>
    <param name="ppMFType">
      <para>Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The media type is created without any attributes.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateMediaTypeFromRepresentation">
    <summary>
      <para>Creates a Media Foundation media type from another format representation.</para>
    </summary>
    <param name="guidRepresentation">
      <para>GUID that specifies which format representation to convert. The following value is defined.</para>
      <list type="table">
        <listheader>
          <description>GUID</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>AM_MEDIA_TYPE_REPRESENTATION</description>
          <description>Convert a DirectShow <b>AM_MEDIA_TYPE</b> structure.</description>
        </item>
      </list>
    </param>
    <param name="pvRepresentation">
      <para>Pointer to a buffer that contains the format representation to convert. The layout of the buffer depends on the value of <i>guidRepresentation</i>.</para>
    </param>
    <param name="ppIMediaType">
      <para>Receives a pointer to the <see cref="IMFMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_REPRESENTATION</b>
            </para>
          </description>
          <description>
            <para>The GUID specified in <i>guidRepresentation</i> is not supported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the original format is a DirectShow audio media type, and the format type is not recognized, the function sets the following attributes on the converted media type.</para>
      <list type="table">
        <listheader>
          <description>Attribute</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-am-format-type-attribute">MF_MT_AM_FORMAT_TYPE</a>
          </description>
          <description>Contains the format type GUID.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-user-data-attribute">MF_MT_USER_DATA</a>
          </description>
          <description>Contains the format block.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMemoryBuffer">
    <summary>
      <para>Allocates system memory and creates a media buffer to manage it.</para>
    </summary>
    <param name="cbMaxLength">
      <para>Size of the buffer, in bytes.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface of the media buffer. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function allocates a buffer with a 1-byte memory alignment. To allocate a buffer that is aligned to a larger memory boundary, call <see cref="MFCreateAlignedMemoryBuffer" />.</para>
      <para>When the media buffer object is destroyed, it releases the allocated memory.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-buffers">Media Buffers</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMFByteStreamWrapper">
    <summary>
      <para>Creates a wrapper for a byte stream.</para>
    </summary>
    <param name="pStream">
      <para>A pointer to the <see cref="IMFByteStream" /> interface of the original byte stream.</para>
    </param>
    <param name="ppStreamWrapper">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface of the wrapper. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <see cref="IMFByteStream" /> methods on the wrapper call directly through to the original byte stream, except for the <see cref="IMFByteStream.Close" /> method. Calling <b>Close</b> on the wrapper closes the wrapper object, but leaves the original byte stream open.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateMuxStreamAttributes">
    <summary>
      <para>Creates an <see cref="IMFAttributes" /> describing the content of multiplexed substreams.</para>
    </summary>
    <param name="pAttributesToMux">
      <para>The collection containing the  <see cref="IMFAttributes" /> for each multiplexed substream.</para>
    </param>
    <param name="ppMuxAttribs">
      <para>The <see cref="IMFAttributes" /> containing the attributes for the multiplexed substreams.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pAttributesToMux</i> parameter in null.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMuxStreamMediaType">
    <summary>
      <para>Creates an <see cref="IMFMediaType" /> describing the media types  of multiplexed substreams.</para>
    </summary>
    <param name="pMediaTypesToMux">
      <para>The collection containing the  <see cref="IMFMediaType" /> for each multiplexed substream.</para>
    </param>
    <param name="ppMuxMediaType">
      <para>The <see cref="IMFMediaType" /> containing the media types for the multiplexed substreams.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pMediaTypesToMux</i> parameter in null.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateMuxStreamSample">
    <summary>
      <para>Creates an <see cref="IMFSample" /> containing the samples of multiplexed substreams.</para>
    </summary>
    <param name="pSamplesToMux">
      <para>The collection containing the  <see cref="IMFSample" /> for each multiplexed substream.</para>
    </param>
    <param name="ppMuxSample">
      <para>The <see cref="IMFSample" /> containing the samples for the multiplexed substreams.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pSamplesToMux</i> parameter in null.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.MFCreateSample">
    <summary>
      <para>Creates an empty media sample.</para>
    </summary>
    <param name="ppIMFSample">
      <para>Receives a pointer to the <see cref="IMFSample" /> interface of the media sample. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Initially the sample does not contain any media buffers.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-samples">Media Samples</seealso>
  </member>
  <member name="Windows.MFCreateTempFile">
    <summary>
      <para>Creates a byte stream that is backed by a temporary local file.</para>
    </summary>
    <param name="AccessMode">
      <para>The requested access mode, specified as a member of the <see cref="MF_FILE_ACCESSMODE" /> enumeration.</para>
    </param>
    <param name="OpenMode">
      <para>The behavior of the function if the file already exists or does not exist, specified as a member of the <see cref="MF_FILE_OPENMODE" /> enumeration.</para>
    </param>
    <param name="fFlags">
      <para>Bitwise <b>OR</b> of values from the <see cref="MF_FILE_FLAGS" /> enumeration.</para>
    </param>
    <param name="ppIByteStream">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function creates a file in the system temporary folder, and then returns a byte stream object for that file.
The full path name of the file is stored in the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-bytestream-origin-name-attribute">MF_BYTESTREAM_ORIGIN_NAME</a> attribute. The file is created with the <b>FILE_FLAG_DELETE_ON_CLOSE</b> flag, and is deleted after the byte stream is released.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="IMFByteStream" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromBitMapInfoHeader">
    <summary>
      <para>This function is not implemented.</para>
    </summary>
    <param name="pbmihBitMapInfoHeader">
      <para>Reserved.</para>
    </param>
    <param name="dwPixelAspectRatioX">
      <para>Reserved.</para>
    </param>
    <param name="dwPixelAspectRatioY">
      <para>Reserved.</para>
    </param>
    <param name="InterlaceMode">
      <para>Reserved.</para>
    </param>
    <param name="VideoFlags">
      <para>Reserved.</para>
    </param>
    <param name="qwFramesPerSecondNumerator">
      <para>Reserved.</para>
    </param>
    <param name="qwFramesPerSecondDenominator">
      <para>Reserved.</para>
    </param>
    <param name="dwMaxBitRate">
      <para>Reserved.</para>
    </param>
    <param name="ppIVideoMediaType">
      <para>Reserved.</para>
    </param>
    <returns>
      <para>Returns <b>E_FAIL</b>.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromBitMapInfoHeaderEx">
    <summary>
      <para>Creates a video media type from a <see cref="BITMAPINFOHEADER" /> structure.</para>
    </summary>
    <param name="pbmihBitMapInfoHeader">
      <para>A pointer to the <see cref="BITMAPINFOHEADER" /> structure to convert.</para>
    </param>
    <param name="cbBitMapInfoHeader">
      <para>The size of the <see cref="BITMAPINFOHEADER" /> structure in bytes, including the size of any palette entries or color masks that follow the structure.</para>
    </param>
    <param name="dwPixelAspectRatioX">
      <para>The X dimension of the pixel aspect ratio.</para>
    </param>
    <param name="dwPixelAspectRatioY">
      <para>The Y dimension of the pixel aspect ratio.</para>
    </param>
    <param name="InterlaceMode">
      <para>A member of the <see cref="MFVideoInterlaceMode" /> enumeration, specifying how the video is interlaced.</para>
    </param>
    <param name="VideoFlags">
      <para>A bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration.</para>
    </param>
    <param name="dwFramesPerSecondNumerator">
      <para>The numerator of the
frame rate in frames per second.</para>
    </param>
    <param name="dwFramesPerSecondDenominator">
      <para>The denominator of the frame rate in frames per second</para>
    </param>
    <param name="dwMaxBitRate">
      <para>The approximate data rate of the video stream, in bits per second. If the rate is unknown, set this parameter to zero.</para>
    </param>
    <param name="ppIVideoMediaType">
      <para>Receives a pointer to the
<see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromSubtype">
    <summary>
      <para>Creates a partial video media type with a specified subtype.</para>
    </summary>
    <param name="pAMSubtype">
      <para>Pointer to a GUID that specifies the subtype. See <a href="https://docs.microsoft.com//windows/desktop/medfound/video-subtype-guids">Video Subtype GUIDs</a>.</para>
    </param>
    <param name="ppIVideoMediaType">
      <para>Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function creates a media type and sets the major type equal to <b>MFMediaType_Video</b> and the subtype equal to the value specified in <i>pAMSubtype</i>.</para>
      <para>You can get the same result with the following steps:</para>
      <list type="number">
        <item>
          <description>Call <see cref="MFCreateMediaType" />. This function returns a pointer to the <see cref="IMFMediaType" /> interface.
</description>
        </item>
        <item>
          <description>Set the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-major-type-attribute">MF_MT_MAJOR_TYPE</a> attribute to <b>MFMediaType_Video</b>.
</description>
        </item>
        <item>
          <description>Set the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-subtype-attribute">MF_MT_SUBTYPE</a> attribute to the subtype.
</description>
        </item>
      </list>
      <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.
</remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromVideoInfoHeader">
    <summary>
      <para>Creates a media type from a <b>KS_VIDEOINFOHEADER</b> structure.</para>
    </summary>
    <param name="pVideoInfoHeader">
      <para>Pointer to the <b>KS_VIDEOINFOHEADER</b> structure to convert. (This structure is identical to the DirectShow <b>VIDEOINFOHEADER</b> structure.)</para>
    </param>
    <param name="cbVideoInfoHeader">
      <para>Size of the <b>KS_VIDEOINFOHEADER</b> structure in bytes.</para>
    </param>
    <param name="dwPixelAspectRatioX">
      <para>The X dimension of the pixel aspect ratio. The pixel aspect ratio is <i>dwPixelAspectRatioX</i>:<i>dwPixelAspectRatioY</i>.</para>
    </param>
    <param name="dwPixelAspectRatioY">
      <para>The Y dimension of the pixel aspect ratio.</para>
    </param>
    <param name="InterlaceMode">
      <para>Member of the <see cref="MFVideoInterlaceMode" /> enumeration that specifies how the video is interlaced.</para>
    </param>
    <param name="VideoFlags">
      <para>Bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>KS_VIDEOINFOHEADER</b> structure.</para>
    </param>
    <param name="ppIVideoMediaType">
      <para>Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateVideoMediaTypeFromVideoInfoHeader2">
    <summary>
      <para>Creates a media type from a <b>KS_VIDEOINFOHEADER2</b> structure.</para>
    </summary>
    <param name="pVideoInfoHeader">
      <para>Pointer to the <b>KS_VIDEOINFOHEADER2</b> structure to convert. (This structure is identical to the DirectShow <b>VIDEOINFOHEADER2</b> structure.)</para>
    </param>
    <param name="cbVideoInfoHeader">
      <para>Size of the <b>KS_VIDEOINFOHEADER2</b> structure in bytes.</para>
    </param>
    <param name="AdditionalVideoFlags">
      <para>Bitwise <b>OR</b> of flags from the <see cref="MFVideoFlags" /> enumeration. Use this parameter for format information that is not contained in the <b>KS_VIDEOINFOHEADER2</b> structure.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>KS_VIDEOINFOHEADER2</b> structure.</para>
    </param>
    <param name="ppIVideoMediaType">
      <para>Receives a pointer to the <see cref="IMFVideoMediaType" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateVideoSampleAllocatorEx">
    <summary>
      <para>Creates an object that allocates video samples that are compatible with Microsoft DirectX Graphics Infrastructure (DXGI).</para>
    </summary>
    <param name="riid">
      <para>The identifier of the interface to retrieve. Specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>IID_IUnknown</b>
            </b>
          </description>
          <description>
            <para>Retrieve an <see cref="IUnknown" /> pointer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>IID_IMFVideoSampleAllocator</b>
            </b>
          </description>
          <description>
            <para>Retrieve an <see cref="IMFVideoSampleAllocator" /> pointer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>IID_IMFVideoSampleAllocatorEx</b>
            </b>
          </description>
          <description>
            <para>Retrieve an <see cref="IMFVideoSampleAllocatorEx" /> pointer.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>IID_IMFVideoSampleAllocatorCallback</b>
            </b>
          </description>
          <description>
            <para>Retrieve an <see cref="IMFVideoSampleAllocatorCallback" /> pointer.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppSampleAllocator">
      <para>Receives a pointer to the requested interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function creates an allocator for DXGI video surfaces. The buffers created by this allocator expose the <see cref="IMFDXGIBuffer" /> interface. To create an allocator for Microsoft Direct3D 9 video surfaces, call <a href="https://docs.microsoft.com//windows/desktop/api/evr/nc-evr-mfcreatevideosampleallocator">MFCreateVideoSampleAllocator</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFCreateWaveFormatExFromMFMediaType">
    <summary>
      <para>Converts a Media Foundation audio media type to a <b>WAVEFORMATEX</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type.</para>
    </param>
    <param name="ppWF">
      <para>Receives a pointer to the <b>WAVEFORMATEX</b> structure. The caller must release the memory allocated for the structure by calling <see cref="CoTaskMemFree" />.</para>
    </param>
    <param name="pcbSize">
      <para>Receives the size of the <b>WAVEFORMATEX</b> structure.</para>
    </param>
    <param name="Flags">
      <para>Contains a flag from the <see cref="MFWaveFormatExConvertFlags" /> enumeration.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the <b>wFormatTag</b> member of the returned structure is <b>WAVE_FORMAT_EXTENSIBLE</b>, you can cast the pointer to a <b>WAVEFORMATEXTENSIBLE</b> structure.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFCreateWICBitmapBuffer">
    <summary>
      <para>Creates a media buffer object that manages a Windows Imaging Component (WIC) bitmap.</para>
    </summary>
    <param name="riid">
      <para>Set this parameter to <code>__uuidof(IWICBitmap)</code>.</para>
    </param>
    <param name="punkSurface">
      <para>A pointer to the <see cref="IUnknown" /> interface of the bitmap surface. The bitmap surface must be a WIC bitmap that exposes the <see cref="IWICBitmap" /> interface.</para>
    </param>
    <param name="ppBuffer">
      <para>Receives a pointer to the <see cref="IMFMediaBuffer" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFEndCreateFile">
    <summary>
      <para>Completes an asynchronous request to create a byte stream from a file.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="Invoke" /> method.</para>
    </param>
    <param name="ppFile">
      <para>Receives a pointer to the <see cref="IMFByteStream" /> interface of the byte stream. The caller must release the interface.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Call this function when the <see cref="MFBeginCreateFile" /> function completes asynchronously.</para>
    </remarks>
    <seealso cref="MFBeginCreateFile" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFEndRegisterWorkQueueWithMMCSS">
    <summary>
      <para>Completes an asynchronous request to associate a work queue with a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</para>
    </param>
    <param name="pdwTaskId">
      <para>The unique task identifier.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Call this function when the <see cref="MFBeginRegisterWorkQueueWithMMCSS" /> function completes asynchronously.</para>
      <para>To unregister the work queue from the MMCSS class, call <see cref="MFBeginUnregisterWorkQueueWithMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFEndUnregisterWorkQueueWithMMCSS">
    <summary>
      <para>Completes an asynchronous request to unregister a work queue from a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. Pass in the same pointer that your callback object received in the <see cref="IMFAsyncCallback.Invoke" /> method.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Call this function when the <see cref="MFBeginUnregisterWorkQueueWithMMCSS" /> function completes asynchronously.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFFrameRateToAverageTimePerFrame">
    <summary>
      <para>Converts a video frame rate into a frame duration.</para>
    </summary>
    <param name="unNumerator">
      <para>The numerator of the frame rate.</para>
    </param>
    <param name="unDenominator">
      <para>The denominator of the frame rate.</para>
    </param>
    <param name="punAverageTimePerFrame">
      <para>Receives the average duration of a video frame, in 100-nanosecond units.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is useful for calculating time stamps on a sample, given the frame rate.</para>
      <para>Also, average time per frame is used in the older <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/amvideo/ns-amvideo-videoinfoheader">VIDEOINFOHEADER</a> and <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/dvdmedia/ns-dvdmedia-videoinfoheader2">VIDEOINFOHEADER2</a> format structures. This function provides a standard conversion so that all components in the pipeline can use consistent values, if they need to translate between the older format structures and the media type attributes used in Media Foundation.</para>
      <para>For certain common frame rates, the function gets the frame duration from a look-up table:</para>
      <list type="table">
        <listheader>
          <description>Frames per second (floating point)</description>
          <description>Frames per second (fractional)</description>
          <description>Average time per frame</description>
        </listheader>
        <item>
          <description>59.94</description>
          <description>60000/1001</description>
          <description>166833</description>
        </item>
        <item>
          <description>29.97</description>
          <description>30000/1001</description>
          <description>333667</description>
        </item>
        <item>
          <description>23.976</description>
          <description>24000/1001</description>
          <description>417188</description>
        </item>
        <item>
          <description>60</description>
          <description>60/1</description>
          <description>166667</description>
        </item>
        <item>
          <description>30</description>
          <description>30/1</description>
          <description>333333</description>
        </item>
        <item>
          <description>50</description>
          <description>50/1</description>
          <description>200000</description>
        </item>
        <item>
          <description>25</description>
          <description>25/1</description>
          <description>400000</description>
        </item>
        <item>
          <description>24</description>
          <description>24/1</description>
          <description>416667</description>
        </item>
      </list>
      <para>Most video content uses one of the frame rates listed here.
For other frame rates, the function calculates the duration.</para>
    </remarks>
    <seealso cref="MFAverageTimePerFrameToFrameRate" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFGetAttribute2UINT32asUINT64">
    <summary>
      <para>Gets an attribute whose value is two <b>UINT32</b> values packed into a <b>UINT64</b>.</para>
    </summary>
    <param name="pAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>A <b>GUID</b> that identifies which value to retrieve. The attribute type must be <b>MF_ATTRIBUTE_UINT64</b>.</para>
    </param>
    <param name="punHigh32">
      <para>Receives the high-order 32 bits.</para>
    </param>
    <param name="punLow32">
      <para>Receives the low-order 32 bits.</para>
    </param>
    <returns>
      <para>The method returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_ATTRIBUTENOTFOUND</b>
            </para>
          </description>
          <description>
            <para>The specified key was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDTYPE</b>
            </para>
          </description>
          <description>
            <para>The attribute value is not a <b>UINT64</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Internally, this function calls <see cref="IMFAttributes.GetUINT64" /> to get the <b>UINT64</b> value, and <see cref="Unpack2UINT32AsUINT64" /> to unpack the two 32-bit values.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeDouble">
    <summary>
      <para>Returns a <b>double</b> value from an attribute store, or a default value if the attribute is not present.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>GUID that identifies which value to retrieve.</para>
    </param>
    <param name="fDefault">
      <para>Default value to return if the attribute store does not contain the specified attribute.</para>
    </param>
    <returns>
      <para>Returns a <b>double</b> value.</para>
    </returns>
    <remarks>
      <para>This helper function queries the attribute store for the attribute specified by <i>guidKey</i>. If the attribute is not present or does not have type <b>double</b>, the function returns <i>fDefault</i>.</para>
      <para>This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call <see cref="IMFAttributes.GetDouble" /> and check for MF_E_ATTRIBUTENOTFOUND.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso cref="IMFAttributes.GetDouble" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeRatio">
    <summary>
      <para>Retrieves an attribute whose value is a ratio.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>
        <b>GUID</b> that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64.</para>
    </param>
    <param name="punNumerator">
      <para>Receives the numerator of the ratio.</para>
    </param>
    <param name="punDenominator">
      <para>Receives the denominator of the ratio.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Some attributes specify a ratio as a packed <b>UINT64</b> value. Use this function to get the numerator and denominator as separate 32-bit values.</para>
    </remarks>
    <seealso cref="MFSetAttributeRatio" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributesAsBlob">
    <summary>
      <para>Converts the contents of an attribute store to a byte array.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="pBuf">
      <para>Pointer to an array that receives the attribute data.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <i>pBuf</i> array, in bytes. To get the required size of the buffer, call <see cref="MFGetAttributesAsBlobSize" />.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_BUFFERTOOSMALL</b>
            </para>
          </description>
          <description>
            <para>The buffer given in <i>pBuf</i> is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The function skips any attributes with <b>IUnknown</b> pointer values (MF_ATTRIBUTE_IUNKNOWN); they are not stored in the array.</para>
      <para>To convert the byte array back into an attribute store, call <see cref="MFInitAttributesFromBlob" />.</para>
      <para>To write an attribute store to a stream, call the <see cref="MFSerializeAttributesToStream" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributesAsBlobSize">
    <summary>
      <para>Retrieves the size of the buffer needed for the <see cref="MFGetAttributesAsBlob" /> function.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="pcbBufSize">
      <para>Receives the required size of the array, in bytes.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this function to find the size of the array that is needed for the <see cref="MFGetAttributesAsBlob" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeSize">
    <summary>
      <para>Retrieves an attribute whose value is a size, expressed as a width and height.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>
        <b>GUID</b> that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64.</para>
    </param>
    <param name="punWidth">
      <para>Receives the width.</para>
    </param>
    <param name="punHeight">
      <para>Receives the height.</para>
    </param>
    <returns>
      <para>This function can return one of these values.</para>
    </returns>
    <remarks>
      <para>Some attributes specify a size as a packed <b>UINT64</b> value. Use this function to get the numerator and denominator as separate 32-bit values.</para>
    </remarks>
    <seealso cref="MFSetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeString">
    <summary>
      <para>Gets a string value from an attribute store.</para>
    </summary>
    <param name="pAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface.</para>
    </param>
    <param name="guidKey">
      <para>A GUID that identifies which value to retrieve. The attribute type must be <b>MF_ATTRIBUTE_STRING</b>.</para>
    </param>
    <param name="ppsz">
      <para>If the key is found and the value is a string type, this parameter receives a copy of the string. The caller must free the memory for the string by calling <see cref="CoTaskMemFree" />.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is a wrapper for the <see cref="IMFAttributes.GetAllocatedString" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeUINT32">
    <summary>
      <para>Returns a <b>UINT32</b> value from an attribute store, or a default value if the attribute is not present.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>GUID that identifies which value to retrieve.</para>
    </param>
    <param name="unDefault">
      <para>Default value to return if the attribute store does not contain the specified attribute.</para>
    </param>
    <returns>
      <para>Returns a <b>UINT32</b> value.</para>
    </returns>
    <remarks>
      <para>This helper function queries the attribute store for the <b>UINT32</b> value specified by <i>guidKey</i>. If the value is not present or does not have type <b>UINT32</b>, the function returns <i>unDefault</i>.</para>
      <para>This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call <see cref="IMFAttributes.GetUINT32" /> and check for MF_E_ATTRIBUTENOTFOUND.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso cref="IMFAttributes.GetUINT32" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetAttributeUINT64">
    <summary>
      <para>Returns a <b>UINT64</b> value from an attribute store, or a default value if the attribute is not present.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>GUID that identifies which value to retrieve.</para>
    </param>
    <param name="unDefault">
      <para>Default value to return if the attribute store does not contain the specified attribute.</para>
    </param>
    <returns>
      <para>Returns a <b>UINT64</b> value.</para>
    </returns>
    <remarks>
      <para>This helper function queries the attribute store for the <b>UINT64</b> value specified by guidKey. If the value is not present, the function returns <i>unDefault</i>.</para>
      <para>This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call <see cref="IMFAttributes.GetUINT64" /> and check for MF_E_ATTRIBUTENOTFOUND.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso cref="IMFAttributes.GetUINT64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetContentProtectionSystemCLSID">
    <summary>
      <para>Gets the class identifier for a content protection system.</para>
    </summary>
    <param name="guidProtectionSystemID">
      <para>The GUID that identifies the content protection system.</para>
    </param>
    <param name="pclsid">
      <para>Receives the class identifier to the content protection system.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The class identifier can be used to create the input trust authority (ITA) for the content protection system. Call <see cref="CoCreateInstance" /> or <see cref="IMFPMPHost.CreateObjectByCLSID" /> to get an <see cref="IMFTrustedInput" />  pointer.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetMFTMerit">
    <summary>
      <para>Gets the merit value of a hardware codec.</para>
    </summary>
    <param name="pMFT">
      <para>A pointer to the <b>IUnknown</b> interface of the Media Foundation transform (MFT) that represents the codec.</para>
    </param>
    <param name="cbVerifier">
      <para>The size, in bytes, of the <i>verifier</i> array.</para>
    </param>
    <param name="verifier">
      <para>The address of a buffer that contains one of the following:</para>
      <list type="bullet">
        <item>
          <description>The class identifier (CLSID) of the MFT.</description>
        </item>
        <item>
          <description>A null-terminated wide-character string that contains the symbol link for the underlying hardware device. Include the size of the terminating null in the value of <i>cbVerifier</i>.</description>
        </item>
      </list>
    </param>
    <param name="merit">
      <para>Receives the merit value.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The function fails if the MFT does not represent a hardware device with a valid Output Protection Manager (OPM) certificate.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/opm-get-codec-info">OPM_GET_CODEC_INFO</seealso>
  </member>
  <member name="Windows.MFGetPlaneSize">
    <summary>
      <para>Retrieves the image size, in bytes, for an uncompressed video format.</para>
    </summary>
    <param name="format">
      <para>FOURCC code or <b>D3DFORMAT</b> value that specifies the video format.</para>
    </param>
    <param name="dwWidth">
      <para>Width of the image, in pixels.</para>
    </param>
    <param name="dwHeight">
      <para>Height of the image, in pixels.</para>
    </param>
    <param name="pdwPlaneSize">
      <para>Receives the size of one frame, in bytes. If the format is compressed or is not recognized, this value is zero.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is equivalent to the <see cref="MFCalculateImageSize" /> function.</para>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetPluginControl">
    <summary>
      <para>Gets a pointer to the Microsoft Media Foundation plug-in manager.</para>
    </summary>
    <param name="ppPluginControl">
      <para>Receives a pointer to the <see cref="IMFPluginControl" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetStrideForBitmapInfoHeader">
    <summary>
      <para>Calculates the minimum surface stride for a video format.</para>
    </summary>
    <param name="format">
      <para>FOURCC code or <b>D3DFORMAT</b> value that specifies the video format. If you have a video subtype GUID, you can use the first <b>DWORD</b> of the subtype.</para>
    </param>
    <param name="dwWidth">
      <para>Width of the image, in pixels.</para>
    </param>
    <param name="pStride">
      <para>Receives the minimum surface stride, in pixels.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function calculates the minimum stride needed to hold the image in memory. Use this function if you are allocating buffers in system memory. Surfaces allocated in video memory might require a larger stride, depending on the graphics card.</para>
      <para>If you are working with a DirectX surface buffer, use the <see cref="IMF2DBuffer.Lock2D" /> method to find the surface stride.</para>
      <para>For planar YUV formats, this function returns the stride for the Y plane. Depending on the format, the chroma planes might have a different stride.</para>
      <para>
        <b>Note</b>  Prior to Windows 7, this function was exported from evr.dll. Starting in Windows 7, this function is exported from mfplat.dll, and evr.dll exports a stub function that calls into mfplat.dll. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-headers-and-libraries">Library Changes in Windows 7</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/image-stride">Image Stride</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFGetTimerPeriodicity">
    <summary>
      <para>Retrieves the timer interval for the <see cref="MFAddPeriodicCallback" /> function.</para>
    </summary>
    <param name="Periodicity">
      <para>Receives the timer interval, in milliseconds.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSClass">
    <summary>
      <para>Retrieves the Multimedia Class Scheduler Service (MMCSS) class currently associated with this work queue.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>Identifier for the work queue. The identifier is retrieved by the <see cref="MFAllocateWorkQueue" /> function.</para>
    </param>
    <param name="pwszClass">
      <para>Pointer to a buffer that receives the name of the MMCSS class. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pcchClass">
      <para>On input, specifies the size of the <i>pwszClass</i> buffer, in characters. On output, receives the required size of the buffer, in characters. The size includes the terminating null character.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_BUFFERTOOSMALL</b>
            </para>
          </description>
          <description>
            <para>The <i>pwszClass</i> buffer is too small to receive the task name.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the work queue is not associated with an MMCSS task, the function retrieves an empty string.</para>
      <para>To associate a work queue with an MMCSS task, call <see cref="MFBeginRegisterWorkQueueWithMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSPriority">
    <summary>
      <para>Gets the relative thread priority of a work queue.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>The identifier of the work queue. For private work queues, the identifier is returned by the <see cref="MFAllocateWorkQueue" /> function. For platform work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>.</para>
    </param>
    <param name="lPriority">
      <para>Receives the relative thread priority.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function returns the relative thread priority set by the <see cref="MFBeginRegisterWorkQueueWithMMCSSEx" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
  </member>
  <member name="Windows.MFGetWorkQueueMMCSSTaskId">
    <summary>
      <para>Retrieves the Multimedia Class Scheduler Service (MMCSS) task identifier currently associated with this work queue.</para>
    </summary>
    <param name="dwWorkQueueId">
      <para>Identifier for the work queue. The identifier is retrieved by the <see cref="MFAllocateWorkQueue" /> function.</para>
    </param>
    <param name="pdwTaskId">
      <para>Receives the task identifier.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To associate a work queue with an MMCSS task, call <see cref="MFBeginRegisterWorkQueueWithMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFHeapAlloc">
    <summary>
      <para>Allocates a block of memory.</para>
    </summary>
    <param name="nSize">
      <para>Number of bytes to allocate.</para>
    </param>
    <param name="dwFlags">
      <para>Zero or more flags. For a list of valid flags, see <b>HeapAlloc</b> in the Windows SDK documentation.</para>
    </param>
    <param name="pszFile">
      <para>Reserved. Set to <b>NULL</b>.</para>
    </param>
    <param name="line">
      <para>Reserved. Set to zero.</para>
    </param>
    <param name="eat">
      <para>Reserved. Set to <b>eAllocationTypeIgnore</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns a pointer to the allocated memory block. If the function fails, it returns <b>NULL</b>.</para>
    </returns>
    <remarks>
      <para>In the current version of Media Foundation, this function is equivalent to calling the <b>HeapAlloc</b> function and specifying the heap of the calling process.</para>
      <para>To free the allocated memory, call <see cref="MFHeapFree" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFHeapFree">
    <summary>
      <para>Frees a block of memory that was allocated by calling the <see cref="MFHeapAlloc" /> function.</para>
    </summary>
    <param name="pv">
      <para>Pointer to the memory to free.</para>
    </param>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFInitAMMediaTypeFromMFMediaType">
    <summary>
      <para>Initializes a DirectShow <b>AM_MEDIA_TYPE</b> structure from a Media Foundation media type.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to convert.</para>
    </param>
    <param name="guidFormatBlockType">
      <para>Format type GUID. This value corresponds to the <b>formattype</b> member of the <b>AM_MEDIA_TYPE</b> structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype.</para>
    </param>
    <param name="pAMType">
      <para>Pointer to an <b>AM_MEDIA_TYPE</b> structure. The function allocates memory for the format block. The caller must release the format block by calling <see cref="CoTaskMemFree" /> on the <b>pbFormat</b> member.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDMEDIATYPE</b>
            </para>
          </description>
          <description>
            <para>The media type is not valid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function can also be used with the following format structures that are equivalent to <b>AM_MEDIA_TYPE</b>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>DMO_MEDIA_TYPE</b> (DirectX Media Objects)</description>
        </item>
        <item>
          <description>
            <b>WM_MEDIA_TYPE</b> (Windows Media Format SDK)</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFInitAttributesFromBlob">
    <summary>
      <para>Initializes the contents of an attribute store from a byte array.</para>
    </summary>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="pBuf">
      <para>Pointer to the array that contains the initialization data.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <i>pBuf</i> array, in bytes.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The buffer is not valid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this function to deserialize an attribute store that was serialized with the <see cref="MFGetAttributesAsBlob" /> function.</para>
      <para>This function deletes any attributes that were previously stored in <i>pAttributes</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromAMMediaType">
    <summary>
      <para>Initializes a media type from a DirectShow <b>AM_MEDIA_TYPE</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pAMType">
      <para>Pointer to an <b>AM_MEDIA_TYPE</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function can also be used with the following format structures that are equivalent to <b>AM_MEDIA_TYPE</b>:</para>
      <list type="bullet">
        <item>
          <description>
            <b>DMO_MEDIA_TYPE</b> (DirectX Media Objects)
</description>
        </item>
        <item>
          <description>
            <b>WM_MEDIA_TYPE</b> (Windows Media Format SDK)
</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromMPEG1VideoInfo">
    <summary>
      <para>Initializes a media type from a DirectShow <b>MPEG1VIDEOINFO</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pMP1VI">
      <para>Pointer to a <b>MPEG1VIDEOINFO</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <b>MPEG1VIDEOINFO</b> structure, in bytes.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>MPEG1VIDEOINFO</b> structure.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromMPEG2VideoInfo">
    <summary>
      <para>Initializes a media type from a DirectShow <b>MPEG2VIDEOINFO</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pMP2VI">
      <para>Pointer to a <b>MPEG2VIDEOINFO</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <b>MPEG2VIDEOINFO</b> structure, in bytes.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>MPEG2VIDEOINFO</b> structure.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromVideoInfoHeader">
    <summary>
      <para>Initializes a media type from a DirectShow <b>VIDEOINFOHEADER</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pVIH">
      <para>Pointer to a <b>VIDEOINFOHEADER</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <b>VIDEOINFOHEADER</b> structure, in bytes.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>VIDEOINFOHEADER</b> structure.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromVideoInfoHeader2">
    <summary>
      <para>Initializes a media type from a DirectShow <b>VIDEOINFOHEADER2</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pVIH2">
      <para>Pointer to a <b>VIDEOINFOHEADER2</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <b>VIDEOINFOHEADER2</b> structure, in bytes.</para>
    </param>
    <param name="pSubtype">
      <para>Pointer to a subtype GUID. This parameter can be <b>NULL</b>. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the <b>biCompression</b> field contained in the <b>VIDEOINFOHEADER2</b> structure.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInitMediaTypeFromWaveFormatEx">
    <summary>
      <para>Initializes a media type from a <b>WAVEFORMATEX</b> structure.</para>
    </summary>
    <param name="pMFType">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type to initialize. To create the uninitialized media type object, call <see cref="MFCreateMediaType" />.</para>
    </param>
    <param name="pWaveFormat">
      <para>Pointer to a <b>WAVEFORMATEX</b> structure that describes the media type. The caller must fill in the structure members before calling this function.</para>
    </param>
    <param name="cbBufSize">
      <para>Size of the <b>WAVEFORMATEX</b> structure, in bytes.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-type-conversions">Media Type Conversions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFInvokeCallback">
    <summary>
      <para>Invokes a callback method to complete an asynchronous operation.</para>
    </summary>
    <param name="pAsyncResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface. To create this object, call <see cref="MFCreateAsyncResult" />.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_INVALID_WORKQUEUE</b>
              </b>
            </para>
          </description>
          <description>
            <para>Invalid work queue. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_SHUTDOWN</b>
              </b>
            </para>
          </description>
          <description>
            <para>The <see cref="MFShutdown" /> function was called to shut down the Media Foundation platform.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If you are implementing an asynchronous method, use this function to invoke the caller's <see cref="IMFAsyncCallback.Invoke" /> method.</para>
      <para>The callback is invoked from a Media Foundation work queue. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/writing-an-asynchronous-method">Writing an Asynchronous Method</a>.</para>
      <para>The <see cref="MFShutdown" /> function shuts down the work queue threads, so the callback is not guaranteed to be invoked after <b>MFShutdown</b> is called.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-callback-methods">Asynchronous Callback Methods</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFIsFormatYUV">
    <summary>
      <para>Queries whether a FOURCC code or <b>D3DFORMAT</b> value is a YUV format.</para>
    </summary>
    <param name="Format">
      <para>FOURCC code or <b>D3DFORMAT</b> value.</para>
    </param>
    <returns>
      <para>The function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>TRUE</b>
            </para>
          </description>
          <description>
            <para>The value specifies a YUV format.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>FALSE</b>
            </para>
          </description>
          <description>
            <para>The value does not specify a recognized YUV format.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function checks whether <i>Format</i> specifies a YUV format. Not every YUV format is recognized by this function. However, if a YUV format is not recognized by this function, it is probably not supported for video rendering or DirectX video acceleration (DXVA).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-types">Media Types</seealso>
  </member>
  <member name="Windows.MFllMulDiv">
    <summary>
      <para>Calculates ((a * b) + d) / c, where each term is a 64-bit signed value.</para>
    </summary>
    <param name="a">
      <para>A multiplier.</para>
    </param>
    <param name="b">
      <para>Another multiplier.</para>
    </param>
    <param name="c">
      <para>The divisor.</para>
    </param>
    <param name="d">
      <para>The rounding factor.</para>
    </param>
    <returns>
      <para>Returns the result of the calculation. If numeric overflow occurs, the function returns _I64_MAX (positive overflow) or LLONG_MIN (negative overflow). If Mfplat.dll cannot be loaded, the function returns _I64_MAX.</para>
    </returns>
    <remarks>
      <para>
        <b>Note</b>  A previous version of this topic described the parameters incorrectly. The divisor is <i>c</i> and the rounding factor is <i>d</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFLockDXGIDeviceManager">
    <summary>
      <para>Locks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</para>
    </summary>
    <param name="pResetToken">
      <para>Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling <see cref="IMFDXGIDeviceManager.ResetDevice" />.
This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ppManager">
      <para>Receives a pointer to the <see cref="IMFDXGIDeviceManager" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function obtains a pointer to a  DXGI Device Manager instance that can be shared between components. The Microsoft Media Foundation platform creates this instance of the  DXGI Device Manager as a singleton object. Alternatively, you can create a new DXGI Device Manager by calling <see cref="MFCreateDXGIDeviceManager" />.</para>
      <para>The first time this function is called, the Media Foundation platform creates the shared DXGI Device Manager.</para>
      <para>When you are done use the <see cref="IMFDXGIDeviceManager" /> pointer, call the <see cref="MFUnlockDXGIDeviceManager" />.</para>
    </remarks>
    <seealso cref="MFCreateDXGIDeviceManager" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFLockPlatform">
    <summary>
      <para>Blocks the <see cref="MFShutdown" /> function.</para>
    </summary>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function prevents work queue threads from being shut down when <see cref="MFShutdown" /> is called. Use this function to ensure that asynchronous operations complete gracefully before the platform shuts down.</para>
      <para>This function holds a lock on the Media Foundation platform. To unlock the platform, call <see cref="MFUnlockPlatform" />. The application must call <b>MFUnlockPlatform</b> once for every call to <b>MFLockPlatform</b>.</para>
      <para>The <see cref="MFShutdown" /> function blocks until the platform is unlocked, or until a fixed wait period has elapsed. (The wait period is a few seconds.) To avoid memory leaks, the application should unlock the platform before the wait period ends. For example, cancel any asynchronous operations that are waiting to complete and are holding a lock on the platform.</para>
      <para>The default implementation of the <see cref="IMFAsyncResult" /> interface automatically locks the Media Foundation platform when the result object is created. Releasing the interface unlocks the platform. Therefore, in most cases your application does not need to lock the platform directly. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</a>.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-platform-apis">Media Foundation Platform APIs</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFLockSharedWorkQueue">
    <summary>
      <para>Obtains and locks a shared work queue.</para>
    </summary>
    <param name="wszClass">
      <para>The name of the MMCSS task.</para>
    </param>
    <param name="BasePriority">
      <para>The base priority of the work-queue threads.</para>
      <para>If the regular-priority queue is being used (<i>wszClass</i>=""), then the value 0 must be passed in.</para>
    </param>
    <param name="pdwTaskId">
      <para>The MMCSS task identifier. On input, specify an existing MCCSS task group ID , or use the value zero to create a new task group. If the regular priority queue is being used (<i>wszClass</i>=""), then <b>NULL</b> must be passed in. On output, receives the actual task group ID.</para>
    </param>
    <param name="pID">
      <para>Receives an identifier for the new work queue. Use this identifier when queuing work items.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>A <i>multithreaded work queue</i> uses a thread pool to dispatch work items. Whenever a thread becomes available, it dequeues the next work item from the queue. Work items are dequeued in first-in-first-out order, but work items are not serialized. In other words, the work queue does not wait for a work item to complete before it starts the next work item.</para>
      <para>Within a single process, the Microsoft Media Foundation platform creates up to one multithreaded queue for each Multimedia Class Scheduler Service (MMCSS) task. The <b>MFLockSharedWorkQueue</b> function checks whether a matching work queue already exists. If not, the function creates a new work queue and registers the work queue with MMCSS. The function returns the MMCSS task identifier (<i>pdwTaskId</i>) and the work queue identifier (<i>pID</i>). To queue a work item, pass the work queue identifier to any of the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="MFPutWorkItem" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MFPutWorkItem2" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MFPutWorkItemEx" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MFPutWorkItemEx2" />
          </description>
        </item>
      </list>
      <para>The <b>MFLockSharedWorkQueue</b> function also locks the queue. Before the process exits, call <see cref="MFUnlockWorkQueue" /> to unlock the work queue.</para>
      <para>If the regular priority queue is being used (<i>wszClass</i>=""), then NULL must be passed in to <i>pdwTaskId</i> and the value 0 must be passed into <i>BasePriority</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFLockWorkQueue">
    <summary>
      <para>Locks a work queue.</para>
    </summary>
    <param name="dwWorkQueue">
      <para>The identifier for the work queue. The identifier is returned by the <see cref="MFAllocateWorkQueue" /> function.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function prevents the <see cref="MFShutdown" /> function from shutting down the work queue. Use this function to ensure that asynchronous operations on the work queue complete gracefully before the platform shuts down. The <b>MFShutdown</b> function blocks until the work queue is unlocked, or until a fixed wait period has elapsed. (The wait period is a few seconds.)</para>
      <para>Call <see cref="MFUnlockWorkQueue" /> to unlock the work queue. Each call to <b>MFLockWorkQueue</b> must be matched by a corresponding call to <b>MFUnlockWorkQueue</b>.</para>
      <para>
        <b>Note</b>  The <see cref="MFAllocateWorkQueue" /> function implicitly locks the work queue that it creates.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFMapDX9FormatToDXGIFormat">
    <summary>
      <para>Converts a Microsoft Direct3D 9 format identifier to a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier.</para>
    </summary>
    <param name="dx9">
      <para>The <see cref="D3DFORMAT" /> value or FOURCC code to convert.</para>
    </param>
    <returns>
      <para>Returns a <see cref="DXGI_FORMAT" /> value.</para>
    </returns>
    <seealso cref="MFMapDXGIFormatToDX9Format" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFMapDXGIFormatToDX9Format">
    <summary>
      <para>Converts a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier to a Microsoft Direct3D 9 format identifier.</para>
    </summary>
    <param name="dx11">
      <para>The <see cref="DXGI_FORMAT" /> value to convert.</para>
    </param>
    <returns>
      <para>Returns a <see cref="D3DFORMAT" /> value or FOURCC code.</para>
    </returns>
    <seealso cref="MFMapDX9FormatToDXGIFormat" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFPutWaitingWorkItem">
    <summary>
      <para>Queues a work item that waits for an event to be signaled.</para>
    </summary>
    <param name="hEvent">
      <para>A handle to an event object. To create an event object, call <see cref="CreateEvent" /> or <see cref="CreateEventEx" />.</para>
    </param>
    <param name="Priority">
      <para>The priority of the work item. Work items are performed in order of priority.</para>
    </param>
    <param name="pResult">
      <para>A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</para>
    </param>
    <param name="pKey">
      <para>Receives a key that can be used to cancel the wait. To cancel the wait, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function enables a component to wait for an event without blocking the current thread.</para>
      <para>The function puts a work item on the specified work queue. This work item waits for the event given in <i>hEvent</i> to be signaled. When the event is signaled, the work item invokes a callback. (The callback is contained in the result object given in <i>pResult</i>. For more information, see <see cref="MFCreateAsyncResult" />).</para>
      <para>The work item is dispatched on a work queue by the <see cref="IMFAsyncCallback.GetParameters" /> method of the callback. The work queue can be any of the following:</para>
      <list type="bullet">
        <item>
          <description>The default work queue (<b>MFASYNC_CALLBACK_QUEUE_STANDARD</b>).</description>
        </item>
        <item>
          <description>The platform multithreaded queue (<b>MFASYNC_CALLBACK_QUEUE_MULTITHREADED</b>).</description>
        </item>
        <item>
          <description>A multithreaded queue returned by the <see cref="MFLockSharedWorkQueue" />  function.</description>
        </item>
        <item>
          <description>A serial queue created by the <see cref="MFAllocateSerialWorkQueue" /> function.</description>
        </item>
      </list>
      <para>Do not use any of the following work queues: <b>MFASYNC_CALLBACK_QUEUE_IO</b>, <b>MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION</b>, <b>MFASYNC_CALLBACK_QUEUE_RT</b>, or <b>MFASYNC_CALLBACK_QUEUE_TIMER</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFPutWorkItem">
    <summary>
      <para>Puts an asynchronous operation on a work queue.</para>
    </summary>
    <param name="dwQueue">
      <para>The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or <see cref="MFAllocateWorkQueueEx" />.</para>
    </param>
    <param name="pCallback">
      <para>A pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</para>
    </param>
    <param name="pState">
      <para>A pointer to the <see cref="IUnknown" /> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_INVALID_WORKQUEUE</b>
              </b>
            </para>
          </description>
          <description>
            <para>Invalid work queue. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates an asynchronous result object and puts the result object on the work queue. The work queue calls the <see cref="IMFAsyncCallback.Invoke" /> method specified by <i>pCallback</i>.</para>
    </remarks>
    <seealso cref="MFPutWorkItemEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFPutWorkItem2">
    <summary>
      <para>Puts an asynchronous operation on a work queue, with a specified priority.</para>
    </summary>
    <param name="dwQueue">
      <para>The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or  MFAllocateWorkQueueEx.</para>
    </param>
    <param name="Priority">
      <para>The priority of the work item. Work items are performed in order of priority.</para>
    </param>
    <param name="pCallback">
      <para>A pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</para>
    </param>
    <param name="pState">
      <para>A pointer to the <see cref="IUnknown" /> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_INVALID_WORKQUEUE</b>
              </b>
            </para>
          </description>
          <description>
            <para>Invalid work queue identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFPutWorkItemEx">
    <summary>
      <para>Puts an asynchronous operation on a work queue.</para>
    </summary>
    <param name="dwQueue">
      <para>The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or <see cref="MFAllocateWorkQueueEx" />.</para>
    </param>
    <param name="pResult">
      <para>A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_INVALID_WORKQUEUE</b>
              </b>
            </para>
          </description>
          <description>
            <para>Invalid work queue identifier. For more information, see <see cref="IMFAsyncCallback.GetParameters" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To invoke the work-item, this function passes <i>pResult</i> to the <see cref="MFInvokeCallback" /> function. The callback is specified when you create the result object specified by <i>pResult</i>.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="MFPutWorkItem" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFPutWorkItemEx2">
    <summary>
      <para>Puts an asynchronous operation on a work queue, with a specified priority.</para>
    </summary>
    <param name="dwQueue">
      <para>The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queue-identifiers">Work Queue Identifiers</a>. To create a new work queue, call <see cref="MFAllocateWorkQueue" /> or  <see cref="MFAllocateWorkQueueEx" />.</para>
    </param>
    <param name="Priority">
      <para>The priority of the work item. This value should be 1, 0, or -1. Items with a value of 1 are executed before items with a value of 0. Items with a value of  -1 are executed after items with a value of 0.</para>
    </param>
    <param name="pResult">
      <para>A pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>
                <b>MF_E_INVALID_WORKQUEUE</b>
              </b>
            </para>
          </description>
          <description>
            <para>Invalid work queue identifier.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_SHUTDOWN</b>
            </para>
          </description>
          <description>
            <para>The <see cref="MFStartup" /> function was not called, or <see cref="MFShutdown" /> was called.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To invoke the work item, this function passes <i>pResult</i> to the <see cref="MFInvokeCallback" /> function. The callback is specified when you create the result object specified by <i>pResult</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFRegisterLocalByteStreamHandler">
    <summary>
      <para>Registers a byte-stream handler in the caller's process.</para>
    </summary>
    <param name="szFileExtension">
      <para>A string that contains the file name extension for this handler.</para>
    </param>
    <param name="szMimeType">
      <para>A string that contains the MIME type for this handler.</para>
    </param>
    <param name="pActivate">
      <para>A pointer to the <see cref="IMFActivate" /> interface of an activation object. The caller implements this interface. The <see cref="IMFActivate.ActivateObject" /> method of the activation object must create a byte-stream handler. The byte-stream handler exposes the <see cref="IMFByteStreamHandler" /> interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Byte-stream handlers are used in Microsoft Media Foundation during the source resolution process, which creates a media source from a URL. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</a>.</para>
      <para>Within a process, local byte-stream handlers take precedence over byte-stream handlers that are registered in the registry. Local byte-stream handlers are not visible to other processes.</para>
      <para>Use this function if you want to register a custom byte-stream handler for your application, but do not want the handler available to other applications.</para>
      <para>Either <i>szFileExtension</i> or <i>szMimeType</i> can be <b>NULL</b>; at least one must be non-<b>NULL</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</seealso>
  </member>
  <member name="Windows.MFRegisterLocalSchemeHandler">
    <summary>
      <para>Registers a scheme handler in the caller's process.</para>
    </summary>
    <param name="szScheme">
      <para>A string that contains the scheme. The scheme includes the trailing ':' character; for example,
"http:".</para>
    </param>
    <param name="pActivate">
      <para>A pointer to the <see cref="IMFActivate" /> interface of an activation
object. The caller implements this interface. The
<see cref="IMFActivate.ActivateObject" /></para>
      <para>method of the activation object must create a scheme handler object. The scheme handler exposes the
<see cref="IMFSchemeHandler" /> interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Scheme handlers are used in Microsoft Media Foundation during the source resolution process, which creates a media
source from a URL. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</a>.</para>
      <para>Within a process, local scheme handlers take precedence over scheme handlers that are registered in the
registry. Local scheme handlers are not visible to other processes.</para>
      <para>Use this function if you want to register a custom scheme handler for your application, but do not want the
handler available to other applications.</para>
    </remarks>
    <seealso cref="MFRegisterLocalByteStreamHandler" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/scheme-handlers-and-byte-stream-handlers">Scheme Handlers and Byte-Stream Handlers</seealso>
  </member>
  <member name="Windows.MFRegisterPlatformWithMMCSS">
    <summary>
      <para>Registers the standard Microsoft Media Foundation platform work queues with the Multimedia Class Scheduler Service (MMCSS).</para>
    </summary>
    <param name="wszClass">
      <para>The name of the MMCSS task.</para>
    </param>
    <param name="pdwTaskId">
      <para>The MMCSS task identifier. On input, specify an existing  MCCSS task group ID, or use the value zero to create a new task group. On output, receives the actual task group ID.</para>
    </param>
    <param name="lPriority">
      <para>The base priority of the work-queue threads.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>To unregister the platform work queues from the MMCSS class, call <see cref="MFUnregisterPlatformFromMMCSS" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
  </member>
  <member name="Windows.MFRemovePeriodicCallback">
    <summary>
      <para>Cancels a callback function that was set by the <see cref="MFAddPeriodicCallback" /> function.</para>
    </summary>
    <param name="dwKey">
      <para>Key that identifies the callback. This value is retrieved by the <see cref="MFAddPeriodicCallback" /> function.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The callback is dispatched on another thread, and this function does not attempt to synchronize with the callback thread. Therefore, it is possible for the callback to be invoked after this function returns.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFScheduleWorkItem">
    <summary>
      <para>Schedules an asynchronous operation to be completed after a specified interval.</para>
    </summary>
    <param name="pCallback">
      <para>Pointer to the <see cref="IMFAsyncCallback" /> interface. The caller must implement this interface.</para>
    </param>
    <param name="pState">
      <para>Pointer to the <b>IUnknown</b> interface of a state object, defined by the caller. This parameter can be <b>NULL</b>. You can use this object to hold state information. The object is returned to the caller when the callback is invoked.</para>
    </param>
    <param name="Timeout">
      <para>Time-out interval, in milliseconds. Set this parameter to a negative value. The callback is invoked after −<i>Timeout</i> milliseconds. For example, if <i>Timeout</i> is −5000, the callback is invoked after 5000 milliseconds.</para>
    </param>
    <param name="pKey">
      <para>Receives a key that can be used to cancel the timer. To cancel the timer, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function creates an asynchronous result object. When the timer interval elapses, the <see cref="IMFAsyncCallback.Invoke" /> method specified by <i>pCallback</i> is called.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="MFScheduleWorkItemEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFScheduleWorkItemEx">
    <summary>
      <para>Schedules an asynchronous operation to be completed after a specified interval.</para>
    </summary>
    <param name="pResult">
      <para>Pointer to the <see cref="IMFAsyncResult" /> interface of an asynchronous result object. To create the result object, call <see cref="MFCreateAsyncResult" />.</para>
    </param>
    <param name="Timeout">
      <para>Time-out interval, in milliseconds. Set this parameter to a negative value. The callback is invoked after −<i>Timeout</i> milliseconds. For example, if <i>Timeout</i> is −5000, the callback is invoked after 5000 milliseconds.</para>
    </param>
    <param name="pKey">
      <para>Receives a key that can be used to cancel the timer. To cancel the timer, call <see cref="MFCancelWorkItem" /> and pass this key in the <i>Key</i> parameter.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When the timer interval elapses, the timer calls <see cref="MFInvokeCallback" /> with the <i>pResult</i> pointer to invoke the asynchronous callback. The callback is specified when you create the result object.</para>
    </remarks>
    <seealso cref="MFScheduleWorkItem" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFSetAttribute2UINT32asUINT64">
    <summary>
      <para>Packs two <b>UINT32</b> values into a <b>UINT64</b> attribute value.</para>
    </summary>
    <param name="pAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</para>
    </param>
    <param name="unHigh32">
      <para>The value to store in the high-order 32 bits of the <b>UINT64</b> value.</para>
    </param>
    <param name="unLow32">
      <para>The value to store in the low-order 32 bits of the <b>UINT64</b> value.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Internally, this functions calls <see cref="Pack2UINT32AsUINT64" /> to create the 64-bit value, and <see cref="IMFAttributes.SetUINT64" /> to set the attribute.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes and Properties</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFSetAttributeRatio">
    <summary>
      <para>Sets a ratio as a 64-bit attribute value.</para>
    </summary>
    <param name="pAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</para>
    </param>
    <param name="unNumerator">
      <para>The numerator of the ratio.</para>
    </param>
    <param name="unDenominator">
      <para>The denominator of the ratio.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Some attributes specify a ratio as a packed <b>UINT64</b> value. This function packs the numerator and denominator into a single <b>UINT64</b> value.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes in Media Foundation</seealso>
    <seealso cref="MFGetAttributeRatio" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFSetAttributeSize">
    <summary>
      <para>Sets width and height as a single 64-bit attribute value.</para>
    </summary>
    <param name="pAttributes">
      <para>A pointer to the <see cref="IMFAttributes" /> interface of the attribute store.</para>
    </param>
    <param name="guidKey">
      <para>A <b>GUID</b> that identifies the value to set. If this key already exists, the function overwrites the old value.</para>
    </param>
    <param name="unWidth">
      <para>The width.</para>
    </param>
    <param name="unHeight">
      <para>The height.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Some attributes specify a width and a height as a packed <b>UINT64</b> value. This function packs the width and height values into a single <b>UINT64</b> value.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/attributes-and-properties">Attributes in Media Foundation</seealso>
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFShutdown">
    <summary>
      <para>Shuts down the Microsoft Media Foundation platform. Call this function once for every call to <see cref="MFStartup" />. Do not call this function from work queue threads.</para>
    </summary>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/initializing-media-foundation">Initializing Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFSplitSample">
    <summary>
      <para>Split up a combined media sample back into individual samples.</para>
    </summary>
    <param name="pSample">
      <para>A pointer to an <see cref="IMFSample" /> representing a combined sample to be split.</para>
    </param>
    <param name="pOutputSamples">
      <para>Receives a pointer to an array of output samples from the split operation.</para>
    </param>
    <param name="dwOutputSampleMaxCount">
      <para>The maximum output array size. Call <see cref="IMFSample.GetBufferCount" /> on the sample provided in <i>pSample</i> to find out an upper bound.</para>
    </param>
    <param name="pdwOutputSampleCount">
      <para>Output parameter that receives the number of samples contained in the pOutputSamples array.</para>
    </param>
    <remarks>
      <para>Combine samples by calling <see cref="MFCombineSamples" /></para>
    </remarks>
  </member>
  <member name="Windows.MFStartup">
    <summary>
      <para>Initializes Microsoft Media Foundation.</para>
    </summary>
    <param name="Version">
      <para>Version number. Use the value <b>MF_VERSION</b>, defined in mfapi.h.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter is optional when using C++ but required in C. The value must be one of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>MFSTARTUP_NOSOCKET</para>
          </description>
          <description>
            <para>Do not initialize the sockets library.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MFSTARTUP_LITE</para>
          </description>
          <description>
            <para>Equivalent to MFSTARTUP_NOSOCKET.</para>
          </description>
        </item>
        <item>
          <description>
            <para>MFSTARTUP_FULL</para>
          </description>
          <description>
            <para>Initialize the entire Media Foundation platform. This is the default value when <i>dwFlags</i> is not specified.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_BAD_STARTUP_VERSION</b>
            </para>
          </description>
          <description>
            <para>The <i>Version</i> parameter requires a newer version of Media Foundation than the version that is running.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_DISABLED_IN_SAFEMODE</b>
            </para>
          </description>
          <description>
            <para>The Media Foundation platform is disabled because the system was started in "Safe Mode" (fail-safe boot).</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>Media Foundation is not implemented on the system.  This error can occur if the media components are not present (See <a href="https://support.microsoft.com/help/2703761">KB2703761</a> for more info).</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>An application must call this function before using Media Foundation. Before your application quits, call <see cref="MFShutdown" /> once for every previous call to <b>MFStartup</b>.</para>
      <para>Do not call <b>MFStartup</b> or <see cref="MFShutdown" /> from work queue threads. For more information about work queues, see <a href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</a>.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
      <h4>Examples</h4>
      <code>    hr = MFStartup(MF_VERSION);

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/initializing-media-foundation">Initializing Media Foundation</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFTEnum">
    <summary>
      <para>Enumerates Media Foundation transforms (MFTs) in the registry.</para>
      <para>Starting in Windows 7, applications should use the <see cref="MFTEnumEx" /> function instead.</para>
    </summary>
    <param name="guidCategory">
      <para>GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="Flags">
      <para>Reserved. Must be zero.</para>
    </param>
    <param name="pInputType">
      <para>Pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>Pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>.
If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pAttributes">
      <para>Reserved. Set to <b>NULL</b>.</para>
      <para>
        <b>Note</b>  Windows Vista and Windows Server 2008: This parameter can specify a pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The <b>MFTEnum</b> function matches the attributes in this object against the attributes stored in the registry. (Registry attributes are specified in the <i>pAttributes</i> parameter of the <see cref="MFTRegister" /> function.) Only MFTs with matching attributes are returned in the enumeration results.</para>
      <para>
        <b>Note</b>  Windows 7 and later: This parameter is ignored.</para>
    </param>
    <param name="ppclsidMFT">
      <para>Receives a pointer to an array of CLSIDs. To create an MFT from this list, call <b>CoCreateInstance</b> with one of the CLSIDs. To get information about a particular MFT from its CLSID, call <see cref="MFTGetInfo" />. The caller must free the memory for the array by calling <see cref="CoTaskMemFree" />.</para>
    </param>
    <param name="pcMFTs">
      <para>Receives the number of elements in the <i>ppclsidMFT</i> array. The value can be zero.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function returns a list of all the MFTs in the specified category that match the search criteria given by the <i>pInputType</i>, <i>pOutputType</i>, and <i>pAttributes</i> parameters. Any of those parameters can be <b>NULL</b>.</para>
      <para>If no MFTs match the criteria, the method succeeds but returns the value zero in <i>pcMFTs</i>.</para>
      <h4>Examples</h4>
      <para>To find a decoder, set <i>guidCategory</i> to <b>MFT_CATEGORY_AUDIO_DECODER</b> or <b>MFT_CATEGORY_VIDEO_DECODER</b> and specify the encoding format in <i>pInputType</i>.  You would typically set <i>pOutputType</i> to <b>NULL</b> in this case.</para>
      <code>HRESULT FindDecoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,        // Subtype
    BOOL bAudio,                // TRUE for audio, FALSE for video
    IMFTransform **ppDecoder    // Receives a pointer to the decoder.
    )
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    CLSID *ppCLSIDs = NULL;

    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnum(
        bAudio ? MFT_CATEGORY_AUDIO_DECODER : MFT_CATEGORY_VIDEO_DECODER,
        0,      // Reserved
        &amp;amp;amp;amp;amp;amp;info,  // Input type
        NULL,   // Output type
        NULL,   // Reserved
        &amp;amp;amp;amp;amp;amp;ppCLSIDs,
        &amp;amp;amp;amp;amp;amp;count
        );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first decoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = CoCreateInstance(ppCLSIDs[0], NULL,
            CLSCTX_INPROC_SERVER, IID_PPV_ARGS(ppDecoder));
    }

    CoTaskMemFree(ppCLSIDs);
    return hr;
}

</code>
      <para>To find an encoder, set <i>guidCategory</i> to <b>MFT_CATEGORY_AUDIO_ENCODER</b> or <b>MFT_CATEGORY_VIDEO_ENCODER</b> and specify the encoding format in <i>pOutputType</i>.  You would typically set <i>pInputType</i> to <b>NULL</b> in this case.</para>
      <code>HRESULT FindEncoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,
    BOOL bAudio,
    IMFTransform **ppEncoder
    )
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    CLSID *ppCLSIDs = NULL;

    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnum(
        bAudio ? MFT_CATEGORY_AUDIO_ENCODER : MFT_CATEGORY_VIDEO_ENCODER,
        0,          // Reserved
        NULL,       // Input type
        &amp;amp;amp;amp;amp;amp;info,      // Output type
        NULL,       // Reserved
        &amp;amp;amp;amp;amp;amp;ppCLSIDs,
        &amp;amp;amp;amp;amp;amp;count
        );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first encoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = CoCreateInstance(ppCLSIDs[0], NULL,
            CLSCTX_INPROC_SERVER, IID_PPV_ARGS(ppEncoder));
    }

    CoTaskMemFree(ppCLSIDs);
    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/adding-a-decoder-to-a-topology">Adding a Decoder to a Topology</seealso>
    <seealso cref="MFTEnumEx" />
    <seealso cref="MFTRegister" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-transforms">Media Foundation Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/registering-and-enumerating-mfts">Registering and Enumerating MFTs</seealso>
  </member>
  <member name="Windows.MFTEnum2">
    <summary>
      <para>Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the <see cref="MFTEnumEx" /> function to allow external applications and internal components to discover the hardware MFTs that correspond to a specific video adapter.</para>
    </summary>
    <param name="guidCategory">
      <para>A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="Flags">
      <para>The bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</para>
    </param>
    <param name="pInputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pAttributes">
      <para>A pointer to an <see cref="IMFAttributes" /> interface that enables access to the standard attribute store. To specify a specific hardware adapter for which MFTs are queried, set the  <a href="https://docs.microsoft.com//windows/win32/medfound/mft-enum-adapter-luid">MFT_ENUM_ADAPTER_LUID</a> attribute to the LUID of the adapter. If you do this, you must also specify the MFT_ENUM_FLAG_HARDWARE flag or E_INVALIDARG is returned.</para>
    </param>
    <param name="pppMFTActivate">
      <para>Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the <see cref="CoTaskMemFree" /> function to free the memory for the array.</para>
    </param>
    <param name="pnumMFTActivate">
      <para>Receives the number of elements in the <i>pppMFTActivate</i> array. If no MFTs match the search criteria, this parameter receives the value zero.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An <see cref="IMFAttributes" /> containing the MFT_ENUM_ADAPTER_LUID attribute was provided in the <i>pAttributes</i> parameter and the MFT_ENUM_FLAG_HARDWARE flag was not specified.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <i>Flags</i> parameter controls which MFTs are enumerated, and the order in which they are returned. The flags for this parameter fall into several groups.</para>
      <para>The first set of flags specifies how an MFT processes data.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>MFT_ENUM_FLAG_SYNCMFT
</description>
          <description>
            <para>The MFT performs synchronous data processing in software. This is the original MFT processing model, and is  compatible with Windows Vista.</para>
          </description>
        </item>
        <item>
          <description>MFT_ENUM_FLAG_ASYNCMFT
</description>
          <description>
            <para>The MFT performs asynchronous data processing in software. This processing model requires Windows 7. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-mfts">Asynchronous MFTs</a>.</para>
          </description>
        </item>
        <item>
          <description>MFT_ENUM_FLAG_HARDWARE
</description>
          <description>
            <para>The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. MFTs in this category always process data asynchronously. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/hardware-mfts">Hardware MFTs</a>.</para>
            <para>
              <b>Note</b>  If an <see cref="IMFAttributes" /> containing the MFT_ENUM_ADAPTER_LUID attribute is provided in the <i>pAttributes</i> parameter, the MFT_ENUM_FLAG_HARDWARE flag must be set or E_INVALIDARG will be returned.</para>
          </description>
        </item>
      </list>
      <para>Every MFT falls into exactly one of these categories.  To enumerate a category, set the corresponding flag in the <i>Flags</i> parameter. You can combine these flags to enumerate more than one category. If none of these flags is specified, the default category is synchronous MFTs (<b>MFT_ENUM_FLAG_SYNCMFT</b>).</para>
      <para>Next, the following flags include MFTs that are otherwise  excluded from the results. By default, flags that match these criteria are excluded from the results. Use any these flags to include them.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_FIELDOFUSE</b>
          </description>
          <description>
            <para>Include MFTs that must be unlocked by the application.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_LOCALMFT</b>
          </description>
          <description>
            <para>Include MFTs that are registered in the caller's process through either the <see cref="MFTRegisterLocal" /> or <see cref="MFTRegisterLocalByCLSID" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_TRANSCODE_ONLY</b>
          </description>
          <description>
            <para>Include MFTs that are optimized for transcoding rather than playback.</para>
          </description>
        </item>
      </list>
      <para>The last flag is used to sort and filter the results:</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_SORTANDFILTER</b>
          </description>
          <description>
            <para>Sort and filter the results.</para>
          </description>
        </item>
      </list>
      <para>If the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag is set, the <b>MFTEnum2</b> function sorts the results as follows:</para>
      <list type="bullet">
        <item>
          <description>Local: If the <b>MFT_ENUM_FLAG_LOCALMFT</b> flag is set, local MFTs appear first in the list. To register a local MFT, call the <see cref="MFTRegisterLocal" /> or <see cref="MFTRegisterLocalByCLSID" /> function.</description>
        </item>
        <item>
          <description>Merit: MFTs with a merit value appear next on the list, in order of merit value (highest to lowest). For more information about merit, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-codec-merit-attribute">MFT_CODEC_MERIT_Attribute</a>. </description>
        </item>
        <item>
          <description>Preferred: If an MFT is listed in the plug-in control's preferred list, it appears next in the list. For more information about the plug-in control, see <see cref="IMFPluginControl" />.</description>
        </item>
        <item>
          <description>If an MFT appears on the blocked list, it is excluded from the results. For more information about the blocked list, see <see cref="IMFPluginControl.IsDisabled" />.</description>
        </item>
        <item>
          <description>Any other MFTs that match the search criteria appear at the end of the list, unsorted.</description>
        </item>
      </list>
      <para>If you do not set the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag, the <b>MFTEnum2</b> function returns an unsorted list.</para>
      <para>Setting the <i>Flags</i> parameter to zero is equivalent to using the value <b>MFT_ENUM_FLAG_SYNCMFT</b> | <b>MFT_ENUM_FLAG_LOCALMFT</b> | <b>MFT_ENUM_FLAG_SORTANDFILTER</b>.</para>
      <para>Setting <i>Flags</i> to <b>MFT_ENUM_FLAG_SYNCMFT</b> is equivalent to calling the <see cref="MFTEnum" /> function.</para>
      <para>If no MFTs match the search criteria, the function returns <b>S_OK</b>, unless some other error occurs. Therefore, always check the count received in the <i>pcMFTActivate</i> parameter before you dereference the <i>pppMFTActivate</i> pointer.</para>
      <para>
        <b>Note</b>  There is no way to enumerate just local MFTs and nothing else. Setting <i>Flags</i> equal to <b>MFT_ENUM_FLAG_LOCALMFT</b> is equivalent to  including the <b>MFT_ENUM_FLAG_SYNCMFT</b> flag. However, if you also sort the results by specifying the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag, local MFTs appear first in the list.</para>
      <h3>Creating the MFT</h3>
      <para>If at least one MFT matches the search criteria, the <i>pppMFTActivate</i> parameter receives an array of <see cref="IMFActivate" /> pointers. One pointer is returned for each matching MFT. Each pointer represents an <i>activation object</i> for the MFT. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/activation-objects">Activation Objects</a>.</para>
      <para>Additional information about each MFT is stored as attributes on the activation objects. For a list of the possible attributes, see <a href="https://docs.microsoft.com//windows/desktop/medfound/transform-attributes">Transform Attributes</a>.</para>
      <para>To create an instance of the MFT, call <see cref="IMFActivate.ActivateObject" />.</para>
      <h3>Hardware Codecs</h3>
      <para>Hardware codecs are excluded from the enumeration results if the following registry keys are set to zero:</para>
      <para>Decoders: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableDecoders</b></para>
      <para>Encoders: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableEncoders</b></para>
      <para>Video processors: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableVideoProcessors</b></para>
      <para>These keys are intended for OEMs, and should not be used by applications.</para>
      <para>For hardware codecs, the <i>guidCategory</i> parameter of <b>MFTEnum2</b> can also specify one of the following kernel streaming (KS) device categories:</para>
      <list type="bullet">
        <item>
          <description>
            <b>KSCATEGORY_DATACOMPRESSOR</b>
          </description>
        </item>
        <item>
          <description>
            <b>KSCATEGORY_DATADECOMPRESSOR</b>
          </description>
        </item>
      </list>
      <para>Hardware codecs should also be registered under an <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a> GUID, so applications should generally use those categories instead of the KS device categories.</para>
      <h4>Examples</h4>
      <para>The following example retrieves the first available <see cref="IDXGIAdapter1" /> and gets the adapters <see cref="LUID" />, which is needed to identify the adapter for the subsequent examples.</para>
      <code>HRESULT hr = S_OK;
IDXGIFactory1 *pDxgiFactory = NULL;
IDXGIAdapter1 *pDxgiAdapter = NULL;
LUID adapterLuid;

if (FAILED(hr = CreateDXGIFactory1(__uuidof(IDXGIFactory1), (void **)&amp;amp;amp;amp;amp;amp;pDxgiFactory)))
{
    return hr;
}

if (FAILED(hr = pDxgiFactory-&gt;EnumAdapters1(0, &amp;amp;amp;amp;amp;amp;pDxgiAdapter)))
{
    return hr;
}

DXGI_ADAPTER_DESC1 AdapterDescr;
if (FAILED(hr = pDxgiAdapter-&gt;GetDesc1(&amp;amp;amp;amp;amp;amp;AdapterDescr)))
{
    if (pDxgiAdapter)
    {
        pDxgiAdapter-&gt;Release();
        pDxgiAdapter = NULL;
    }
    return hr;
}

adapterLuid = AdapterDescr.AdapterLuid;

</code>
      <para>The following example searches for a hardware video or audio decoder. Asynchronous, hardware, transcode, and field-of-use decoders are excluded. If a match is found, the code creates the first MFT in the list. Unlike the parallel example in the <see cref="MFTEnumEx" /> article,  this example creates an instance of <see cref="IMFAttributes" /> and sets the <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-enum-adapter-luid">MFT_ENUM_ADAPTER_LUID</a> attribute to the LUID of the interface from which the decoder is requested. In the call to <b>MFTEnum2</b>, the required MFT_ENUM_FLAG_HARDWARE flag is set and the <b>IMFAttributes</b> argument is provided.</para>
      <code>HRESULT FindHWDecoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,        // Subtype
    BOOL bAudio,                // TRUE for audio, FALSE for video
    LUID&amp;amp;amp;amp;amp;amp; adapterLuid,          // LUID of the graphics adapter for which to find the decoder
    IMFTransform **ppDecoder    // Receives a pointer to the decoder.
)
{
    HRESULT hr = S_OK;


    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    CComPtr&lt;IMFAttributes&gt; spAttributes;
    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;spAttributes, 1);
    if (FAILED(hr = spAttributes-&gt;SetBlob(MFT_ENUM_ADAPTER_LUID, (BYTE*)&amp;amp;amp;amp;amp;amp;adapterLuid, sizeof(LUID))))
    {
        return hr;
    }


    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnum2(
        bAudio ? MFT_CATEGORY_AUDIO_DECODER : MFT_CATEGORY_VIDEO_DECODER,
        MFT_ENUM_FLAG_HARDWARE | MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER,
        &amp;amp;amp;amp;amp;amp;info,      // Input type
        NULL,       // Output type
        spAttributes,
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count
    );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first decoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppDecoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
      <para>The next example searches for a hardware video or audio encoder. Asynchronous, hardware, transcode, and field-of-use encoders are excluded. Unlike the parallel example in the <see cref="MFTEnumEx" /> article,  this example creates an instance of <see cref="IMFAttributes" /> and sets the <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-enum-adapter-luid">MFT_ENUM_ADAPTER_LUID</a> attribute to the LUID of the interface from which the encoder is requested. In the call to <b>MFTEnum2</b>, the required MFT_ENUM_FLAG_HARDWARE flag is set and the <b>IMFAttributes</b> argument is provided.</para>
      <code>HRESULT FindHWEncoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,        // Subtype
    BOOL bAudio,                // TRUE for audio, FALSE for video
    LUID&amp;amp;amp;amp;amp;amp; adapterLuid,          // LUID of the graphics adapter for which to find the encoder
    IMFTransform **ppEncoder    // Receives a pointer to the decoder.
)
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    CComPtr&lt;IMFAttributes&gt; spAttributes;
    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;spAttributes, 1);
    if (FAILED(hr = spAttributes-&gt;SetBlob(MFT_ENUM_ADAPTER_LUID, (BYTE*)&amp;amp;amp;amp;amp;amp;adapterLuid, sizeof(LUID))))
    {
        return hr;
    }

    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnum2(
        bAudio ? MFT_CATEGORY_AUDIO_ENCODER : MFT_CATEGORY_VIDEO_ENCODER,
        MFT_ENUM_FLAG_HARDWARE | MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER,
        NULL,       // Input type
        &amp;amp;amp;amp;amp;amp;info,      // Output type
        spAttributes,
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count
    );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first encoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppEncoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
      <para>The next example searches for a hardware video decoder, with options to include asynchronous, hardware, or transcode decoders. Unlike the parallel example in the <see cref="MFTEnumEx" /> article,  this example creates an instance of <see cref="IMFAttributes" /> and sets the <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-enum-adapter-luid">MFT_ENUM_ADAPTER_LUID</a> attribute to the LUID of the interface from which the video decoder is requested. In the call to <b>MFTEnum2</b>, the required MFT_ENUM_FLAG_HARDWARE flag is set and the <b>IMFAttributes</b> argument is provided.</para>
      <code>HRESULT FindHWVideoDecoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,
    BOOL bAllowAsync,
    BOOL bAllowHardware,
    BOOL bAllowTranscode,
    LUID&amp;amp;amp;amp;amp;amp; adapterLuid,          // LUID of the graphics adapter for which to find the encoder
    IMFTransform **ppDecoder
)
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    MFT_REGISTER_TYPE_INFO info = { MFMediaType_Video, subtype };

    UINT32 unFlags = MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT |
        MFT_ENUM_FLAG_SORTANDFILTER;

    if (bAllowAsync)
    {
        unFlags |= MFT_ENUM_FLAG_ASYNCMFT;
    }
    if (bAllowHardware)
    {
        unFlags |= MFT_ENUM_FLAG_HARDWARE;
    }
    if (bAllowTranscode)
    {
        unFlags |= MFT_ENUM_FLAG_TRANSCODE_ONLY;
    }

    unFlags |= MFT_ENUM_FLAG_HARDWARE;

    CComPtr&lt;IMFAttributes&gt; spAttributes;
    hr = MFCreateAttributes(&amp;amp;amp;amp;amp;amp;spAttributes, 1);
    if (FAILED(hr = spAttributes-&gt;SetBlob(MFT_ENUM_ADAPTER_LUID, (BYTE*)&amp;amp;amp;amp;amp;amp;adapterLuid, sizeof(LUID))))
    {
        return hr;
    }

    hr = MFTEnumEx(MFT_CATEGORY_VIDEO_DECODER,
        unFlags,
        &amp;amp;amp;amp;amp;amp;info,      // Input type
        NULL,       // Output type
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count);

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first decoder in the list.
    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppDecoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/field-of-use-restrictions">Field of Use Restrictions</seealso>
    <seealso cref="MFTRegister" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/registering-and-enumerating-mfts">Registering and Enumerating MFTs</seealso>
  </member>
  <member name="Windows.MFTEnumEx">
    <summary>
      <para>Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the <see cref="MFTEnum" /> function.</para>
    </summary>
    <param name="guidCategory">
      <para>A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="Flags">
      <para>The bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</para>
    </param>
    <param name="pInputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an input media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all input types are matched.</para>
    </param>
    <param name="pOutputType">
      <para>A pointer to an <see cref="MFT_REGISTER_TYPE_INFO" /> structure that specifies an output media type to match.</para>
      <para>This parameter can be <b>NULL</b>. If <b>NULL</b>, all output types are matched.</para>
    </param>
    <param name="pppMFTActivate">
      <para>Receives an array of <see cref="IMFActivate" /> interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the <see cref="CoTaskMemFree" /> function to free the memory for the array.</para>
    </param>
    <param name="pnumMFTActivate">
      <para>Receives the number of elements in the <i>pppMFTActivate</i> array. If no MFTs match the search criteria, this parameter receives the value zero.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The <i>Flags</i> parameter controls which MFTs are enumerated, and the order in which they are returned. The flags for this parameter fall into several groups.</para>
      <para>The first set of flags specifies how an MFT processes data.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>MFT_ENUM_FLAG_SYNCMFT
</description>
          <description>
            <para>The MFT performs synchronous data processing in software. This is the original MFT processing model, and is  compatible with Windows Vista.</para>
          </description>
        </item>
        <item>
          <description>MFT_ENUM_FLAG_ASYNCMFT
</description>
          <description>
            <para>The MFT performs asynchronous data processing in software. This processing model requires Windows 7. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-mfts">Asynchronous MFTs</a>.</para>
          </description>
        </item>
        <item>
          <description>MFT_ENUM_FLAG_HARDWARE
</description>
          <description>
            <para>The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. MFTs in this category always process data asynchronously. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/hardware-mfts">Hardware MFTs</a>.</para>
          </description>
        </item>
      </list>
      <para>Every MFT falls into exactly one of these categories.  To enumerate a category, set the corresponding flag in the <i>Flags</i> parameter. You can combine these flags to enumerate more than one category. If none of these flags is specified, the default category is synchronous MFTs (<b>MFT_ENUM_FLAG_SYNCMFT</b>).</para>
      <para>Next, the following flags include MFTs that are otherwise  excluded from the results. By default, flags that match these criteria are excluded from the results. Use any these flags to include them.</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_FIELDOFUSE</b>
          </description>
          <description>
            <para>Include MFTs that must be unlocked by the application.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_LOCALMFT</b>
          </description>
          <description>
            <para>Include MFTs that are registered in the caller's process through either the <see cref="MFTRegisterLocal" /> or <see cref="MFTRegisterLocalByCLSID" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_TRANSCODE_ONLY</b>
          </description>
          <description>
            <para>Include MFTs that are optimized for transcoding rather than playback.</para>
          </description>
        </item>
      </list>
      <para>The last flag is used to sort and filter the results:</para>
      <list type="table">
        <listheader>
          <description>Flag</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_SORTANDFILTER</b>
          </description>
          <description>
            <para>Sort and filter the results.</para>
          </description>
        </item>
      </list>
      <para>If the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag is set, the <b>MFTEnumEx</b> function sorts the results as follows:</para>
      <list type="bullet">
        <item>
          <description>Local: If the <b>MFT_ENUM_FLAG_LOCALMFT</b> flag is set, local MFTs appear first in the list. To register a local MFT, call the <see cref="MFTRegisterLocal" /> or <see cref="MFTRegisterLocalByCLSID" /> function.</description>
        </item>
        <item>
          <description>Merit: MFTs with a merit value appear next on the list, in order of merit value (highest to lowest). For more information about merit, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-codec-merit-attribute">MFT_CODEC_MERIT_Attribute</a>. </description>
        </item>
        <item>
          <description>Preferred: If an MFT is listed in the plug-in control's preferred list, it appears next in the list. For more information about the plug-in control, see <see cref="IMFPluginControl" />.</description>
        </item>
        <item>
          <description>If an MFT appears on the blocked list, it is excluded from the results. For more information about the blocked list, see <see cref="IMFPluginControl.IsDisabled" />.</description>
        </item>
        <item>
          <description>Any other MFTs that match the search criteria appear at the end of the list, unsorted.</description>
        </item>
      </list>
      <para>If you do not set the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag, the <b>MFTEnumEx</b> function returns an unsorted list.</para>
      <para>Setting the <i>Flags</i> parameter to zero is equivalent to using the value <b>MFT_ENUM_FLAG_SYNCMFT</b> | <b>MFT_ENUM_FLAG_LOCALMFT</b> | <b>MFT_ENUM_FLAG_SORTANDFILTER</b>.</para>
      <para>Setting <i>Flags</i> to <b>MFT_ENUM_FLAG_SYNCMFT</b> is equivalent to calling the <see cref="MFTEnum" /> function.</para>
      <para>If no MFTs match the search criteria, the function returns <b>S_OK</b>, unless some other error occurs. Therefore, always check the count received in the <i>pcMFTActivate</i> parameter before you dereference the <i>pppMFTActivate</i> pointer.</para>
      <para>
        <b>Note</b>  There is no way to enumerate just local MFTs and nothing else. Setting <i>Flags</i> equal to <b>MFT_ENUM_FLAG_LOCALMFT</b> is equivalent to  including the <b>MFT_ENUM_FLAG_SYNCMFT</b> flag. However, if you also sort the results by specifying the <b>MFT_ENUM_FLAG_SORTANDFILTER</b> flag, local MFTs appear first in the list.</para>
      <h3>Creating the MFT</h3>
      <para>If at least one MFT matches the search criteria, the <i>pppMFTActivate</i> parameter receives an array of <see cref="IMFActivate" /> pointers. One pointer is returned for each matching MFT. Each pointer represents an <i>activation object</i> for the MFT. For more information, see <a href="https://docs.microsoft.com//windows/desktop/medfound/activation-objects">Activation Objects</a>.</para>
      <para>Additional information about each MFT is stored as attributes on the activation objects. For a list of the possible attributes, see <a href="https://docs.microsoft.com//windows/desktop/medfound/transform-attributes">Transform Attributes</a>.</para>
      <para>To create an instance of the MFT, call <see cref="IMFActivate.ActivateObject" />.</para>
      <h3>Hardware Codecs</h3>
      <para>Hardware codecs are excluded from the enumeration results if the following registry keys are set to zero:</para>
      <para>Decoders: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableDecoders</b></para>
      <para>Encoders: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableEncoders</b></para>
      <para>Video processors: <b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows Media Foundation</b>\<b>HardwareMFT</b>\<b>EnableVideoProcessors</b></para>
      <para>These keys are intended for OEMs, and should not be used by applications.</para>
      <para>For hardware codecs, the <i>guidCategory</i> parameter of <b>MFTEnumEx</b> can also specify one of the following kernel streaming (KS) device categories:</para>
      <list type="bullet">
        <item>
          <description>
            <b>KSCATEGORY_DATACOMPRESSOR</b>
          </description>
        </item>
        <item>
          <description>
            <b>KSCATEGORY_DATADECOMPRESSOR</b>
          </description>
        </item>
      </list>
      <para>Hardware codecs should also be registered under an <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a> GUID, so applications should generally use those categories instead of the KS device categories.</para>
      <h4>Examples</h4>
      <para>The following example searches for a video or audio decoder. Asynchronous, hardware, transcode, and field-of-use decoders are excluded. If a match is found, the code creates the first MFT in the list.</para>
      <code>HRESULT FindDecoderEx(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,        // Subtype
    BOOL bAudio,                // TRUE for audio, FALSE for video
    IMFTransform **ppDecoder    // Receives a pointer to the decoder.
    )
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnumEx(
        bAudio ? MFT_CATEGORY_AUDIO_DECODER : MFT_CATEGORY_VIDEO_DECODER,
        MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER,
        &amp;amp;amp;amp;amp;amp;info,      // Input type
        NULL,       // Output type
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count
        );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first decoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppDecoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
      <para>The next example searches for a video or audio encoder. Asynchronous, hardware, transcode, and field-of-use encoders are excluded.</para>
      <code>HRESULT FindEncoderEx(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,        // Subtype
    BOOL bAudio,                // TRUE for audio, FALSE for video
    IMFTransform **ppEncoder    // Receives a pointer to the decoder.
    )
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    MFT_REGISTER_TYPE_INFO info = { 0 };

    info.guidMajorType = bAudio ? MFMediaType_Audio : MFMediaType_Video;
    info.guidSubtype = subtype;

    hr = MFTEnumEx(
        bAudio ? MFT_CATEGORY_AUDIO_ENCODER : MFT_CATEGORY_VIDEO_ENCODER,
        MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER,
        NULL,       // Input type
        &amp;amp;amp;amp;amp;amp;info,      // Output type
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count
        );

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first encoder in the list.

    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppEncoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
      <para>The next example searches for a video decoder, with options to include asynchronous, hardware, or transcode decoders.</para>
      <code>HRESULT FindVideoDecoder(
    const GUID&amp;amp;amp;amp;amp;amp; subtype,
    BOOL bAllowAsync,
    BOOL bAllowHardware,
    BOOL bAllowTranscode,
    IMFTransform **ppDecoder
    )
{
    HRESULT hr = S_OK;
    UINT32 count = 0;

    IMFActivate **ppActivate = NULL;

    MFT_REGISTER_TYPE_INFO info = { MFMediaType_Video, subtype };

    UINT32 unFlags = MFT_ENUM_FLAG_SYNCMFT  | MFT_ENUM_FLAG_LOCALMFT |
                     MFT_ENUM_FLAG_SORTANDFILTER;

    if (bAllowAsync)
    {
        unFlags |= MFT_ENUM_FLAG_ASYNCMFT;
    }
    if (bAllowHardware)
    {
        unFlags |= MFT_ENUM_FLAG_HARDWARE;
    }
    if (bAllowTranscode)
    {
        unFlags |= MFT_ENUM_FLAG_TRANSCODE_ONLY;
    }

    hr = MFTEnumEx(MFT_CATEGORY_VIDEO_DECODER,
        unFlags,
        &amp;amp;amp;amp;amp;amp;info,      // Input type
        NULL,       // Output type
        &amp;amp;amp;amp;amp;amp;ppActivate,
        &amp;amp;amp;amp;amp;amp;count);

    if (SUCCEEDED(hr) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; count == 0)
    {
        hr = MF_E_TOPO_CODEC_NOT_FOUND;
    }

    // Create the first decoder in the list.
    if (SUCCEEDED(hr))
    {
        hr = ppActivate[0]-&gt;ActivateObject(IID_PPV_ARGS(ppDecoder));
    }

    for (UINT32 i = 0; i &lt; count; i++)
    {
        ppActivate[i]-&gt;Release();
    }
    CoTaskMemFree(ppActivate);

    return hr;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/field-of-use-restrictions">Field of Use Restrictions</seealso>
    <seealso cref="MFTRegister" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/registering-and-enumerating-mfts">Registering and Enumerating MFTs</seealso>
  </member>
  <member name="Windows.MFTGetInfo">
    <summary>
      <para>Gets information from the registry about a Media Foundation transform (MFT).</para>
    </summary>
    <param name="clsidMFT">
      <para>The CLSID of the MFT.</para>
    </param>
    <param name="pszName">
      <para>Receives a pointer to a wide-character string containing the friendly name of the MFT. The caller must free the string by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ppInputTypes">
      <para>Receives a pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array describes an input format that the MFT supports. The caller must free the array by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pcInputTypes">
      <para>Receives the number of elements in the <i>ppInputTypes</i> array. If <i>ppInputTypes</i> is <b>NULL</b>, this parameter is ignored and can be <b>NULL</b>.</para>
    </param>
    <param name="ppOutputTypes">
      <para>Receives a pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array describes an output format that the MFT supports. The caller must free the array by calling <see cref="CoTaskMemFree" />. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="pcOutputTypes">
      <para>Receives the number of elements in the <i>ppOutputType</i> array. If <i>ppOutputTypes</i> is <b>NULL</b>, this parameter is ignored and can be <b>NULL</b>.</para>
    </param>
    <param name="ppAttributes">
      <para>Receives a pointer to the <see cref="IMFAttributes" /> interface of an attribute store. The caller must release the interface. The attribute store might contain attributes that are stored in the registry for the specified MFT. (For more information, see <see cref="MFTRegister" />.)  If no attributes are stored in the registry for this MFT, the attribute store is empty.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="MFTEnum" />
    <seealso cref="MFTRegister" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-transforms">Media Foundation Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/registering-and-enumerating-mfts">Registering and Enumerating MFTs</seealso>
  </member>
  <member name="Windows.MFTRegister">
    <summary>
      <para>Adds information about a Media Foundation transform (MFT) to the registry.</para>
      <para>Applications can enumerate the MFT by calling the <see cref="MFTEnum" /> or <see cref="MFTEnumEx" /> function.</para>
    </summary>
    <param name="clsidMFT">
      <para>The CLSID of the MFT.
The MFT must also be registered as a COM object using the same CLSID.</para>
    </param>
    <param name="guidCategory">
      <para>GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="pszName">
      <para>Wide-character string that contains the friendly name of the MFT.</para>
    </param>
    <param name="Flags">
      <para>Bitwise <b>OR</b> of zero or more of the following flags from the <see cref="_MFT_ENUM_FLAG" />  enumeration:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_ASYNCMFT</b>
          </description>
          <description>
            <para>The MFT performs asynchronous processing in software. See <a href="https://docs.microsoft.com//windows/desktop/medfound/asynchronous-mfts">Asynchronous MFTs</a>. This flag does not apply to hardware transforms.</para>
            <para>Requires Windows 7.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_FIELDOFUSE</b>
          </description>
          <description>
            <para>The application must unlock the MFT in order to use it. See <see cref="IMFFieldOfUseMFTUnlock" />.</para>
            <para>Requires Windows 7.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_HARDWARE</b>
          </description>
          <description>
            <para>The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. MFTs in this category always process data asynchronously. See <a href="https://docs.microsoft.com//windows/desktop/medfound/hardware-mfts">Hardware MFTs</a>.</para>
            <para>
              <b>Note</b>  This flag applies to video codecs and video processors that perform their work entirely in hardware. It does not apply to software decoders that use DirectX Video Acceleration to assist decoding.</para>
            <para>Requires Windows 7.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_SYNCMFT</b>
          </description>
          <description>
            <para>The MFT performs synchronous processing in software. This flag does not apply to hardware transforms.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MFT_ENUM_FLAG_TRANSCODE_ONLY</b>
          </description>
          <description>
            <para>The MFT is optimized for transcoding and should not be used for playback.</para>
            <para>Requires Windows 7.</para>
          </description>
        </item>
      </list>
      <para>Setting <i>Flags</i> to zero is  equivalent to setting the <b>MFT_ENUM_FLAG_SYNCMFT</b> flag. The default processing model for MFTs is synchronous processing.</para>
      <para>Prior to Windows 7, the <i>Flags</i> parameter was reserved.</para>
    </param>
    <param name="cInputTypes">
      <para>Number of elements in the <i>pInputTypes</i> array.</para>
    </param>
    <param name="pInputTypes">
      <para>Pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports.  This parameter can be <b>NULL</b>.</para>
      <para>This parameter can be <b>NULL</b>. However, if the parameter is <b>NULL</b>, the MFT will be enumerated only when an application specifies <b>NULL</b> for the desired input type.</para>
    </param>
    <param name="cOutputTypes">
      <para>Number of elements in the <i>pOutputTypes</i> array.</para>
    </param>
    <param name="pOutputTypes">
      <para>Pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports.</para>
      <para>This parameter can be <b>NULL</b>. However, if the parameter is <b>NULL</b>, the MFT will be enumerated only when an application specifies <b>NULL</b> for the desired output type.</para>
    </param>
    <param name="pAttributes">
      <para>Pointer to the <see cref="IMFAttributes" /> interface of an attribute store that contains additional registry information. This parameter can be <b>NULL</b>. If the parameter is non-<b>NULL</b>, the attributes are written to the registry as a byte array.
You can use the <see cref="MFTGetInfo" /> function to retrieve the attributes.</para>
      <para>The following attribute is defined for this parameter:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-codec-merit-attribute">MFT_CODEC_MERIT_Attribute</a>
            </b>
          </description>
          <description>
            <para>Contains the merit value of a hardware codec. See <a href="https://docs.microsoft.com//windows/desktop/medfound/codec-merit">Codec Merit</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The registry entries created by this function are read by the following functions:</para>
      <list type="table">
        <listheader>
          <description>Function</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <see cref="MFTEnum" />
          </description>
          <description>Enumerates MFTs by media type and category.</description>
        </item>
        <item>
          <description>
            <see cref="MFTEnumEx" />
          </description>
          <description>Extended version of <see cref="MFTEnum" />.</description>
        </item>
        <item>
          <description>
            <see cref="MFTGetInfo" />
          </description>
          <description>Looks up an MFT by CLSID and retrieves the registry information.</description>
        </item>
      </list>
      <para>This function does not register the CLSID of the MFT for the <b>CoCreateInstance</b> or <b>CoGetClassObject</b> functions.</para>
      <para>To remove the entries from the registry, call <see cref="MFTUnregister" />.
If you remove an MFT from the system, you should always call <b>MFTUnregister</b>.</para>
      <para>The formats given in the <i>pInputTypes</i> and <i>pOutputTypes</i> parameters are intended to help applications search for MFTs by format. Applications can use the <see cref="MFTEnum" /> or <see cref="MFTEnumEx" /> functions to enumerate MFTs that match a particular set of formats.</para>
      <para>It is recommended
to specify at least one input type in <i>pInputTypes</i> and one output type in the <i>pOutputTypes</i> parameter. Otherwise, the MFT might be skipped in the enumeration.</para>
      <para>On 64-bit Windows, the 32-bit version of this function registers the MFT in the 32-bit node of the registry. For more information, see <a href="https://docs.microsoft.com//windows/desktop/SysInfo/32-bit-and-64-bit-application-data-in-the-registry">32-bit and 64-bit Application Data in the Registry</a>.</para>
    </remarks>
    <seealso cref="MFTEnumEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-transforms">Media Foundation Transforms</seealso>
    <seealso cref="_MFT_ENUM_FLAG" />
  </member>
  <member name="Windows.MFTRegisterLocal">
    <summary>
      <para>Registers a Media Foundation transform (MFT) in the caller's process.</para>
    </summary>
    <param name="pClassFactory">
      <para>A pointer to the <b>IClassFactory</b> interface of a class factory object. The class factory creates the MFT.</para>
    </param>
    <param name="guidCategory">
      <para>A GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="pszName">
      <para>A wide-character null-terminated string that contains the friendly name of the MFT.</para>
    </param>
    <param name="Flags">
      <para>A bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</para>
    </param>
    <param name="cInputTypes">
      <para>The number of elements in the <i>pInputTypes</i> array.</para>
    </param>
    <param name="pInputTypes">
      <para>A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports. This parameter can be <b>NULL</b> if <i>cInputTypes</i> is zero.</para>
    </param>
    <param name="cOutputTypes">
      <para>The number of elements in the <i>pOutputTypes</i> array.</para>
    </param>
    <param name="pOutputTypes">
      <para>A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports. This parameter can be <b>NULL</b> if <i>cOutputTypes</i> is zero.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The primary purpose of this function is to make an MFT available for automatic topology resolution without making the MFT available to other processes or applications.</para>
      <para>After you call this function, the MFT can be enumerated by calling the <see cref="MFTEnumEx" /> function with the <b>MFT_ENUM_FLAG_LOCALMFT</b> flag. The MFT can be enumerated from within the same process, but is not visible to other processes.</para>
      <para>The <i>pClassFactory</i> parameter specifies a class factory object that creates the MFT. The class factory's <b>IClassFactory.CreateInstance</b> method must return an object that supports the <see cref="IMFTransform" /> interface.</para>
      <para>
        <b>Note</b>  The <see cref="MFTEnumEx" /> function retrieves a list of <see cref="IMFActivate" /> pointers. However, the class factory does not need to support the <b>IMFActivate</b> interface. Instead, the <b>MFTEnumEx</b> function provides an implementation of <b>IMFActivate</b> that wraps the class factory.</para>
      <para>To unregister the MFT from the current process, call <see cref="MFTUnregisterLocal" />.</para>
      <para>If you need to register an MFT in the Protected Media Path (PMP) process, use the <see cref="IMFLocalMFTRegistration" /> interface.</para>
    </remarks>
    <seealso cref="MFTRegisterLocalByCLSID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFTRegisterLocalByCLSID">
    <summary>
      <para>Registers a Media Foundation transform (MFT) in the caller's process.</para>
    </summary>
    <param name="clisdMFT">
      <para>The class identifier (CLSID) of the MFT.</para>
    </param>
    <param name="guidCategory">
      <para>A GUID that specifies the category of the MFT. For a list of MFT categories, see <a href="https://docs.microsoft.com//windows/desktop/medfound/mft-category">MFT_CATEGORY</a>.</para>
    </param>
    <param name="pszName">
      <para>A wide-character null-terminated string that contains the friendly name of the MFT.</para>
    </param>
    <param name="Flags">
      <para>A bitwise <b>OR</b> of zero or more flags from the <see cref="_MFT_ENUM_FLAG" /> enumeration.</para>
    </param>
    <param name="cInputTypes">
      <para>The number of elements in the <i>pInputTypes</i> array.</para>
    </param>
    <param name="pInputTypes">
      <para>A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array specifies an input format that the MFT supports. This parameter can be <b>NULL</b> if <i>cInputTypes</i> is zero.</para>
    </param>
    <param name="cOutputTypes">
      <para>The number of elements in the <i>pOutputTypes</i> array.</para>
    </param>
    <param name="pOutputTypes">
      <para>A pointer to an array of <see cref="MFT_REGISTER_TYPE_INFO" /> structures. Each member of the array defines an output format that the MFT supports. This parameter can be <b>NULL</b> if <i>cOutputTypes</i> is zero.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The primary purpose of this function is to make an MFT available for automatic topology resolution without making the MFT available to other processes or applications.</para>
      <para>After you call this function, the MFT can be enumerated by calling the <see cref="MFTEnumEx" /> function with the <b>MFT_ENUM_FLAG_LOCALMFT</b> flag. The MFT can be enumerated from within the same process, but is not visible to other processes.</para>
      <para>To unregister the MFT from the current process, call <see cref="MFTUnregisterLocalByCLSID" />.</para>
      <para>If you need to register an MFT in the Protected Media Path (PMP) process, use the <see cref="IMFLocalMFTRegistration" /> interface.</para>
    </remarks>
    <seealso cref="MFTRegisterLocal" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFTUnregister">
    <summary>
      <para>Unregisters a Media Foundation transform (MFT).</para>
    </summary>
    <param name="clsidMFT">
      <para>The CLSID of the MFT.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function removes the registry entries created by the <see cref="MFTRegister" /> function.</para>
      <para>It is safe to call <b>MFTUnregister</b> twice with the same CLSID. If the CLSID is not found in the registry, the function succeeds and does nothing.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-transforms">Media Foundation Transforms</seealso>
  </member>
  <member name="Windows.MFTUnregisterLocal">
    <summary>
      <para>Unregisters one or more Media Foundation transforms (MFTs) from the caller's process.</para>
    </summary>
    <param name="pClassFactory">
      <para>A pointer to the <b>IClassFactory</b> interface of a class factory object. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>HRESULT_FROM_WIN32(<b>ERROR_NOT_FOUND</b>)</b>
            </para>
          </description>
          <description>
            <para>The MFT specified by the <i>pClassFactory</i> parameter was not registered in this process.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this function to unregister a local MFT that was previously registered through the <see cref="MFTRegisterLocal" /> function.</para>
      <para>If the <i>pClassFactory</i> parameter is <b>NULL</b>, all local MFTs in the process are unregistered. Otherwise, the function unregisters the MFT associated with the class factory specified by the <i>pClassFactory</i> parameter. In that case, the <i>pClassFactory</i> parameter should equal a pointer value that was previously passed to  the <see cref="MFTRegisterLocal" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFTUnregisterLocalByCLSID">
    <summary>
      <para>Unregisters a Media Foundation transform (MFT) from the caller's process.</para>
    </summary>
    <param name="clsidMFT">
      <para>The class identifier (CLSID) of the MFT.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>
                <b>S_OK</b>
              </b>
            </para>
          </description>
          <description>
            <para>The method succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>HRESULT_FROM_WIN32(<b>ERROR_NOT_FOUND</b>)</b>
            </para>
          </description>
          <description>
            <para>The MFT specified by the <i>clsidMFT</i> parameter was not registered in this process.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Use this function to unregister a local MFT that was previously registered through the <see cref="MFTRegisterLocalByCLSID" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFUnlockDXGIDeviceManager">
    <summary>
      <para>Unlocks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.</para>
    </summary>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>Call this function after a successful call to the <see cref="MFLockDXGIDeviceManager" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFUnlockPlatform">
    <summary>
      <para>Unlocks the Media Foundation platform after it was locked by a call to the <see cref="MFLockPlatform" /> function.</para>
    </summary>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The application must call <b>MFUnlockPlatform</b> once for every call to <see cref="MFLockPlatform" />.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-platform-apis">Media Foundation Platform APIs</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFUnlockWorkQueue">
    <summary>
      <para>Unlocks a work queue.</para>
    </summary>
    <param name="dwWorkQueue">
      <para>Identifier for the work queue to be unlocked. The identifier is returned by the <see cref="MFAllocateWorkQueue" /> function.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The application must call <b>MFUnlockWorkQueue</b> once for every call to <see cref="MFAllocateWorkQueue" /> and then once for every call to <see cref="MFLockWorkQueue" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/work-queues">Work Queues</seealso>
  </member>
  <member name="Windows.MFUnregisterPlatformFromMMCSS">
    <summary>
      <para>Unregisters the Microsoft Media Foundation platform work queues from a Multimedia Class Scheduler Service (MMCSS) task.</para>
    </summary>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <seealso cref="MFRegisterPlatformWithMMCSS" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-work-queue-and-threading-improvements">Work Queue and Threading Improvements</seealso>
  </member>
  <member name="Windows.MFUnwrapMediaType">
    <summary>
      <para>Retrieves a media type that was wrapped in another media type by the <see cref="MFWrapMediaType" /> function.</para>
    </summary>
    <param name="pWrap">
      <para>Pointer to the <see cref="IMFMediaType" /> interface of the media type that was retrieved by <see cref="MFWrapMediaType" />.</para>
    </param>
    <param name="ppOrig">
      <para>Receives a pointer to the <see cref="IMFMediaType" /> interface of the original media type. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFValidateMediaTypeSize">
    <summary>
      <para>Validates the size of a buffer for a video format block.</para>
    </summary>
    <param name="FormatType">
      <para>GUID that specifies the type of format block. It must be one of the following values:</para>
      <para></para>
      <h4>FORMAT_DvInfo</h4>
      <para></para>
      <h4>FORMAT_MFVideoFormat</h4>
      <para></para>
      <h4>FORMAT_MPEG2Video</h4>
      <para></para>
      <h4>FORMAT_MPEGStreams</h4>
      <para></para>
      <h4>FORMAT_MPEGVideo</h4>
      <para></para>
      <h4>FORMAT_VideoInfo</h4>
      <para></para>
      <h4>FORMAT_VideoInfo2</h4>
      <para></para>
      <h4>FORMAT_WaveFormatEx</h4>
    </param>
    <param name="pBlock">
      <para>Pointer to a buffer that contains the format block.</para>
    </param>
    <param name="cbSize">
      <para>Size of the <i>pBlock</i> buffer, in bytes.</para>
    </param>
    <returns>
      <para>The function returns an <b>HRESULT</b>. Possible values include, but are not limited to, those in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The buffer that contains the format block is large enough.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_INVALIDMEDIATYPE</b>
            </para>
          </description>
          <description>
            <para>The buffer that contains the format block is too small, or the format block is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MF_E_UNSUPPORTED_FORMAT</b>
            </para>
          </description>
          <description>
            <para>This function does not support the specified format type.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.MFWrapMediaType">
    <summary>
      <para>Creates a media type that wraps another media type.</para>
    </summary>
    <param name="pOrig">
      <para>A pointer to the <see cref="IMFMediaType" /> interface of the media type to wrap in a new media type.</para>
    </param>
    <param name="MajorType">
      <para>A
GUID that specifies the major type for the new media type. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/medfound/media-type-guids">Major Media Types</a>.</para>
    </param>
    <param name="SubType">
      <para>A
GUID that specifies the subtype for the new media type. For possible values, see:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/DirectShow/audio-subtypes">Audio Subtypes</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/DirectShow/video-subtypes">Video Subtypes</a>
          </description>
        </item>
      </list>
      <para>Applications can define custom subtype GUIDs.</para>
    </param>
    <param name="ppWrap">
      <para>Receives a pointer to the <see cref="IMFMediaType" /> interface of the new media type that wraps the original media type. The caller must release the interface.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</para>
    </returns>
    <remarks>
      <para>The original media type (<i>pOrig</i>) is stored in the new media type under the <a href="https://docs.microsoft.com//windows/desktop/medfound/mf-mt-wrapped-type-attribute">MF_MT_WRAPPED_TYPE</a> attribute. To extract the original media type, call <see cref="MFUnwrapMediaType" />.</para>
      <para>This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed:</para>
      <list type="bullet">
        <item>
          <description>Windows XP with Service Pack 2 (SP2) and later.</description>
        </item>
        <item>
          <description>Windows XP Media Center Edition 2005 with KB900325 (Windows XP Media Center Edition 2005) and KB925766 (October 2006 Update Rollup for Windows XP Media Center Edition) installed.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.Pack2UINT32AsUINT64">
    <summary>
      <para>Packs two <b>UINT32</b> values into a <b>UINT64</b> value.</para>
    </summary>
    <param name="unHigh">
      <para>Value to store in the high-order 32 bits of the <b>UINT64</b> value.</para>
    </param>
    <param name="unLow">
      <para>Value to store in the low-order 32 bits of the <b>UINT64</b> value.</para>
    </param>
    <returns>
      <para>Returns the packed <b>UINT64</b> value.</para>
    </returns>
    <remarks>
      <para>This function stores two 32-bit values in a 64-bit value that is suitable for the <see cref="IMFAttributes.SetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFSetAttributeRatio" />
    <seealso cref="MFSetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.PackRatio">
    <summary>
      <para>Packs two UINT32 values, which represent a ratio, into a UINT64 value.</para>
    </summary>
    <param name="nNumerator">
      <para>Value to store the <b>UINT32</b> numerator value.</para>
    </param>
    <param name="unDenominator">
      <para>Value to store the <b>UINT32</b> denominator value.</para>
    </param>
    <returns>
      <para>Returns the packed <b>UINT64</b> value.</para>
    </returns>
    <remarks>
      <para>This function stores two 32-bit values in a 64-bit value that is suitable for the <see cref="IMFAttributes.SetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFGetAttributeRatio" />
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.PackSize">
    <summary>
      <para>Packs a UINT32 width value and a UINT32 height value into a UINT64 value that represents a size.</para>
    </summary>
    <param name="unWidth">
      <para>Value to store the <b>UINT32</b> width value.</para>
    </param>
    <param name="unHeight">
      <para>Value to store the <b>UINT32</b> height value.</para>
    </param>
    <returns>
      <para>Returns the packed <b>UINT64</b> value.</para>
    </returns>
    <remarks>
      <para>This function stores two 32-bit values in a 64-bit value that is suitable for the <see cref="IMFAttributes.SetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFGetAttributeRatio" />
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.Unpack2UINT32AsUINT64">
    <summary>
      <para>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value.</para>
    </summary>
    <param name="unPacked">
      <para>The value to convert.</para>
    </param>
    <param name="punHigh">
      <para>Receives the high-order 32 bits.</para>
    </param>
    <param name="punLow">
      <para>Receives the low-order 32 bits.</para>
    </param>
    <remarks>
      <para>You can use this function to unpack a <b>UINT64</b> value that you receive from the <see cref="IMFAttributes.GetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFGetAttributeRatio" />
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.unpackratio">
    <summary>
      <para>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value that represents a ratio.</para>
    </summary>
    <param name="unPacked">
      <para>The value to convert.</para>
    </param>
    <param name="pnNumerator">
      <para>Receives the high-order 32 bits.</para>
    </param>
    <param name="punDenominator">
      <para>Receives the low-order 32 bits.</para>
    </param>
    <remarks>
      <para>You can use this function to unpack a <b>UINT64</b> value that you receive from the <see cref="IMFAttributes.GetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFGetAttributeRatio" />
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
  <member name="Windows.UnpackSize">
    <summary>
      <para>Gets the low-order and high-order <b>UINT32</b> values from a <b>UINT64</b> value that represents a size.</para>
    </summary>
    <param name="unPacked">
      <para>The value to convert.</para>
    </param>
    <param name="punWidth">
      <para>Receives the high-order 32 bits.</para>
    </param>
    <param name="punHeight">
      <para>Receives the low-order 32 bits.</para>
    </param>
    <remarks>
      <para>You can use this function to unpack a <b>UINT64</b> value that you receive from the <see cref="IMFAttributes.GetUINT64" /> method.</para>
    </remarks>
    <seealso cref="MFGetAttributeRatio" />
    <seealso cref="MFGetAttributeSize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/medfound/media-foundation-functions">Media Foundation Functions</seealso>
  </member>
</doc>