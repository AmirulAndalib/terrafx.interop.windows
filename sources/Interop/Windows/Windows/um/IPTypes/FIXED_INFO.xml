<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="FIXED_INFO">
    <summary>
      <para>The
<b>FIXED_INFO</b> structure contains information that is the same across all the interfaces on a computer.</para>
    </summary>
    <remarks>
      <para>The
<b>FIXED_INFO</b> structure is retrieved by the <see cref="GetNetworkParams" /> function.</para>
      <para>In the Microsoft Windows Software Development Kit (SDK), the <b>FIXED_INFO_WIN2KSP1</b> structure is defined.   When compiling an
application if the target platform is Windows 2000 with Service Pack 1 (SP1) and later (<code>NTDDI_VERSION &gt;= NTDDI_WIN2KSP1</code>,
<code>_WIN32_WINNT &gt;= 0x0501</code>, or
<code>WINVER &gt;= 0x0501</code>), the <b>FIXED_INFO_WIN2KSP1</b> struct is typedefed to the <b>FIXED_INFO</b> structure. When compiling an application if the target
platform is not Windows 2000 with SP1 and later, the
<b>FIXED_INFO</b> structure is undefined.</para>
      <para>The <see cref="GetNetworkParams" /> function and the
<b>FIXED_INFO</b> structure are supported on  Windows 98and later. But to build an application for a target platform earlier than Windows 2000 with Service Pack 1 (SP1), an earlier version of the Platform Software Development Kit (SDK)  must be used.</para>
      <h4>Examples</h4>
      <para>The following code retrieves a
<b>FIXED_INFO</b> structure that contains network configuration information for the local computer. The code prints selected members from the structure.</para>
      <code>//
// Link with IPHlpAPI.lib
//
#include &lt;winsock2.h&gt;
#include &lt;iphlpapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#pragma comment(lib, "IPHLPAPI.lib")

#define MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x))
#define FREE(x) HeapFree(GetProcessHeap(), 0, (x))

/* Note: could also use malloc() and free() */

int __cdecl main()
{

    FIXED_INFO *pFixedInfo;
    ULONG ulOutBufLen;
    DWORD dwRetVal;
    IP_ADDR_STRING *pIPAddr;

    pFixedInfo = (FIXED_INFO *) MALLOC(sizeof (FIXED_INFO));
    if (pFixedInfo == NULL) {
        printf("Error allocating memory needed to call GetNetworkParams\n");
        return 1;
    }
    ulOutBufLen = sizeof (FIXED_INFO);

// Make an initial call to GetAdaptersInfo to get
// the necessary size into the ulOutBufLen variable
    if (GetNetworkParams(pFixedInfo, &amp;amp;amp;amp;amp;amp;ulOutBufLen) == ERROR_BUFFER_OVERFLOW) {
        FREE(pFixedInfo);
        pFixedInfo = (FIXED_INFO *) MALLOC(ulOutBufLen);
        if (pFixedInfo == NULL) {
            printf("Error allocating memory needed to call GetNetworkParams\n");
            return 1;
        }
    }

    if (dwRetVal = GetNetworkParams(pFixedInfo, &amp;amp;amp;amp;amp;amp;ulOutBufLen) == NO_ERROR) {

        printf("Host Name: %s\n", pFixedInfo-&gt;HostName);
        printf("Domain Name: %s\n", pFixedInfo-&gt;DomainName);

        printf("DNS Servers:\n");
        printf("\t%s\n", pFixedInfo-&gt;DnsServerList.IpAddress.String);

        pIPAddr = pFixedInfo-&gt;DnsServerList.Next;
        while (pIPAddr) {
            printf("\t%s\n", pIPAddr-&gt;IpAddress.String);
            pIPAddr = pIPAddr-&gt;Next;
        }

        printf("Node Type: ");
        switch (pFixedInfo-&gt;NodeType) {
        case BROADCAST_NODETYPE:
            printf("Broadcast node\n");
            break;
        case PEER_TO_PEER_NODETYPE:
            printf("Peer to Peer node\n");
            break;
        case MIXED_NODETYPE:
            printf("Mixed node\n");
            break;
        case HYBRID_NODETYPE:
            printf("Hybrid node\n");
            break;
        default:
            printf("Unknown node type %0lx\n", pFixedInfo-&gt;NodeType);
            break;
        }

        printf("DHCP scope name: %s\n", pFixedInfo-&gt;ScopeId);

        if (pFixedInfo-&gt;EnableRouting)
            printf("Routing: enabled\n");
        else
            printf("Routing: disabled\n");

        if (pFixedInfo-&gt;EnableProxy)
            printf("ARP proxy: enabled\n");
        else
            printf("ARP Proxy: disabled\n");

        if (pFixedInfo-&gt;EnableDns)
            printf("DNS: enabled\n");
        else
            printf("DNS: disabled\n");

    } else {
        printf("GetNetworkParams failed with error: %d\n", dwRetVal);
        return 1;
    }

    if (pFixedInfo)
        FREE(pFixedInfo);

    return 0;
}

</code>
    </remarks>
    <seealso cref="GetNetworkParams" />
    <seealso href="https://docs.microsoft.com//windows/desktop/IpHlp/ip-helper-start-page">IP Helper Start Page</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/IpHlp/ip-helper-structures">IP Helper Structures</seealso>
    <seealso cref="IP_ADDR_STRING" />
  </member>
  <member name="FIXED_INFO.HostName">
    <summary>
      <para>Type: <b>char[MAX_HOSTNAME_LEN + 4]</b></para>
      <para>The hostname for the local computer. This may be the fully qualified hostname (including the domain) for a computer that is joined to a domain.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.DomainName">
    <summary>
      <para>Type: <b>char[MAX_DOMAIN_NAME_LEN + 4]</b></para>
      <para>The domain in which the local computer is registered.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.CurrentDnsServer">
    <summary>
      <para>Type: <b>PIP_ADDR_STRING</b></para>
      <para>Reserved. Use the <b>DnsServerList</b> member to obtain the DNS servers for the local computer.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.DnsServerList">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>A linked list of
<see cref="IP_ADDR_STRING" /> structures that specify the set of DNS servers used by the local computer.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.NodeType">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>The node type of the local computer. These values are defined in the
<i>Iptypes.h</i> header file.</para>
      <list type="table">
        <listheader>
          <description>NodeType</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>BROADCAST_NODETYPE</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>A broadcast nodetype.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>PEER_TO_PEER_NODETYPE</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>A peer to peer nodetype.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIXED_NODETYPE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>A mixed nodetype.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>HYBRID_NODETYPE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>A hybrid nodetype.</para>
          </description>
        </item>
      </list>
    </summary>
  </member>
  <member name="FIXED_INFO.ScopeId">
    <summary>
      <para>Type: <b>char[MAX_SCOPE_ID_LEN + 4]</b></para>
      <para>The DHCP scope name.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.EnableRouting">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>A Boolean value that specifies whether routing is enabled on the local computer.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.EnableProxy">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>A Boolean value that specifies whether the local computer is acting as an ARP proxy.</para>
    </summary>
  </member>
  <member name="FIXED_INFO.EnableDns">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>A Boolean value that specifies whether DNS is enabled on the local computer.</para>
    </summary>
  </member>
</doc>