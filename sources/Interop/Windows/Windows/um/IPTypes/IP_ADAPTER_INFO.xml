<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IP_ADAPTER_INFO">
    <summary>
      <para>The
<b>IP_ADAPTER_INFO</b> structure contains information about a particular network adapter on the local computer.</para>
    </summary>
    <remarks>
      <para>The
<b>IP_ADAPTER_INFO</b> structure is limited to IPv4 information about a particular network adapter on the local computer. The
<b>IP_ADAPTER_INFO</b> structure is retrieved by calling the <see cref="GetAdaptersInfo" /> function.</para>
      <para>When using Visual Studio 2005 and later, the <b>time_t</b> datatype defaults to an 8-byte datatype, not the 4-byte datatype used for the <b>LeaseObtained</b> and <b>LeaseExpires</b> members on a 32-bit platform. To properly use the <b>IP_ADAPTER_INFO</b> structure on a 32-bit platform, define <b>_USE_32BIT_TIME_T</b> (use <code>-D _USE_32BIT_TIME_T</code> as an option, for example) when compiling the application to force the <b>time_t</b> datatype to a 4-byte datatype.</para>
      <para>For use on Windows XP and later, the <see cref="IP_ADAPTER_ADDRESSES" /> structure contains both IPv4 and IPv6 information. The <see cref="GetAdaptersAddresses" /> function retrieves IPv4 and IPv6 adapter information.</para>
      <h4>Examples</h4>
      <para>This example retrieves the adapter information and prints various properties of each adapter.</para>
      <code>#include &lt;winsock2.h&gt;
#include &lt;iphlpapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#pragma comment(lib, "IPHLPAPI.lib")

#define MALLOC(x) HeapAlloc(GetProcessHeap(), 0, (x))
#define FREE(x) HeapFree(GetProcessHeap(), 0, (x))

/* Note: could also use malloc() and free() */

int __cdecl main()
{

    /* Declare and initialize variables */

// It is possible for an adapter to have multiple
// IPv4 addresses, gateways, and secondary WINS servers
// assigned to the adapter.
//
// Note that this sample code only prints out the
// first entry for the IP address/mask, and gateway, and
// the primary and secondary WINS server for each adapter.

    PIP_ADAPTER_INFO pAdapterInfo;
    PIP_ADAPTER_INFO pAdapter = NULL;
    DWORD dwRetVal = 0;
    UINT i;

/* variables used to print DHCP time info */
    struct tm newtime;
    char buffer[32];
    errno_t error;

    ULONG ulOutBufLen = sizeof (IP_ADAPTER_INFO);
    pAdapterInfo = (IP_ADAPTER_INFO *) MALLOC(sizeof (IP_ADAPTER_INFO));
    if (pAdapterInfo == NULL) {
        printf("Error allocating memory needed to call GetAdaptersinfo\n");
        return 1;
    }
// Make an initial call to GetAdaptersInfo to get
// the necessary size into the ulOutBufLen variable
    if (GetAdaptersInfo(pAdapterInfo, &amp;amp;amp;amp;amp;amp;ulOutBufLen) == ERROR_BUFFER_OVERFLOW) {
        FREE(pAdapterInfo);
        pAdapterInfo = (IP_ADAPTER_INFO *) MALLOC(ulOutBufLen);
        if (pAdapterInfo == NULL) {
            printf("Error allocating memory needed to call GetAdaptersinfo\n");
            return 1;
        }
    }

    if ((dwRetVal = GetAdaptersInfo(pAdapterInfo, &amp;amp;amp;amp;amp;amp;ulOutBufLen)) == NO_ERROR) {
        pAdapter = pAdapterInfo;
        while (pAdapter) {
            printf("\tComboIndex: \t%d\n", pAdapter-&gt;ComboIndex);
            printf("\tAdapter Name: \t%s\n", pAdapter-&gt;AdapterName);
            printf("\tAdapter Desc: \t%s\n", pAdapter-&gt;Description);
            printf("\tAdapter Addr: \t");
            for (i = 0; i &lt; pAdapter-&gt;AddressLength; i++) {
                if (i == (pAdapter-&gt;AddressLength - 1))
                    printf("%.2X\n", (int) pAdapter-&gt;Address[i]);
                else
                    printf("%.2X-", (int) pAdapter-&gt;Address[i]);
            }
            printf("\tIndex: \t%d\n", pAdapter-&gt;Index);
            printf("\tType: \t");
            switch (pAdapter-&gt;Type) {
            case MIB_IF_TYPE_OTHER:
                printf("Other\n");
                break;
            case MIB_IF_TYPE_ETHERNET:
                printf("Ethernet\n");
                break;
            case MIB_IF_TYPE_TOKENRING:
                printf("Token Ring\n");
                break;
            case MIB_IF_TYPE_FDDI:
                printf("FDDI\n");
                break;
            case MIB_IF_TYPE_PPP:
                printf("PPP\n");
                break;
            case MIB_IF_TYPE_LOOPBACK:
                printf("Lookback\n");
                break;
            case MIB_IF_TYPE_SLIP:
                printf("Slip\n");
                break;
            default:
                printf("Unknown type %ld\n", pAdapter-&gt;Type);
                break;
            }

            printf("\tIP Address: \t%s\n",
                   pAdapter-&gt;IpAddressList.IpAddress.String);
            printf("\tIP Mask: \t%s\n", pAdapter-&gt;IpAddressList.IpMask.String);

            printf("\tGateway: \t%s\n", pAdapter-&gt;GatewayList.IpAddress.String);
            printf("\t***\n");

            if (pAdapter-&gt;DhcpEnabled) {
                printf("\tDHCP Enabled: Yes\n");
                printf("\t  DHCP Server: \t%s\n",
                       pAdapter-&gt;DhcpServer.IpAddress.String);

                printf("\t  Lease Obtained: ");
                /* Display local time */
                error = _localtime32_s(&amp;amp;amp;amp;amp;amp;newtime, (__time32_t*) &amp;amp;amp;amp;amp;amp;pAdapter-&gt;LeaseObtained);
                if (error)
                    printf("Invalid Argument to _localtime32_s\n");
                else {
                    // Convert to an ASCII representation
                    error = asctime_s(buffer, 32, &amp;amp;amp;amp;amp;amp;newtime);
                    if (error)
                        printf("Invalid Argument to asctime_s\n");
                    else
                        /* asctime_s returns the string terminated by \n\0 */
                        printf("%s", buffer);
                }

                printf("\t  Lease Expires:  ");
                error = _localtime32_s(&amp;amp;amp;amp;amp;amp;newtime, (__time32_t*) &amp;amp;amp;amp;amp;amp;pAdapter-&gt;LeaseExpires);
                if (error)
                    printf("Invalid Argument to _localtime32_s\n");
                else {
                    // Convert to an ASCII representation
                    error = asctime_s(buffer, 32, &amp;amp;amp;amp;amp;amp;newtime);
                    if (error)
                        printf("Invalid Argument to asctime_s\n");
                    else
                        /* asctime_s returns the string terminated by \n\0 */
                        printf("%s", buffer);
                }
            } else
                printf("\tDHCP Enabled: No\n");

            if (pAdapter-&gt;HaveWins) {
                printf("\tHave Wins: Yes\n");
                printf("\t  Primary Wins Server:    %s\n",
                       pAdapter-&gt;PrimaryWinsServer.IpAddress.String);
                printf("\t  Secondary Wins Server:  %s\n",
                       pAdapter-&gt;SecondaryWinsServer.IpAddress.String);
            } else
                printf("\tHave Wins: No\n");
            pAdapter = pAdapter-&gt;Next;
            printf("\n");
        }
    } else {
        printf("GetAdaptersInfo failed with error: %d\n", dwRetVal);

    }
    if (pAdapterInfo)
        FREE(pAdapterInfo);

    return 0;
}

</code>
    </remarks>
    <seealso cref="GetAdaptersAddresses" />
    <seealso cref="GetAdaptersInfo" />
    <seealso href="https://docs.microsoft.com//windows/desktop/IpHlp/ip-helper-start-page">IP Helper Start Page</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/IpHlp/ip-helper-structures">IP Helper Structures</seealso>
    <seealso cref="IP_ADAPTER_ADDRESSES" />
    <seealso cref="IP_ADDRESS_STRING" />
    <seealso cref="IP_ADDR_STRING" />
  </member>
  <member name="IP_ADAPTER_INFO.Next">
    <summary>
      <para>Type: <b>struct _IP_ADAPTER_INFO*</b></para>
      <para>A pointer to the next adapter in the list of adapters.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.ComboIndex">
    <summary>
      <para>Type: <b>DWORD</b></para>
      <para>Reserved.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.AdapterName">
    <summary>
      <para>Type: <b>char[MAX_ADAPTER_NAME_LENGTH + 4]</b></para>
      <para>An ANSI character string of the name of the adapter.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.Description">
    <summary>
      <para>Type: <b>char[MAX_ADAPTER_DESCRIPTION_LENGTH + 4]</b></para>
      <para>An ANSI character string that contains the description of the adapter.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.AddressLength">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>The length, in bytes,  of the hardware address for the adapter.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.Address">
    <summary>
      <para>Type: <b>BYTE[MAX_ADAPTER_ADDRESS_LENGTH]</b></para>
      <para>The hardware address for the adapter represented as a <b>BYTE</b> array.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.Index">
    <summary>
      <para>Type: <b>DWORD</b></para>
      <para>The adapter index.</para>
      <para>The adapter index  may change when an adapter is disabled and then enabled, or under other circumstances, and should not be considered persistent.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.Type">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>The adapter type. Possible values for the adapter type are listed in the <i>Ipifcons.h</i> header file.</para>
      <para>The table below lists common values for the adapter type although other values are possible on Windows Vista and later.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIB_IF_TYPE_OTHER</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Some other type of network interface.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIB_IF_TYPE_ETHERNET</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>An Ethernet network interface.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IF_TYPE_ISO88025_TOKENRING</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>MIB_IF_TYPE_TOKENRING</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIB_IF_TYPE_PPP</b>
                </description>
              </item>
              <item>
                <description>23</description>
              </item>
            </list>
          </description>
          <description>
            <para>A PPP network interface.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIB_IF_TYPE_LOOPBACK</b>
                </description>
              </item>
              <item>
                <description>24</description>
              </item>
            </list>
          </description>
          <description>
            <para>A software loopback network interface.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MIB_IF_TYPE_SLIP</b>
                </description>
              </item>
              <item>
                <description>28</description>
              </item>
            </list>
          </description>
          <description>
            <para>An ATM network interface.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IF_TYPE_IEEE80211</b>
                </description>
              </item>
              <item>
                <description>71</description>
              </item>
            </list>
          </description>
          <description>
            <para>An IEEE 802.11 wireless network interface.</para>
            <para>
              <b>Note</b>  This adapter type is returned on Windows Vista and later.  On Windows Server 2003 and Windows XP , an IEEE 802.11 wireless network interface returns an adapter type of  <b>MIB_IF_TYPE_ETHERNET</b>.</para>
          </description>
        </item>
      </list>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.DhcpEnabled">
    <summary>
      <para>Type: <b>UINT</b></para>
      <para>An option value  that specifies whether the dynamic host configuration protocol (DHCP) is enabled for this adapter.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.CurrentIpAddress">
    <summary>
      <para>Type: <b>PIP_ADDR_STRING</b></para>
      <para>Reserved.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.IpAddressList">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>The list of IPv4 addresses associated with this adapter represented as  a linked list of <b>IP_ADDR_STRING</b> structures. An adapter can have multiple IPv4 addresses assigned to it.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.GatewayList">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>The IPv4 address of the gateway for this adapter represented as  a linked list of <b>IP_ADDR_STRING</b> structures. An adapter can have multiple IPv4 gateway addresses assigned to it. This list usually contains a single entry for IPv4 address of the default gateway for this adapter.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.DhcpServer">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>The IPv4 address of the DHCP server for this adapter represented as  a linked list of <b>IP_ADDR_STRING</b> structures. This  list contains a single entry for the IPv4 address of the DHCP server for this adapter. A value of 255.255.255.255 indicates the DHCP server could not be reached, or is in the process of being reached.</para>
      <para>This member is only valid when the <b>DhcpEnabled</b> member is nonzero.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.HaveWins">
    <summary>
      <para>Type: <b>BOOL</b></para>
      <para>An option value that specifies whether this adapter uses the Windows Internet Name Service (WINS).</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.PrimaryWinsServer">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>The IPv4 address of the primary WINS server represented as  a linked list of <b>IP_ADDR_STRING</b> structures. This list contains a single entry for the IPv4 address of the primary WINS server for this adapter.</para>
      <para>This member is only valid when the <b>HaveWins</b> member is <b>TRUE</b>.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.SecondaryWinsServer">
    <summary>
      <para>Type: <b>IP_ADDR_STRING</b></para>
      <para>The IPv4 address of the secondary WINS server represented as  a linked list of <b>IP_ADDR_STRING</b> structures. An adapter can have multiple secondary WINS server addresses assigned to it.</para>
      <para>This member is only valid when the <b>HaveWins</b> member is <b>TRUE</b>.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.LeaseObtained">
    <summary>
      <para>Type: <b>time_t</b></para>
      <para>The time when the current DHCP lease was obtained.</para>
      <para>This member is only valid when the <b>DhcpEnabled</b> member is nonzero.</para>
    </summary>
  </member>
  <member name="IP_ADAPTER_INFO.LeaseExpires">
    <summary>
      <para>Type: <b>time_t</b></para>
      <para>The time when the current DHCP lease expires.</para>
      <para>This member is only valid when the <b>DhcpEnabled</b> member is nonzero.</para>
    </summary>
  </member>
</doc>