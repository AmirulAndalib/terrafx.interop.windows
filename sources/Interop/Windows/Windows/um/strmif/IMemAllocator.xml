<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMemAllocator.Commit">
    <summary>
      <para>The <code>Commit</code> method allocates the buffer memory.</para>
    </summary>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_SIZENOTSET</b>
            </para>
          </description>
          <description>
            <para>Buffer requirements were not set.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before calling this method, call the <see cref="IMemAllocator.SetProperties" /> method to specify the buffer requirements.</para>
      <para>You must call this method before calling the <see cref="IMemAllocator.GetBuffer" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator.Decommit">
    <summary>
      <para>The <code>Decommit</code> method releases the buffer memory.</para>
    </summary>
    <returns>
      <para>Returns S_OK if successful, or an <b>HRESULT</b> value indicating the cause of the error.</para>
    </returns>
    <remarks>
      <para>Any threads waiting in the <see cref="IMemAllocator.GetBuffer" /> method return with an error. Further calls to <b>GetBuffer</b> fail, until the <see cref="IMemAllocator.Commit" /> method is called.</para>
      <para>The purpose of the <code>Decommit</code> method is to prevent filters from getting any more samples from the allocator. Filters that already hold a reference count on a sample are not affected. After a filter releases a sample and the reference count goes to zero, however, the sample is no longer available.</para>
      <para>The allocator may free the memory belonging to any sample with a reference count of zero. Thus, the <code>Decommit</code> method "releases" the memory in the sense that filters stop having access to it. Whether the memory actually returns to the heap depends on the implementation of the allocator. Some allocators wait until their own destructor method. However, an allocator must not leave any allocated memory behind when it deletes itself. Therefore, an allocator's destructor must wait until all of its samples are released.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator.GetBuffer">
    <summary>
      <para>The <b>GetBuffer</b> method retrieves a media sample that contains an empty buffer.</para>
    </summary>
    <param name="ppBuffer">
      <para>Receives a pointer to the buffer's <see cref="IMediaSample" /> interface. The caller must release the interface.</para>
    </param>
    <param name="pStartTime">
      <para>Pointer to the start time of the sample, or <b>NULL</b>.</para>
    </param>
    <param name="pEndTime">
      <para>Pointer to the ending time of the sample, or <b>NULL</b>.</para>
    </param>
    <param name="dwFlags">
      <para>Bitwise combination of zero or more of the following flags:</para>
      <list type="table">
        <listheader>
          <description>Flag
</description>
          <description>Description
</description>
        </listheader>
        <item>
          <description>AM_GBF_NOTASYNCPOINT</description>
          <description>This sample is not a synchronization point. Dynamic format changes are not allowed on this sample. When called on the Overlay Mixer or VMR, this flag implies that the buffer returned will contain an image that is identical to the last image delivered.</description>
        </item>
        <item>
          <description>AM_GBF_PREVFRAMESKIPPED</description>
          <description>This sample is the first after a discontinuity. (Only the video renderer uses this flag.)</description>
        </item>
        <item>
          <description>AM_GBF_NOWAIT</description>
          <description>Do not wait for a buffer to become available.</description>
        </item>
        <item>
          <description>AM_GBF_NODDSURFACELOCK</description>
          <description>Used with the <a href="https://docs.microsoft.com//windows/desktop/DirectShow/video-mixing-renderer-filter-7">Video Mixing Renderer Filter 7</a> to request an unlocked DirectDraw surface. For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/working-with-direct3d-render-targets">Working with Direct3D Render Targets</a>.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_NOT_COMMITTED</b>
            </para>
          </description>
          <description>
            <para>Allocator is decommitted.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_TIMEOUT</b>
            </para>
          </description>
          <description>
            <para>Timed out.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>By default, this method blocks until a free sample is available or the allocator is decommitted. If the caller specifies the AM_GBF_NOWAIT flag and no sample is available, the allocator can return immediately with a return value of VFW_E_TIMEOUT. However, allocators are not required to support this flag.</para>
      <para>The sample returned in <i>ppBuffer</i> has a valid buffer pointer. The caller is responsible for setting any other properties on the sample, such as the time stamps, the media times, or the sync-point property. (For more information, see <see cref="IMediaSample" />.)</para>
      <para>The <i>pStartTime</i> and <i>pEndTime</i> parameters are not applied to the sample. The allocator might use these values to determine which buffer it retrieves. For example, the <a href="https://docs.microsoft.com//windows/desktop/DirectShow/video-renderer-filter">Video Renderer</a> filter uses these values to synchronize switching between DirectDraw surfaces. To set the time stamp on the sample, call the <see cref="IMediaSample.SetTime" /> method.</para>
      <para>You must call the <see cref="IMemAllocator.Commit" /> method before calling this method. This method fails after the <see cref="IMemAllocator.Decommit" /> method is called.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator.GetProperties">
    <summary>
      <para>The <code>GetProperties</code> method retrieves the number of buffers that the allocator will create, and the buffer properties.</para>
    </summary>
    <param name="pProps">
      <para>Pointer to an <see cref="ALLOCATOR_PROPERTIES" /> structure that receives the allocator properties.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, or an <b>HRESULT</b> value indicating the cause of the error.</para>
    </returns>
    <remarks>
      <para>Calls to this method might not succeed until the <see cref="IMemAllocator.Commit" /> method is called.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator.ReleaseBuffer">
    <summary>
      <para>The <code>ReleaseBuffer</code> method releases a media sample.</para>
    </summary>
    <param name="pBuffer">
      <para>Pointer to the media sample's <see cref="IMediaSample" /> interface.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, or an <b>HRESULT</b> value indicating the cause of the error.</para>
    </returns>
    <remarks>
      <para>When a media sample's reference count reaches zero, it calls this method with itself as the <i>pBuffer</i> parameter. This method releases the sample back to the allocator's list of available samples.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator.SetProperties">
    <summary>
      <para>The <code>SetProperties</code> method specifies the number of buffers to allocate and the size of each buffer.</para>
    </summary>
    <param name="pRequest">
      <para>Pointer to an <see cref="ALLOCATOR_PROPERTIES" /> structure that contains the buffer requirements.</para>
    </param>
    <param name="pActual">
      <para>Pointer to an <b>ALLOCATOR_PROPERTIES</b> structure that receives the actual buffer properties.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <b>NULL</b> pointer argument.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_ALREADY_COMMITTED</b>
            </para>
          </description>
          <description>
            <para>Cannot change allocated memory while the filter is active.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_BADALIGN</b>
            </para>
          </description>
          <description>
            <para>An invalid alignment was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_E_BUFFERS_OUTSTANDING</b>
            </para>
          </description>
          <description>
            <para>One or more buffers are still active.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method specifies the buffer requirements, but does not allocate any buffers. Call the <see cref="IMemAllocator.Commit" /> method to allocate buffers.</para>
      <para>The caller allocates two ALLOCATOR_PROPERTIES structures. The <i>pRequest</i> parameter contains the caller's buffer requirements, including the number of buffers and the size of each buffer. When the method returns, the <i>pActual</i> parameter contains the actual buffer properties, as set by the allocator.</para>
      <para>When this method is called, the allocator must not be committed or have outstanding buffers.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMemAllocator Interface" />
  </member>
  <member name="IMemAllocator">
    <summary>
      <para>The <code>IMemAllocator</code> interface allocates media samples, for moving data between pins.</para>
      <para>This interface is used by pins that share allocators, when the input pin exposes the <see cref="IMemInputPin" /> interface. The pins negotiate which pin will provide the allocator. The allocator is used to allocate memory buffers, retrieve empty buffers, and release buffers. Not every filter creates its own allocator, so one allocator might be used by several filters. For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/how-filters-connect">How Filters Connect</a>.</para>
      <para>Applications typically do not use this interface.</para>
      <para>To use an allocator, perform the following steps:</para>
      <list type="number">
        <item>
          <description>Call the <see cref="IMemAllocator.SetProperties" /> method to specify the buffer requirements, including the number of buffers and the size of each buffer.</description>
        </item>
        <item>
          <description>Call the <see cref="IMemAllocator.Commit" /> method to allocate the buffers.</description>
        </item>
        <item>
          <description>Call the <see cref="IMemAllocator.GetBuffer" /> method to retrieve media samples. This method blocks until the next sample becomes available.</description>
        </item>
        <item>
          <description>When you are done with each sample, call the <b>IUnknown.Release</b> method on the sample. The sample is not deleted when its reference count reaches zero. Instead, the sample returns to the allocator's free list.</description>
        </item>
        <item>
          <description>When you are done using the allocator, call the <see cref="IMemAllocator.Decommit" /> method to release the memory for the buffers.</description>
        </item>
      </list>
    </summary>
  </member>
</doc>