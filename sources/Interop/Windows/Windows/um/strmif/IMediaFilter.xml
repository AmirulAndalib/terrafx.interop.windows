<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMediaFilter.GetState">
    <summary>
      <para>The <b>GetState</b> method retrieves the filter's state (running, stopped, or paused).</para>
    </summary>
    <param name="dwMilliSecsTimeout">
      <para>Time-out interval, in milliseconds. To block indefinitely, use the value <b>INFINITE</b>.</para>
    </param>
    <param name="State">
      <para>Receives a member of the <see cref="FILTER_STATE" /> enumerated type, indicating the filter's state.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <b>NULL</b> pointer argument.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_S_STATE_INTERMEDIATE</b>
            </para>
          </description>
          <description>
            <para>Intermediate state.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>VFW_S_CANT_CUE</b>
            </para>
          </description>
          <description>
            <para>The filter is active, but cannot deliver data.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>State transitions can be asynchronous. If the filter is transitioning to a new state, and the method times out before the transition completes, the method returns <b>VFW_S_STATE_INTERMEDIATE</b>.</para>
      <para>If a filter cannot deliver data for some reason, it returns <b>VFW_S_CANT_CUE</b>. Live capture filters return this value while paused, because they do not deliver data in the paused state.</para>
      <para>For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/data-flow-in-the-filter-graph">Data Flow in the Filter Graph</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IBaseFilter" />
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter.GetSyncSource">
    <summary>
      <para>The <code>GetSyncSource</code> method retrieves the current reference clock.</para>
    </summary>
    <param name="pClock">
      <para>Receives a pointer to the clock's <see cref="IReferenceClock" /> interface. The caller must release the interface.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <b>NULL</b> pointer argument
</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method returns the same reference clock as the last call to <see cref="IMediaFilter.SetSyncSource" />. If there is no reference clock, <i>pClock</i> receives the value <b>NULL</b>. When the method returns, if <i>*pClock</i> is non-<b>NULL</b>, the <b>IReferenceClock</b> interface has an outstanding reference count. Be sure to release it when you are done.</para>
      <para>You can also call this method on the Filter Graph Manager to determine the current reference clock.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter.Pause">
    <summary>
      <para>The <b>Pause</b> method pauses the filter.</para>
    </summary>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>Transition is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success. Transition is complete.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a filter is paused, it can receive, process, and deliver samples. However, a renderer filter will only accept one sample while paused. Therefore, when the filter graph is paused, samples move through the graph until the first sample reaches the renderer. At that point, streaming is paused until the <see cref="IMediaFilter.Run" /> method is called. Video renderers display the first sample as a still frame.</para>
      <para>Live capture filters do not deliver any samples while paused, only while running.</para>
      <para>The state transition might be asynchronous. If the method returns before the transition completes, the return value is <b>S_FALSE</b>. A renderer filter does not complete the transition to paused until either (1) it receives one sample, or (2) it receives an end-of-stream notification. While the state transition is pending, <see cref="IMediaFilter.GetState" /> returns <b>VFW_S_STATE_INTERMEDIATE</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IBaseFilter" />
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter.Run">
    <summary>
      <para>The <code>Run</code> method runs the filter.</para>
    </summary>
    <param name="tStart">
      <para>Reference time corresponding to stream time 0.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>Transition is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success. Transition is complete.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a filter is running, it can receive, process, and deliver samples. Source filters generate new samples, and renderer filters render them.</para>
      <para>The state transition might be asynchronous. If the method returns before the transition completes, the return value is S_FALSE.</para>
      <para>Stream time is calculated as the current reference time minus <i>tStart</i>. To calculate when a media sample should be rendered, the renderer compares the time stamp with the current stream time. Thus, a media sample with a time stamp of zero should be rendered at time <i>tStart</i>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/time-and-clocks-in-directshow">Time and Clocks in DirectShow</a>.</para>
      <para>When an application calls the <see cref="IMediaControl.Run" /> method, the Filter Graph Manager calls <code>IMediaFilter.Run</code> on each filter. It sets the value of <i>tStart</i> slightly in the future, to account for graph latency.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter.SetSyncSource">
    <summary>
      <para>The <code>SetSyncSource</code> method sets the reference clock.</para>
    </summary>
    <param name="pClock">
      <para>Pointer to the clock's <see cref="IReferenceClock" /> interface, or <b>NULL</b>. If this parameter is <b>NULL</b>, the filter graph does not use a reference clock, and all filters run as quickly as possible.</para>
    </param>
    <returns>
      <para>Returns S_OK if successful, or an <b>HRESULT</b> value indicating the cause of the error.</para>
    </returns>
    <remarks>
      <para>All the filters in the filter graph share the same reference clock, in order to stay synchronized. Stream time is calculated from the reference clock. Renderer filters use the reference clock to schedule when they render samples. If there is no reference clock, a renderer filter renders every sample as soon as it arrives.</para>
      <para>This method is implemented by all DirectShow filters, and also by the Filter Graph Manager.</para>
      <h3>Filter Implementation</h3>
      <para>When the graph runs, the Filter Graph manager calls this method on every filter in the graph, to notify them of the graph reference clock. Use this method to store the <see cref="IReferenceClock" /> pointer. Increment the reference count on the stored pointer. Before the filter is removed from the graph, the Filter Graph Manager calls <b>SetSyncSource</b> again with the value <b>NULL</b>. Release the stored pointer and set it to <b>NULL</b>.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/cbasefilter">CBaseFilter</a> class implements this method; see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/cbasefilter-setsyncsource">CBaseFilter.SetSyncSource</a>.</para>
      <para>Note that filters cannot use this method to select the graph clock. In filters, the only function of this method is to inform the filter of the clock that the graph is using. A filter can provide a reference clock by exposing the <see cref="IReferenceClock" /> interface. For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/time-and-clocks-in-directshow">Time and Clocks in DirectShow</a>.</para>
      <h3>Application Use</h3>
      <para>An application can override the default clock by calling <b>SetSyncSource</b> on the Filter Graph Manager. Do not do this unless you have a particular reason to prefer another clock. You can also set the graph not to use any reference clock, by calling <b>SetSyncSource</b> with the value <b>NULL</b>. You might do this to process samples as quickly as possible. For more information, see <a href="https://docs.microsoft.com//windows/desktop/DirectShow/setting-the-graph-clock">Setting the Graph Clock</a>.</para>
      <para>Applications should never call this method on filters.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IFilterGraph.SetDefaultSyncSource" />
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter.Stop">
    <summary>
      <para>The <code>Stop</code> method stops the filter.</para>
    </summary>
    <returns>
      <para>Returns an <b>HRESULT</b> value. Possible values include those shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>Transition is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Success. Transition is complete.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>When a filter is stopped, it does not process or deliver any samples, and it rejects samples from upstream filters.</para>
      <para>The state transition might be asynchronous. If the method returns before the transition completes, the return value is S_FALSE.</para>
      <para>This method always sets the filter's state to State_Stopped, even if the method returns an error code.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="FILTER_STATE Enumeration" />
    <seealso cref="IMediaFilter Interface" />
  </member>
  <member name="IMediaFilter">
    <summary>
      <para>The <code>IMediaFilter</code> interface controls the streaming state of a filter.</para>
      <para>All DirectShow filters implement this interface. It provides methods for switching the filter between states (stopped, paused, and running); for retrieving the filter's current state; and for setting a reference clock. Applications should not call <code>IMediaFilter</code> methods on filters.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/filter-graph-manager">Filter Graph Manager</a> also exposes this interface. Applications can use the <b>SetSyncSource</b> method to set the graph reference clock, and <b>GetSyncSource</b> to retrieve the clock. Applications should not call the other methods on this interface. Instead, use the corresponding methods on the <see cref="IMediaControl" /> interface.</para>
      <para>The <see cref="IBaseFilter" /> interface inherits from <code>IMediaFilter</code>.</para>
    </summary>
  </member>
</doc>