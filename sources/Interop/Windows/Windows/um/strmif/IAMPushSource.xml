<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAMPushSource.GetMaxStreamOffset">
    <summary>
      <para>The <code>GetMaxStreamOffset</code> method retrieves the maximum stream offset the filter can support.</para>
    </summary>
    <param name="prtMaxOffset">
      <para>Pointer to a variable that receives a reference time indicating the maximum offset the filter can support.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface. The DirectShow implementation returns E_POINTER or S_OK.</para>
    </returns>
    <remarks>
      <para>If the stream offset is set to a value larger than the maximum supported offset, the filter is not guaranteed to have a buffer large enough to hold data for the entire amount of the offset. Unless there is another buffer downstream, data might be lost.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource.GetPushSourceFlags">
    <summary>
      <para>The <code>GetPushSourceFlags</code> method retrieves a combination of flags describing the behavior of the filter.</para>
    </summary>
    <param name="pFlags">
      <para>Pointer to a variable that receives a combination of flags from the <see cref="AM_PUSHSOURCE_FLAGS" /> enumeration.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface.</para>
    </returns>
    <remarks>
      <para>Call this method to determine whether a renderer filter can safely match clock rates with this source filter.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource.GetStreamOffset">
    <summary>
      <para>The <code>GetStreamOffset</code> method retrieves the offset that the filter uses when generating time stamps.</para>
    </summary>
    <param name="prtOffset">
      <para>Pointer to a variable that receives a reference time indicating the current stream offset.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource.SetMaxStreamOffset">
    <summary>
      <para>The <code>SetMaxStreamOffset</code> method specifies the stream offset that will be allowed in the filter graph.</para>
    </summary>
    <param name="rtMaxOffset">
      <para>Reference time specifying the maximum stream offset.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface.</para>
    </returns>
    <remarks>
      <para>If this method is called prior to connecting the filter, the filter can allocate an appropriately sized buffer.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource.SetPushSourceFlags">
    <summary>
      <para>The <code>SetPushSourceFlags</code> method sets flags that specify the behavior of the filter. Currently, applications should not call this method, because request flags are not supported and an application should not override the flags set by the filter.</para>
    </summary>
    <param name="Flags">
      <para>Combination of flags from the <see cref="AM_PUSHSOURCE_FLAGS" /> enumeration.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource.SetStreamOffset">
    <summary>
      <para>The <code>SetStreamOffset</code> method sets the offset for time stamps generated by this filter.</para>
    </summary>
    <param name="rtOffset">
      <para>New stream offset for the filter.</para>
    </param>
    <returns>
      <para>Returns S_FALSE if the specified offset is larger than the filter's maximum preferred offset. Otherwise, returns S_OK if successful or an <b>HRESULT</b> value indicating the cause of the error.</para>
    </returns>
    <remarks>
      <para>The filter graph calls this method to adjust a filter's stream offset, in order to synchronize streams with different latency values.</para>
      <para>If the return value is S_FALSE, the filter might not support a buffer large enough for the requested offset. Unless there is another buffer downstream, data might be lost. To retrieve the filter's maximum preferred offset, call the <see cref="IAMPushSource.GetMaxStreamOffset" /> method.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMPushSource Interface" />
  </member>
  <member name="IAMPushSource">
    <summary>
      <para>The <code>IAMPushSource</code> interface synchronizes a filter graph that renders a live source. A live source is a source that streams data in real time, such as a capture device or a network broadcast.</para>
      <para>Source filters that stream live data should expose this interface on their output pins. Generally, applications should not call the methods on this interface; instead, use the <see cref="IAMGraphStreams" /> interface.</para>
    </summary>
    <remarks>
      <para>The Filter Graph Manager uses the methods on this interface to address two problems that commonly occur when rendering live sources:</para>
      <list type="bullet">
        <item>
          <description>Latency: When a filter graph includes more than one live source, the sources often have different latencies, which can cause them to be out of sync. For example, if audio capture has a longer latency time than video capture, the audio will lag behind the video unless the graph compensates for the difference.</description>
        </item>
        <item>
          <description>Rate Matching: When a renderer filter is connected to a live source, it must adjust its data consumption rate to match the source filter's production rate. Otherwise, there might be gaps in the data (if the renderer runs faster than the source) or data might get dropped (if the source runs faster).</description>
        </item>
      </list>
      <para>To correct for latency, the filter graph calls <see cref="IAMLatency.GetLatency" /> on each output pin that exposes the <code>IAMPushSource</code> interface, and determines the maximum latency in the graph. It then calls <see cref="IAMPushSource.SetStreamOffset" /> on any filters with less than the maximum latency, so that they will adjust the time stamps they generate by the correct offset.</para>
      <para>To perform rate matching, the filter graph needs to determine whether the renderer filter can match clock rates with the source filter. The <see cref="IAMPushSource.GetPushSourceFlags" /> method returns a set of flags indicating whether it is safe for the renderer to match rates with the source.</para>
      <para>These issues do not affect capturing to a file. The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/file-writer-filter">File Writer</a> filter relies on time stamps on the incoming samples to write the file correctly; the streams are then synchronized during playback. As for rate matching, the data is always written to the file as fast as possible.</para>
    </remarks>
    <seealso cref="IAMLatency" />
  </member>
</doc>