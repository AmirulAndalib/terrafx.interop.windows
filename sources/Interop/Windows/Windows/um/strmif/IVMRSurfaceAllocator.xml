<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IVMRSurfaceAllocator.AdviseNotify">
    <summary>
      <para>The <code>AdviseNotify</code> method provides the allocator-presenter with the VMR-7 filter's interface for notification callbacks. If you are using a custom allocator-presenter, the application must call this method on the allocator-presenter, with a pointer to the VMR's <b>IVMRSurfaceAllocatorNotify</b> interface. The allocator-presenter uses this interface to communicate with the VMR.</para>
      <para>If you are not using a custom allocator-presenter, the application does not have to call this method.</para>
    </summary>
    <param name="lpIVMRSurfAllocNotify">
      <para>Specifies the <see cref="IVMRSurfaceAllocatorNotify" /> interface pointer that the allocator-presenter will use to pass notifications back to the VMR.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IVMRSurfaceAllocator Interface" />
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/supplying-a-custom-allocator-presenter-for-vmr-7">Supplying a Custom Allocator-Presenter for VMR-7</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/using-the-video-mixing-renderer">Using the Video Mixing Renderer</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/vmr-renderless-playback-mode--custom-allocator-presenters">VMR Renderless Playback Mode (Custom Allocator-Presenters)</seealso>
  </member>
  <member name="IVMRSurfaceAllocator.AllocateSurface">
    <summary>
      <para>The <code>AllocateSurface</code> method allocates a DirectDraw surface.</para>
    </summary>
    <param name="dwUserID">
      <para>An application-defined DWORD_PTR cookie that uniquely identifies this instance of the VMR for use in scenarios when one instance of the allocator-presenter is used with multiple VMR instances.</para>
    </param>
    <param name="lpAllocInfo">
      <para>Specifies the <see cref="VMRALLOCATIONINFO" /> structure. See Remarks.</para>
    </param>
    <param name="lpdwActualBuffers">
      <para>[out] On input this parameter is used to request the number of buffers desired. On output it receives the actual number of buffers created.</para>
    </param>
    <param name="lplpSurface">
      <para>Address of a pointer that receives the Direct3D surface.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>One of the pointers is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>In <i>dwFlags</i>, the AMAP_3D_TARGET was combined with AMAP_FORCE_SYSMEM or AMAP_ALLOW_SYSMEM.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>One or more members of the BITMAPINFOHEADER structure specified by <i>lpAllocInfo</i>-&gt;lpHdr is incorrect.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Before calling <b>AllocateSurface</b> explicitly, a client application should call <see cref="IVMRSurfaceAllocator.FreeSurface" /> to be sure that the DirectDraw decoding surface front buffer is <b>NULL</b>. If it is not <b>NULL</b> at the time an application calls <b>AllocateSurface</b>, the debug version of quartz.dll will cause an assertion.</para>
      <para>When implementing this method in a custom allocator-presenter, you must examine the value of <i>lpAllocInfo</i>-&gt;lpHdr-&gt;biBitCount. If biBitCount is zero, then you must set it to the pixel depth for the current display. If BiBitCount is left at zero, the surface allocation will fail and a new (default) VMR will be created.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IVMRSurfaceAllocator Interface" />
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/using-the-video-mixing-renderer">Using the Video Mixing Renderer</seealso>
  </member>
  <member name="IVMRSurfaceAllocator.FreeSurface">
    <summary>
      <para>The <code>FreeSurface</code> method frees the allocated DirectDraw surface.</para>
    </summary>
    <param name="dwID">
      <para>An application-defined DWORD_PTR cookie that uniquely identifies this instance of the VMR for use in scenarios when one instance of the allocator-presenter is used with multiple VMR instances.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <seealso cref="IVMRSurfaceAllocator Interface" />
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/using-the-video-mixing-renderer">Using the Video Mixing Renderer</seealso>
  </member>
  <member name="IVMRSurfaceAllocator.PrepareSurface">
    <summary>
      <para>The <code>PrepareSurface</code> method prepares the DirectDraw surface to have the next video frame decoded into it.</para>
    </summary>
    <param name="dwUserID">
      <para>An application-defined DWORD_PTR cookie that uniquely identifies this instance of the VMR for use in scenarios when one instance of the allocator-presenter is used with multiple VMR instances.</para>
    </param>
    <param name="lpSurface">
      <para>Specifies the DirectDraw surface</para>
    </param>
    <param name="dwSurfaceFlags">
      <para>Double word containing the surface flags. See Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The only flag that the VMR currently checks here is AM_GBF_NOTASYNCPOINT (0x00000002), which indicates that you are not going to fill this buffer with a sync point (keyframe).</para>
    </remarks>
    <seealso cref="IVMRSurfaceAllocator Interface" />
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/using-the-video-mixing-renderer">Using the Video Mixing Renderer</seealso>
  </member>
  <member name="IVMRSurfaceAllocator">
    <summary>
      <para>The <code>IVMRSurfaceAllocator</code> interface is implemented by the default allocator-presenter for the <a href="https://docs.microsoft.com//windows/desktop/DirectShow/video-mixing-renderer-filter-7">Video Mixing Renderer Filter 7</a> (VMR-7). It must also be implemented by any plug-in allocator-presenter that an application provides to the VMR-7. The VMR-7 uses the methods on this interface to allocate, prepare and free DirectDraw surfaces. Applications do not use this interface.</para>
      <para>For the VMR-9, use the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/api/vmr9/nn-vmr9-ivmrsurfaceallocator9">IVMRSurfaceAllocator9</a> interface.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/using-the-video-mixing-renderer">Using the Video Mixing Renderer</seealso>
  </member>
</doc>