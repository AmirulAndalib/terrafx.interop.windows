<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAMTimecodeReader.GetTCRMode">
    <summary>
      <para>The <code>GetTCRMode</code> method retrieves the timecode reader's properties.</para>
      <para>This method is not implemented.</para>
    </summary>
    <param name="Param">
      <para>Timecode reader property to get (either ED_TCR_SOURCE or ED_TCR_NOTIFY_ENABLE).</para>
    </param>
    <param name="pValue">
      <para>Pointer to the value of the requested timecode reader property. If <i>Param</i> is set to ED_TCR_NOTIFY_ENABLE, then this parameter will return OATRUE—meaning that notifications are enabled—or OAFALSE. If <i>Param</i> is set to ED_TCR_SOURCE, then this value must be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Description
</description>
        </listheader>
        <item>
          <description>ED_TCR_CT</description>
          <description>Control track</description>
        </item>
        <item>
          <description>ED_TCR_LTC</description>
          <description>Linear timecode</description>
        </item>
        <item>
          <description>ED_TCR_VITC</description>
          <description>Vertical interval timecode</description>
        </item>
        <item>
          <description>ED_TCR_LAST_VALUE</description>
          <description>Last read value</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns E_NOTIMPL.</para>
    </returns>
    <remarks>
      <para>Linear timecode is recorded on an analog audio track as a bi-phase mark -encoded signal. Each timecode frame is one video frame time in duration.</para>
      <para>Vertical timecode is usually stored in two lines of a video signal's vertical interval, somewhere between lines 11 and 20.</para>
      <para>Control track is a once-per-frame signal recorded on a special track on a tape. The head and drive servo mechanisms use it to keep everything locked. It is also used to drive the counter on machines without timecode capability, and can optionally be used on machines equipped with a timecode reader.</para>
      <para>Note that ED_TCR_LAST_VALUE is used when implementing timecode notification because the application does not want to initiate another timecode request to the external device. This method is not recommended for frame-accurate applications because of multithreading issues.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMTimecodeReader Interface" />
    <seealso cref="IAMTimecodeReader.SetTCRMode" />
  </member>
  <member name="IAMTimecodeReader.GetTimecode">
    <summary>
      <para>The <code>GetTimecode</code> method retrieves the most recent timecode, userbit, and flag values available in the stream.</para>
    </summary>
    <param name="pTimecodeSample">
      <para>Pointer to a <see cref="TIMECODE_SAMPLE" /> structure.</para>
    </param>
    <returns>
      <para>Returns an <b>HRESULT</b> value that depends on the implementation of the interface.</para>
    </returns>
    <remarks>
      <para>Use this method to monitor the timecode and to parse duplicates and discontinuities.</para>
      <para>The timecode contains undefined bits, called <i>userbits</i>. Applications can use these bits to store synchronization information or other custom information.</para>
      <h3>DV and MPEG Camcorder Implementation</h3>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/msdv-driver">MSDV</a> driver supports reading SMPTE timecode or absolute track numbers (ATN). The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/mstape-driver">MSTape</a> driver supports reading the relative time counter (RTC). To read time information on these devices, do the following:</para>
      <para>Set the <b>dwFlags</b> member of the <see cref="TIMECODE_SAMPLE" /> structure to one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>ED_DEVCAP_TIMECODE_READ</description>
          <description>Timecode (DV)</description>
        </item>
        <item>
          <description>ED_DEVCAP_ATN_READ</description>
          <description>Absolute track number (DV)</description>
        </item>
        <item>
          <description>ED_DEVCAP_RTC_READ</description>
          <description>Relative time counter (MPEG tape)</description>
        </item>
      </list>
      <para>The <b>timecode</b> member of the <see cref="TIMECODE_SAMPLE" /> structure is a <a href="https://docs.microsoft.com//windows/desktop/DirectShow/getting-timecode-from-the-device">TIMECODE</a> structure. Initialize that structure's <b>dwFrames</b> member to zero.</para>
      <para>All other structure members are ignored.</para>
      <para>When the method returns, the <b>dwFrames</b> member contains the time information, in the following format.</para>
      <list type="table">
        <listheader>
          <description>Time Information</description>
          <description>Format</description>
        </listheader>
        <item>
          <description>Timecode</description>
          <description>Hours, minutes, seconds, and frames, as a binary coded decimal (BCD) value: <i>0xhhmmssff</i>.</description>
        </item>
        <item>
          <description>ATN</description>
          <description>Track number.</description>
        </item>
        <item>
          <description>RTC</description>
          <description>Hours, minutes, seconds, and frames, as a BCD value: <i>0xhhmmssff</i>. The most significant bit of the frames byte is a sign bit. If the frame count is not available, the remaining frame bits are set to 0x7F.</description>
        </item>
      </list>
      <para>Also, the <b>dwUser</b> member receives the <i>blank flag</i> bit from the device, which has one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>0x00</description>
          <description>Not a discontinuity.</description>
        </item>
        <item>
          <description>0x01</description>
          <description>Discontinuity. </description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/getting-timecode-from-the-device">Getting Timecode from the Device</seealso>
    <seealso cref="IAMTimecodeReader Interface" />
  </member>
  <member name="IAMTimecodeReader.get_VITCLine">
    <summary>
      <para>The <code>get_VITCLine</code> method retrieves the vertical interval line that the timecode reader is using to read timecode.</para>
      <para>This method is not implemented.</para>
    </summary>
    <param name="pLine">
      <para>Pointer to the vertical line containing timecode information (valid lines are from 11 through 20).</para>
    </param>
    <returns>
      <para>Returns E_NOTIMPL.</para>
    </returns>
    <remarks>
      <para>The high bit indicates that multiple lines are used and successive calls will cycle through the line numbers.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMTimecodeReader Interface" />
    <seealso cref="IAMTimecodeReader.put_VITCLine" />
  </member>
  <member name="IAMTimecodeReader.put_VITCLine">
    <summary>
      <para>The <code>put_VITCLine</code> method specifies the vertical interval line that the timecode reader will use to read timecode.</para>
      <para>This method is not implemented.</para>
    </summary>
    <param name="Line">
      <para>Vertical line containing timecode information (valid lines are 11-20; 0 means autoselect).</para>
    </param>
    <returns>
      <para>Returns E_NOTIMPL.</para>
    </returns>
    <remarks>
      <para>If VITC mode is specified in the <see cref="IAMTimecodeReader.SetTCRMode" /> method, you must specify which line or lines will contain timecode information. To read VITC on specific multiple lines, the caller would make successive calls to <code>IAMTimecodeReader.put_VITCLine</code>, once for each line desired.</para>
      <para>Set the high bit to add to the list of lines for readers that test across multiple lines.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMTimecodeReader Interface" />
    <seealso cref="IAMTimecodeReader.get_VITCLine" />
  </member>
  <member name="IAMTimecodeReader.SetTCRMode">
    <summary>
      <para>The <code>SetTCRMode</code> method sets the timecode reader properties.</para>
      <para>This method is not implemented.</para>
    </summary>
    <param name="Param">
      <para>Property you want to set (use ED_TCR_SOURCE or ED_TCR_NOTIFY_ENABLE).</para>
    </param>
    <param name="Value">
      <para>Value of the specified property; If <i>Param</i> returns ED_TCR_NOTIFY_ENABLE, then this value will return OATRUE or OAFALSE. If <i>Param</i> returns ED_TCR_SOURCE, then this value must be one of the following.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Description
</description>
        </listheader>
        <item>
          <description>ED_TCR_CT</description>
          <description>Control Track.</description>
        </item>
        <item>
          <description>ED_TCR_LTC</description>
          <description>Linear Timecode.</description>
        </item>
        <item>
          <description>ED_TCR_VITC</description>
          <description>Vertical Interval Timecode.</description>
        </item>
        <item>
          <description>ED_TCR_LAST_VALUE</description>
          <description>Return last read value.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>Returns E_NOTIMPL.</para>
    </returns>
    <remarks>
      <para>Linear timecode is recorded on an analog audio track as an NRZ bi-phase mark-encoded signal. Each timecode frame is one video frame time in duration.</para>
      <para>Vertical timecode is usually stored in two lines of a video signal's vertical interval, somewhere between 10 and 20.</para>
      <para>Control track is a once-per-frame signal recorded on a special track on a tape. The head and drive servo mechanisms use it to keep everything locked. It is also used to drive the counter on machines without timecode capability, and can optionally be used on machines equipped with a timecode reader.</para>
      <para>Note that ED_TCR_LAST_VALUE is used when implementing timecode notification because the application does not want to initiate another timecode request to the external device. This method is not recommended for frame-accurate applications because of multithreading issues.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/error-and-success-codes">Error and Success Codes</seealso>
    <seealso cref="IAMTimecodeReader Interface" />
    <seealso cref="IAMTimecodeReader.GetTCRMode" />
  </member>
  <member name="IAMTimecodeReader">
    <summary>
      <para>The <b>IAMTimecodeReader</b> interface reads SMPTE or MIDI timecode from an external device. The <a href="https://docs.microsoft.com//windows/desktop/DirectShow/msdv-driver">MSDV</a> and <a href="https://docs.microsoft.com//windows/desktop/DirectShow/mstape-driver">MSTape</a> drivers support this interface for reading timecode from an external DV or MPEG-2 camcorder.</para>
    </summary>
    <remarks>
      <para>For Windows Driver Model (WDM) devices, the <a href="https://docs.microsoft.com//windows/desktop/DirectShow/wdm-video-capture-filter">WDM Video Capture Filter</a> automatically exposes this interface if the WDM driver supports the PROPSETID_TIMECODE_READER property set. For more information, see the <a href="https://docs.microsoft.com//windows-hardware/drivers/gettingstarted/">Windows Driver Kit (WDK)</a> documentation.</para>
      <para>SMPTE timecode is a frame addressing system that identifies video and audio sources, makes automatic track synchronization possible, and provides a container for additional data related to the source material. SMPTE timecode's main purpose is to provide a machine-readable address for video and audio. It is displayed in hh:mm:ss:ff (hours, minutes, seconds, frames) format and is thoroughly defined in ANSI/SMPTE 12-1986.</para>
      <para>Applications generally save timecode in one of two ways. It is either written to the capture file as an additional stream or as a discontinuity table stored in the extended AVI file index. It is commonly used to trigger capture or playback and to create edit decision lists that describes how source material is organized into a finished product.</para>
      <para>If you intend to capture timecode, treat it as a separate stream that has its own media type. It can be consumed by an appropriate file-writing multiplexer filter. However, sometimes there are errors in reading the timecode off the tape because of dropouts and other mechanical tape problems. In such cases, the timecode source filter should simply drop samples and mark the next valid one with the discontinuity property.</para>
      <para>If you intend to use timecodes to trigger capture or playback from a timecoded (or "striped") videotape, the sequence of events goes as follows:</para>
      <list type="number">
        <item>
          <description>Build a capture graph, open a target AVI file, and preallocate disk space if necessary. If the captured material will be appended to an existing AVI file, seek to the end of the file before writing. The capture graph is paused at this point.</description>
        </item>
        <item>
          <description>Search the VCR to the capture start point and note the timecode. You can either enter this value manually into your program, or the application can automatically read it. Automatic reading requires that the graph is running but the stream control interfaces on the file multiplexer's input pins are discarding incoming samples, effectively gating the capture.</description>
        </item>
        <item>
          <description>Cue the VCR to preroll position, usually five seconds before the target point.</description>
        </item>
        <item>
          <description>Start the VCR and the graph. When the trigger point is reached (or the trigger point minus the file writer's preroll), the stream control interfaces release the file multiplexer and it begins streaming media samples to the file writer.</description>
        </item>
        <item>
          <description>You can stop the capture process manually or by setting a duration property on the stream control interface.</description>
        </item>
      </list>
      <para>You must consider discontinuous timecode, both during preroll and during the capture process; it is reasonable to demand that the timecode be continuous and monotonically increasing throughout the preroll and capture start point. This prevents a potentially ambiguous calculation of relative stream times by the <see cref="IMediaSeeking.ConvertTimeFormat" /> method. Also, the timecode need not be the only gating signal for triggered capture. Any time-stamped data stored in the vertical blanking interval, such as Intercast or closed-captioned data (XDS), can be used to start the streaming of video and audio data to disk.</para>
      <h3>Hardware Requirements</h3>
      <para>See the <see cref="IAMExtTransport" /> interface for hardware requirements.</para>
      <h3>Filter Developers</h3>
      <para>Implement this interface on an external device filter when you want to specify how an external device should read SMPTE/MIDI timecode information. Expose the <see cref="IMediaSeeking" /> interface on your filter so that applications can convert timecode to reference time, using the <see cref="IMediaSeeking.ConvertTimeFormat" /> method.</para>
      <para>The external device must be able to read timecode and send it to the computer over its control interface. If this is not the case, you must either have a timecode reader card in your computer, or you can write a software decoder that converts VITC (Vertical Interval Timecode) in captured video frames or LTC (Linear Timecode) captured as an audio signal into DirectShow timecode samples.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/DirectShow/interfaces">Interfaces</seealso>
  </member>
</doc>