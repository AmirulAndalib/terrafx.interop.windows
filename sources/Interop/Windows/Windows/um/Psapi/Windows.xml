<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.EmptyWorkingSet">
    <summary>Removes as many pages as possible from the working set of the specified process.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right and the <b>PROCESS_SET_QUOTA</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32EmptyWorkingSet">
    <summary>Removes as many pages as possible from the working set of the specified process.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right and the <b>PROCESS_SET_QUOTA</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDeviceDrivers">
    <summary>Retrieves the load address for each device driver in the system.</summary>
    <param name="lpImageBase">An array that receives the list of load addresses for the device drivers.</param>
    <param name="cb">The size of the <i>lpImageBase</i> array, in bytes. If the array is not large enough to store the load addresses, the <i>lpcbNeeded</i> parameter receives the required size of the array.</param>
    <param name="lpcbNeeded">The number of bytes returned in the <i>lpImageBase</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32EnumDeviceDrivers">
    <summary>Retrieves the load address for each device driver in the system.</summary>
    <param name="lpImageBase">An array that receives the list of load addresses for the device drivers.</param>
    <param name="cb">The size of the <i>lpImageBase</i> array, in bytes. If the array is not large enough to store the load addresses, the <i>lpcbNeeded</i> parameter receives the required size of the array.</param>
    <param name="lpcbNeeded">The number of bytes returned in the <i>lpImageBase</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumPageFiles">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumPageFilesA">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumPageFilesW">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFiles">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFilesA">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFilesW">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumPageFiles">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumPageFilesA">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumPageFilesW">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFiles">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFilesA">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32EnumPageFilesW">
    <summary>Calls the callback routine for each installed pagefile in the system.</summary>
    <param name="pCallBackRoutine">A pointer to the routine called for each pagefile. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/psapi/nc-psapi-penum_page_file_callbacka">EnumPageFilesProc</a>.</param>
    <param name="pContext">The user-defined data passed to the callback routine.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnumProcesses">
    <summary>Retrieves the process identifier for each process object in the system.</summary>
    <param name="lpidProcess">A pointer to an array that receives the list of process identifiers.</param>
    <param name="cb">The size of the <i>pProcessIds</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes returned in the <i>pProcessIds</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32EnumProcesses">
    <summary>Retrieves the process identifier for each process object in the system.</summary>
    <param name="lpidProcess">A pointer to an array that receives the list of process identifiers.</param>
    <param name="cb">The size of the <i>pProcessIds</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes returned in the <i>pProcessIds</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumProcessModules">
    <summary>
      <para>Retrieves a handle for each module in the specified process.</para>
      <para>To control whether a 64-bit application enumerates 32-bit modules, 64-bit modules, or both types of modules, use the <see cref="EnumProcessModulesEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process.</param>
    <param name="lphModule">An array that receives the list of module handles.</param>
    <param name="cb">The size of the <i>lphModule</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes required to store all module handles in the <i>lphModule</i>array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32EnumProcessModules">
    <summary>
      <para>Retrieves a handle for each module in the specified process.</para>
      <para>To control whether a 64-bit application enumerates 32-bit modules, 64-bit modules, or both types of modules, use the <see cref="EnumProcessModulesEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process.</param>
    <param name="lphModule">An array that receives the list of module handles.</param>
    <param name="cb">The size of the <i>lphModule</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes required to store all module handles in the <i>lphModule</i>array.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumProcessModulesEx">
    <summary>Retrieves a handle for each module in the specified process that meets the specified filter criteria.</summary>
    <param name="hProcess">A handle to the process.</param>
    <param name="lphModule">An array that receives the list of module handles.</param>
    <param name="cb">The size of the <i>lphModule</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes required to store all module handles in the <i>lphModule</i> array.</param>
    <param name="dwFilterFlag">
      <para>The filter criteria. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_32BIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>List the 32-bit modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_64BIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>List the 64-bit modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x03</term>
              </listheader>
            </list>
          </description>
          <description>List all modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>Use the default behavior.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32EnumProcessModulesEx">
    <summary>Retrieves a handle for each module in the specified process that meets the specified filter criteria.</summary>
    <param name="hProcess">A handle to the process.</param>
    <param name="lphModule">An array that receives the list of module handles.</param>
    <param name="cb">The size of the <i>lphModule</i> array, in bytes.</param>
    <param name="lpcbNeeded">The number of bytes required to store all module handles in the <i>lphModule</i> array.</param>
    <param name="dwFilterFlag">
      <para>The filter criteria. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_32BIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>List the 32-bit modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_64BIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>List the 64-bit modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x03</term>
              </listheader>
            </list>
          </description>
          <description>List all modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LIST_MODULES_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>Use the default behavior.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseName">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseNameA">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseNameW">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseName">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseNameA">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseNameW">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpFilename">TBD</param>
    <param name="nSize">
      <para>The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</para>
      <h4>- lpBaseName [out]</h4>
      <para>A pointer to the buffer that receives the base name of the device driver.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseName">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseNameA">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverBaseNameW">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseName">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseNameA">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverBaseNameW">
    <summary>Retrieves the base name of the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver. This value can be retrieved using the<see cref="EnumDeviceDrivers" />function.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the device driver.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileName">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileNameA">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileNameW">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileName">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileNameA">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileNameW">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileName">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileNameA">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDeviceDriverFileNameW">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileName">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileNameA">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetDeviceDriverFileNameW">
    <summary>Retrieves the path available for the specified device driver.</summary>
    <param name="ImageBase">The load address of the device driver.</param>
    <param name="lpFilename">A pointer to the buffer that receives the path to the device driver.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileName">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileNameA">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileNameW">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileName">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileNameA">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileNameW">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileName">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileNameA">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMappedFileNameW">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileName">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileNameA">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetMappedFileNameW">
    <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access rightF. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpv">The address to be verified.</param>
    <param name="lpFilename">A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by <i>lpv</i> belongs.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseName">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseNameA">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseNameW">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseName">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseNameA">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseNameW">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseName">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseNameA">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleBaseNameW">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseName">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseNameA">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleBaseNameW">
    <summary>Retrieves the base name of the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, this function returns the name of the file used to create the calling process.</param>
    <param name="lpBaseName">A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the <i>nSize</i> parameter, the base name is truncated.</param>
    <param name="nSize">The size of the <i>lpBaseName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameEx">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameExA">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameExW">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameEx">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameExA">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameExW">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameEx">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameExA">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleFileNameExW">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameEx">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameExA">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleFileNameExW">
    <summary>Retrieves the fully qualified path for the file containing the specified module.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows 10 and later, Windows Server 2016 and later</b>: If the <i>hModule</i> parameter is NULL, then the handle requires only <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access rights.</para>
      <para>The <b>GetModuleFileNameEx</b> function does not retrieve the path for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <see cref="LoadLibraryEx" />.</para>
    </param>
    <param name="hModule">A handle to the module. If this parameter is NULL, <b>GetModuleFileNameEx</b> returns the path of the executable file of the process specified in <i>hProcess</i>.</param>
    <param name="lpFilename">A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the <i>nSize</i> parameter, the function succeeds but the file name is truncated and null-terminated.</param>
    <param name="nSize">The size of the <i>lpFilename</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetModuleInformation">
    <summary>Retrieves information about the specified module in the<see cref="MODULEINFO" /> structure.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module.</param>
    <param name="lpmodinfo">A pointer to the<see cref="MODULEINFO" /> structure that receives information about the module.</param>
    <param name="cb">The size of the<see cref="MODULEINFO" /> structure, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetModuleInformation">
    <summary>Retrieves information about the specified module in the<see cref="MODULEINFO" /> structure.</summary>
    <param name="hProcess">
      <para>A handle to the process that contains the module.</para>
      <para>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
    </param>
    <param name="hModule">A handle to the module.</param>
    <param name="lpmodinfo">A pointer to the<see cref="MODULEINFO" /> structure that receives information about the module.</param>
    <param name="cb">The size of the<see cref="MODULEINFO" /> structure, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPerformanceInfo">
    <summary>Retrieves the performance values contained in the<see cref="PERFORMANCE_INFORMATION" />structure.</summary>
    <param name="pPerformanceInformation">A pointer to a<see cref="PERFORMANCE_INFORMATION" />structure that receives the performance information.</param>
    <param name="cb">The size of the<see cref="PERFORMANCE_INFORMATION" /> structure, in bytes.</param>
    <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.K32GetPerformanceInfo">
    <summary>Retrieves the performance values contained in the<see cref="PERFORMANCE_INFORMATION" />structure.</summary>
    <param name="pPerformanceInformation">A pointer to a<see cref="PERFORMANCE_INFORMATION" />structure that receives the performance information.</param>
    <param name="cb">The size of the<see cref="PERFORMANCE_INFORMATION" /> structure, in bytes.</param>
    <returns>If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetProcessImageFileName">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessImageFileNameA">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessImageFileNameW">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageFileName">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageNameA">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageNameW">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessImageFileName">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessImageFileNameA">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessImageFileNameW">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageFileName">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageNameA">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessImageNameW">
    <summary>Retrieves the name of the executable file for the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="lpImageFileName">A pointer to a buffer that receives the full path to the executable file.</param>
    <param name="nSize">The size of the <i>lpImageFileName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the length of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessMemoryInfo">
    <summary>Retrieves information about the memory usage of the specified process.</summary>
    <param name="Process">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:</b> The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights.</para>
    </param>
    <param name="ppsmemCounters">A pointer to the<see cref="PROCESS_MEMORY_COUNTERS" /> or <see cref="PROCESS_MEMORY_COUNTERS_EX" /> structure that receives information about the memory usage of the process.</param>
    <param name="cb">The size of the<i>ppsmemCounters</i> structure, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32GetProcessMemoryInfo">
    <summary>Retrieves information about the memory usage of the specified process.</summary>
    <param name="Process">
      <para>A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> or <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:</b> The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and <b>PROCESS_VM_READ</b> access rights.</para>
    </param>
    <param name="ppsmemCounters">A pointer to the<see cref="PROCESS_MEMORY_COUNTERS" /> or <see cref="PROCESS_MEMORY_COUNTERS_EX" /> structure that receives information about the memory usage of the process.</param>
    <param name="cb">The size of the<i>ppsmemCounters</i> structure, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetWsChanges">
    <summary>
      <para>Retrieves information about the pages that have been added to the working set of the specified process since the last time this function or the<see cref="InitializeProcessForWsWatch" /> function was called.</para>
      <para>To retrieve extended information, use the<see cref="GetWsChangesEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b>access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpWatchInfo">A pointer to a user-allocated buffer that receives an array of<see cref="PSAPI_WS_WATCH_INFORMATION" /> structures. The array is terminated with a structure whose <b>FaultingPc</b> member is NULL.</param>
    <param name="cb">The size of the <i>lpWatchInfo</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>
        <see cref="GetLastError" /> returns<b>ERROR_INSUFFICIENT_BUFFER</b> if the <i>lpWatchInfo</i> buffer is not large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger block of memory for the buffer and call again.</para>
    </returns>
  </member>
  <member name="Windows.K32GetWsChanges">
    <summary>
      <para>Retrieves information about the pages that have been added to the working set of the specified process since the last time this function or the<see cref="InitializeProcessForWsWatch" /> function was called.</para>
      <para>To retrieve extended information, use the<see cref="GetWsChangesEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b>access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpWatchInfo">A pointer to a user-allocated buffer that receives an array of<see cref="PSAPI_WS_WATCH_INFORMATION" /> structures. The array is terminated with a structure whose <b>FaultingPc</b> member is NULL.</param>
    <param name="cb">The size of the <i>lpWatchInfo</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>
        <see cref="GetLastError" /> returns<b>ERROR_INSUFFICIENT_BUFFER</b> if the <i>lpWatchInfo</i> buffer is not large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger block of memory for the buffer and call again.</para>
    </returns>
  </member>
  <member name="Windows.GetWsChangesEx">
    <summary>Retrieves extended information about the pages that have been added to the working set of the specified process since the last time this function or the <see cref="InitializeProcessForWsWatch" /> function was called.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpWatchInfoEx">A pointer to a user-allocated buffer that receives an array of<br /><see cref="PSAPI_WS_WATCH_INFORMATION_EX" /> structures. The array is terminated with a structure whose <b>FaultingPc</b> member is NULL.</param>
    <param name="cb">The size of the<i>lpWatchInfoEx</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The <see cref="GetLastError" /> function returns <b>ERROR_INSUFFICIENT_BUFFER</b> if the <i>lpWatchInfoEx</i> buffer is not large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger block of memory for the buffer and call again.</para>
    </returns>
  </member>
  <member name="Windows.K32GetWsChangesEx">
    <summary>Retrieves extended information about the pages that have been added to the working set of the specified process since the last time this function or the <see cref="InitializeProcessForWsWatch" /> function was called.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="lpWatchInfoEx">A pointer to a user-allocated buffer that receives an array of<br /><see cref="PSAPI_WS_WATCH_INFORMATION_EX" /> structures. The array is terminated with a structure whose <b>FaultingPc</b> member is NULL.</param>
    <param name="cb">The size of the<i>lpWatchInfoEx</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call the <see cref="GetLastError" /> function.</para>
      <para>The <see cref="GetLastError" /> function returns <b>ERROR_INSUFFICIENT_BUFFER</b> if the <i>lpWatchInfoEx</i> buffer is not large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger block of memory for the buffer and call again.</para>
    </returns>
  </member>
  <member name="Windows.InitializeProcessForWsWatch">
    <summary>Initiates monitoring of the working set of the specified process. You must call this function before calling the<see cref="GetWsChanges" /> function.</summary>
    <param name="hProcess">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32InitializeProcessForWsWatch">
    <summary>Initiates monitoring of the working set of the specified process. You must call this function before calling the<see cref="GetWsChanges" /> function.</summary>
    <param name="hProcess">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32QueryWorkingSet">
    <summary>
      <para>Retrieves information about the pages currently added to the working set of the specified process.</para>
      <para>To retrieve working set information for a subset of virtual addresses, or to retrieve information about pages that are not part of the working set (such as AWE or large pages), use the<see cref="QueryWorkingSetEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and<b>PROCESS_VM_READ</b> access rights. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="pv">
      <para>A pointer to the buffer that receives the information. For more information, see<see cref="PSAPI_WORKING_SET_INFORMATION" />.</para>
      <para>If the buffer pointed to by the <i>pv</i> parameter is not large enough to contain all working set entries for the target process, the function fails with <b>ERROR_BAD_LENGTH</b>. In this case, the <b>NumberOfEntries</b> member of the<see cref="PSAPI_WORKING_SET_INFORMATION" />structure is set to the required number of entries, but the function does not return information about the working set entries.</para>
    </param>
    <param name="cb">The size of the <i>pv</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.QueryWorkingSet">
    <summary>
      <para>Retrieves information about the pages currently added to the working set of the specified process.</para>
      <para>To retrieve working set information for a subset of virtual addresses, or to retrieve information about pages that are not part of the working set (such as AWE or large pages), use the<see cref="QueryWorkingSetEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> and<b>PROCESS_VM_READ</b> access rights. For more information, see<a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="pv">
      <para>A pointer to the buffer that receives the information. For more information, see<see cref="PSAPI_WORKING_SET_INFORMATION" />.</para>
      <para>If the buffer pointed to by the <i>pv</i> parameter is not large enough to contain all working set entries for the target process, the function fails with <b>ERROR_BAD_LENGTH</b>. In this case, the <b>NumberOfEntries</b> member of the<see cref="PSAPI_WORKING_SET_INFORMATION" />structure is set to the required number of entries, but the function does not return information about the working set entries.</para>
    </param>
    <param name="cb">The size of the <i>pv</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.K32QueryWorkingSetEx">
    <summary>Retrieves extended information about the pages at specific virtual addresses in the address space of the specified process.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="pv">A pointer to an array of <see cref="PSAPI_WORKING_SET_EX_INFORMATION" /> structures. On input, each item in the array specifies a virtual address of interest. On output, each item in the array receives information about the corresponding virtual page.</param>
    <param name="cb">The size of the <i>pv</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.QueryWorkingSetEx">
    <summary>Retrieves extended information about the pages at specific virtual addresses in the address space of the specified process.</summary>
    <param name="hProcess">A handle to the process. The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com//windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</param>
    <param name="pv">A pointer to an array of <see cref="PSAPI_WORKING_SET_EX_INFORMATION" /> structures. On input, each item in the array specifies a virtual address of interest. On output, each item in the array receives information about the corresponding virtual page.</param>
    <param name="cb">The size of the <i>pv</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
</doc>