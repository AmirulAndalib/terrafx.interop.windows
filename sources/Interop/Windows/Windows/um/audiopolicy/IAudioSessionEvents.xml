<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAudioSessionEvents.OnChannelVolumeChanged">
    <summary>
      <para>The <b>OnChannelVolumeChanged</b> method notifies the client that the volume level of an audio channel in the session submix has changed.</para>
    </summary>
    <param name="ChannelCount">
      <para>The channel count. This parameter specifies the number of audio channels in the session submix.</para>
    </param>
    <param name="NewChannelVolumeArray">
      <para>Pointer to an array of volume levels. Each element is a value of type <b>float</b> that specifies the volume level for a particular channel. Each volume level is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume (no attenuation). The number of elements in the array is specified by the <i>ChannelCount</i> parameter. If an audio stream contains <i>n</i> channels, the channels are numbered from 0 to <i>n</i>– 1. The array element whose index matches the channel number, contains the volume level for that channel. Assume that the array remains valid only for the duration of the call.</para>
    </param>
    <param name="ChangedChannel">
      <para>The number of the channel whose volume level changed. Use this value as an index into the <i>NewChannelVolumeArray</i> array. If the session submix contains <i>n</i> channels, the channels are numbered from 0 to <i>n</i>– 1. If more than one channel might have changed (for example, as a result of a call to the <see cref="IChannelAudioVolume.SetAllVolumes" /> method), the value of <i>ChangedChannel</i> is (<b>DWORD</b>)(–1).</para>
    </param>
    <param name="EventContext">
      <para>The event context value. This is the same value that the caller passed to the <see cref="IChannelAudioVolume.SetChannelVolume" /> or <b>IChannelAudioVolume.SetAllVolumes</b> method in the call that initiated the change in volume level of the channel. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The session manager calls this method each time a call to the <b>IChannelAudioVolume.SetChannelVolume</b> or <b>IChannelAudioVolume.SetAllVolumes</b> method successfully updates the volume level of one or more channels in the session submix. Note that the <b>OnChannelVolumeChanged</b> call occurs regardless of whether the new channel volume level or levels differ in value from the previous channel volume level or levels.</para>
      <para>The <i>EventContext</i> parameter provides a means for a client to distinguish between a channel-volume change that it initiated and one that some other client initiated. When calling the <b>IChannelAudioVolume.SetChannelVolume</b> or <b>IChannelAudioVolume.SetAllVolumes</b> method, a client passes in an <i>EventContext</i> parameter value that its implementation of the <b>OnChannelVolumeChanged</b> method can recognize.</para>
      <para>For a code example that implements the methods in the <b>IAudioSessionEvents</b> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionEvents Interface" />
    <seealso cref="IChannelAudioVolume.SetAllVolumes" />
    <seealso cref="IChannelAudioVolume.SetChannelVolume" />
  </member>
  <member name="IAudioSessionEvents.OnDisplayNameChanged">
    <summary>
      <para>The <b>OnDisplayNameChanged</b> method notifies the client that the display name for the session has changed.</para>
    </summary>
    <param name="NewDisplayName">
      <para>The new display name for the session. This parameter points to a null-terminated, wide-character string containing the new display name. The string remains valid for the duration of the call.</para>
    </param>
    <param name="EventContext">
      <para>The event context value. This is the same value that the caller passed to <see cref="IAudioSessionControl.SetDisplayName" /> in the call that changed the display name for the session. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The session manager calls this method each time a call to the <see cref="IAudioSessionControl.SetDisplayName" /> method changes the display name of the session. The Sndvol program uses a session's display name to label the volume slider for the session.</para>
      <para>The <i>EventContext</i> parameter provides a means for a client to distinguish between a display-name change that it initiated and one that some other client initiated. When calling the <see cref="IAudioSessionControl.SetDisplayName" /> method, a client passes in an <i>EventContext</i> parameter value that its implementation of the <b>OnDisplayNameChanged</b> method can recognize.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionControl.SetDisplayName" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionEvents.OnGroupingParamChanged">
    <summary>
      <para>The <b>OnGroupingParamChanged</b> method notifies the client that the grouping parameter for the session has changed.</para>
    </summary>
    <param name="NewGroupingParam">
      <para>The new grouping parameter for the session. This parameter points to a grouping-parameter GUID.</para>
    </param>
    <param name="EventContext">
      <para>The event context value. This is the same value that the caller passed to <see cref="IAudioSessionControl.SetGroupingParam" /> in the call that changed the grouping parameter for the session. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The session manager calls this method each time a call to the <see cref="IAudioSessionControl.SetGroupingParam" /> method changes the grouping parameter for the session.</para>
      <para>The <i>EventContext</i> parameter provides a means for a client to distinguish between a grouping-parameter change that it initiated and one that some other client initiated. When calling the <see cref="IAudioSessionControl.SetGroupingParam" /> method, a client passes in an <i>EventContext</i> parameter value that its implementation of the <b>OnGroupingParamChanged</b> method can recognize.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionControl.SetGroupingParam" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionEvents.OnIconPathChanged">
    <summary>
      <para>The <b>OnIconPathChanged</b> method notifies the client that the display icon for the session has changed.</para>
    </summary>
    <param name="NewIconPath">
      <para>The path for the new display icon for the session. This parameter points to a string that contains the path for the new icon. The string pointer remains valid only for the duration of the call.</para>
    </param>
    <param name="EventContext">
      <para>The event context value. This is the same value that the caller passed to <see cref="IAudioSessionControl.SetIconPath" /> in the call that changed the display icon for the session. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The session manager calls this method each time a call to the <see cref="IAudioSessionControl.SetIconPath" /> method changes the display icon for the session. The Sndvol program uses a session's display icon to label the volume slider for the session.</para>
      <para>The <i>EventContext</i> parameter provides a means for a client to distinguish between a display-icon change that it initiated and one that some other client initiated. When calling the <see cref="IAudioSessionControl.SetIconPath" /> method, a client passes in an <i>EventContext</i> parameter value that its implementation of the <b>OnIconPathChanged</b> method can recognize.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionControl.SetIconPath" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionEvents.OnSessionDisconnected">
    <summary>
      <para>The <b>OnSessionDisconnected</b> method notifies the client that the audio session has been disconnected.</para>
    </summary>
    <param name="DisconnectReason">
      <para>The reason that the audio session was disconnected. The caller sets this parameter to one of the <b>AudioSessionDisconnectReason</b> enumeration values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value
</description>
          <description>Description
</description>
        </listheader>
        <item>
          <description>DisconnectReasonDeviceRemoval</description>
          <description>The user removed the audio endpoint device.</description>
        </item>
        <item>
          <description>DisconnectReasonServerShutdown</description>
          <description>The Windows audio service has stopped.</description>
        </item>
        <item>
          <description>DisconnectReasonFormatChanged</description>
          <description>The stream format changed for the device that the audio session is connected to.</description>
        </item>
        <item>
          <description>DisconnectReasonSessionLogoff</description>
          <description>The user logged off the Windows Terminal Services (WTS) session that the audio session was running in.</description>
        </item>
        <item>
          <description>DisconnectReasonSessionDisconnected</description>
          <description>The WTS session that the audio session was running in was disconnected.</description>
        </item>
        <item>
          <description>DisconnectReasonExclusiveModeOverride</description>
          <description>The (shared-mode) audio session was disconnected to make the audio endpoint device available for an exclusive-mode connection.</description>
        </item>
      </list>
      <para>For more information about WTS sessions, see the Windows SDK documentation.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>When disconnecting a session, the session manager closes the streams that belong to that session and invalidates all outstanding requests for services on those streams. The client should respond to a disconnection by releasing all of its references to the <see cref="IAudioClient" /> interface for a closed stream and releasing all references to the service interfaces that it obtained previously through calls to the <see cref="IAudioClient.GetService" /> method.</para>
      <para>Following disconnection, many of the methods in the WASAPI interfaces that are tied to closed streams in the disconnected session return error code AUDCLNT_E_DEVICE_INVALIDATED (for example, see <see cref="IAudioClient.GetCurrentPadding" />). For information about recovering from this error, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/recovering-from-an-invalid-device-error">Recovering from an Invalid-Device Error</a>.</para>
      <para>If the Windows audio service terminates unexpectedly, it does not have an opportunity to notify clients that it is shutting down. In that case, clients learn that the service has stopped when they call a method such as <see cref="IAudioClient.GetCurrentPadding" /> that discovers that the service is no longer running and fails with error code AUDCLNT_E_SERVICE_NOT_RUNNING.</para>
      <para>A client cannot generate a session-disconnected event. The system is always the source of this type of event. Thus, unlike some other <see cref="IAudioSessionEvents" /> methods, this method does not have a context parameter.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioClient Interface" />
    <seealso cref="IAudioClient.GetService" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionEvents.OnSimpleVolumeChanged">
    <summary>
      <para>The <b>OnSimpleVolumeChanged</b> method notifies the client that the volume level or muting state of the audio session has changed.</para>
    </summary>
    <param name="NewVolume">
      <para>The new volume level for the audio session. This parameter is a value in the range 0.0 to 1.0, where 0.0 is silence and 1.0 is full volume (no attenuation).</para>
    </param>
    <param name="NewMute">
      <para>The new muting state. If <b>TRUE</b>, muting is enabled. If <b>FALSE</b>, muting is disabled.</para>
    </param>
    <param name="EventContext">
      <para>The event context value. This is the same value that the caller passed to <see cref="ISimpleAudioVolume.SetMasterVolume" /> or <see cref="ISimpleAudioVolume.SetMute" /> in the call that changed the volume level or muting state of the session. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>The session manager calls this method each time a call to the <see cref="ISimpleAudioVolume.SetMasterVolume" /> or <see cref="ISimpleAudioVolume.SetMute" /> method changes the volume level or muting state of the session.</para>
      <para>The <i>EventContext</i> parameter provides a means for a client to distinguish between a volume or mute change that it initiated and one that some other client initiated. When calling the <see cref="ISimpleAudioVolume.SetMasterVolume" /> or <see cref="ISimpleAudioVolume.SetMute" /> method, a client passes in an <i>EventContext</i> parameter value that its implementation of the <b>OnSimpleVolumeChanged</b> method can recognize.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionEvents Interface" />
    <seealso cref="ISimpleAudioVolume.SetMasterVolume" />
    <seealso cref="ISimpleAudioVolume.SetMute" />
  </member>
  <member name="IAudioSessionEvents.OnStateChanged">
    <summary>
      <para>The <b>OnStateChanged</b> method notifies the client that the stream-activity state of the session has changed.</para>
    </summary>
    <param name="NewState">
      <para>The new session state. The value of this parameter is one of the following <see cref="AudioSessionState" /> enumeration values:</para>
      <para>AudioSessionStateActive</para>
      <para>AudioSessionStateInactive</para>
      <para>AudioSessionStateExpired</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</para>
    </returns>
    <remarks>
      <para>A client cannot generate a session-state-change event. The system is always the source of this type of event. Thus, unlike some other <see cref="IAudioSessionEvents" /> methods, this method does not supply a context parameter.</para>
      <para>The system changes the state of a session from inactive to active at the time that a client opens the first stream in the session. A client opens a stream by calling the <see cref="IAudioClient.Initialize" /> method. The system changes the session state from active to inactive at the time that a client closes the last stream in the session. The client that releases the last reference to an <see cref="IAudioClient" /> object closes the stream that is associated with the object.</para>
      <para>For a code example that implements the methods in the <see cref="IAudioSessionEvents" /> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>.</para>
    </remarks>
    <seealso cref="IAudioClient Interface" />
    <seealso cref="IAudioClient.Initialize" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionEvents">
    <summary>
      <para>The <b>IAudioSessionEvents</b> interface provides notifications of session-related events such as changes in the volume level, display name, and session state. Unlike the other interfaces in this section, which are implemented by the WASAPI system component, a WASAPI client implements the <b>IAudioSessionEvents</b> interface. To receive event notifications, the client passes a pointer to its <b>IAudioSessionEvents</b> interface to the <see cref="IAudioSessionControl.RegisterAudioSessionNotification" /> method.</para>
      <para>After registering its <b>IAudioClientSessionEvents</b> interface, the client receives event notifications in the form of callbacks through the methods in the interface.</para>
      <para>In implementing the <b>IAudioSessionEvents</b> interface, the client should observe these rules to avoid deadlocks and undefined behavior:</para>
      <list type="bullet">
        <item>
          <description>The methods in the interface must be nonblocking. The client should never wait on a synchronization object during an event callback.</description>
        </item>
        <item>
          <description>The client should never call the <see cref="IAudioSessionControl.UnregisterAudioSessionNotification" /> method during an event callback.</description>
        </item>
        <item>
          <description>The client should never release the final reference on a WASAPI object during an event callback.</description>
        </item>
      </list>
      <para>For a code example that implements an <b>IAudioSessionEvents</b> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-session-events">Audio Session Events</a>. For a code example that registers a client's <b>IAudioSessionEvents</b> interface to receive notifications, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-events-for-legacy-audio-applications">Audio Events for Legacy Audio Applications</a>.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/core-audio-interfaces">Core Audio Interfaces</seealso>
    <seealso cref="IAudioSessionControl.RegisterAudioSessionNotification" />
    <seealso cref="IAudioSessionControl.UnregisterAudioSessionNotification" />
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/wasapi">WASAPI</seealso>
  </member>
</doc>