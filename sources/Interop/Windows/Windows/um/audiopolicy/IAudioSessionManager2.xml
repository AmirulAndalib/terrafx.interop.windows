<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAudioSessionManager2.GetSessionEnumerator">
    <summary>The <b>GetSessionEnumerator</b> method gets a pointer to the audio session enumerator object.</summary>
    <param name="SessionEnum">Receives a pointer to the <see cref="IAudioSessionEnumerator" /> interface of the session enumerator object that the client can use to enumerate audio sessions on the audio device. Through this method, the caller obtains a counted reference to the interface. The caller is responsible for releasing the interface, when it is no longer needed, by calling the interface's <b>Release</b> method.</param>
    <returns>If the method succeeds, it returns S_OK.</returns>
  </member>
  <member name="IAudioSessionManager2.RegisterDuckNotification">
    <summary>The <b>RegisterDuckNotification</b> method registers the application with the session manager to receive ducking notifications.</summary>
    <param name="sessionID">
      <para>Pointer to a null-terminated string that contains a session instance identifier. Applications that are playing a media stream and want to provide custom stream attenuation or ducking behavior, pass their own session instance identifier. For more information, see Remarks.</para>
      <para>Other applications that do not want to alter their streams but want to get all the ducking notifications must pass <b>NULL</b>.</para>
    </param>
    <param name="duckNotification">Pointer to the application's implementation of the <see cref="IAudioVolumeDuckNotification" /> interface. The implementation is called when ducking events are raised by the audio system and notifications are sent to the registered applications.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_POINTER</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>duckNotification</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_OUTOFMEMORY</term>
              </listheader>
            </list>
          </description>
          <description>Internal object could not be created due to insufficient memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IAudioSessionManager2.RegisterSessionNotification">
    <summary>The <b>RegisterSessionNotification</b> method registers the application to receive a notification when a session is created.</summary>
    <param name="SessionNotification">A pointer to the application's implementation of the <see cref="IAudioSessionNotification" /> interface. If the method call succeeds, it calls the <b>AddRef</b> method on the application's <b>IAudioSessionNotification</b> interface.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_POINTER</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>SessionNotification</i> is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_OUTOFMEMORY</term>
              </listheader>
            </list>
          </description>
          <description>Internal object could not be created due to insufficient memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IAudioSessionManager2.UnregisterDuckNotification">
    <summary>The <b>UnregisterDuckNotification</b> method deletes a previous registration by the application to receive notifications.</summary>
    <param name="duckNotification">Pointer to the <see cref="IAudioVolumeDuckNotification" /> interface that is implemented by the application. Pass the same interface pointer that was specified to the session manager in a previous call to the <see cref="IAudioSessionManager2.RegisterDuckNotification" /> method. If the <b>UnregisterDuckNotification</b> method succeeds, it calls the <b>Release</b> method on the application's <b>IAudioVolumeDuckNotification</b> interface.</param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_POINTER</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>duckNotification</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IAudioSessionManager2.UnregisterSessionNotification">
    <summary>The <b>UnregisterSessionNotification</b> method deletes the registration to receive a notification when a session is created.</summary>
    <param name="SessionNotification">
      <para>A pointer to the application's implementation of the <see cref="IAudioSessionNotification" /> interface. Pass the same interface pointer that was specified to the session manager in a previous call to <see cref="IAudioSessionManager2.RegisterSessionNotification" /> to register for notification.</para>
      <para>If the <b>UnregisterSessionNotification</b> method succeeds, it calls the <b>Release</b> method on the application's <see cref="IAudioSessionNotification" /> interface.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_POINTER</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>SessionNotification</i> is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>