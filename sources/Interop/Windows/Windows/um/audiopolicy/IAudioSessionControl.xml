<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAudioSessionControl.GetDisplayName">
    <summary>
      <para>The <b>GetDisplayName</b> method retrieves the display name for the audio session.</para>
    </summary>
    <param name="pRetVal">
      <para>Pointer to a pointer variable into which the method writes the address of a null-terminated, wide-character string that contains the display name. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the <see cref="CoTaskMemFree" /> function. For information about <b>CoTaskMemFree</b>, see the Windows SDK documentation.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>pRetVal</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the client has not called <see cref="IAudioSessionControl.SetDisplayName" /> to set the display name, the string will be empty. Rather than display an empty name string, the Sndvol program uses a default, automatically generated name to label the volume control for the audio session.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.SetDisplayName" />
  </member>
  <member name="IAudioSessionControl.GetGroupingParam">
    <summary>
      <para>The <b>GetGroupingParam</b> method retrieves the grouping parameter of the audio session.</para>
    </summary>
    <param name="pRetVal">
      <para>Output pointer for the grouping-parameter GUID. This parameter must be a valid, non-<b>NULL</b> pointer to a caller-allocated GUID variable. The method writes the grouping parameter into this variable.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>pRetVal</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>All of the audio sessions that have the same grouping parameter value are under the control of the same volume-level slider in the system volume-control program, Sndvol. For more information, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/grouping-parameters">Grouping Parameters</a>.</para>
      <para>A client can call the <see cref="IAudioSessionControl.SetGroupingParam" /> method to change the grouping parameter of a session.</para>
      <para>If a client has never called <see cref="SetGroupingParam" /> to assign a grouping parameter to an audio session, the session's grouping parameter value is GUID_NULL by default and a call to <b>GetGroupingParam</b> retrieves this value. A grouping parameter value of GUID_NULL indicates that the session does not belong to any grouping. In that case, the session has its own volume-level slider in the Sndvol program.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.SetGroupingParam" />
  </member>
  <member name="IAudioSessionControl.GetIconPath">
    <summary>
      <para>The <b>GetIconPath</b> method retrieves the path for the display icon for the audio session.</para>
    </summary>
    <param name="pRetVal">
      <para>Pointer to a pointer variable into which the method writes the address of a null-terminated, wide-character string that specifies the fully qualified path of an .ico, .dll, or .exe file that contains the icon. The method allocates the storage for the string. The caller is responsible for freeing the storage, when it is no longer needed, by calling the <see cref="CoTaskMemFree" /> function. For information about icon paths and <b>CoTaskMemFree</b>, see the Windows SDK documentation.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>pRetVal</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a client has not called <see cref="IAudioSessionControl.SetIconPath" /> to set the display icon, the string will be empty. If no client-specified icon is available, the Sndvol program uses the icon from the client's application window to label the volume control for the audio session.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.SetIconPath" />
  </member>
  <member name="IAudioSessionControl.GetState">
    <summary>
      <para>The <b>GetState</b> method retrieves the current state of the audio session.</para>
    </summary>
    <param name="pRetVal">
      <para>Pointer to a variable into which the method writes the current session state. The state must be one of the following <see cref="AudioSessionState" /> enumeration values:</para>
      <para>AudioSessionStateActive</para>
      <para>AudioSessionStateInactive</para>
      <para>AudioSessionStateExpired</para>
      <para>These values indicate that the session state is active, inactive, or expired, respectively. For more information, see Remarks.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>pRetVal</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method indicates whether the state of the session is active, inactive, or expired. The state is active if the session has one or more streams that are running. The state changes from active to inactive when the last running stream in the session stops. The session state changes to expired when the client destroys the last stream in the session by releasing all references to the stream object.</para>
      <para>The Sndvol program displays volume and mute controls for sessions that are in the active and inactive states. When a session expires, Sndvol stops displaying the controls for that session. If a session has previously expired, but the session state changes to active (because a stream in the session begins running) or inactive (because a client assigns a new stream to the session), Sndvol resumes displaying the controls for the session.</para>
      <para>The client creates a stream by calling the <see cref="IAudioClient.Initialize" /> method. At the time that it creates a stream, the client assigns the stream to a session. A session begins when a client assigns the first stream to the session. Initially, the session is in the inactive state. The session state changes to active when the first stream in the session begins running. The session terminates when a client releases the final reference to the last remaining stream object in the session.</para>
    </remarks>
    <seealso cref="IAudioClient.Initialize" />
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IMMDevice.Activate" />
  </member>
  <member name="IAudioSessionControl.RegisterAudioSessionNotification">
    <summary>
      <para>The <b>RegisterAudioSessionNotification</b> method registers the client to receive notifications of session events, including changes in the stream state.</para>
    </summary>
    <param name="NewNotifications">
      <para>Pointer to a client-implemented <see cref="IAudioSessionEvents" /> interface. If the method succeeds, it calls the <see cref="AddRef" /> method on the client's <b>IAudioSessionEvents</b> interface.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>NewNotifications</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method passes a client-implemented <see cref="IAudioSessionEvents" /> interface to the session manager. Following a successful call to this method, the session manager calls the methods in the <b>IAudioSessionEvents</b> interface to notify the client of various session events. Through these methods, the client receives notifications of the following session-related events:</para>
      <list type="bullet">
        <item>
          <description>Display name changes</description>
        </item>
        <item>
          <description>Volume level changes</description>
        </item>
        <item>
          <description>Session state changes (inactive to active, or active to inactive)</description>
        </item>
        <item>
          <description>Grouping parameter changes</description>
        </item>
        <item>
          <description>Disconnection of the client from the session (caused by the user removing the audio endpoint device, shutting down the session manager, or changing the stream format)</description>
        </item>
      </list>
      <para>When notifications are no longer needed, the client can call the <see cref="IAudioSessionControl.UnregisterAudioSessionNotification" /> method to terminate the notifications.</para>
      <para>Before the client releases its final reference to the <see cref="IAudioSessionEvents" /> interface, it should call <see cref="UnregisterAudioSessionNotification" /> to unregister the interface. Otherwise, the application leaks the resources held by the <b>IAudioSessionEvents</b> and <see cref="IAudioSessionControl" /> objects. Note that <b>RegisterAudioSessionNotification</b> calls the client's <see cref="IAudioSessionEvents.AddRef" /> method, and <b>UnregisterAudioSessionNotification</b> calls the <see cref="IAudioSessionEvents.Release" /> method. If the client errs by releasing its reference to the <b>IAudioSessionEvents</b> interface before calling <b>UnregisterAudioSessionNotification</b>, the session manager never releases its reference to the <b>IAudioSessionEvents</b> interface. For example, a poorly designed <b>IAudioSessionEvents</b> implementation might call <b>UnregisterAudioSessionNotification</b> from the destructor for the <b>IAudioSessionEvents</b> object. In this case, the client will not call <b>UnregisterAudioSessionNotification</b> until the session manager releases its reference to the <b>IAudioSessionEvents</b> interface, and the session manager will not release its reference to the <b>IAudioSessionEvents</b> interface until the client calls <b>UnregisterAudioSessionNotification</b>. For more information about the <b>AddRef</b> and <b>Release</b> methods, see the discussion of the <see cref="IUnknown" /> interface in the Windows SDK documentation.</para>
      <para>In addition, the client should call <see cref="UnregisterAudioSessionNotification" /> before releasing all of its references to the <see cref="IAudioSessionControl" /> and <see cref="IAudioSessionManager" /> objects. Unless the client retains a reference to at least one of these two objects, the session manager leaks the storage that it allocated to hold the registration information. After registering a notification interface, the client continues to receive notifications for only as long as at least one of these two objects exists.</para>
      <para>For a code example that calls the <b>RegisterAudioSessionNotification</b> method, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-events-for-legacy-audio-applications">Audio Events for Legacy Audio Applications</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.UnregisterAudioSessionNotification" />
    <seealso cref="IAudioSessionEvents Interface" />
    <seealso cref="IAudioSessionManager" />
  </member>
  <member name="IAudioSessionControl.SetDisplayName">
    <summary>
      <para>The <b>SetDisplayName</b> method assigns a display name to the current session.</para>
    </summary>
    <param name="Value">
      <para>Pointer to a null-terminated, wide-character string that contains the display name for the session.</para>
    </param>
    <param name="EventContext">
      <para>Pointer to the event-context GUID. If a call to this method generates a name-change event, the session manager sends notifications to all clients that have registered <see cref="IAudioSessionEvents" /> interfaces with the session manager. The session manager includes the <i>EventContext</i> pointer value with each notification. Upon receiving a notification, a client can determine whether it or another client is the source of the event by inspecting the <i>EventContext</i> value. This scheme depends on the client selecting a value for this parameter that is unique among all clients in the session. If the caller supplies a <b>NULL</b> pointer for this parameter, the client's notification method receives a <b>NULL</b> context pointer.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>Value</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>In Windows Vista, the system-supplied program, Sndvol.exe, uses the display name to label the volume control for the session. If the client does not call <b>SetDisplayName</b> to assign a display name to the session, the Sndvol program uses a default, automatically generated name to label the session. The default name incorporates information such as the window title or version resource of the audio application.</para>
      <para>If a client has more than one active session, client-specified display names are especially helpful for distinguishing among the volume controls for the various sessions.</para>
      <para>In the case of a cross-process session, the session has no identifying information, such as an application name or process ID, from which to generate a default display name. Thus, the client must call <b>SetDisplayName</b> to avoid displaying a meaningless default display name.</para>
      <para>The display name does not persist beyond the lifetime of the <see cref="IAudioSessionControl" /> object. Thus, after all references to the object are released, a subsequently created version of the object (with the same application, same session GUID, and same endpoint device) will once again have a default, automatically generated display name until the client calls <b>SetDisplayName</b>.</para>
      <para>The client can retrieve the display name for the session by calling the <see cref="IAudioSessionControl.GetDisplayName" /> method.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.GetDisplayName" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionControl.SetGroupingParam">
    <summary>
      <para>The <b>SetGroupingParam</b> method assigns a session to a grouping of sessions.</para>
    </summary>
    <param name="Override">
      <para>The new grouping parameter. This parameter must be a valid, non-<b>NULL</b> pointer to a grouping-parameter GUID. For more information, see Remarks.</para>
    </param>
    <param name="EventContext">
      <para>Pointer to the event-context GUID. If a call to this method generates a grouping-change event, the session manager sends notifications to all clients that have registered <see cref="IAudioSessionEvents" /> interfaces with the session manager. The session manager includes the <i>EventContext</i> pointer value with each notification. Upon receiving a notification, a client can determine whether it or another client is the source of the event by inspecting the <i>EventContext</i> value. This scheme depends on the client selecting a value for this parameter that is unique among all clients in the session. If the caller supplies a <b>NULL</b> pointer for this parameter, the client's notification method receives a <b>NULL</b> context pointer.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>Grouping</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A client calls this method to change the grouping parameter of a session. All of the audio sessions that have the same grouping parameter value are under the control of the same volume-level slider in the system volume-control program, Sndvol. For more information, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/grouping-parameters">Grouping Parameters</a>.</para>
      <para>The client can get the current grouping parameter for the session by calling the <see cref="IAudioSessionControl.GetGroupingParam" /> method.</para>
      <para>If a client has never called <b>SetGroupingParam</b> to assign a grouping parameter to a session, the session does not belong to any grouping. A session that does not belong to any grouping has its own, dedicated volume-level slider in the Sndvol program.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.GetGroupingParam" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionControl.SetIconPath">
    <summary>
      <para>The <b>SetIconPath</b> method assigns a display icon to the current session.</para>
    </summary>
    <param name="Value">
      <para>Pointer to a null-terminated, wide-character string that specifies the path and file name of an .ico, .dll, or .exe file that contains the icon. For information about icon paths, see the Windows SDK documentation.</para>
    </param>
    <param name="EventContext">
      <para>Pointer to the event-context GUID. If a call to this method generates an icon-change event, the session manager sends notifications to all clients that have registered <see cref="IAudioSessionEvents" /> interfaces with the session manager. The session manager includes the <i>EventContext</i> pointer value with each notification. Upon receiving a notification, a client can determine whether it or another client is the source of the event by inspecting the <i>EventContext</i> value. This scheme depends on the client selecting a value for this parameter that is unique among all clients in the session. If the caller supplies a <b>NULL</b> pointer for this parameter, the client's notification method receives a <b>NULL</b> context pointer.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>Value</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_DEVICE_INVALIDATED</b>
            </para>
          </description>
          <description>
            <para>The audio endpoint device has been unplugged, or the audio hardware or associated hardware resources have been reconfigured, disabled, removed, or otherwise made unavailable for use.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>AUDCLNT_E_SERVICE_NOT_RUNNING</b>
            </para>
          </description>
          <description>
            <para>The Windows audio service is not running.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>In Windows Vista, the system-supplied program, Sndvol.exe, uses the display icon (along with the display name) to label the volume control for the session. If the client does not call <b>SetIconPath</b> to assign an icon to the session, the Sndvol program uses the icon from the application window as the default icon for the session.</para>
      <para>In the case of a cross-process session, the session is not associated with a single application process. Thus, Sndvol has no application-specific icon to use by default, and the client must call <b>SetIconPath</b> to avoid displaying a meaningless icon.</para>
      <para>The display icon does not persist beyond the lifetime of the <see cref="IAudioSessionControl" /> object. Thus, after all references to the object are released, a subsequently created version of the object (with the same application, same session GUID, and same endpoint device) will once again have a default icon until the client calls <b>SetIconPath</b>.</para>
      <para>The client can retrieve the display icon for the session by calling the <see cref="IAudioSessionControl.GetIconPath" /> method.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.GetIconPath" />
  </member>
  <member name="IAudioSessionControl.UnregisterAudioSessionNotification">
    <summary>
      <para>The <b>UnregisterAudioSessionNotification</b> method deletes a previous registration by the client to receive notifications.</para>
    </summary>
    <param name="NewNotifications">
      <para>Pointer to a client-implemented <see cref="IAudioSessionEvents" /> interface. The client passed this same interface pointer to the session manager in a previous call to the <see cref="IAudioSessionControl.RegisterAudioSessionNotification" /> method. If the <b>UnregisterAudioSessionNotification</b> method succeeds, it calls the <see cref="Release" /> method on the client's <b>IAudioSessionEvents</b> interface.</para>
    </param>
    <returns>
      <para>If the method succeeds, it returns S_OK. If it fails, possible return codes include, but are not limited to, the values shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_POINTER</b>
            </para>
          </description>
          <description>
            <para>Parameter <i>NewNotifications</i> is <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTFOUND</b>
            </para>
          </description>
          <description>
            <para>The specified interface was not previously registered by the client or has already been removed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The client calls this method when it no longer needs to receive notifications. The <b>UnregisterAudioSessionNotification</b> method removes the registration of an <see cref="IAudioSessionEvents" /> interface that the client previously registered with the session manager by calling the <see cref="IAudioSessionControl.RegisterAudioSessionNotification" /> method.</para>
      <para>Before the client releases its final reference to the <see cref="IAudioSessionEvents" /> interface, it should call <b>UnregisterAudioSessionNotification</b> to unregister the interface. Otherwise, the application leaks the resources held by the <b>IAudioSessionEvents</b> and <see cref="IAudioSessionControl" /> objects. Note that <see cref="RegisterAudioSessionNotification" /> calls the client's <see cref="IAudioSessionEvents.AddRef" /> method, and <b>UnregisterAudioSessionNotification</b> calls the <see cref="IAudioSessionEvents.Release" /> method. If the client errs by releasing its reference to the <b>IAudioSessionEvents</b> interface before calling <b>UnregisterAudioSessionNotification</b>, the session manager never releases its reference to the <b>IAudioSessionEvents</b> interface. For example, a poorly designed <b>IAudioSessionEvents</b> implementation might call <b>UnregisterAudioSessionNotification</b> from the destructor for the <b>IAudioSessionEvents</b> object. In this case, the client will not call <b>UnregisterAudioSessionNotification</b> until the session manager releases its reference to the <b>IAudioSessionEvents</b> interface, and the session manager will not release its reference to the <b>IAudioSessionEvents</b> interface until the client calls <b>UnregisterAudioSessionNotification</b>. For more information about the <b>AddRef</b> and <b>Release</b> methods, see the discussion of the <see cref="IUnknown" /> interface in the Windows SDK documentation.</para>
      <para>For a code example that calls the <b>UnregisterAudioSessionNotification</b> method, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-events-for-legacy-audio-applications">Audio Events for Legacy Audio Applications</a>.</para>
    </remarks>
    <seealso cref="IAudioSessionControl Interface" />
    <seealso cref="IAudioSessionControl.RegisterAudioSessionNotification" />
    <seealso cref="IAudioSessionEvents Interface" />
  </member>
  <member name="IAudioSessionControl">
    <summary>
      <para>The <b>IAudioSessionControl</b> interface enables a client to configure the control parameters for an <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-sessions">audio session</a> and to monitor events in the session. The <see cref="IAudioClient.Initialize" /> method initializes a stream object and assigns the stream to an audio session. The client obtains a reference to the <b>IAudioSessionControl</b> interface on a stream object by calling the <see cref="IAudioClient.GetService" /> method with parameter <i>riid</i> set to <b>REFIID</b> IID_IAudioSessionControl.</para>
      <para>Alternatively, a client can obtain the <b>IAudioSessionControl</b> interface of an existing session without having to first create a stream object and add the stream to the session. Instead, the client calls the <see cref="IAudioSessionManager.GetAudioSessionControl" /> method with parameter <i>AudioSessionGuid</i> set to the session GUID.</para>
      <para>The client can register to receive notification from the session manager when clients change session parameters through the methods in the <b>IAudioSessionControl</b> interface.</para>
      <para>When releasing an <b>IAudioSessionControl</b> interface instance, the client must call the interface's <b>Release</b> method from the same thread as the call to <b>IAudioClient.GetService</b> that created the object.</para>
      <para>The <b>IAudioSessionControl</b> interface controls an audio session. An audio session is a collection of shared-mode streams. This interface does not work with exclusive-mode streams.</para>
      <para>For a code example that uses the <b>IAudioSessionControl</b> interface, see <a href="https://docs.microsoft.com//windows/desktop/CoreAudio/audio-events-for-legacy-audio-applications">Audio Events for Legacy Audio Applications</a>.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/core-audio-interfaces">Core Audio Interfaces</seealso>
    <seealso cref="IAudioClient.GetService" />
    <seealso cref="IAudioClient.Initialize" />
    <seealso cref="IAudioSessionManager.GetAudioSessionControl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/CoreAudio/wasapi">WASAPI</seealso>
  </member>
</doc>