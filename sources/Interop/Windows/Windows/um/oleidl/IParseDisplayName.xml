<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IParseDisplayName.ParseDisplayName">
    <summary>Parses the specified display name and creates a corresponding moniker.</summary>
    <param name="pbc">A pointer to the bind context to be used in this binding operation. See <see cref="IBindCtx" />.</param>
    <param name="pszDisplayName">The display name to be parsed.</param>
    <param name="pchEaten">A pointer to a variable that receives the number of characters in the display name that correspond to the <i>ppmkOut</i> moniker.</param>
    <param name="ppmkOut">A pointer to an <see cref="IMoniker" /> pointer variable that receives the interface pointer to the resulting moniker. If an error occurs, the implementation sets *<i>ppmkOut</i> to <b>NULL</b>. If *<i>ppmkOut</i> is non-<b>NULL</b>, the implementation must call <see cref="AddRef" />; it is the caller's responsibility to call <see cref="Release" />.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_SYNTAX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is a syntax error in the display name. Parsing failed because <i>pszDisplayName</i> could only be partially resolved into a moniker. In this case, *<i>pchEaten</i> has the number of characters that were successfully parsed into a moniker prefix. The parameter <i>ppmkOut</i> should be <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOOBJECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display name does not identify a component in this namespace.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more parameters are not valid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IParseDisplayName">
    <summary>
      <para>Parses a displayable name string to convert it into a moniker for custom moniker implementations.</para>
      <para>Display name parsing is necessary when the end user inputs a string to identify a component, as in the following situations:</para>
      <list type="bullet">
        <item>
          <description>A compound document application that supports linked components typically supports the <b>Edit:Links...</b> dialog box. Through this dialog box, the end user can enter a display name to specify a new link source for a specified linked component. The compound document needs to have this input string converted into a moniker.</description>
        </item>
        <item>
          <description>A script language such as the macro language of a spreadsheet can allow textual references to a component. The language's interpreter needs to have such a reference converted into a moniker in order to execute the macro.</description>
        </item>
      </list>This interface is not supported for use across machine boundaries.</summary>
  </member>
</doc>