<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleLink.BindIfRunning">
    <summary>Activates the connection between the linked object and the link source if the link source is already running.</summary>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The link source is not running.</description>
        </listheader>
      </list> <para>Binding the moniker might require calling <see cref="CreateBindCtx" />, <see cref="IMoniker.IsRunning" />, or <see cref="IOleLink.BindToSource" />; therefore, errors generated by these functions can also be returned.</para></returns>
  </member>
  <member name="IOleLink.BindToSource">
    <summary>Activates the connection to the link source by binding the moniker stored within the linked object.</summary>
    <param name="bindflags">Specifies how to proceed if the link source has a different CLSID from the last time it was bound. If this parameter is zero and the CLSIDs are different, the method fails and returns OLE_E_CLASSDIFF. If the OLELINKBIND_EVENIFCLASSDIFF value from the <see cref="OLELINKBIND" /> enumeration is specified and the CLSIDs are different, the method binds successfully and updates the CLSID stored in the linked object.</param>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in this binding operation. This parameter can be <b>NULL</b>. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the binding implementation should retrieve information about its environment. For more information, see <b>IBindCtx</b>.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_CLASSDIFF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The link source was not bound because its CLSID has changed. This error is returned only if the OLELINKBIND_EVENIFCLASSDIFF flag is not specified in the <i>bindflags</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOOBJECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The link source could not be found or (if the link source's moniker is a composite) some intermediate object identified in the composite could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNSPEC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The link's moniker is <b>NULL</b>.</description>
        </listheader>
      </list> <para>Binding the moniker might require calling the <see cref="CreateBindCtx" /> function; therefore, this method may return errors generated by <b>CreateBindCtx</b>.</para></returns>
  </member>
  <member name="IOleLink.GetBoundSource">
    <summary>Retrieves a pointer to the link source if the connection is active.</summary>
    <param name="ppunk">Address of <see cref="IDataObject" /> pointer variable that receives the interface pointer to the link source. When successful, the implementation must call <see cref="IUnknown.AddRef" /> on <i>ppunk</i>; it is the caller's responsibility to call <see cref="IUnknown.Release" />. If an error occurs, the implementation sets <i>ppunk</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation failed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleLink.GetSourceDisplayName">
    <summary>Retrieves the display name of the link source of the linked object.</summary>
    <param name="ppszDisplayName">Address of a pointer variable that receives a pointer to the display name of the link source. If an error occurs, <i>ppszDisplayName</i> is set to <b>NULL</b>; otherwise, the implementation must use <see cref="IMalloc.Alloc" /> to allocate the string returned in <i>ppszDisplayName</i>, and the caller is responsible for calling <see cref="IMalloc.Free" /> to free it. Both caller and called use the allocator returned by <see cref="CoGetMalloc" />.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation failed.</description>
        </listheader>
      </list> <para>Retrieving the display name requires calling these functions; therefore, this method may return errors generated by <see cref="CreateBindCtx" /> and <see cref="IMoniker.GetDisplayName" />.</para></returns>
  </member>
  <member name="IOleLink.GetSourceMoniker">
    <summary>Retrieves the moniker identifying the link source of a linked object.</summary>
    <param name="ppmk">Address of an <see cref="IMoniker" /> pointer variable that receives the interface pointer to an absolute moniker that identifies the link source. When successful, the implementation must call <see cref="AddRef" /> on <i>ppmk</i>; it is the caller's responsibility to call <see cref="Release" />. If an error occurs the implementation must set <i>ppmk</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_UNAVAILABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No moniker is available.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleLink.GetUpdateOptions">
    <summary>Retrieves a value indicating how often the linked object updates its cached data.</summary>
    <param name="pdwUpdateOpt">A pointer to a variable that receives the current value for the linked object's update option, indicating how often the linked object updates the cached data for the linked object. The possible values for <i>pdwUpdateOpt</i> are taken from the enumeration <see cref="OLEUPDATE" />.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleLink.SetSourceDisplayName">
    <summary>Sets the display name for the link source.</summary>
    <param name="pszStatusText">A pointer to the display name of the new link source. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>This method returns S_OK on success.</para>
      <para>Values from <see cref="MkParseDisplayName" /> may also be returned here.</para>
    </returns>
  </member>
  <member name="IOleLink.SetSourceMoniker">
    <summary>Sets the moniker for the link source.</summary>
    <param name="pmk">A pointer to the <see cref="IMoniker" /> interface on a moniker that identifies the new link source of the linked object. A value of <b>NULL</b> breaks the link.</param>
    <param name="rclsid">The CLSID of the link source that the linked object should use to access information about the linked object when it is not bound.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleLink.SetUpdateOptions">
    <summary>Specifies how often a linked object should update its cached data.</summary>
    <param name="dwUpdateOpt">Specifies how often a linked object should update its cached data. The possible values for <i>dwUpdateOpt</i> are taken from the enumeration <see cref="OLEUPDATE" />.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied value is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleLink.UnbindSource">
    <summary>Breaks the connection between a linked object and its link source.</summary>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IOleLink.Update">
    <summary>Updates the compound document's cached data for a linked object. This involves binding to the link source, if it is not already bound.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in binding the link source. This parameter can be <b>NULL</b>. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the binding implementation should retrieve information about its environment. For more information, see <b>IBindCtx</b>.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CACHE_E_NOCACHE_UPDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The bind operation worked but no caches were updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CACHE_S_SOMECACHES_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The bind operation worked but not all caches were updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_CANT_BINDTOSOURCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to bind to the link source.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleLink">
    <summary>
      <para>Enables a linked object to provide its container with functions pertaining to linking. The most important of these functions is binding to the link source, that is, activating the connection to the document that stores the linked object's native data. <b>IOleLink</b> also defines functions for managing information about the linked object, such as the location of the link source and the cached presentation data for the linked object.</para>
      <para>A container application can distinguish between embedded objects and linked objects by querying for <b>IOleLink</b>; only linked objects implement <b>IOleLink</b>.</para>
    </summary>
  </member>
</doc>