<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleAdviseHolder.Advise">
    <summary>Establishes an advisory connection between an OLE object and the calling object's advise sink. Through that sink, the calling object can receive notification when the OLE object is renamed, saved, or closed.</summary>
    <param name="pAdvise">A pointer to the <see cref="IAdviseSink" /> interface on the advisory sink that should be informed of changes.</param>
    <param name="pdwConnection">A pointer to a token that can be passed to the <see cref="IOleAdviseHolder.Unadvise" /> method to delete the advisory connection. The calling object is responsible for calling both <see cref="IUnknown.AddRef" /> and <see cref="IUnknown.Release" /> on this pointer.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied <see cref="IAdviseSink" /> interface pointer is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleAdviseHolder.EnumAdvise">
    <summary>Creates an enumerator that can be used to enumerate the advisory connections currently established for an object.</summary>
    <param name="ppenumAdvise">A pointer to an <see cref="IEnumSTATDATA" /> pointer variable that receives the interface pointer to the new enumerator. If this parameter is <b>NULL</b>, there are presently no advisory connections on the object, or an error occurred. The advise holder is responsible for incrementing the reference count on the <b>IEnumSTATDATA</b> pointer this method supplies. It is the caller's responsibility to call <see cref="IUnknown.Release" /> when it is finished with the pointer.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_FAIL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The enumeration operation has failed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTIMPL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="IOleAdviseHolder.EnumAdvise" /> is not implemented.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleAdviseHolder.SendOnClose">
    <summary>Sends notification to all advisory sinks currently registered with the advise holder that the object has closed.</summary>
    <returns>This method returns S_OK if advise sinks were notified of the close operation through a call to the <see cref="IAdviseSink.OnClose" /> method.</returns>
  </member>
  <member name="IOleAdviseHolder.SendOnRename">
    <summary>Sends notification to all advisory sinks currently registered with the advise holder that the name of object has changed.</summary>
    <param name="pmk">A pointer to the new full moniker of the object.</param>
    <returns>This method returns S_OK if advise sinks were sent <see cref="IAdviseSink.OnRename" /> notifications.</returns>
  </member>
  <member name="IOleAdviseHolder.SendOnSave">
    <summary>Sends notification to all advisory sinks currently registered with the advise holder that the object has been saved.</summary>
    <returns>This method returns S_OK if advise sinks were sent <see cref="IAdviseSink.OnSave" /> notifications.</returns>
  </member>
  <member name="IOleAdviseHolder.Unadvise">
    <summary>Deletes a previously established advisory connection.</summary>
    <param name="dwConnection">The value previously returned by <see cref="IOleAdviseHolder.Advise" /> in <i>pdwConnection</i>.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_NOCONNECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwConnection</i> parameter does not represent a valid advisory connection.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IOleAdviseHolder">
    <summary>Manages advisory connections and compound document notifications in an object server. Its methods are intended to be used to implement the advisory methods of <see cref="IOleObject" />. <b>IOleAdviseHolder</b> is implemented on an advise holder object. Its methods establish and delete advisory connections from the object managed by the server to the object's container, which must contain an advise sink (support the <see cref="IAdviseSink" /> interface). The advise holder object must also keep track of which advise sinks are interested in which notifications and pass along the notifications as appropriate.</summary>
  </member>
</doc>