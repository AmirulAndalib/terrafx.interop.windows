<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleAdviseHolder.Advise">
    <summary>
      <para>Establishes an advisory connection between an OLE object and the calling object's advise sink. Through that sink, the calling object can receive notification when the OLE object is renamed, saved, or closed.</para>
    </summary>
    <param name="pAdvise">
      <para>A pointer to the <see cref="IAdviseSink" /> interface on the advisory sink that should be informed of changes.</para>
    </param>
    <param name="pdwConnection">
      <para>A pointer to a token that can be passed to the <see cref="IOleAdviseHolder.Unadvise" /> method to delete the advisory connection. The calling object is responsible for calling both <see cref="IUnknown.AddRef" /> and <see cref="IUnknown.Release" /> on this pointer.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The supplied <see cref="IAdviseSink" /> interface pointer is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Containers, object handlers, and link objects all create advise sinks to receive notification of changes in compound-document objects of interest, such as embedded or linked objects. OLE objects of interest to these objects must implement the <see cref="IOleObject" /> interface, which includes several advisory methods, including <see cref="IOleObject.Advise" />. A call to this method must set up an advisory connection with any advise sink that calls it, and maintain each connection until it is closed. It must be able to handle more than one advisory connection at a time.</para>
      <para>
        <b>IOleAdviseHolder.Advise</b> is intended to be used to simplify the implementation of <see cref="IOleObject.Advise" />. You can get a pointer to the OLE implementation of IOleAdviseHolder by calling <see cref="CreateOleAdviseHolder" />, and then, to implement <b>IOleObject.Advise</b>, just delegate the call to <b>IOleAdviseHolder.Advise</b>. Other <see cref="IOleAdviseHolder" /> methods are intended to implement other <see cref="IOleObject" /> advisory methods.</para>
      <para>If the attempt to establish an advisory connection is successful, the object receiving the call returns a nonzero value through <i>pdwConnection</i>. If the attempt fails, the object returns a zero. To delete an advisory connection, the object with the advise sink passes this nonzero token back to the object by calling <b>IOleAdviseHolder.Advise</b>.</para>
    </remarks>
    <seealso cref="IOleAdviseHolder" />
    <seealso cref="IOleAdviseHolder.EnumAdvise" />
    <seealso cref="IOleAdviseHolder.Unadvise" />
    <seealso cref="IOleObject.Advise" />
  </member>
  <member name="IOleAdviseHolder.EnumAdvise">
    <summary>
      <para>Creates an enumerator that can be used to enumerate the advisory connections currently established for an object.</para>
    </summary>
    <param name="ppenumAdvise">
      <para>A pointer to an <see cref="IEnumSTATDATA" /> pointer variable that receives the interface pointer to the new enumerator. If this parameter is <b>NULL</b>, there are presently no advisory connections on the object, or an error occurred. The advise holder is responsible for incrementing the reference count on the <b>IEnumSTATDATA</b> pointer this method supplies. It is the caller's responsibility to call <see cref="IUnknown.Release" /> when it is finished with the pointer.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The enumeration operation has failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>
              <see cref="IOleAdviseHolder.EnumAdvise" /> is not implemented.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>IOleAdviseHolder.EnumAdvise</b> creates an enumerator that can be used to enumerate an object's established advisory connections. The method supplies a pointer to the <see cref="IEnumSTATDATA" /> interface on this enumerator. Advisory connection information for each connection is stored in the <see cref="STATDATA" /> structure, and the enumerator must be able to enumerate these structures.</para>
      <para>For this method, the only relevant structure members are <b>pAdvise</b> and <b>dwConnection</b>. Other members contain data advisory information. When you call the enumeration methods, and while an enumeration is in progress, the effect of registering or revoking advisory connections on what is to be enumerated is undefined.</para>
    </remarks>
    <seealso cref="IDataAdviseHolder.EnumAdvise" />
    <seealso cref="IOleAdviseHolder" />
    <seealso cref="IOleAdviseHolder.Advise" />
    <seealso cref="IOleAdviseHolder.Unadvise" />
    <seealso cref="IOleObject.EnumAdvise" />
    <seealso cref="STATDATA" />
  </member>
  <member name="IOleAdviseHolder.SendOnClose">
    <summary>
      <para>Sends notification to all advisory sinks currently registered with the advise holder that the object has closed.</para>
    </summary>
    <returns>
      <para>This method returns S_OK if advise sinks were notified of the close operation through a call to the <see cref="IAdviseSink.OnClose" /> method.</para>
    </returns>
    <remarks>
      <para>
        <b>SendOnClose</b> must call <see cref="IAdviseSink.OnClose" /> on all advise sinks that have a valid advisory connection with the object, whenever the object goes from the running state to the loaded state. This occurs through a call to <see cref="IOleObject.Close" />, so you can call <b>SendOnClose</b> when you determine that a Close operation has been successful.</para>
    </remarks>
    <seealso cref="IAdviseSink.OnClose" />
    <seealso cref="IOleAdviseHolder" />
  </member>
  <member name="IOleAdviseHolder.SendOnRename">
    <summary>
      <para>Sends notification to all advisory sinks currently registered with the advise holder that the name of object has changed.</para>
    </summary>
    <param name="pmk">
      <para>A pointer to the new full moniker of the object.</para>
    </param>
    <returns>
      <para>This method returns S_OK if advise sinks were sent <see cref="IAdviseSink.OnRename" /> notifications.</para>
    </returns>
    <remarks>
      <para>
        <b>SendOnRename</b> calls <see cref="IAdviseSink.OnRename" /> to advise the calling object, which must have already established an advisory connection, that the object has a new moniker. If you are using the OLE advise holder (having obtained a pointer through a call to <see cref="CreateOleAdviseHolder" />), you can call <b>SendOnRename</b> in the implementation of <see cref="IOleObject.SetMoniker" />, when you have determined that the operation is successful.</para>
    </remarks>
    <seealso cref="IAdviseSink.OnRename" />
    <seealso cref="IOleAdviseHolder" />
  </member>
  <member name="IOleAdviseHolder.SendOnSave">
    <summary>
      <para>Sends notification to all advisory sinks currently registered with the advise holder that the object has been saved.</para>
    </summary>
    <returns>
      <para>This method returns S_OK if advise sinks were sent <see cref="IAdviseSink.OnSave" /> notifications.</para>
    </returns>
    <remarks>
      <para>
        <b>SendOnSave</b> calls <see cref="IAdviseSink.OnSave" /> to advise the calling object (client), which must have already established an advisory connection, that the object has been saved. If you are using the OLE advise holder (having obtained a pointer through a call to <see cref="CreateOleAdviseHolder" />), you can call <b>SendOnSave</b> whenever you save the object the advise holder is associated with.</para>
      <para>To take the object from the running state to the loaded state, the client calls <see cref="IOleObject.Close" />. Within that implementation, if the user wants to save the object to persistent storage, the object calls <see cref="IOleClientSite.SaveObject" />, followed by the call to <b>SendOnSave</b>.</para>
    </remarks>
    <seealso cref="IAdviseSink.OnSave" />
    <seealso cref="IOleAdviseHolder" />
  </member>
  <member name="IOleAdviseHolder.Unadvise">
    <summary>
      <para>Deletes a previously established advisory connection.</para>
    </summary>
    <param name="dwConnection">
      <para>The value previously returned by <see cref="IOleAdviseHolder.Advise" /> in <i>pdwConnection</i>.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>OLE_E_NOCONNECTION</b>
            </para>
          </description>
          <description>
            <para>The <i>dwConnection</i> parameter does not represent a valid advisory connection.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <b>IOleAdviseHolder.Unadvise</b> is intended to be used to implement <see cref="IOleObject.Unadvise" /> to delete an advisory connection. In general, you would use the OLE advise holder having obtained a pointer through a call to <see cref="CreateOleAdviseHolder" />.</para>
      <para>Typically, containers call this method at shutdown or when an object is deleted. In certain cases, containers could call this method on objects that are running but not currently visible, as a way of reducing the overhead of maintaining multiple advisory connections.</para>
    </remarks>
    <seealso cref="IOleAdviseHolder" />
    <seealso cref="IOleAdviseHolder.Advise" />
    <seealso cref="IOleAdviseHolder.EnumAdvise" />
    <seealso cref="IOleObject.Unadvise" />
  </member>
  <member name="IOleAdviseHolder">
    <summary>
      <para>Manages advisory connections and compound document notifications in an object server. Its methods are intended to be used to implement the advisory methods of <see cref="IOleObject" />. <b>IOleAdviseHolder</b> is implemented on an advise holder object. Its methods establish and delete advisory connections from the object managed by the server to the object's container, which must contain an advise sink (support the <see cref="IAdviseSink" /> interface). The advise holder object must also keep track of which advise sinks are interested in which notifications and pass along the notifications as appropriate.</para>
    </summary>
    <seealso cref="CreateOleAdviseHolder" />
    <seealso cref="IAdviseSink" />
    <seealso cref="IDataAdviseHolder" />
    <seealso cref="IOleObject" />
  </member>
</doc>