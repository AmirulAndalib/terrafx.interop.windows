<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IViewObject.Draw">
    <summary>Draws a representation of an object onto the specified device context.</summary>
    <param name="dwDrawAspect">Specifies the aspect to be drawn, that is, how the object is to be represented. Representations include content, an icon, a thumbnail, or a printed document. Valid values are taken from the enumerations <see cref="DVASPECT" /> and <see cref="DVASPECT2" />. Note that newer objects and containers that support optimized drawing interfaces support the <b>DVASPECT2</b> enumeration values. Older objects and containers that do not support optimized drawing interfaces may not support <b>DVASPECT2</b>. Windowless objects allow only <b>DVASPECT</b>_CONTENT, <b>DVASPECT</b>_OPAQUE, and <b>DVASPECT</b>_TRANSPARENT.</param>
    <param name="lindex">Portion of the object that is of interest for the draw operation. Its interpretation varies depending on the value in the dwAspect parameter. See the <see cref="DVASPECT" /> enumeration for more information.</param>
    <param name="pvAspect">Pointer to additional information in a <see cref="DVASPECTINFO" /> structure that enables drawing optimizations depending on the aspect specified. Note that newer objects and containers that support optimized drawing interfaces support this parameter as well. Older objects and containers that do not support optimized drawing interfaces always specify <b>NULL</b> for this parameter.</param>
    <param name="ptd">Pointer to the <see cref="DVTARGETDEVICE" /> structure that describes the device for which the object is to be rendered. If <b>NULL</b>, the view should be rendered for the default target device (typically the display). A value other than <b>NULL</b> is interpreted in conjunction with <i>hdcTargetDev</i> and <i>hdcDraw</i>. For example, if <i>hdcDraw</i> specifies a printer as the device context, the <i>ptd</i> parameter points to a structure describing that printer device. The data may actually be printed if <i>hdcTargetDev</i> is a valid value or it may be displayed in print preview mode if <i>hdcTargetDev</i> is <b>NULL</b>.</param>
    <param name="hdcTargetDev">Information context for the target device indicated by the ptd parameter from which the object can extract device metrics and test the device's capabilities. If <i>ptd</i> is <b>NULL</b>; the object should ignore the value in the <i>hdcTargetDev</i> parameter.</param>
    <param name="hdcDraw">Device context on which to draw. For a windowless object, the <i>hdcDraw</i> parameter should be in MM_TEXT mapping mode with its logical coordinates matching the client coordinates of the containing window. For a windowless object, the device context should be in the same state as the one normally passed by a WM_PAINT message.</param>
    <param name="lprcBounds">Pointer to a RECTL structure specifying the rectangle on <i>hdcDraw</i> and in which the object should be drawn. This parameter controls the positioning and stretching of the object. This parameter should be <b>NULL</b> to draw a windowless in-place active object. In every other situation, <b>NULL</b> is not a legal value and should result in an E_INVALIDARG error code. If the container passes a non-<b>NULL</b> value to a windowless object, the object should render the requested aspect into the specified device context and rectangle. A container can request this from a windowless object to render a second, non-active view of the object or to print the object.</param>
    <param name="lprcWBounds">
      <para>If <i>hdcDraw</i> is a metafile device context, pointer to a RECTL structure specifying the bounding rectangle in the underlying metafile. The rectangle structure contains the window extent and window origin. These values are useful for drawing metafiles. The rectangle indicated by <i>lprcBounds</i> is nested inside this <i>lprcWBounds</i> rectangle; they are in the same coordinate space.</para>
      <para>If <i>hdcDraw</i> is not a metafile device context; <i>lprcWBounds</i> will be <b>NULL</b>.</para>
    </param>
    <param name="pfnContinue">
      <para>Pointer to a callback function that the view object should call periodically during a lengthy drawing operation to determine whether the operation should continue or be canceled. This function returns <b>TRUE</b> to continue drawing. It returns <b>FALSE</b> to stop the drawing in which case <b>IViewObject.Draw</b> returns DRAW_E_ABORT.</para>
      <h4>dwContinue</h4>
    </param>
    <param name="dwContinue">Value to pass as a parameter to the function pointed to by the <i>pfnContinue</i> parameter. Typically, <i>dwContinue</i> is a pointer to an application-defined structure needed inside the callback function.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_BLANK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No data to draw from.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DRAW_E_ABORT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draw operation aborted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VIEW_E_DRAW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Error in drawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_LINDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for lindex; currently only -1 is supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_DVASPECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>dwAspect</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_INVALIDRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid rectangle.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IViewObject.Freeze">
    <summary>Freezes the drawn representation of an object so that it will not change until the <see cref="IViewObject.Unfreeze" /> method is called. The most common use of this method is for banded printing.</summary>
    <param name="dwDrawAspect">Specifies how the object is to be represented. Representations include content, an icon, a thumbnail, or a printed document. Valid values are taken from the enumeration <see cref="DVASPECT" />. See the <b>DVASPECT</b> enumeration for more information.</param>
    <param name="lindex">Portion of the object that is of interest for the draw operation. Its interpretation varies with dwAspect. See the <see cref="DVASPECT" /> enumeration for more information.</param>
    <param name="pvAspect">Pointer to additional information about the view of the object specified in <i>dwAspect</i>. Since none of the current aspects support additional information, <i>pvAspect</i> must always be <b>NULL</b>.</param>
    <param name="pdwFreeze">Pointer to where an identifying DWORD key is returned. This unique key is later used to cancel the freeze by calling <see cref="IViewObject.Unfreeze" />. This key is an index that the default cache uses to keep track of which object is frozen.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VIEW_S_ALREADY_FROZEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Presentation has already been frozen. The value of <i>pdwFreeze</i> is the identifying key of the already frozen object.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_BLANK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Presentation not in cache.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_LINDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>lindex</i>; currently; only -1 is supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_DVASPECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>dwAspect</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IViewObject.GetAdvise">
    <summary>Retrieves the advisory connection on the object that was used in the most recent call to <see cref="IViewObject.SetAdvise" />.</summary>
    <param name="pAspects">Pointer to where the <i>dwAspect</i> parameter from the previous <see cref="IViewObject.SetAdvise" /> call is returned. If this pointer is <b>NULL</b>, the caller does not permit this value to be returned.</param>
    <param name="pAdvf">Pointer to where the <i>advf</i> parameter from the previous <see cref="IViewObject.SetAdvise" /> call is returned. If this pointer is <b>NULL</b>, the caller does not permit this value to be returned.</param>
    <param name="ppAdvSink">Address of <see cref="IAdviseSink" /> pointer variable that receives the interface pointer to the advise sink. The connection to this advise sink must have been established with a previous <see cref="IViewObject.SetAdvise" /> call, which provides the <i>pAdvSink</i> parameter. If <i>ppvAdvSink</i> is <b>NULL</b>, there is no established advisory connection.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IViewObject.GetColorSet">
    <summary>Returns the logical palette that the object will use for drawing in its <see cref="IViewObject.Draw" /> method with the corresponding parameters.</summary>
    <param name="dwDrawAspect">Specifies how the object is to be represented. Representations include content, an icon, a thumbnail, or a printed document. Valid values are taken from the enumeration <see cref="DVASPECT" />. See the <b>DVASPECT</b> enumeration for more information.</param>
    <param name="lindex">Portion of the object that is of interest for the draw operation. Its interpretation varies with <i>dwDrawAspect</i>. See the <see cref="DVASPECT" /> enumeration for more information.</param>
    <param name="pvAspect">Pointer to additional information about the view of the object specified in <i>dwDrawAspect</i>. Since none of the current aspects support additional information, <i>pvAspect</i> must always be <b>NULL</b>.</param>
    <param name="ptd">Pointer to the <see cref="DVTARGETDEVICE" /> structure that describes the device for which the object is to be rendered. If <b>NULL</b>, the view should be rendered for the default target device (typically the display). A value other than <b>NULL</b> is interpreted in conjunction with <i>hicTargetDev</i> and <i>hdcDraw</i>. For example, if <i>hdcDraw</i> specifies a printer as the device context, ptd points to a structure describing that printer device. The data may actually be printed if <i>hicTargetDev</i> is a valid value or it may be displayed in print preview mode if <i>hicTargetDev</i> is <b>NULL</b>.</param>
    <param name="hicTargetDev">Information context for the target device indicated by the <i>ptd</i> parameter from which the object can extract device metrics and test the device's capabilities. If <i>ptd</i> is <b>NULL</b>, the object should ignore the <i>hicTargetDev</i> parameter.</param>
    <param name="ppColorSet">Address of LOGPALETTE pointer variable that receives a pointer to the LOGPALETTE structure. The LOGPALETTE structure contains the set of colors that would be used if <see cref="IViewObject.Draw" /> were called with the same parameters for <i>dwAspect</i>, <i>lindex</i>, <i>pvAspect</i>, <i>ptd</i>, and <i>hicTargetDev</i>. If <i>ppColorSet</i> is <b>NULL</b>, the object does not use a palette.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Set of colors is empty or the object will not give out the information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_BLANK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No presentation data for object.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_LINDEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>lindex</i>; currently only -1 is supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_DVASPECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>dwAspect</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the supplied parameter values is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available for this operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IViewObject.SetAdvise">
    <summary>Establishes a connection between the view object and an advise sink so that the advise sink can be notified about changes in the object's view.</summary>
    <param name="aspects">View for which the advisory connection is being set up. Valid values are taken from the enumeration <see cref="DVASPECT" />. See the <b>DVASPECT</b> enumeration for more information.</param>
    <param name="advf">
      <para>Contains a group of flags for controlling the advisory connection. Valid values are from the enumeration <see cref="ADVF" />. However, only some of the possible <b>ADVF</b> values are relevant for this method. The following table briefly describes the relevant values. See the <b>ADVF</b> enumeration for a more detailed description.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_ONLYONCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes the advisory connection to be destroyed after the first notification is sent.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_PRIMEFIRST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes an initial notification to be sent regardless of whether data has changed from its current state.</description>
        </listheader>
      </list> <div><b>Note</b>  The ADVF_ONLYONCE and ADVF_PRIMEFIRST can be combined to provide an asynchronous call to <see cref="IDataObject.GetData" />.</div></param>
    <param name="pAdvSink">Pointer to the <see cref="IAdviseSink" /> interface on the advisory sink that is to be informed of changes. A <b>NULL</b> value deletes any existing advisory connection.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_ADVISENOTSUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Advisory notifications are not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DV_E_DVASPECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalid value for <i>dwAspect</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more of the supplied values is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available for this operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IViewObject.Unfreeze">
    <summary>Releases a drawing that was previously frozen using <see cref="IViewObject.Freeze" />. The most common use of this method is for banded printing.</summary>
    <param name="dwFreeze">Contains a key previously returned from <see cref="IViewObject.Freeze" /> that determines which view object to unfreeze.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_NOCONNECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Error in the unfreezing process or the object is currently not frozen.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IViewObject">
    <summary>
      <para>Enables an object to display itself directly without passing a data object to the caller. In addition, this interface can create and manage a connection with an advise sink so the caller can be notified of changes in the view object.</para>
      <para>The caller can request specific representations and specific target devices. For example, a caller can ask for either an object's content or an iconic representation. Also, the caller can ask the object to compose a picture for a target device that is independent of the drawing device context. As a result, the picture can be composed for one target device and drawn on another device context. For example, to provide a print preview operation, you can compose the drawing for a printer target device but actually draw the representation on the display.</para>
      <para>The <b>IViewObject</b> interface is similar to <see cref="IDataObject" />; except that <b>IViewObject</b> places a representation of the data onto a device context while <b>IDataObject</b> places the representation onto a transfer medium.</para>
      <para>Unlike most other interfaces, <b>IViewObject</b> cannot be marshaled to another process. This is because device contexts are only effective in the context of one process.</para>
    </summary>
  </member>
</doc>