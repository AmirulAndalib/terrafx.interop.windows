<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IOleInPlaceUIWindow.GetBorder">
    <summary>
      <para>Retrieves the outer rectangle for toolbars and controls while the object is active in place.</para>
    </summary>
    <param name="lprectBorder">
      <para>A pointer to a <see cref="RECT" /> structure where the outer rectangle is to be returned. The structure's coordinates are relative to the window being represented by the interface.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INPLACE_E_NOTOOLSPACE</b>
            </para>
          </description>
          <description>
            <para>The object cannot install toolbars in this window object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>Insufficient memory available for this operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>The <b>IOleInPlaceUIWindow.GetBorder</b> function, when called on a document or frame window object, returns the outer rectangle (relative to the window) where the object can put toolbars or similar controls.</para>
      <para>If the object is to install these tools, it should negotiate space for the tools within this rectangle using <see cref="IOleInPlaceUIWindow.RequestBorderSpace" /> and then call <see cref="IOleInPlaceUIWindow.SetBorderSpace" /> to get this space allocated.</para>
      <para>
        <b>Note</b>  While executing <b>IOleInPlaceUIWindow.GetBorder</b>, do not make calls to the <see cref="PeekMessage" /> or <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a> functions, or a dialog box. Doing so may cause the system to deadlock. There are further restrictions on which OLE interface methods and functions can be called from within <b>GetBorder</b>.</para>
    </remarks>
    <seealso cref="IOleInPlaceUIWindow" />
    <seealso cref="IOleInPlaceUIWindow.RequestBorderSpace" />
    <seealso cref="IOleInPlaceUIWindow.SetBorderSpace" />
  </member>
  <member name="IOleInPlaceUIWindow.RequestBorderSpace">
    <summary>
      <para>Determines whether there is space available for tools to be installed around the object's window frame while the object is active in place.</para>
    </summary>
    <param name="pborderwidths">
      <para>A pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure containing the requested widths (in pixels) needed on each side of the window for the tools.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>INPLACE_E_NOTOOLSPACE</b>
            </para>
          </description>
          <description>
            <para>The object cannot install toolbars in this window object because the implementation does not support toolbars, or there is insufficient space to install the toolbars.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <h3>Notes to Callers</h3>
      <para>The active in-place object calls <b>IOleInPlaceUIWindow.RequestBorderSpace</b> to ask if tools can be installed inside the window frame. These tools would be allocated between the rectangle returned by <see cref="IOleInPlaceUIWindow.GetBorder" /> and the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure specified in the argument to this call.</para>
      <para>The space for the tools is not actually allocated to the object until it calls <see cref="IOleInPlaceUIWindow.SetBorderSpace" />, allowing the object to negotiate for space (such as while dragging toolbars around), but deferring the moving of tools until the action is completed.</para>
      <para>The object can install these tools by passing the width in pixels that is to be used on each side. For example, if the object required 10 pixels on the top, 0 pixels on the bottom, and 5 pixels on the left and right sides, it would pass the following <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure to <b>IOleInPlaceUIWindow.RequestBorderSpace</b>:</para>
      <code>lpbw-&gt;top    = 10
lpbw-&gt;bottom =  0
lpbw-&gt;lLeft  =  5
lpbw-&gt;right  =  5
</code>
      <para>
        <b>Note</b>  While executing <b>IOleInPlaceUIWindow.RequestBorderSpace</b>, do not make calls to the <see cref="PeekMessage" /> or <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a> functions, or a dialog box. Doing so may cause the system to deadlock. There are further restrictions on which OLE interface methods and functions can be called from within <b>IOleInPlaceUIWindow.RequestBorderSpace</b>.</para>
      <h3>Notes to Implementers</h3>
      <para>If the amount of space an active object uses for its toolbars is irrelevant to the container, it can simply return NOERROR as shown in the following <b>IOleInPlaceUIWindow.RequestBorderSpace</b> example. Containers should not unduly restrict the display of tools by an active in-place object.</para>
      <code>HRESULT InPlaceUIWindow_RequestBorderSpace(
    IOleInPlaceFrame *  lpThis,
    LPCBORDERWIDTHS     pborderwidths)
{
    // Container allows the object to have as much border space as it
    // wants.
    return NOERROR;
}
</code>
    </remarks>
    <seealso cref="IOleInPlaceUIWindow" />
    <seealso cref="IOleInPlaceUIWindow.GetBorder" />
    <seealso cref="IOleInPlaceUIWindow.SetBorderSpace" />
  </member>
  <member name="IOleInPlaceUIWindow.SetActiveObject">
    <summary>
      <para>Provides a direct channel of communication between the object and each of the frame and document windows.</para>
    </summary>
    <param name="pActiveObject">
      <para>A pointer to the <see cref="IOleInPlaceActiveObject" /> interface on the active in-place object.</para>
    </param>
    <param name="pszObjName">
      <para>A pointer to a string containing a name that describes the object an embedding container can use in composing its window title. It can be <b>NULL</b> if the object does not require the container to change its window titles. Containers should ignore this parameter and always use their own name in the title bar.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Generally, an embedded object should pass <b>NULL</b> for the <i>pszObjName</i> parameter (see Notes to Implementers below). However, if you are working in conjunction with a container that does display the name of the in-place active object in its title bar, then you should compose a string in the following form: &lt;<i>application name</i>&gt; – &lt;<i>object short-type name</i>&gt;.</para>
      <h3>Notes to Callers</h3>
      <b>IOleInPlaceUIWindow.SetActiveObject</b> is called by the object to establish a direct communication link between itself and the document and frame windows.
<para>When deactivating, the object calls <b>IOleInPlaceUIWindow.SetActiveObject</b>, passing <b>NULL</b> for the <i>pActiveObject</i> and pszObjName parameters.</para><para>An object must call <b>IOleInPlaceUIWindow.SetActiveObject</b> before calling <see cref="IOleInPlaceFrame.SetMenu" /> to give the container the pointer to the active object. The container then uses this pointer in processing <b>IOleInPlaceFrame.SetMenu</b> and to pass to <see cref="OleSetMenuDescriptor" />.</para><h3>Notes to Implementers</h3><para>The Microsoft Windows User Interface Design Guide recommends that an in-place container ignore the <i>pszObjName</i> parameter passed in this method. The guide says "The title bar is not affected by in-place activation. It always displays the top-level container's name."</para></remarks>
    <seealso cref="IOleInPlaceFrame.SetMenu" />
    <seealso cref="IOleInPlaceUIWindow" />
    <seealso cref="OleSetMenuDescriptor" />
  </member>
  <member name="IOleInPlaceUIWindow.SetBorderSpace">
    <summary>
      <para>Allocates space for the border requested in the call to <see cref="IOleInPlaceUIWindow.RequestBorderSpace" />.</para>
    </summary>
    <param name="pborderwidths">
      <para>Pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure containing the requested width of the tools, in pixels. It can be <b>NULL</b>, indicating the object does not need any space.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible return values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>OLE_E_INVALIDRECT</b>
            </para>
          </description>
          <description>
            <para>The rectangle does not lie within the specifications returned by <see cref="IOleInPlaceUIWindow.GetBorder" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The object must call <b>IOleInPlaceUIWindow.SetBorderSpace</b>. It can do any one of the following:</para>
      <list type="bullet">
        <item>
          <description>Use its own toolbars, requesting border space of a specific size.</description>
        </item>
        <item>
          <description>Use no toolbars, but force the container to remove its toolbars by passing a valid <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure containing nothing but zeros in the <i>pborderwidths</i> parameter.</description>
        </item>
        <item>
          <description>Use no toolbars but allow the in-place container to leave its toolbars up by passing <b>NULL</b> as the <i>pborderwidths</i> parameter.</description>
        </item>
      </list>
      <para>The <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/cc136564(v=vs.85)">BORDERWIDTHS</a> structure used in this call would generally have been passed in a previous call to <see cref="IOleInPlaceUIWindow.RequestBorderSpace" />, which must have returned S_OK.</para>
      <para>If an object must renegotiate space on the border, it can call <b>IOleInPlaceUIWindow.SetBorderSpace</b> again with the new widths. If the call to <b>IOleInPlaceUIWindow.SetBorderSpace</b> fails, the object can do a full negotiation for border space with calls to <see cref="IOleInPlaceUIWindow.GetBorder" />, <see cref="IOleInPlaceUIWindow.RequestBorderSpace" />, and <b>IOleInPlaceUIWindow.SetBorderSpace</b>.</para>
      <para>
        <b>Note</b>  While executing <b>IOleInPlaceUIWindow.SetBorderSpace</b>, do not make calls to the <see cref="PeekMessage" /> or <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a> functions, or a dialog box. Doing so may cause the system to deadlock. There are further restrictions on which OLE interface methods and functions can be called from within <b>IOleInPlaceUIWindow.SetBorderSpace</b>.</para>
    </remarks>
    <seealso cref="IOleInPlaceUIWindow" />
    <seealso cref="IOleInPlaceUIWindow.GetBorder" />
    <seealso cref="IOleInPlaceUIWindow.RequestBorderSpace" />
  </member>
  <member name="IOleInPlaceUIWindow">
    <summary>
      <para>Implemented by container applications and used by object applications to negotiate border space on the document or frame window. The container provides a <see cref="RECT" /> structure in which the object can place toolbars and other similar controls, determines if tools can in fact be installed around the object's window frame, allocates space for the border, and establishes a communication channel between the object and each frame and document window.</para>
    </summary>
    <seealso cref="IOleWindow" />
  </member>
</doc>