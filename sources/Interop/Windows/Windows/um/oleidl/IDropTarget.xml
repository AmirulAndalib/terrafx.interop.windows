<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDropTarget.DragEnter">
    <summary>
      <para>Indicates whether a drop can be accepted, and, if so, the effect of the drop.</para>
    </summary>
    <param name="pDataObj">
      <para>A pointer to the <see cref="IDataObject" /> interface on the data object. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, this data object will be incorporated into the target.</para>
    </param>
    <param name="grfKeyState">
      <para>The current state of the keyboard modifier keys on the keyboard. Possible values can be a combination of any of the flags MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.</para>
    </param>
    <param name="pt">
      <para>A <a href="https://docs.microsoft.com//previous-versions/dd162807(v=vs.85)">POINTL</a> structure containing the current cursor coordinates in screen coordinates.</para>
    </param>
    <param name="pdwEffect">
      <para>On input, pointer to the value of the <i>pdwEffect</i> parameter of the <see cref="DoDragDrop" /> function. On return, must contain one of the <a href="https://docs.microsoft.com//windows/desktop/com/dropeffect-constants">DROPEFFECT</a> flags, which indicates what the result of the drop operation would be.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pdwEffect</i> parameter is <b>NULL</b> on input.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was insufficient memory available for this operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You do not call <b>DragEnter</b> directly; instead the <see cref="DoDragDrop" /> function calls it to determine the effect of a drop the first time the user drags the mouse into the registered window of a drop target.</para>
      <para>To implement <b>DragEnter</b>, you must determine whether the target can use the data in the source data object by checking three things:</para>
      <list type="bullet">
        <item>
          <description>The format and medium specified by the data object</description>
        </item>
        <item>
          <description>The input value of <i>pdwEffect</i></description>
        </item>
        <item>
          <description>The state of the modifier keys</description>
        </item>
      </list>
      <para>To check the format and medium, use the <see cref="IDataObject" /> pointer passed in the <i>pDataObject</i> parameter to call <see cref="IDataObject.EnumFormatEtc" /> so you can enumerate the <see cref="FORMATETC" /> structures the source data object supports. Then call <see cref="IDataObject.QueryGetData" /> to determine whether the data object can render the data on the target by examining the formats and medium specified for the data object.</para>
      <para>On entry to <b>IDropTarget.DragEnter</b>, the <i>pdwEffect</i> parameter is set to the effects given to the <i>pdwOkEffect</i> parameter of the <see cref="DoDragDrop" /> function. The <b>IDropTarget.DragEnter</b> method must choose one of these effects or disable the drop.</para>
      <para>The following modifier keys affect the result of the drop.</para>
      <list type="table">
        <listheader>
          <description>Key Combination</description>
          <description>User-Visible Feedback</description>
          <description>Drop Effect</description>
        </listheader>
        <item>
          <description>CTRL + SHIFT
</description>
          <description>=</description>
          <description>DROPEFFECT_LINK
</description>
        </item>
        <item>
          <description>CTRL
</description>
          <description>+
</description>
          <description>DROPEFFECT_COPY
</description>
        </item>
        <item>
          <description>No keys or SHIFT
</description>
          <description>None
</description>
          <description>DROPEFFECT_MOVE
</description>
        </item>
      </list>
      <para>On return, the method must write the effect, one of the DROPEFFECT flags, to the <i>pdwEffect</i> parameter. <see cref="DoDragDrop" /> then takes this parameter and writes it to its <i>pdwEffect</i> parameter. You communicate the effect of the drop back to the source through <b>DoDragDrop</b> in the <i>pdwEffect</i> parameter. The <b>DoDragDrop</b> function then calls <see cref="IDropSource.GiveFeedback" /> so that the source application can display the appropriate visual feedback to the user through the target window.</para>
    </remarks>
    <seealso cref="DragEnter" />
    <seealso cref="IDropSource" />
    <seealso cref="IDropSourceNotify" />
    <seealso cref="IDropTarget" />
    <seealso cref="RegisterDragDrop" />
    <seealso cref="RevokeDragDrop" />
  </member>
  <member name="IDropTarget.DragLeave">
    <summary>
      <para>Removes target feedback and releases the data object.</para>
    </summary>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There is insufficient memory available for this operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You do not call this method directly. The <see cref="DoDragDrop" /> function calls this method in either of the following cases:</para>
      <list type="bullet">
        <item>
          <description>When the user drags the cursor out of a given target window.</description>
        </item>
        <item>
          <description>When the user cancels the current drag-and-drop operation.</description>
        </item>
      </list>
      <para>To implement <b>IDropTarget.DragLeave</b>, you must remove any target feedback that is currently displayed. You must also release any references you hold to the data transfer object.</para>
    </remarks>
    <seealso cref="DoDragDrop" />
    <seealso cref="IDropSource" />
    <seealso cref="IDropSourceNotify" />
    <seealso cref="IDropTarget" />
    <seealso cref="RegisterDragDrop" />
    <seealso cref="RevokeDragDrop" />
  </member>
  <member name="IDropTarget.DragOver">
    <summary>
      <para>Provides target feedback to the user and communicates the drop's effect to the <see cref="DoDragDrop" /> function so it can communicate the effect of the drop back to the source.</para>
    </summary>
    <param name="grfKeyState">
      <para>The current state of the keyboard modifier keys on the keyboard. Valid values can be a combination of any of the flags MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.</para>
    </param>
    <param name="pt">
      <para>A <a href="https://docs.microsoft.com//previous-versions/dd162807(v=vs.85)">POINTL</a> structure containing the current cursor coordinates in screen coordinates.</para>
    </param>
    <param name="pdwEffect">
      <para>On input, pointer to the value of the <i>pdwEffect</i> parameter of the <see cref="DoDragDrop" /> function. On return, must contain one of the <a href="https://docs.microsoft.com//windows/desktop/com/dropeffect-constants">DROPEFFECT</a> flags, which indicates what the result of the drop operation would be.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pdwEffect</i> value is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There was insufficient memory available for this operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You do not call <b>DragOver</b> directly. The <see cref="DoDragDrop" /> function calls this method each time the user moves the mouse across a given target window. <b>DoDragDrop</b> exits the loop if the drag-and-drop operation is canceled, if the user drags the mouse out of the target window, or if the drop is completed.</para>
      <para>In implementing <b>IDropTarget.DragOver</b>, you must provide features similar to those in <see cref="IDropTarget.DragEnter" />. You must determine the effect of dropping the data on the target by examining the <see cref="FORMATETC" /> defining the data object's formats and medium, along with the state of the modifier keys. The mouse position may also play a role in determining the effect of a drop. The following modifier keys affect the result of the drop.</para>
      <list type="table">
        <listheader>
          <description>Key Combination</description>
          <description>User-Visible Feedback</description>
          <description>Drop Effect</description>
        </listheader>
        <item>
          <description>CTRL + SHIFT
</description>
          <description>=</description>
          <description>DROPEFFECT_LINK
</description>
        </item>
        <item>
          <description>CTRL
</description>
          <description>+
</description>
          <description>DROPEFFECT_COPY
</description>
        </item>
        <item>
          <description>No keys or SHIFT
</description>
          <description>None
</description>
          <description>DROPEFFECT_MOVE
</description>
        </item>
      </list>
      <para>You communicate the effect of the drop back to the source through <see cref="DoDragDrop" /> in <i>pdwEffect</i>. The <b>DoDragDrop</b> function then calls <see cref="IDropSource.GiveFeedback" /> so the source application can display the appropriate visual feedback to the user.</para>
      <para>On entry to <b>IDropTarget.DragOver</b>, the <i>pdwEffect</i> parameter must be set to the allowed effects passed to the <i>pdwOkEffect</i> parameter of the <see cref="DoDragDrop" /> function. The <b>IDropTarget.DragOver</b> method must be able to choose one of these effects or disable the drop.</para>
      <para>Upon return, <i>pdwEffect</i> is set to one of the DROPEFFECT flags. This value is then passed to the <i>pdwEffect</i> parameter of <see cref="DoDragDrop" />. Reasonable values are DROPEFFECT_COPY to copy the dragged data to the target, DROPEFFECT_LINK to create a link to the source data, or DROPEFFECT_MOVE to allow the dragged data to be permanently moved from the source application to the target.</para>
      <para>You may also wish to provide appropriate visual feedback in the target window. There may be some target feedback already displayed from a previous call to <b>IDropTarget.DragOver</b> or from the initial <see cref="IDropTarget.DragEnter" />. If this feedback is no longer appropriate, you should remove it.</para>
      <para>For efficiency reasons, a data object is not passed in <b>IDropTarget.DragOver</b>. The data object passed in the most recent call to <see cref="IDropTarget.DragEnter" /> is available and can be used.</para>
      <para>When <b>IDropTarget.DragOver</b> has completed its operation, the <see cref="DoDragDrop" /> function calls <see cref="IDropSource.GiveFeedback" /> so the source application can display the appropriate visual feedback to the user.</para>
      <h3>Notes to Implementers</h3>
      <para>This function is called frequently during the <see cref="DoDragDrop" /> loop so it makes sense to optimize your implementation of the <b>DragOver</b> method as much as possible.</para>
    </remarks>
    <seealso cref="DoDragDrop" />
    <seealso cref="IDropSource" />
    <seealso cref="IDropSourceNotify" />
    <seealso cref="IDropTarget" />
    <seealso cref="RegisterDragDrop" />
    <seealso cref="RevokeDragDrop" />
  </member>
  <member name="IDropTarget.Drop">
    <summary>
      <para>Incorporates the source data into the target window, removes target feedback, and releases the data object.</para>
    </summary>
    <param name="pDataObj">
      <para>A pointer to the <see cref="IDataObject" /> interface on the data object being transferred in the drag-and-drop operation.</para>
    </param>
    <param name="grfKeyState">
      <para>The current state of the keyboard modifier keys on the keyboard. Possible values can be a combination of any of the flags MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.</para>
    </param>
    <param name="pt">
      <para>A <a href="https://docs.microsoft.com//previous-versions/dd162807(v=vs.85)">POINTL</a> structure containing the current cursor coordinates in screen coordinates.</para>
    </param>
    <param name="pdwEffect">
      <para>On input, pointer to the value of the <i>pdwEffect</i> parameter of the <see cref="DoDragDrop" /> function. On return, must contain one of the <a href="https://docs.microsoft.com//windows/desktop/com/dropeffect-constants">DROPEFFECT</a> flags, which indicates what the result of the drop operation would be.</para>
    </param>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>An unexpected error has occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pdwEffect</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>There is insufficient memory available for this operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>You do not call this method directly. The <see cref="DoDragDrop" /> function calls this method when the user completes the drag-and-drop operation.</para>
      <para>In implementing <b>Drop</b>, you must incorporate the data object into the target. Use the formats available in <see cref="IDataObject" />, available through <i>pDataObj</i>, along with the current state of the modifier keys to determine how the data is to be incorporated, such as linking or embedding.</para>
      <para>In addition to incorporating the data, you must also clean up as you do in the <see cref="IDropTarget.DragLeave" /> method:</para>
      <list type="bullet">
        <item>
          <description>Remove any target feedback that is currently displayed.</description>
        </item>
        <item>
          <description>Release any references to the data object.</description>
        </item>
      </list>
      <para>You also pass the effect of this operation back to the source application through <see cref="DoDragDrop" />, so the source application can clean up after the drag-and-drop operation is complete:</para>
      <list type="bullet">
        <item>
          <description>Remove any source feedback that is being displayed.</description>
        </item>
        <item>
          <description>Make any necessary changes to the data, such as removing the data if the operation was a move.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="DoDragDrop" />
    <seealso cref="IDropSource" />
    <seealso cref="IDropSourceNotify" />
    <seealso cref="IDropTarget" />
    <seealso cref="RegisterDragDrop" />
    <seealso cref="RevokeDragDrop" />
  </member>
  <member name="IDropTarget">
    <summary>
      <para>The <b>IDropTarget</b> interface is one of the interfaces you implement to provide drag-and-drop operations in your application. It contains methods used in any application that can be a target for data during a drag-and-drop operation. A drop-target application is responsible for:</para>
      <list type="bullet">
        <item>
          <description>Determining the effect of the drop on the target application.</description>
        </item>
        <item>
          <description>Incorporating any valid dropped data when the drop occurs.</description>
        </item>
        <item>
          <description>Communicating target feedback to the source so the source application can provide appropriate visual feedback such as setting the cursor.</description>
        </item>
        <item>
          <description>Implementing drag scrolling.</description>
        </item>
        <item>
          <description>Registering and revoking its application windows as drop targets.</description>
        </item>
      </list>The <b>IDropTarget</b> interface contains methods that handle all these responsibilities except registering and revoking the application window as a drop target, for which you must call the <see cref="RegisterDragDrop" /> and the <see cref="RevokeDragDrop" /> functions.
</summary>
    <seealso cref="DoDragDrop" />
    <seealso cref="IDropSource" />
    <seealso cref="IDropSourceNotify" />
    <seealso cref="RegisterDragDrop" />
    <seealso cref="RevokeDragDrop" />
  </member>
</doc>